
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006230  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080064dc  080064dc  000074dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080064ec  080064ec  000074ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080064f0  080064f0  000074f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080064f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000071c  24000010  08006504  00008010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400072c  08006504  0000872c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001911c  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000038cd  00000000  00000000  0002115a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001360  00000000  00000000  00024a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000eb9  00000000  00000000  00025d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031d53  00000000  00000000  00026c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cf31  00000000  00000000  00058994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00135c64  00000000  00000000  000758c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ab529  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005020  00000000  00000000  001ab56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  001b058c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080064c4 	.word	0x080064c4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080064c4 	.word	0x080064c4

080002ec <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	@ 0x40
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80002f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8000300:	f107 0320 	add.w	r3, r7, #32
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
 800031c:	615a      	str	r2, [r3, #20]
 800031e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 8000320:	4b46      	ldr	r3, [pc, #280]	@ (800043c <MX_FMC_Init+0x150>)
 8000322:	4a47      	ldr	r2, [pc, #284]	@ (8000440 <MX_FMC_Init+0x154>)
 8000324:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 8000326:	4b45      	ldr	r3, [pc, #276]	@ (800043c <MX_FMC_Init+0x150>)
 8000328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800032c:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 800032e:	4b43      	ldr	r3, [pc, #268]	@ (800043c <MX_FMC_Init+0x150>)
 8000330:	2202      	movs	r2, #2
 8000332:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 8000334:	4b41      	ldr	r3, [pc, #260]	@ (800043c <MX_FMC_Init+0x150>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 800033a:	4b40      	ldr	r3, [pc, #256]	@ (800043c <MX_FMC_Init+0x150>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000340:	4b3e      	ldr	r3, [pc, #248]	@ (800043c <MX_FMC_Init+0x150>)
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000346:	4b3d      	ldr	r3, [pc, #244]	@ (800043c <MX_FMC_Init+0x150>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 800034c:	4b3b      	ldr	r3, [pc, #236]	@ (800043c <MX_FMC_Init+0x150>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 8000352:	4b3a      	ldr	r3, [pc, #232]	@ (800043c <MX_FMC_Init+0x150>)
 8000354:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8000358:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 800035a:	4b38      	ldr	r3, [pc, #224]	@ (800043c <MX_FMC_Init+0x150>)
 800035c:	2240      	movs	r2, #64	@ 0x40
 800035e:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 8000360:	4b36      	ldr	r3, [pc, #216]	@ (800043c <MX_FMC_Init+0x150>)
 8000362:	2240      	movs	r2, #64	@ 0x40
 8000364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 8000366:	4b35      	ldr	r3, [pc, #212]	@ (800043c <MX_FMC_Init+0x150>)
 8000368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800036c:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 0;
 800036e:	4b33      	ldr	r3, [pc, #204]	@ (800043c <MX_FMC_Init+0x150>)
 8000370:	2200      	movs	r2, #0
 8000372:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000374:	4b31      	ldr	r3, [pc, #196]	@ (800043c <MX_FMC_Init+0x150>)
 8000376:	2200      	movs	r2, #0
 8000378:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 800037a:	4b30      	ldr	r3, [pc, #192]	@ (800043c <MX_FMC_Init+0x150>)
 800037c:	2201      	movs	r2, #1
 800037e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000382:	23fc      	movs	r3, #252	@ 0xfc
 8000384:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 8000386:	23fc      	movs	r3, #252	@ 0xfc
 8000388:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 800038a:	23fc      	movs	r3, #252	@ 0xfc
 800038c:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 800038e:	23fc      	movs	r3, #252	@ 0xfc
 8000390:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000392:	23fc      	movs	r3, #252	@ 0xfc
 8000394:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 8000396:	23fc      	movs	r3, #252	@ 0xfc
 8000398:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 800039a:	23fc      	movs	r3, #252	@ 0xfc
 800039c:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 800039e:	23fc      	movs	r3, #252	@ 0xfc
 80003a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80003a2:	f107 0220 	add.w	r2, r7, #32
 80003a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003aa:	4619      	mov	r1, r3
 80003ac:	4823      	ldr	r0, [pc, #140]	@ (800043c <MX_FMC_Init+0x150>)
 80003ae:	f001 fe07 	bl	8001fc0 <HAL_NAND_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 80003b8:	f000 fd70 	bl	8000e9c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80003bc:	4b21      	ldr	r3, [pc, #132]	@ (8000444 <MX_FMC_Init+0x158>)
 80003be:	4a22      	ldr	r2, [pc, #136]	@ (8000448 <MX_FMC_Init+0x15c>)
 80003c0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80003c2:	4b20      	ldr	r3, [pc, #128]	@ (8000444 <MX_FMC_Init+0x158>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80003c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000444 <MX_FMC_Init+0x158>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80003ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000444 <MX_FMC_Init+0x158>)
 80003d0:	2204      	movs	r2, #4
 80003d2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <MX_FMC_Init+0x158>)
 80003d6:	2210      	movs	r2, #16
 80003d8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80003da:	4b1a      	ldr	r3, [pc, #104]	@ (8000444 <MX_FMC_Init+0x158>)
 80003dc:	2240      	movs	r2, #64	@ 0x40
 80003de:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80003e0:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <MX_FMC_Init+0x158>)
 80003e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80003e8:	4b16      	ldr	r3, [pc, #88]	@ (8000444 <MX_FMC_Init+0x158>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80003ee:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <MX_FMC_Init+0x158>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80003f4:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <MX_FMC_Init+0x158>)
 80003f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <MX_FMC_Init+0x158>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000402:	2310      	movs	r3, #16
 8000404:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000406:	2310      	movs	r3, #16
 8000408:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800040a:	2310      	movs	r3, #16
 800040c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800040e:	2310      	movs	r3, #16
 8000410:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000412:	2310      	movs	r3, #16
 8000414:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000416:	2310      	movs	r3, #16
 8000418:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800041a:	2310      	movs	r3, #16
 800041c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4808      	ldr	r0, [pc, #32]	@ (8000444 <MX_FMC_Init+0x158>)
 8000424:	f005 fb42 	bl	8005aac <HAL_SDRAM_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 800042e:	f000 fd35 	bl	8000e9c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000432:	bf00      	nop
 8000434:	3740      	adds	r7, #64	@ 0x40
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2400002c 	.word	0x2400002c
 8000440:	52004080 	.word	0x52004080
 8000444:	2400006c 	.word	0x2400006c
 8000448:	52004140 	.word	0x52004140

0800044c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b0b8      	sub	sp, #224	@ 0xe0
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
 8000460:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000462:	4b5c      	ldr	r3, [pc, #368]	@ (80005d4 <HAL_FMC_MspInit+0x188>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	f040 80af 	bne.w	80005ca <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 800046c:	4b59      	ldr	r3, [pc, #356]	@ (80005d4 <HAL_FMC_MspInit+0x188>)
 800046e:	2201      	movs	r2, #1
 8000470:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	22c0      	movs	r2, #192	@ 0xc0
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f005 fff5 	bl	800646a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000484:	f04f 0300 	mov.w	r3, #0
 8000488:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800048c:	2300      	movs	r3, #0
 800048e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4618      	mov	r0, r3
 8000496:	f002 feff 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80004a0:	f000 fcfc 	bl	8000e9c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80004a4:	4b4c      	ldr	r3, [pc, #304]	@ (80005d8 <HAL_FMC_MspInit+0x18c>)
 80004a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80004aa:	4a4b      	ldr	r2, [pc, #300]	@ (80005d8 <HAL_FMC_MspInit+0x18c>)
 80004ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004b0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80004b4:	4b48      	ldr	r3, [pc, #288]	@ (80005d8 <HAL_FMC_MspInit+0x18c>)
 80004b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80004ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80004c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d6:	2303      	movs	r3, #3
 80004d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80004dc:	230c      	movs	r3, #12
 80004de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004e2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80004e6:	4619      	mov	r1, r3
 80004e8:	483c      	ldr	r0, [pc, #240]	@ (80005dc <HAL_FMC_MspInit+0x190>)
 80004ea:	f001 f921 	bl	8001730 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80004ee:	230d      	movs	r3, #13
 80004f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f4:	2302      	movs	r3, #2
 80004f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000500:	2303      	movs	r3, #3
 8000502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000506:	230c      	movs	r3, #12
 8000508:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000510:	4619      	mov	r1, r3
 8000512:	4833      	ldr	r0, [pc, #204]	@ (80005e0 <HAL_FMC_MspInit+0x194>)
 8000514:	f001 f90c 	bl	8001730 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000518:	f248 1333 	movw	r3, #33075	@ 0x8133
 800051c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000532:	230c      	movs	r3, #12
 8000534:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000538:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800053c:	4619      	mov	r1, r3
 800053e:	4829      	ldr	r0, [pc, #164]	@ (80005e4 <HAL_FMC_MspInit+0x198>)
 8000540:	f001 f8f6 	bl	8001730 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000544:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000548:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054c:	2302      	movs	r3, #2
 800054e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000558:	2303      	movs	r3, #3
 800055a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800055e:	230c      	movs	r3, #12
 8000560:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000564:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000568:	4619      	mov	r1, r3
 800056a:	481f      	ldr	r0, [pc, #124]	@ (80005e8 <HAL_FMC_MspInit+0x19c>)
 800056c:	f001 f8e0 	bl	8001730 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000570:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 8000574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000584:	2303      	movs	r3, #3
 8000586:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058a:	230c      	movs	r3, #12
 800058c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000590:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000594:	4619      	mov	r1, r3
 8000596:	4815      	ldr	r0, [pc, #84]	@ (80005ec <HAL_FMC_MspInit+0x1a0>)
 8000598:	f001 f8ca 	bl	8001730 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800059c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80005b6:	2309      	movs	r3, #9
 80005b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005c0:	4619      	mov	r1, r3
 80005c2:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <HAL_FMC_MspInit+0x194>)
 80005c4:	f001 f8b4 	bl	8001730 <HAL_GPIO_Init>
 80005c8:	e000      	b.n	80005cc <HAL_FMC_MspInit+0x180>
    return;
 80005ca:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80005cc:	37e0      	adds	r7, #224	@ 0xe0
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	240000a0 	.word	0x240000a0
 80005d8:	58024400 	.word	0x58024400
 80005dc:	58021400 	.word	0x58021400
 80005e0:	58020800 	.word	0x58020800
 80005e4:	58021800 	.word	0x58021800
 80005e8:	58021000 	.word	0x58021000
 80005ec:	58020c00 	.word	0x58020c00

080005f0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80005f8:	f7ff ff28 	bl	800044c <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800060c:	f7ff ff1e 	bl	800044c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	@ 0x30
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062e:	4b60      	ldr	r3, [pc, #384]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000634:	4a5e      	ldr	r2, [pc, #376]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800063e:	4b5c      	ldr	r3, [pc, #368]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000640:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b58      	ldr	r3, [pc, #352]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800064e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000652:	4a57      	ldr	r2, [pc, #348]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800065c:	4b54      	ldr	r3, [pc, #336]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800065e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b51      	ldr	r3, [pc, #324]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800066c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000670:	4a4f      	ldr	r2, [pc, #316]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800067a:	4b4d      	ldr	r3, [pc, #308]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800067c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000680:	f003 0320 	and.w	r3, r3, #32
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b49      	ldr	r3, [pc, #292]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800068a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800068e:	4a48      	ldr	r2, [pc, #288]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000698:	4b45      	ldr	r3, [pc, #276]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800069a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b42      	ldr	r3, [pc, #264]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006ac:	4a40      	ldr	r2, [pc, #256]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006b6:	4b3e      	ldr	r3, [pc, #248]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	4b3a      	ldr	r3, [pc, #232]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006ca:	4a39      	ldr	r2, [pc, #228]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006d4:	4b36      	ldr	r3, [pc, #216]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006e8:	4a31      	ldr	r2, [pc, #196]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006f2:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2150      	movs	r1, #80	@ 0x50
 8000704:	482b      	ldr	r0, [pc, #172]	@ (80007b4 <MX_GPIO_Init+0x19c>)
 8000706:	f001 f9c3 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000710:	4829      	ldr	r0, [pc, #164]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000712:	f001 f9bd 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	21c0      	movs	r1, #192	@ 0xc0
 800071a:	4828      	ldr	r0, [pc, #160]	@ (80007bc <MX_GPIO_Init+0x1a4>)
 800071c:	f001 f9b8 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000720:	232c      	movs	r3, #44	@ 0x2c
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4820      	ldr	r0, [pc, #128]	@ (80007b4 <MX_GPIO_Init+0x19c>)
 8000734:	f000 fffc 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000738:	2350      	movs	r3, #80	@ 0x50
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	4819      	ldr	r0, [pc, #100]	@ (80007b4 <MX_GPIO_Init+0x19c>)
 8000750:	f000 ffee 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4812      	ldr	r0, [pc, #72]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 800076e:	f000 ffdf 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000772:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000788:	f000 ffd2 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800078c:	23c0      	movs	r3, #192	@ 0xc0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <MX_GPIO_Init+0x1a4>)
 80007a4:	f000 ffc4 	bl	8001730 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58024400 	.word	0x58024400
 80007b4:	58021000 	.word	0x58021000
 80007b8:	58020800 	.word	0x58020800
 80007bc:	58021400 	.word	0x58021400

080007c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_I2C1_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_I2C1_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007fc:	f001 f97c 	bl	8001af8 <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 fb49 	bl	8000e9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <MX_I2C1_Init+0x74>)
 800080e:	f001 fa0f 	bl	8001c30 <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fb40 	bl	8000e9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_I2C1_Init+0x74>)
 8000820:	f001 fa51 	bl	8001cc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 fb37 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	240000a4 	.word	0x240000a4
 8000838:	40005400 	.word	0x40005400
 800083c:	00c0eaff 	.word	0x00c0eaff

08000840 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	@ (80008b8 <MX_I2C2_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <MX_I2C2_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000850:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800087c:	f001 f93c 	bl	8001af8 <HAL_I2C_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000886:	f000 fb09 	bl	8000e9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800088e:	f001 f9cf 	bl	8001c30 <HAL_I2CEx_ConfigAnalogFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 fb00 	bl	8000e9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_I2C2_Init+0x74>)
 80008a0:	f001 fa11 	bl	8001cc6 <HAL_I2CEx_ConfigDigitalFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 faf7 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	240000f8 	.word	0x240000f8
 80008b8:	40005800 	.word	0x40005800
 80008bc:	00c0eaff 	.word	0x00c0eaff

080008c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0bc      	sub	sp, #240	@ 0xf0
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	22c0      	movs	r2, #192	@ 0xc0
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 fdc2 	bl	800646a <memset>
  if(i2cHandle->Instance==I2C1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a4d      	ldr	r2, [pc, #308]	@ (8000a20 <HAL_I2C_MspInit+0x160>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d146      	bne.n	800097e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008f0:	f04f 0208 	mov.w	r2, #8
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fcc6 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000912:	f000 fac3 	bl	8000e9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b43      	ldr	r3, [pc, #268]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000918:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800091c:	4a41      	ldr	r2, [pc, #260]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000926:	4b3f      	ldr	r3, [pc, #252]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000934:	23c0      	movs	r3, #192	@ 0xc0
 8000936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000956:	4619      	mov	r1, r3
 8000958:	4833      	ldr	r0, [pc, #204]	@ (8000a28 <HAL_I2C_MspInit+0x168>)
 800095a:	f000 fee9 	bl	8001730 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095e:	4b31      	ldr	r3, [pc, #196]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000960:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000964:	4a2f      	ldr	r2, [pc, #188]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000966:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800096a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000970:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800097c:	e04b      	b.n	8000a16 <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a2a      	ldr	r2, [pc, #168]	@ (8000a2c <HAL_I2C_MspInit+0x16c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d146      	bne.n	8000a16 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000988:	f04f 0208 	mov.w	r2, #8
 800098c:	f04f 0300 	mov.w	r3, #0
 8000990:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fc7a 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80009aa:	f000 fa77 	bl	8000e9c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 80009b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 80009c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d4:	2312      	movs	r3, #18
 80009d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009e6:	2304      	movs	r3, #4
 80009e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <HAL_I2C_MspInit+0x168>)
 80009f4:	f000 fe9c 	bl	8001730 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 80009fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80009fe:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a04:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000a0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
}
 8000a16:	bf00      	nop
 8000a18:	37f0      	adds	r7, #240	@ 0xf0
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40005400 	.word	0x40005400
 8000a24:	58024400 	.word	0x58024400
 8000a28:	58020400 	.word	0x58020400
 8000a2c:	40005800 	.word	0x40005800

08000a30 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <MX_I2S1_Init+0x64>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a3c:	2206      	movs	r2, #6
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a4c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a54:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a58:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a7e:	f001 f96f 	bl	8001d60 <HAL_I2S_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 fa08 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2400014c 	.word	0x2400014c
 8000a94:	40013000 	.word	0x40013000

08000a98 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <MX_I2S2_Init+0x64>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000aae:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ab6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000abe:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000ac2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ae4:	f001 f93c 	bl	8001d60 <HAL_I2S_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000aee:	f000 f9d5 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	240001a0 	.word	0x240001a0
 8000afc:	40003800 	.word	0x40003800

08000b00 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0be      	sub	sp, #248	@ 0xf8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	22c0      	movs	r2, #192	@ 0xc0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 fca2 	bl	800646a <memset>
  if(i2sHandle->Instance==SPI1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a71      	ldr	r2, [pc, #452]	@ (8000cf0 <HAL_I2S_MspInit+0x1f0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d16b      	bne.n	8000c08 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000b30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b42:	f107 0320 	add.w	r3, r7, #32
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fba6 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000b52:	f000 f9a3 	bl	8000e9c <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b56:	4b67      	ldr	r3, [pc, #412]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b58:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b5c:	4a65      	ldr	r2, [pc, #404]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b62:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000b66:	4b63      	ldr	r3, [pc, #396]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b68:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b5f      	ldr	r3, [pc, #380]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b7a:	4a5e      	ldr	r2, [pc, #376]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b84:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b58      	ldr	r3, [pc, #352]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b98:	4a56      	ldr	r2, [pc, #344]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ba2:	4b54      	ldr	r3, [pc, #336]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000bb0:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000bb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4848      	ldr	r0, [pc, #288]	@ (8000cf8 <HAL_I2S_MspInit+0x1f8>)
 8000bd8:	f000 fdaa 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	483e      	ldr	r0, [pc, #248]	@ (8000cfc <HAL_I2S_MspInit+0x1fc>)
 8000c02:	f000 fd95 	bl	8001730 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c06:	e06f      	b.n	8000ce8 <HAL_I2S_MspInit+0x1e8>
  else if(i2sHandle->Instance==SPI2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8000d00 <HAL_I2S_MspInit+0x200>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d16a      	bne.n	8000ce8 <HAL_I2S_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000c12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fb35 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_I2S_MspInit+0x138>
      Error_Handler();
 8000c34:	f000 f932 	bl	8000e9c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c38:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c3a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c44:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c5c:	4a25      	ldr	r2, [pc, #148]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000c92:	2342      	movs	r3, #66	@ 0x42
 8000c94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000caa:	2305      	movs	r3, #5
 8000cac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4811      	ldr	r0, [pc, #68]	@ (8000cfc <HAL_I2S_MspInit+0x1fc>)
 8000cb8:	f000 fd3a 	bl	8001730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cbc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4808      	ldr	r0, [pc, #32]	@ (8000d04 <HAL_I2S_MspInit+0x204>)
 8000ce4:	f000 fd24 	bl	8001730 <HAL_GPIO_Init>
}
 8000ce8:	bf00      	nop
 8000cea:	37f8      	adds	r7, #248	@ 0xf8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40013000 	.word	0x40013000
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	58020800 	.word	0x58020800
 8000d00:	40003800 	.word	0x40003800
 8000d04:	58020400 	.word	0x58020400

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d0c:	f000 f89a 	bl	8000e44 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fafc 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f81c 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f7ff fc7e 	bl	8000618 <MX_GPIO_Init>
  MX_FMC_Init();
 8000d1c:	f7ff fae6 	bl	80002ec <MX_FMC_Init>
  MX_I2S1_Init();
 8000d20:	f7ff fe86 	bl	8000a30 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000d24:	f7ff feb8 	bl	8000a98 <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000d28:	f000 f8be 	bl	8000ea8 <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000d2c:	f7ff fd48 	bl	80007c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d30:	f7ff fd86 	bl	8000840 <MX_I2C2_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000d34:	f000 fa14 	bl	8001160 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  while(1) {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <main+0x44>)
 8000d3e:	f000 fec0 	bl	8001ac2 <HAL_GPIO_TogglePin>
  	  HAL_Delay(50);
 8000d42:	2032      	movs	r0, #50	@ 0x32
 8000d44:	f000 fb74 	bl	8001430 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d48:	bf00      	nop
 8000d4a:	e7f5      	b.n	8000d38 <main+0x30>
 8000d4c:	58020800 	.word	0x58020800

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b09c      	sub	sp, #112	@ 0x70
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	224c      	movs	r2, #76	@ 0x4c
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 fb83 	bl	800646a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2220      	movs	r2, #32
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 fb7d 	bl	800646a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000d70:	4b32      	ldr	r3, [pc, #200]	@ (8000e3c <SystemClock_Config+0xec>)
 8000d72:	f04f 32ff 	mov.w	r2, #4294967295
 8000d76:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f001 fa9a 	bl	80022b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <SystemClock_Config+0xf0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e40 <SystemClock_Config+0xf0>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <SystemClock_Config+0xf0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000da0:	bf00      	nop
 8000da2:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <SystemClock_Config+0xf0>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dae:	d1f8      	bne.n	8000da2 <SystemClock_Config+0x52>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000db0:	2322      	movs	r3, #34	@ 0x22
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000db8:	2340      	movs	r3, #64	@ 0x40
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000dcc:	230c      	movs	r3, #12
 8000dce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 faaa 	bl	8002348 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dfa:	f000 f84f 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	233f      	movs	r3, #63	@ 0x3f
 8000e00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e02:	2303      	movs	r3, #3
 8000e04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e0e:	2340      	movs	r3, #64	@ 0x40
 8000e10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e12:	2340      	movs	r3, #64	@ 0x40
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e1c:	2340      	movs	r3, #64	@ 0x40
 8000e1e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2102      	movs	r1, #2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 fec1 	bl	8002bac <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000e30:	f000 f834 	bl	8000e9c <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	3770      	adds	r7, #112	@ 0x70
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58024800 	.word	0x58024800

08000e44 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e56:	f000 fbf3 	bl	8001640 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e66:	231f      	movs	r3, #31
 8000e68:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e6a:	2387      	movs	r3, #135	@ 0x87
 8000e6c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e72:	2300      	movs	r3, #0
 8000e74:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e86:	463b      	mov	r3, r7
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fc11 	bl	80016b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f000 fbee 	bl	8001670 <HAL_MPU_Enable>

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <Error_Handler+0x8>

08000ea8 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000eae:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000eb2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_SPDIFRX_Init+0x6c>)
 8000f02:	f004 fe0f 	bl	8005b24 <HAL_SPDIFRX_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 8000f0c:	f7ff ffc6 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	240001f4 	.word	0x240001f4

08000f18 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	22c0      	movs	r2, #192	@ 0xc0
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fa96 	bl	800646a <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8000f46:	d141      	bne.n	8000fcc <HAL_SPDIFRX_MspInit+0xb4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8000f48:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 f99b 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8000f68:	f7ff ff98 	bl	8000e9c <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_SPDIFRX_MspInit+0xbc>)
 8000f6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f72:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <HAL_SPDIFRX_MspInit+0xbc>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f78:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_SPDIFRX_MspInit+0xbc>)
 8000f7e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <HAL_SPDIFRX_MspInit+0xbc>)
 8000f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f90:	4a10      	ldr	r2, [pc, #64]	@ (8000fd4 <HAL_SPDIFRX_MspInit+0xbc>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_SPDIFRX_MspInit+0xbc>)
 8000f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <HAL_SPDIFRX_MspInit+0xc0>)
 8000fc8:	f000 fbb2 	bl	8001730 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8000fcc:	bf00      	nop
 8000fce:	37e8      	adds	r7, #232	@ 0xe8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020c00 	.word	0x58020c00

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_MspInit+0x30>)
 8000fe4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fe8:	4a08      	ldr	r2, [pc, #32]	@ (800100c <HAL_MspInit+0x30>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_MspInit+0x30>)
 8000ff4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	58024400 	.word	0x58024400

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <NMI_Handler+0x4>

08001018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <MemManage_Handler+0x4>

08001028 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <UsageFault_Handler+0x4>

08001038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001066:	f000 f9c3 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001074:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <SystemInit+0xd0>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107a:	4a31      	ldr	r2, [pc, #196]	@ (8001140 <SystemInit+0xd0>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001084:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <SystemInit+0xd4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	2b02      	cmp	r3, #2
 800108e:	d807      	bhi.n	80010a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <SystemInit+0xd4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 030f 	bic.w	r3, r3, #15
 8001098:	4a2a      	ldr	r2, [pc, #168]	@ (8001144 <SystemInit+0xd4>)
 800109a:	f043 0303 	orr.w	r3, r3, #3
 800109e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010a0:	4b29      	ldr	r3, [pc, #164]	@ (8001148 <SystemInit+0xd8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a28      	ldr	r2, [pc, #160]	@ (8001148 <SystemInit+0xd8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010ac:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <SystemInit+0xd8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010b2:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <SystemInit+0xd8>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4924      	ldr	r1, [pc, #144]	@ (8001148 <SystemInit+0xd8>)
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <SystemInit+0xdc>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010be:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <SystemInit+0xd4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <SystemInit+0xd4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 030f 	bic.w	r3, r3, #15
 80010d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <SystemInit+0xd4>)
 80010d4:	f043 0303 	orr.w	r3, r3, #3
 80010d8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <SystemInit+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010e0:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <SystemInit+0xd8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <SystemInit+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <SystemInit+0xd8>)
 80010ee:	4a18      	ldr	r2, [pc, #96]	@ (8001150 <SystemInit+0xe0>)
 80010f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <SystemInit+0xd8>)
 80010f4:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <SystemInit+0xe4>)
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <SystemInit+0xd8>)
 80010fa:	4a17      	ldr	r2, [pc, #92]	@ (8001158 <SystemInit+0xe8>)
 80010fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <SystemInit+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <SystemInit+0xd8>)
 8001106:	4a14      	ldr	r2, [pc, #80]	@ (8001158 <SystemInit+0xe8>)
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <SystemInit+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001110:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <SystemInit+0xd8>)
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <SystemInit+0xe8>)
 8001114:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <SystemInit+0xd8>)
 8001118:	2200      	movs	r2, #0
 800111a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <SystemInit+0xd8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <SystemInit+0xd8>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001126:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <SystemInit+0xd8>)
 800112a:	2200      	movs	r2, #0
 800112c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <SystemInit+0xec>)
 8001130:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001134:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	52002000 	.word	0x52002000
 8001148:	58024400 	.word	0x58024400
 800114c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001150:	02020200 	.word	0x02020200
 8001154:	01ff0000 	.word	0x01ff0000
 8001158:	01010280 	.word	0x01010280
 800115c:	52004000 	.word	0x52004000

08001160 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001164:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001166:	4a16      	ldr	r2, [pc, #88]	@ (80011c0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001168:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800116a:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800116c:	2209      	movs	r2, #9
 800116e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001172:	2202      	movs	r2, #2
 8001174:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001178:	2200      	movs	r2, #0
 800117a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800117e:	2202      	movs	r2, #2
 8001180:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001184:	2200      	movs	r2, #0
 8001186:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800118a:	2200      	movs	r2, #0
 800118c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001190:	2200      	movs	r2, #0
 8001192:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001196:	2201      	movs	r2, #1
 8001198:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800119c:	2200      	movs	r2, #0
 800119e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80011a8:	f000 ff54 	bl	8002054 <HAL_PCD_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 80011b2:	f7ff fe73 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	24000244 	.word	0x24000244
 80011c0:	40040000 	.word	0x40040000

080011c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ba      	sub	sp, #232	@ 0xe8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	22c0      	movs	r2, #192	@ 0xc0
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f005 f940 	bl	800646a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2f      	ldr	r2, [pc, #188]	@ (80012ac <HAL_PCD_MspInit+0xe8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d156      	bne.n	80012a2 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001200:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001204:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f843 	bl	8003298 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001218:	f7ff fe40 	bl	8000e9c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800121c:	f001 f884 	bl	8002328 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <HAL_PCD_MspInit+0xec>)
 8001222:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001226:	4a22      	ldr	r2, [pc, #136]	@ (80012b0 <HAL_PCD_MspInit+0xec>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <HAL_PCD_MspInit+0xec>)
 8001232:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001256:	4619      	mov	r1, r3
 8001258:	4816      	ldr	r0, [pc, #88]	@ (80012b4 <HAL_PCD_MspInit+0xf0>)
 800125a:	f000 fa69 	bl	8001730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800125e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800127c:	4619      	mov	r1, r3
 800127e:	480d      	ldr	r0, [pc, #52]	@ (80012b4 <HAL_PCD_MspInit+0xf0>)
 8001280:	f000 fa56 	bl	8001730 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_PCD_MspInit+0xec>)
 8001286:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800128a:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <HAL_PCD_MspInit+0xec>)
 800128c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001290:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_PCD_MspInit+0xec>)
 8001296:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800129a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	37e8      	adds	r7, #232	@ 0xe8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40040000 	.word	0x40040000
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020000 	.word	0x58020000

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012bc:	f7ff fed8 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	@ (80012fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f005 f8c9 	bl	800647c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fd0d 	bl	8000d08 <main>
  bx  lr
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012f8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012fc:	080064f4 	.word	0x080064f4
  ldr r2, =_sbss
 8001300:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001304:	2400072c 	.word	0x2400072c

08001308 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001312:	2003      	movs	r0, #3
 8001314:	f000 f962 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001318:	f001 fdfe 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	4913      	ldr	r1, [pc, #76]	@ (8001378 <HAL_Init+0x6c>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <HAL_Init+0x68>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	4a0e      	ldr	r2, [pc, #56]	@ (8001378 <HAL_Init+0x6c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <HAL_Init+0x70>)
 800134e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001350:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <HAL_Init+0x74>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	200f      	movs	r0, #15
 8001358:	f000 f814 	bl	8001384 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e002      	b.n	800136c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001366:	f7ff fe39 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58024400 	.word	0x58024400
 8001378:	080064dc 	.word	0x080064dc
 800137c:	24000004 	.word	0x24000004
 8001380:	24000000 	.word	0x24000000

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_InitTick+0x60>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e021      	b.n	80013dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <HAL_InitTick+0x64>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_InitTick+0x60>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f939 	bl	8001626 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f911 	bl	80015f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <HAL_InitTick+0x68>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2400000c 	.word	0x2400000c
 80013e8:	24000000 	.word	0x24000000
 80013ec:	24000008 	.word	0x24000008

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2400000c 	.word	0x2400000c
 8001414:	24000728 	.word	0x24000728

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	24000728 	.word	0x24000728

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2400000c 	.word	0x2400000c

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <__NVIC_SetPriorityGrouping+0x40>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <__NVIC_SetPriorityGrouping+0x40>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	05fa0000 	.word	0x05fa0000

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	@ (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	@ (800152c <__NVIC_SetPriority+0x50>)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff47 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff5e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffb2 	bl	8001598 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001644:	f3bf 8f5f 	dmb	sy
}
 8001648:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800164a:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <HAL_MPU_Disable+0x28>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <HAL_MPU_Disable+0x28>)
 8001650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001654:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_MPU_Disable+0x2c>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00
 800166c:	e000ed90 	.word	0xe000ed90

08001670 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_MPU_Enable+0x38>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_MPU_Enable+0x3c>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	4a09      	ldr	r2, [pc, #36]	@ (80016ac <HAL_MPU_Enable+0x3c>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800168e:	f3bf 8f4f 	dsb	sy
}
 8001692:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001694:	f3bf 8f6f 	isb	sy
}
 8001698:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed90 	.word	0xe000ed90
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	785a      	ldrb	r2, [r3, #1]
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_MPU_ConfigRegion+0x7c>)
 80016be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016c0:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <HAL_MPU_ConfigRegion+0x7c>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	4a19      	ldr	r2, [pc, #100]	@ (800172c <HAL_MPU_ConfigRegion+0x7c>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80016cc:	4a17      	ldr	r2, [pc, #92]	@ (800172c <HAL_MPU_ConfigRegion+0x7c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7b1b      	ldrb	r3, [r3, #12]
 80016d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7adb      	ldrb	r3, [r3, #11]
 80016de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7a9b      	ldrb	r3, [r3, #10]
 80016e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7b5b      	ldrb	r3, [r3, #13]
 80016ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7b9b      	ldrb	r3, [r3, #14]
 80016f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7bdb      	ldrb	r3, [r3, #15]
 80016fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7a5b      	ldrb	r3, [r3, #9]
 8001706:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7a1b      	ldrb	r3, [r3, #8]
 800170e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001710:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800171a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800171c:	6113      	str	r3, [r2, #16]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed90 	.word	0xe000ed90

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800173e:	4b89      	ldr	r3, [pc, #548]	@ (8001964 <HAL_GPIO_Init+0x234>)
 8001740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001742:	e194      	b.n	8001a6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8186 	beq.w	8001a68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <HAL_GPIO_Init+0x44>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0201 	and.w	r2, r3, #1
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d017      	beq.n	8001812 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d123      	bne.n	8001866 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	69b9      	ldr	r1, [r7, #24]
 8001862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0203 	and.w	r2, r3, #3
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80e0 	beq.w	8001a68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <HAL_GPIO_Init+0x238>)
 80018aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80018ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001968 <HAL_GPIO_Init+0x238>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_GPIO_Init+0x238>)
 80018ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c6:	4a29      	ldr	r2, [pc, #164]	@ (800196c <HAL_GPIO_Init+0x23c>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a20      	ldr	r2, [pc, #128]	@ (8001970 <HAL_GPIO_Init+0x240>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d052      	beq.n	8001998 <HAL_GPIO_Init+0x268>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001974 <HAL_GPIO_Init+0x244>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d031      	beq.n	800195e <HAL_GPIO_Init+0x22e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <HAL_GPIO_Init+0x248>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x22a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a1d      	ldr	r2, [pc, #116]	@ (800197c <HAL_GPIO_Init+0x24c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <HAL_GPIO_Init+0x250>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a1b      	ldr	r2, [pc, #108]	@ (8001984 <HAL_GPIO_Init+0x254>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1a      	ldr	r2, [pc, #104]	@ (8001988 <HAL_GPIO_Init+0x258>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x21a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <HAL_GPIO_Init+0x25c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x216>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a18      	ldr	r2, [pc, #96]	@ (8001990 <HAL_GPIO_Init+0x260>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x212>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <HAL_GPIO_Init+0x264>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x20e>
 800193a:	2309      	movs	r3, #9
 800193c:	e02d      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800193e:	230a      	movs	r3, #10
 8001940:	e02b      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001942:	2308      	movs	r3, #8
 8001944:	e029      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001946:	2307      	movs	r3, #7
 8001948:	e027      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800194a:	2306      	movs	r3, #6
 800194c:	e025      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800194e:	2305      	movs	r3, #5
 8001950:	e023      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001952:	2304      	movs	r3, #4
 8001954:	e021      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001956:	2303      	movs	r3, #3
 8001958:	e01f      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800195a:	2302      	movs	r3, #2
 800195c:	e01d      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800195e:	2301      	movs	r3, #1
 8001960:	e01b      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001962:	bf00      	nop
 8001964:	58000080 	.word	0x58000080
 8001968:	58024400 	.word	0x58024400
 800196c:	58000400 	.word	0x58000400
 8001970:	58020000 	.word	0x58020000
 8001974:	58020400 	.word	0x58020400
 8001978:	58020800 	.word	0x58020800
 800197c:	58020c00 	.word	0x58020c00
 8001980:	58021000 	.word	0x58021000
 8001984:	58021400 	.word	0x58021400
 8001988:	58021800 	.word	0x58021800
 800198c:	58021c00 	.word	0x58021c00
 8001990:	58022000 	.word	0x58022000
 8001994:	58022400 	.word	0x58022400
 8001998:	2300      	movs	r3, #0
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019aa:	4938      	ldr	r1, [pc, #224]	@ (8001a8c <HAL_GPIO_Init+0x35c>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f ae63 	bne.w	8001744 <HAL_GPIO_Init+0x14>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	3724      	adds	r7, #36	@ 0x24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58000400 	.word	0x58000400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001aac:	e003      	b.n	8001ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	619a      	str	r2, [r3, #24]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ad4:	887a      	ldrh	r2, [r7, #2]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	041a      	lsls	r2, r3, #16
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	619a      	str	r2, [r3, #24]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e08b      	b.n	8001c22 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fece 	bl	80008c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2224      	movs	r2, #36	@ 0x24
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e006      	b.n	8001b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d108      	bne.n	8001b9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e007      	b.n	8001baa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_I2C_Init+0x134>)
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69d9      	ldr	r1, [r3, #28]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1a      	ldr	r2, [r3, #32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	02008000 	.word	0x02008000

08001c30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d138      	bne.n	8001cb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e032      	b.n	8001cba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2224      	movs	r2, #36	@ 0x24
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d139      	bne.n	8001d50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e033      	b.n	8001d52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2224      	movs	r2, #36	@ 0x24
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e000      	b.n	8001d52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e11a      	b.n	8001fa8 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe feba 	bl	8000b00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d008      	beq.n	8001dd4 <HAL_I2S_Init+0x74>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d004      	beq.n	8001dd4 <HAL_I2S_Init+0x74>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b0a      	cmp	r3, #10
 8001dd0:	f040 8094 	bne.w	8001efc <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d067      	beq.n	8001eac <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8001de4:	2302      	movs	r3, #2
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e001      	b.n	8001dee <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8001dea:	2301      	movs	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b30      	cmp	r3, #48	@ 0x30
 8001df4:	d003      	beq.n	8001dfe <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001dfa:	2bb0      	cmp	r3, #176	@ 0xb0
 8001dfc:	d102      	bne.n	8001e04 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	e001      	b.n	8001e08 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a68      	ldr	r2, [pc, #416]	@ (8001fb0 <HAL_I2S_Init+0x250>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d107      	bne.n	8001e22 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8001e12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	f002 fbfb 	bl	8004614 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	e006      	b.n	8001e30 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8001e22:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e26:	f04f 0100 	mov.w	r1, #0
 8001e2a:	f002 fbf3 	bl	8004614 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e2e:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e38:	d113      	bne.n	8001e62 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8001e3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	3305      	adds	r3, #5
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e014      	b.n	8001e8c <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8001e62:	2220      	movs	r2, #32
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	3305      	adds	r3, #5
 8001e8a:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4a49      	ldr	r2, [pc, #292]	@ (8001fb4 <HAL_I2S_Init+0x254>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e003      	b.n	8001eb4 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d102      	bne.n	8001ec0 <HAL_I2S_Init+0x160>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d002      	beq.n	8001ec6 <HAL_I2S_Init+0x166>
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2bff      	cmp	r3, #255	@ 0xff
 8001ec4:	d907      	bls.n	8001ed6 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e068      	b.n	8001fa8 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ee6:	4b34      	ldr	r3, [pc, #208]	@ (8001fb8 <HAL_I2S_Init+0x258>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	0411      	lsls	r1, r2, #16
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	0612      	lsls	r2, r2, #24
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f02:	4b2e      	ldr	r3, [pc, #184]	@ (8001fbc <HAL_I2S_Init+0x25c>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6851      	ldr	r1, [r2, #4]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6892      	ldr	r2, [r2, #8]
 8001f0e:	4311      	orrs	r1, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68d2      	ldr	r2, [r2, #12]
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6992      	ldr	r2, [r2, #24]
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6a12      	ldr	r2, [r2, #32]
 8001f20:	4311      	orrs	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6912      	ldr	r2, [r2, #16]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8001f42:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f52:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d007      	beq.n	8001f82 <HAL_I2S_Init+0x222>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d003      	beq.n	8001f82 <HAL_I2S_Init+0x222>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b0a      	cmp	r3, #10
 8001f80:	d10a      	bne.n	8001f98 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	58001400 	.word	0x58001400
 8001fb4:	cccccccd 	.word	0xcccccccd
 8001fb8:	fe00ffff 	.word	0xfe00ffff
 8001fbc:	fdff9040 	.word	0xfdff9040

08001fc0 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e037      	b.n	8002046 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe fb00 	bl	80005f0 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f003 fe00 	bl	8005c00 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	461a      	mov	r2, r3
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	f003 fe22 	bl	8005c54 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	461a      	mov	r2, r3
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	f003 fe39 	bl	8005c92 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0204 	orr.w	r2, r2, #4
 800202e:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <HAL_NAND_Init+0x90>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a06      	ldr	r2, [pc, #24]	@ (8002050 <HAL_NAND_Init+0x90>)
 8002036:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800203a:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	52004000 	.word	0x52004000

08002054 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af02      	add	r7, sp, #8
 800205a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0fe      	b.n	8002264 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff f8a2 	bl	80011c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f003 ff57 	bl	8005f40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7c1a      	ldrb	r2, [r3, #16]
 800209a:	f88d 2000 	strb.w	r2, [sp]
 800209e:	3304      	adds	r3, #4
 80020a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a2:	f003 fedb 	bl	8005e5c <USB_CoreInit>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d5      	b.n	8002264 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 ff4f 	bl	8005f62 <USB_SetCurrentMode>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0c6      	b.n	8002264 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	e04a      	b.n	8002172 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	3315      	adds	r3, #21
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3314      	adds	r3, #20
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	b298      	uxth	r0, r3
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	332e      	adds	r3, #46	@ 0x2e
 8002118:	4602      	mov	r2, r0
 800211a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	3318      	adds	r3, #24
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	331c      	adds	r3, #28
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3320      	adds	r3, #32
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3324      	adds	r3, #36	@ 0x24
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	3301      	adds	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	429a      	cmp	r2, r3
 800217a:	d3af      	bcc.n	80020dc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e044      	b.n	800220c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3301      	adds	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	429a      	cmp	r2, r3
 8002214:	d3b5      	bcc.n	8002182 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7c1a      	ldrb	r2, [r3, #16]
 800221e:	f88d 2000 	strb.w	r2, [sp]
 8002222:	3304      	adds	r3, #4
 8002224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002226:	f003 fee9 	bl	8005ffc <USB_DevInit>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e013      	b.n	8002264 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7b1b      	ldrb	r3, [r3, #12]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f80a 	bl	800226c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f004 f8a4 	bl	80063aa <USB_DevDisconnect>

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800229c:	4313      	orrs	r3, r2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	10000003 	.word	0x10000003

080022b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00a      	beq.n	80022de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022c8:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e01f      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e01d      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	490f      	ldr	r1, [pc, #60]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022ee:	f7ff f893 	bl	8001418 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022f4:	e009      	b.n	800230a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022f6:	f7ff f88f 	bl	8001418 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002304:	d901      	bls.n	800230a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e007      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002316:	d1ee      	bne.n	80022f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	58024800 	.word	0x58024800

08002328 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	58024800 	.word	0x58024800

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	@ 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f000 bc1f 	b.w	8002b9a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80b3 	beq.w	80024d0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4b95      	ldr	r3, [pc, #596]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002374:	4b92      	ldr	r3, [pc, #584]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800237a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237c:	2b10      	cmp	r3, #16
 800237e:	d007      	beq.n	8002390 <HAL_RCC_OscConfig+0x48>
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002382:	2b18      	cmp	r3, #24
 8002384:	d112      	bne.n	80023ac <HAL_RCC_OscConfig+0x64>
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d10d      	bne.n	80023ac <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b8b      	ldr	r3, [pc, #556]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8098 	beq.w	80024ce <HAL_RCC_OscConfig+0x186>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8093 	bne.w	80024ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e3f6      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b4:	d106      	bne.n	80023c4 <HAL_RCC_OscConfig+0x7c>
 80023b6:	4b82      	ldr	r3, [pc, #520]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a81      	ldr	r2, [pc, #516]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e058      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d112      	bne.n	80023f2 <HAL_RCC_OscConfig+0xaa>
 80023cc:	4b7c      	ldr	r3, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a7b      	ldr	r2, [pc, #492]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b79      	ldr	r3, [pc, #484]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a78      	ldr	r2, [pc, #480]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b76      	ldr	r3, [pc, #472]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a75      	ldr	r2, [pc, #468]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e041      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023fa:	d112      	bne.n	8002422 <HAL_RCC_OscConfig+0xda>
 80023fc:	4b70      	ldr	r3, [pc, #448]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6f      	ldr	r2, [pc, #444]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b6d      	ldr	r3, [pc, #436]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a6c      	ldr	r2, [pc, #432]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800240e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b6a      	ldr	r3, [pc, #424]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a69      	ldr	r2, [pc, #420]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e029      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800242a:	d112      	bne.n	8002452 <HAL_RCC_OscConfig+0x10a>
 800242c:	4b64      	ldr	r3, [pc, #400]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a63      	ldr	r2, [pc, #396]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002432:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b61      	ldr	r3, [pc, #388]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a60      	ldr	r2, [pc, #384]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800243e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b5e      	ldr	r3, [pc, #376]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5d      	ldr	r2, [pc, #372]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800244a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e011      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
 8002452:	4b5b      	ldr	r3, [pc, #364]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a5a      	ldr	r2, [pc, #360]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a57      	ldr	r2, [pc, #348]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b55      	ldr	r3, [pc, #340]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a54      	ldr	r2, [pc, #336]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002470:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002474:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d013      	beq.n	80024a6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe ffcb 	bl	8001418 <HAL_GetTick>
 8002482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002486:	f7fe ffc7 	bl	8001418 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b64      	cmp	r3, #100	@ 0x64
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e380      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002498:	4b49      	ldr	r3, [pc, #292]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x13e>
 80024a4:	e014      	b.n	80024d0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe ffb7 	bl	8001418 <HAL_GetTick>
 80024aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ae:	f7fe ffb3 	bl	8001418 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	@ 0x64
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e36c      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024c0:	4b3f      	ldr	r3, [pc, #252]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x166>
 80024cc:	e000      	b.n	80024d0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 808c 	beq.w	80025f6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024de:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024e6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e8:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_RCC_OscConfig+0x1bc>
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b18      	cmp	r3, #24
 80024f8:	d137      	bne.n	800256a <HAL_RCC_OscConfig+0x222>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d132      	bne.n	800256a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002504:	4b2e      	ldr	r3, [pc, #184]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x1d4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e33e      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251c:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 0219 	bic.w	r2, r3, #25
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4925      	ldr	r1, [pc, #148]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7fe ff73 	bl	8001418 <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe ff6f 	bl	8001418 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e328      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002548:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	4917      	ldr	r1, [pc, #92]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002568:	e045      	b.n	80025f6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d028      	beq.n	80025c4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002572:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0219 	bic.w	r2, r3, #25
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4910      	ldr	r1, [pc, #64]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe ff48 	bl	8001418 <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258c:	f7fe ff44 	bl	8001418 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e2fd      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	4901      	ldr	r1, [pc, #4]	@ (80025c0 <HAL_RCC_OscConfig+0x278>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
 80025be:	e01a      	b.n	80025f6 <HAL_RCC_OscConfig+0x2ae>
 80025c0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c4:	4b97      	ldr	r3, [pc, #604]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a96      	ldr	r2, [pc, #600]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe ff22 	bl	8001418 <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe ff1e 	bl	8001418 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e2d7      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d06a      	beq.n	80026d8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	4b88      	ldr	r3, [pc, #544]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800260a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800260c:	4b85      	ldr	r3, [pc, #532]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d007      	beq.n	8002628 <HAL_RCC_OscConfig+0x2e0>
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b18      	cmp	r3, #24
 800261c:	d11b      	bne.n	8002656 <HAL_RCC_OscConfig+0x30e>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d116      	bne.n	8002656 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002628:	4b7e      	ldr	r3, [pc, #504]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_OscConfig+0x2f8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b80      	cmp	r3, #128	@ 0x80
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e2ac      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002640:	4b78      	ldr	r3, [pc, #480]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	4975      	ldr	r1, [pc, #468]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002654:	e040      	b.n	80026d8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d023      	beq.n	80026a6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800265e:	4b71      	ldr	r3, [pc, #452]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a70      	ldr	r2, [pc, #448]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fed5 	bl	8001418 <HAL_GetTick>
 800266e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002672:	f7fe fed1 	bl	8001418 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e28a      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002684:	4b67      	ldr	r3, [pc, #412]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002690:	4b64      	ldr	r3, [pc, #400]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	4961      	ldr	r1, [pc, #388]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
 80026a4:	e018      	b.n	80026d8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80026ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe feb1 	bl	8001418 <HAL_GetTick>
 80026b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026ba:	f7fe fead 	bl	8001418 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e266      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026cc:	4b55      	ldr	r3, [pc, #340]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d036      	beq.n	8002752 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d019      	beq.n	8002720 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80026ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe fe8e 	bl	8001418 <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe fe8a 	bl	8001418 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e243      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002712:	4b44      	ldr	r3, [pc, #272]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x3b8>
 800271e:	e018      	b.n	8002752 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002720:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002724:	4a3f      	ldr	r2, [pc, #252]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe fe74 	bl	8001418 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7fe fe70 	bl	8001418 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e229      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002746:	4b37      	ldr	r3, [pc, #220]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d036      	beq.n	80027cc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d019      	beq.n	800279a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002766:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2e      	ldr	r2, [pc, #184]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 800276c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002770:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002772:	f7fe fe51 	bl	8001418 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277a:	f7fe fe4d 	bl	8001418 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e206      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x432>
 8002798:	e018      	b.n	80027cc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800279a:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a21      	ldr	r2, [pc, #132]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80027a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fe37 	bl	8001418 <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ae:	f7fe fe33 	bl	8001418 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1ec      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80af 	beq.w	8002938 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027da:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <HAL_RCC_OscConfig+0x4e0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <HAL_RCC_OscConfig+0x4e0>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e6:	f7fe fe17 	bl	8001418 <HAL_GetTick>
 80027ea:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ee:	f7fe fe13 	bl	8001418 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b64      	cmp	r3, #100	@ 0x64
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1cc      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_RCC_OscConfig+0x4e0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d10b      	bne.n	800282c <HAL_RCC_OscConfig+0x4e4>
 8002814:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a02      	ldr	r2, [pc, #8]	@ (8002824 <HAL_RCC_OscConfig+0x4dc>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002820:	e05b      	b.n	80028da <HAL_RCC_OscConfig+0x592>
 8002822:	bf00      	nop
 8002824:	58024400 	.word	0x58024400
 8002828:	58024800 	.word	0x58024800
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d112      	bne.n	800285a <HAL_RCC_OscConfig+0x512>
 8002834:	4b9d      	ldr	r3, [pc, #628]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a9c      	ldr	r2, [pc, #624]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	4b9a      	ldr	r3, [pc, #616]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a99      	ldr	r2, [pc, #612]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
 800284c:	4b97      	ldr	r3, [pc, #604]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	4a96      	ldr	r2, [pc, #600]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	6713      	str	r3, [r2, #112]	@ 0x70
 8002858:	e03f      	b.n	80028da <HAL_RCC_OscConfig+0x592>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b05      	cmp	r3, #5
 8002860:	d112      	bne.n	8002888 <HAL_RCC_OscConfig+0x540>
 8002862:	4b92      	ldr	r3, [pc, #584]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	4a91      	ldr	r2, [pc, #580]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	@ 0x70
 800286e:	4b8f      	ldr	r3, [pc, #572]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	4a8e      	ldr	r2, [pc, #568]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002878:	6713      	str	r3, [r2, #112]	@ 0x70
 800287a:	4b8c      	ldr	r3, [pc, #560]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	4a8b      	ldr	r2, [pc, #556]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6713      	str	r3, [r2, #112]	@ 0x70
 8002886:	e028      	b.n	80028da <HAL_RCC_OscConfig+0x592>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b85      	cmp	r3, #133	@ 0x85
 800288e:	d112      	bne.n	80028b6 <HAL_RCC_OscConfig+0x56e>
 8002890:	4b86      	ldr	r3, [pc, #536]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002894:	4a85      	ldr	r2, [pc, #532]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6713      	str	r3, [r2, #112]	@ 0x70
 800289c:	4b83      	ldr	r3, [pc, #524]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a0:	4a82      	ldr	r2, [pc, #520]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a8:	4b80      	ldr	r3, [pc, #512]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	4a7f      	ldr	r2, [pc, #508]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b4:	e011      	b.n	80028da <HAL_RCC_OscConfig+0x592>
 80028b6:	4b7d      	ldr	r3, [pc, #500]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ba:	4a7c      	ldr	r2, [pc, #496]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c2:	4b7a      	ldr	r3, [pc, #488]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	4a79      	ldr	r2, [pc, #484]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ce:	4b77      	ldr	r3, [pc, #476]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	4a76      	ldr	r2, [pc, #472]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80028d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d015      	beq.n	800290e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7fe fd99 	bl	8001418 <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fd95 	bl	8001418 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e14c      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002900:	4b6a      	ldr	r3, [pc, #424]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ee      	beq.n	80028ea <HAL_RCC_OscConfig+0x5a2>
 800290c:	e014      	b.n	8002938 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe fd83 	bl	8001418 <HAL_GetTick>
 8002912:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe fd7f 	bl	8001418 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e136      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800292c:	4b5f      	ldr	r3, [pc, #380]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ee      	bne.n	8002916 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 812b 	beq.w	8002b98 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002942:	4b5a      	ldr	r3, [pc, #360]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800294a:	2b18      	cmp	r3, #24
 800294c:	f000 80bb 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	2b02      	cmp	r3, #2
 8002956:	f040 8095 	bne.w	8002a84 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b54      	ldr	r3, [pc, #336]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a53      	ldr	r2, [pc, #332]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe fd57 	bl	8001418 <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296e:	f7fe fd53 	bl	8001418 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e10c      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002980:	4b4a      	ldr	r3, [pc, #296]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298c:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 800298e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002990:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <HAL_RCC_OscConfig+0x768>)
 8002992:	4013      	ands	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	430a      	orrs	r2, r1
 80029a0:	4942      	ldr	r1, [pc, #264]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	628b      	str	r3, [r1, #40]	@ 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b4:	3b01      	subs	r3, #1
 80029b6:	025b      	lsls	r3, r3, #9
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ce:	3b01      	subs	r3, #1
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029d6:	4935      	ldr	r1, [pc, #212]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029dc:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	4a32      	ldr	r2, [pc, #200]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029e8:	4b30      	ldr	r3, [pc, #192]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80029ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ec:	4b31      	ldr	r3, [pc, #196]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029f4:	00d2      	lsls	r2, r2, #3
 80029f6:	492d      	ldr	r1, [pc, #180]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029fc:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	f023 020c 	bic.w	r2, r3, #12
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	4928      	ldr	r1, [pc, #160]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a0e:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	f023 0202 	bic.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	4924      	ldr	r1, [pc, #144]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a20:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	4a21      	ldr	r2, [pc, #132]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	4a1e      	ldr	r2, [pc, #120]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a38:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b16      	ldr	r3, [pc, #88]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a15      	ldr	r2, [pc, #84]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fcdc 	bl	8001418 <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe fcd8 	bl	8001418 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e091      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a76:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x71c>
 8002a82:	e089      	b.n	8002b98 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a84:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <HAL_RCC_OscConfig+0x764>)
 8002a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fcc2 	bl	8001418 <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a96:	e00f      	b.n	8002ab8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe fcbe 	bl	8001418 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d908      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e077      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	fffffc0c 	.word	0xfffffc0c
 8002ab4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1e9      	bne.n	8002a98 <HAL_RCC_OscConfig+0x750>
 8002ac4:	e068      	b.n	8002b98 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ac6:	4b37      	ldr	r3, [pc, #220]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002acc:	4b35      	ldr	r3, [pc, #212]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d031      	beq.n	8002b3e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d12a      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d122      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d11a      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	0a5b      	lsrs	r3, r3, #9
 8002b0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b14:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d111      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d108      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	0e1b      	lsrs	r3, r3, #24
 8002b30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e02b      	b.n	8002b9a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b42:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	08db      	lsrs	r3, r3, #3
 8002b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b4c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d01f      	beq.n	8002b98 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b58:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b64:	f7fe fc58 	bl	8001418 <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b6a:	bf00      	nop
 8002b6c:	f7fe fc54 	bl	8001418 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d0f9      	beq.n	8002b6c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <HAL_RCC_OscConfig+0x860>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b84:	00d2      	lsls	r2, r2, #3
 8002b86:	4907      	ldr	r1, [pc, #28]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	4a04      	ldr	r2, [pc, #16]	@ (8002ba4 <HAL_RCC_OscConfig+0x85c>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3730      	adds	r7, #48	@ 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	ffff0007 	.word	0xffff0007

08002bac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e19c      	b.n	8002efa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002dec <HAL_RCC_ClockConfig+0x240>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d910      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b87      	ldr	r3, [pc, #540]	@ (8002dec <HAL_RCC_ClockConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 020f 	bic.w	r2, r3, #15
 8002bd6:	4985      	ldr	r1, [pc, #532]	@ (8002dec <HAL_RCC_ClockConfig+0x240>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b83      	ldr	r3, [pc, #524]	@ (8002dec <HAL_RCC_ClockConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e184      	b.n	8002efa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	4b7b      	ldr	r3, [pc, #492]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d908      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c0c:	4b78      	ldr	r3, [pc, #480]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	4975      	ldr	r1, [pc, #468]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	4b70      	ldr	r3, [pc, #448]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d908      	bls.n	8002c4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	496a      	ldr	r1, [pc, #424]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d010      	beq.n	8002c7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	4b64      	ldr	r3, [pc, #400]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d908      	bls.n	8002c7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c68:	4b61      	ldr	r3, [pc, #388]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	495e      	ldr	r1, [pc, #376]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	4b59      	ldr	r3, [pc, #356]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d908      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c96:	4b56      	ldr	r3, [pc, #344]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	4953      	ldr	r1, [pc, #332]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d908      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f023 020f 	bic.w	r2, r3, #15
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4947      	ldr	r1, [pc, #284]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d055      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ce2:	4b43      	ldr	r3, [pc, #268]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4940      	ldr	r1, [pc, #256]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d121      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0f6      	b.n	8002efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d14:	4b36      	ldr	r3, [pc, #216]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d115      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0ea      	b.n	8002efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d2c:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0de      	b.n	8002efa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0d6      	b.n	8002efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f023 0207 	bic.w	r2, r3, #7
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4925      	ldr	r1, [pc, #148]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fb5b 	bl	8001418 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d66:	f7fe fb57 	bl	8001418 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0be      	b.n	8002efa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d1eb      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	4b14      	ldr	r3, [pc, #80]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d208      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002daa:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f023 020f 	bic.w	r2, r3, #15
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	490e      	ldr	r1, [pc, #56]	@ (8002df0 <HAL_RCC_ClockConfig+0x244>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_ClockConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d214      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 020f 	bic.w	r2, r3, #15
 8002dd2:	4906      	ldr	r1, [pc, #24]	@ (8002dec <HAL_RCC_ClockConfig+0x240>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <HAL_RCC_ClockConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e086      	b.n	8002efa <HAL_RCC_ClockConfig+0x34e>
 8002dec:	52002000 	.word	0x52002000
 8002df0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	4b3f      	ldr	r3, [pc, #252]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d208      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e10:	4b3c      	ldr	r3, [pc, #240]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	4939      	ldr	r1, [pc, #228]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	4b34      	ldr	r3, [pc, #208]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d208      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e3e:	4b31      	ldr	r3, [pc, #196]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	492e      	ldr	r1, [pc, #184]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	4b28      	ldr	r3, [pc, #160]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d208      	bcs.n	8002e7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e6c:	4b25      	ldr	r3, [pc, #148]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	4922      	ldr	r1, [pc, #136]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d010      	beq.n	8002eac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d208      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4917      	ldr	r1, [pc, #92]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002eac:	f000 f834 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b14      	ldr	r3, [pc, #80]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	4912      	ldr	r1, [pc, #72]	@ (8002f08 <HAL_RCC_ClockConfig+0x35c>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002eca:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <HAL_RCC_ClockConfig+0x35c>)
 8002ed4:	5cd3      	ldrb	r3, [r2, r3]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <HAL_RCC_ClockConfig+0x360>)
 8002ee2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <HAL_RCC_ClockConfig+0x364>)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <HAL_RCC_ClockConfig+0x368>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fa48 	bl	8001384 <HAL_InitTick>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	58024400 	.word	0x58024400
 8002f08:	080064dc 	.word	0x080064dc
 8002f0c:	24000004 	.word	0x24000004
 8002f10:	24000000 	.word	0x24000000
 8002f14:	24000008 	.word	0x24000008

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	@ 0x24
 8002f1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1e:	4bb3      	ldr	r3, [pc, #716]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f26:	2b18      	cmp	r3, #24
 8002f28:	f200 8155 	bhi.w	80031d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f99 	.word	0x08002f99
 8002f38:	080031d7 	.word	0x080031d7
 8002f3c:	080031d7 	.word	0x080031d7
 8002f40:	080031d7 	.word	0x080031d7
 8002f44:	080031d7 	.word	0x080031d7
 8002f48:	080031d7 	.word	0x080031d7
 8002f4c:	080031d7 	.word	0x080031d7
 8002f50:	080031d7 	.word	0x080031d7
 8002f54:	08002fbf 	.word	0x08002fbf
 8002f58:	080031d7 	.word	0x080031d7
 8002f5c:	080031d7 	.word	0x080031d7
 8002f60:	080031d7 	.word	0x080031d7
 8002f64:	080031d7 	.word	0x080031d7
 8002f68:	080031d7 	.word	0x080031d7
 8002f6c:	080031d7 	.word	0x080031d7
 8002f70:	080031d7 	.word	0x080031d7
 8002f74:	08002fc5 	.word	0x08002fc5
 8002f78:	080031d7 	.word	0x080031d7
 8002f7c:	080031d7 	.word	0x080031d7
 8002f80:	080031d7 	.word	0x080031d7
 8002f84:	080031d7 	.word	0x080031d7
 8002f88:	080031d7 	.word	0x080031d7
 8002f8c:	080031d7 	.word	0x080031d7
 8002f90:	080031d7 	.word	0x080031d7
 8002f94:	08002fcb 	.word	0x08002fcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f98:	4b94      	ldr	r3, [pc, #592]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fa4:	4b91      	ldr	r3, [pc, #580]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	4a90      	ldr	r2, [pc, #576]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fb6:	e111      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fba:	61bb      	str	r3, [r7, #24]
      break;
 8002fbc:	e10e      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fc0:	61bb      	str	r3, [r7, #24]
      break;
 8002fc2:	e10b      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fc6:	61bb      	str	r3, [r7, #24]
      break;
 8002fc8:	e108      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fca:	4b88      	ldr	r3, [pc, #544]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fd4:	4b85      	ldr	r3, [pc, #532]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fde:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fe0:	4b82      	ldr	r3, [pc, #520]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fea:	4b80      	ldr	r3, [pc, #512]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fee:	08db      	lsrs	r3, r3, #3
 8002ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003002:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80e1 	beq.w	80031d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b02      	cmp	r3, #2
 8003012:	f000 8083 	beq.w	800311c <HAL_RCC_GetSysClockFreq+0x204>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b02      	cmp	r3, #2
 800301a:	f200 80a1 	bhi.w	8003160 <HAL_RCC_GetSysClockFreq+0x248>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x114>
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d056      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800302a:	e099      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800302c:	4b6f      	ldr	r3, [pc, #444]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02d      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003038:	4b6c      	ldr	r3, [pc, #432]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	4a6b      	ldr	r2, [pc, #428]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	ee07 3a90 	vmov	s15, r3
 8003050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003062:	4b62      	ldr	r3, [pc, #392]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003072:	ed97 6a02 	vldr	s12, [r7, #8]
 8003076:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800307a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003092:	e087      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003200 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a6:	4b51      	ldr	r3, [pc, #324]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80030be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030d6:	e065      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003204 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ea:	4b40      	ldr	r3, [pc, #256]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800310e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800311a:	e043      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003126:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003208 <HAL_RCC_GetSysClockFreq+0x2f0>
 800312a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800312e:	4b2f      	ldr	r3, [pc, #188]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003142:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800314e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800315e:	e021      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003204 <HAL_RCC_GetSysClockFreq+0x2ec>
 800316e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003172:	4b1e      	ldr	r3, [pc, #120]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003182:	ed97 6a02 	vldr	s12, [r7, #8]
 8003186:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800318a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031a4:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	0a5b      	lsrs	r3, r3, #9
 80031aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ae:	3301      	adds	r3, #1
 80031b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	ee07 3a90 	vmov	s15, r3
 80031b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80031c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c8:	ee17 3a90 	vmov	r3, s15
 80031cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
      break;
 80031d4:	e002      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031d6:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031d8:	61bb      	str	r3, [r7, #24]
      break;
 80031da:	bf00      	nop
  }

  return sysclockfreq;
 80031dc:	69bb      	ldr	r3, [r7, #24]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	@ 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	58024400 	.word	0x58024400
 80031f0:	03d09000 	.word	0x03d09000
 80031f4:	003d0900 	.word	0x003d0900
 80031f8:	016e3600 	.word	0x016e3600
 80031fc:	46000000 	.word	0x46000000
 8003200:	4c742400 	.word	0x4c742400
 8003204:	4a742400 	.word	0x4a742400
 8003208:	4bb71b00 	.word	0x4bb71b00

0800320c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003212:	f7ff fe81 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b10      	ldr	r3, [pc, #64]	@ (800325c <HAL_RCC_GetHCLKFreq+0x50>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	490f      	ldr	r1, [pc, #60]	@ (8003260 <HAL_RCC_GetHCLKFreq+0x54>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003230:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <HAL_RCC_GetHCLKFreq+0x50>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <HAL_RCC_GetHCLKFreq+0x54>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	4a07      	ldr	r2, [pc, #28]	@ (8003264 <HAL_RCC_GetHCLKFreq+0x58>)
 8003248:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800324a:	4a07      	ldr	r2, [pc, #28]	@ (8003268 <HAL_RCC_GetHCLKFreq+0x5c>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <HAL_RCC_GetHCLKFreq+0x58>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	58024400 	.word	0x58024400
 8003260:	080064dc 	.word	0x080064dc
 8003264:	24000004 	.word	0x24000004
 8003268:	24000000 	.word	0x24000000

0800326c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003270:	f7ff ffcc 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4904      	ldr	r1, [pc, #16]	@ (8003294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400
 8003294:	080064dc 	.word	0x080064dc

08003298 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800329c:	b0c8      	sub	sp, #288	@ 0x120
 800329e:	af00      	add	r7, sp, #0
 80032a0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032aa:	2300      	movs	r3, #0
 80032ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032bc:	2500      	movs	r5, #0
 80032be:	ea54 0305 	orrs.w	r3, r4, r5
 80032c2:	d049      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032ce:	d02f      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032d4:	d828      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032da:	d01a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032e0:	d822      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ea:	d007      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ec:	e01c      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ee:	4ba7      	ldr	r3, [pc, #668]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	4aa6      	ldr	r2, [pc, #664]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032fa:	e01a      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003300:	3308      	adds	r3, #8
 8003302:	2102      	movs	r1, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f002 fa6d 	bl	80057e4 <RCCEx_PLL2_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003310:	e00f      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003316:	3328      	adds	r3, #40	@ 0x28
 8003318:	2102      	movs	r1, #2
 800331a:	4618      	mov	r0, r3
 800331c:	f002 fb14 	bl	8005948 <RCCEx_PLL3_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003326:	e004      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003332:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800333a:	4b94      	ldr	r3, [pc, #592]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800333c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003348:	4a90      	ldr	r2, [pc, #576]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800334a:	430b      	orrs	r3, r1
 800334c:	6513      	str	r3, [r2, #80]	@ 0x50
 800334e:	e003      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003354:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003364:	f04f 0900 	mov.w	r9, #0
 8003368:	ea58 0309 	orrs.w	r3, r8, r9
 800336c:	d047      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800336e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	2b04      	cmp	r3, #4
 8003376:	d82a      	bhi.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003378:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	08003395 	.word	0x08003395
 8003384:	080033a3 	.word	0x080033a3
 8003388:	080033b9 	.word	0x080033b9
 800338c:	080033d7 	.word	0x080033d7
 8003390:	080033d7 	.word	0x080033d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003394:	4b7d      	ldr	r3, [pc, #500]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	4a7c      	ldr	r2, [pc, #496]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800339a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800339e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033a0:	e01a      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033a6:	3308      	adds	r3, #8
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f002 fa1a 	bl	80057e4 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b6:	e00f      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033bc:	3328      	adds	r3, #40	@ 0x28
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 fac1 	bl	8005948 <RCCEx_PLL3_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033cc:	e004      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033e0:	4b6a      	ldr	r3, [pc, #424]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	f023 0107 	bic.w	r1, r3, #7
 80033e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ee:	4a67      	ldr	r2, [pc, #412]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80033fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800340a:	f04f 0b00 	mov.w	fp, #0
 800340e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003412:	d054      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800341e:	d036      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003420:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003424:	d82f      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342a:	d032      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800342c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003430:	d829      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003432:	2bc0      	cmp	r3, #192	@ 0xc0
 8003434:	d02f      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003436:	2bc0      	cmp	r3, #192	@ 0xc0
 8003438:	d825      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800343a:	2b80      	cmp	r3, #128	@ 0x80
 800343c:	d018      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800343e:	2b80      	cmp	r3, #128	@ 0x80
 8003440:	d821      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003446:	2b40      	cmp	r3, #64	@ 0x40
 8003448:	d007      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800344a:	e01c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344c:	4b4f      	ldr	r3, [pc, #316]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	4a4e      	ldr	r2, [pc, #312]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003458:	e01e      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800345e:	3308      	adds	r3, #8
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f002 f9be 	bl	80057e4 <RCCEx_PLL2_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800346e:	e013      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003474:	3328      	adds	r3, #40	@ 0x28
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f002 fa65 	bl	8005948 <RCCEx_PLL3_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003484:	e008      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800348c:	e004      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800348e:	bf00      	nop
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003498:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80034a0:	4b3a      	ldr	r3, [pc, #232]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	4a37      	ldr	r2, [pc, #220]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034b4:	e003      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80034be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80034d8:	460b      	mov	r3, r1
 80034da:	4313      	orrs	r3, r2
 80034dc:	d05c      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80034de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80034e8:	d03b      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80034ea:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80034ee:	d834      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80034f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034f4:	d037      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80034f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034fa:	d82e      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80034fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003500:	d033      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003502:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003506:	d828      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350c:	d01a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800350e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003512:	d822      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800351c:	d007      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800351e:	e01c      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003520:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	4a19      	ldr	r2, [pc, #100]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800352c:	e01e      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800352e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003532:	3308      	adds	r3, #8
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f002 f954 	bl	80057e4 <RCCEx_PLL2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003542:	e013      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003548:	3328      	adds	r3, #40	@ 0x28
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f002 f9fb 	bl	8005948 <RCCEx_PLL3_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003558:	e008      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003560:	e004      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800356a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10d      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003578:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800357c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003582:	4a02      	ldr	r2, [pc, #8]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003584:	430b      	orrs	r3, r1
 8003586:	6513      	str	r3, [r2, #80]	@ 0x50
 8003588:	e006      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800358a:	bf00      	nop
 800358c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003594:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035b2:	460b      	mov	r3, r1
 80035b4:	4313      	orrs	r3, r2
 80035b6:	d03a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80035b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035be:	2b30      	cmp	r3, #48	@ 0x30
 80035c0:	d01f      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80035c2:	2b30      	cmp	r3, #48	@ 0x30
 80035c4:	d819      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x362>
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d00c      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d815      	bhi.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x362>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d019      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d111      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d6:	4bae      	ldr	r3, [pc, #696]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	4aad      	ldr	r2, [pc, #692]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035e2:	e011      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035e8:	3308      	adds	r3, #8
 80035ea:	2102      	movs	r1, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 f8f9 	bl	80057e4 <RCCEx_PLL2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035f8:	e006      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003600:	e002      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003610:	4b9f      	ldr	r3, [pc, #636]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003614:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800361c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361e:	4a9c      	ldr	r2, [pc, #624]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003620:	430b      	orrs	r3, r1
 8003622:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003624:	e003      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003626:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800362a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800362e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800363a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003644:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003648:	460b      	mov	r3, r1
 800364a:	4313      	orrs	r3, r2
 800364c:	d051      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800364e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003654:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003658:	d035      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800365a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800365e:	d82e      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003660:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003664:	d031      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003666:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800366a:	d828      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x426>
 800366c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003670:	d01a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003676:	d822      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003680:	d007      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003682:	e01c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003684:	4b82      	ldr	r3, [pc, #520]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	4a81      	ldr	r2, [pc, #516]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800368e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003690:	e01c      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003696:	3308      	adds	r3, #8
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f002 f8a2 	bl	80057e4 <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036a6:	e011      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ac:	3328      	adds	r3, #40	@ 0x28
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f002 f949 	bl	8005948 <RCCEx_PLL3_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036bc:	e006      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80036ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80036fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003708:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800370c:	460b      	mov	r3, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	d053      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800371c:	d033      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800371e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003722:	d82c      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003724:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003728:	d02f      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800372a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800372e:	d826      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003730:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003734:	d02b      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003736:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800373a:	d820      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800373c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003740:	d012      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003746:	d81a      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d022      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003750:	d115      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003756:	3308      	adds	r3, #8
 8003758:	2101      	movs	r1, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f002 f842 	bl	80057e4 <RCCEx_PLL2_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003766:	e015      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800376c:	3328      	adds	r3, #40	@ 0x28
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f002 f8e9 	bl	8005948 <RCCEx_PLL3_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800377c:	e00a      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003784:	e006      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003786:	bf00      	nop
 8003788:	e004      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003794:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800379c:	4b3c      	ldr	r3, [pc, #240]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800379e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037aa:	4a39      	ldr	r2, [pc, #228]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d060      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037e2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80037e6:	d039      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80037e8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80037ec:	d832      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80037ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037f2:	d035      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80037f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037f8:	d82c      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fe:	d031      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003804:	d826      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003806:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800380a:	d02d      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800380c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003810:	d820      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003816:	d012      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800381c:	d81a      	bhi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d024      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003826:	d115      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800382c:	3308      	adds	r3, #8
 800382e:	2101      	movs	r1, #1
 8003830:	4618      	mov	r0, r3
 8003832:	f001 ffd7 	bl	80057e4 <RCCEx_PLL2_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800383c:	e017      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003842:	3328      	adds	r3, #40	@ 0x28
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f002 f87e 	bl	8005948 <RCCEx_PLL3_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003852:	e00c      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800385a:	e008      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800385c:	bf00      	nop
 800385e:	e006      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003860:	bf00      	nop
 8003862:	e004      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003864:	bf00      	nop
 8003866:	e002      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800386c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10e      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003876:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800387e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003886:	4a02      	ldr	r2, [pc, #8]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003888:	430b      	orrs	r3, r1
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58
 800388c:	e006      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800388e:	bf00      	nop
 8003890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003898:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800389c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038ac:	2300      	movs	r3, #0
 80038ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038b6:	460b      	mov	r3, r1
 80038b8:	4313      	orrs	r3, r2
 80038ba:	d037      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038c6:	d00e      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80038c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038cc:	d816      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x664>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d018      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80038d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038d6:	d111      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d8:	4bc4      	ldr	r3, [pc, #784]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	4ac3      	ldr	r2, [pc, #780]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038e4:	e00f      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ea:	3308      	adds	r3, #8
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 ff78 	bl	80057e4 <RCCEx_PLL2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038fa:	e004      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003906:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800390e:	4bb7      	ldr	r3, [pc, #732]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003912:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800391a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800391c:	4ab3      	ldr	r2, [pc, #716]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800391e:	430b      	orrs	r3, r1
 8003920:	6513      	str	r3, [r2, #80]	@ 0x50
 8003922:	e003      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003928:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800392c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003942:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003946:	460b      	mov	r3, r1
 8003948:	4313      	orrs	r3, r2
 800394a:	d039      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	2b03      	cmp	r3, #3
 8003954:	d81c      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003956:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	08003999 	.word	0x08003999
 8003960:	0800396d 	.word	0x0800396d
 8003964:	0800397b 	.word	0x0800397b
 8003968:	08003999 	.word	0x08003999
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396c:	4b9f      	ldr	r3, [pc, #636]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	4a9e      	ldr	r2, [pc, #632]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003978:	e00f      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800397a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800397e:	3308      	adds	r3, #8
 8003980:	2102      	movs	r1, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f001 ff2e 	bl	80057e4 <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800398e:	e004      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003996:	e000      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039a2:	4b92      	ldr	r3, [pc, #584]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	f023 0103 	bic.w	r1, r3, #3
 80039aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b0:	4a8e      	ldr	r2, [pc, #568]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039b6:	e003      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039da:	460b      	mov	r3, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	f000 8099 	beq.w	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e2:	4b83      	ldr	r3, [pc, #524]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a82      	ldr	r2, [pc, #520]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ee:	f7fd fd13 	bl	8001418 <HAL_GetTick>
 80039f2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f6:	e00b      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fd fd0e 	bl	8001418 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b64      	cmp	r3, #100	@ 0x64
 8003a06:	d903      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a0e:	e005      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a10:	4b77      	ldr	r3, [pc, #476]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ed      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003a1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d173      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a24:	4b71      	ldr	r3, [pc, #452]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a30:	4053      	eors	r3, r2
 8003a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d015      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a46:	4b69      	ldr	r3, [pc, #420]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	4a68      	ldr	r2, [pc, #416]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a52:	4b66      	ldr	r3, [pc, #408]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	4a65      	ldr	r2, [pc, #404]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a5e:	4a63      	ldr	r2, [pc, #396]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a72:	d118      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd fcd0 	bl	8001418 <HAL_GetTick>
 8003a78:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a7c:	e00d      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fccb 	bl	8001418 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003a88:	1ad2      	subs	r2, r2, r3
 8003a8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d903      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003a98:	e005      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a9a:	4b54      	ldr	r3, [pc, #336]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0eb      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003aa6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d129      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003abe:	d10e      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ad0:	091a      	lsrs	r2, r3, #4
 8003ad2:	4b48      	ldr	r3, [pc, #288]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	4a45      	ldr	r2, [pc, #276]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6113      	str	r3, [r2, #16]
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003ade:	4b43      	ldr	r3, [pc, #268]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	4a42      	ldr	r2, [pc, #264]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ae8:	6113      	str	r3, [r2, #16]
 8003aea:	4b40      	ldr	r3, [pc, #256]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003af2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003afa:	4a3c      	ldr	r2, [pc, #240]	@ (8003bec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b00:	e008      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003b0a:	e003      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f002 0301 	and.w	r3, r2, #1
 8003b20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f000 8090 	beq.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b3e:	2b28      	cmp	r3, #40	@ 0x28
 8003b40:	d870      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003b42:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003c2d 	.word	0x08003c2d
 8003b4c:	08003c25 	.word	0x08003c25
 8003b50:	08003c25 	.word	0x08003c25
 8003b54:	08003c25 	.word	0x08003c25
 8003b58:	08003c25 	.word	0x08003c25
 8003b5c:	08003c25 	.word	0x08003c25
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003bf9 	.word	0x08003bf9
 8003b6c:	08003c25 	.word	0x08003c25
 8003b70:	08003c25 	.word	0x08003c25
 8003b74:	08003c25 	.word	0x08003c25
 8003b78:	08003c25 	.word	0x08003c25
 8003b7c:	08003c25 	.word	0x08003c25
 8003b80:	08003c25 	.word	0x08003c25
 8003b84:	08003c25 	.word	0x08003c25
 8003b88:	08003c0f 	.word	0x08003c0f
 8003b8c:	08003c25 	.word	0x08003c25
 8003b90:	08003c25 	.word	0x08003c25
 8003b94:	08003c25 	.word	0x08003c25
 8003b98:	08003c25 	.word	0x08003c25
 8003b9c:	08003c25 	.word	0x08003c25
 8003ba0:	08003c25 	.word	0x08003c25
 8003ba4:	08003c25 	.word	0x08003c25
 8003ba8:	08003c2d 	.word	0x08003c2d
 8003bac:	08003c25 	.word	0x08003c25
 8003bb0:	08003c25 	.word	0x08003c25
 8003bb4:	08003c25 	.word	0x08003c25
 8003bb8:	08003c25 	.word	0x08003c25
 8003bbc:	08003c25 	.word	0x08003c25
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003c25 	.word	0x08003c25
 8003bc8:	08003c2d 	.word	0x08003c2d
 8003bcc:	08003c25 	.word	0x08003c25
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c25 	.word	0x08003c25
 8003be0:	08003c25 	.word	0x08003c25
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c2d 	.word	0x08003c2d
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	58024800 	.word	0x58024800
 8003bf4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 fdef 	bl	80057e4 <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c0c:	e00f      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c12:	3328      	adds	r3, #40	@ 0x28
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 fe96 	bl	8005948 <RCCEx_PLL3_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c22:	e004      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c36:	4bc0      	ldr	r3, [pc, #768]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c46:	4abc      	ldr	r2, [pc, #752]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f002 0302 	and.w	r3, r2, #2
 8003c62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c6c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d043      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d824      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003c82:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003cd5 	.word	0x08003cd5
 8003c8c:	08003ca1 	.word	0x08003ca1
 8003c90:	08003cb7 	.word	0x08003cb7
 8003c94:	08003cd5 	.word	0x08003cd5
 8003c98:	08003cd5 	.word	0x08003cd5
 8003c9c:	08003cd5 	.word	0x08003cd5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 fd9b 	bl	80057e4 <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cb4:	e00f      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cba:	3328      	adds	r3, #40	@ 0x28
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 fe42 	bl	8005948 <RCCEx_PLL3_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cca:	e004      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cde:	4b96      	ldr	r3, [pc, #600]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce2:	f023 0107 	bic.w	r1, r3, #7
 8003ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cee:	4a92      	ldr	r2, [pc, #584]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cf4:	e003      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cfa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f002 0304 	and.w	r3, r2, #4
 8003d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d14:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	d043      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	d824      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d30 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d7d 	.word	0x08003d7d
 8003d34:	08003d49 	.word	0x08003d49
 8003d38:	08003d5f 	.word	0x08003d5f
 8003d3c:	08003d7d 	.word	0x08003d7d
 8003d40:	08003d7d 	.word	0x08003d7d
 8003d44:	08003d7d 	.word	0x08003d7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	2101      	movs	r1, #1
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fd47 	bl	80057e4 <RCCEx_PLL2_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d5c:	e00f      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d62:	3328      	adds	r3, #40	@ 0x28
 8003d64:	2101      	movs	r1, #1
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fdee 	bl	8005948 <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d72:	e004      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d86:	4b6c      	ldr	r3, [pc, #432]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	f023 0107 	bic.w	r1, r3, #7
 8003d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d96:	4a68      	ldr	r2, [pc, #416]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003da2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f002 0320 	and.w	r3, r2, #32
 8003db2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003db6:	2300      	movs	r3, #0
 8003db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	d055      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd2:	d033      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd8:	d82c      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dde:	d02f      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de4:	d826      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003de6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dea:	d02b      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003dec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003df0:	d820      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003df6:	d012      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dfc:	d81a      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d022      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e06:	d115      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fce7 	bl	80057e4 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e1c:	e015      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e22:	3328      	adds	r3, #40	@ 0x28
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fd8e 	bl	8005948 <RCCEx_PLL3_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e32:	e00a      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e3a:	e006      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e3c:	bf00      	nop
 8003e3e:	e004      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e52:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e56:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e62:	4a35      	ldr	r2, [pc, #212]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e68:	e003      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	d058      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e9a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e9e:	d033      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003ea0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ea4:	d82c      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eaa:	d02f      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb0:	d826      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003eb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eb6:	d02b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003eb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ebc:	d820      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec2:	d012      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec8:	d81a      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d022      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed2:	d115      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ed8:	3308      	adds	r3, #8
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 fc81 	bl	80057e4 <RCCEx_PLL2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ee8:	e015      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eee:	3328      	adds	r3, #40	@ 0x28
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 fd28 	bl	8005948 <RCCEx_PLL3_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003efe:	e00a      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f06:	e006      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f08:	bf00      	nop
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f0c:	bf00      	nop
 8003f0e:	e002      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10e      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f2e:	4a02      	ldr	r2, [pc, #8]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f34:	e006      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003f36:	bf00      	nop
 8003f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f5a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4313      	orrs	r3, r2
 8003f62:	d055      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f6c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f70:	d033      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003f72:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f76:	d82c      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f7c:	d02f      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f82:	d826      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f84:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f88:	d02b      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f8a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f8e:	d820      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f94:	d012      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003f96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f9a:	d81a      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d022      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa4:	d115      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003faa:	3308      	adds	r3, #8
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fc18 	bl	80057e4 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fba:	e015      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc0:	3328      	adds	r3, #40	@ 0x28
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fcbf 	bl	8005948 <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003fda:	bf00      	nop
 8003fdc:	e004      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ff0:	4ba1      	ldr	r3, [pc, #644]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ffc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004000:	4a9d      	ldr	r2, [pc, #628]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004002:	430b      	orrs	r3, r1
 8004004:	6593      	str	r3, [r2, #88]	@ 0x58
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800400c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f002 0308 	and.w	r3, r2, #8
 800401c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004026:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d01e      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403c:	d10c      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004042:	3328      	adds	r3, #40	@ 0x28
 8004044:	2102      	movs	r1, #2
 8004046:	4618      	mov	r0, r3
 8004048:	f001 fc7e 	bl	8005948 <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004058:	4b87      	ldr	r3, [pc, #540]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004068:	4a83      	ldr	r2, [pc, #524]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800406a:	430b      	orrs	r3, r1
 800406c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800406e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f002 0310 	and.w	r3, r2, #16
 800407a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004084:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004088:	460b      	mov	r3, r1
 800408a:	4313      	orrs	r3, r2
 800408c:	d01e      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800408e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004092:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800409a:	d10c      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800409c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040a0:	3328      	adds	r3, #40	@ 0x28
 80040a2:	2102      	movs	r1, #2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 fc4f 	bl	8005948 <RCCEx_PLL3_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040b6:	4b70      	ldr	r3, [pc, #448]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040c6:	4a6c      	ldr	r2, [pc, #432]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040e6:	460b      	mov	r3, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	d03e      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040f8:	d022      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80040fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040fe:	d81b      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004108:	d00b      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800410a:	e015      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800410c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004110:	3308      	adds	r3, #8
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f001 fb65 	bl	80057e4 <RCCEx_PLL2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004126:	3328      	adds	r3, #40	@ 0x28
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fc0c 	bl	8005948 <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800414a:	4b4b      	ldr	r3, [pc, #300]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004156:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800415a:	4a47      	ldr	r2, [pc, #284]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800415c:	430b      	orrs	r3, r1
 800415e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004160:	e003      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004166:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800416a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004176:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004178:	2300      	movs	r3, #0
 800417a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800417c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d03b      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004192:	d01f      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004194:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004198:	d818      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800419e:	d003      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80041a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041a4:	d007      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80041a6:	e011      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a8:	4b33      	ldr	r3, [pc, #204]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	4a32      	ldr	r2, [pc, #200]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041b4:	e00f      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ba:	3328      	adds	r3, #40	@ 0x28
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 fbc2 	bl	8005948 <RCCEx_PLL3_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80041ca:	e004      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80041d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10b      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041de:	4b26      	ldr	r3, [pc, #152]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	4a22      	ldr	r2, [pc, #136]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80041f4:	e003      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800420a:	673b      	str	r3, [r7, #112]	@ 0x70
 800420c:	2300      	movs	r3, #0
 800420e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004210:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004214:	460b      	mov	r3, r1
 8004216:	4313      	orrs	r3, r2
 8004218:	d034      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800421a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800421e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004228:	d007      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800422a:	e011      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800422c:	4b12      	ldr	r3, [pc, #72]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	4a11      	ldr	r2, [pc, #68]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004238:	e00e      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800423a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800423e:	3308      	adds	r3, #8
 8004240:	2102      	movs	r1, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f001 face 	bl	80057e4 <RCCEx_PLL2_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800424e:	e003      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004258:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004264:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800426c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426e:	4a02      	ldr	r2, [pc, #8]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004270:	430b      	orrs	r3, r1
 8004272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004274:	e006      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004280:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004292:	2300      	movs	r3, #0
 8004294:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004296:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d00c      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a4:	3328      	adds	r3, #40	@ 0x28
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 fb4d 	bl	8005948 <RCCEx_PLL3_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80042c8:	2300      	movs	r3, #0
 80042ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80042cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d038      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e2:	d018      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80042e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e8:	d811      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80042ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ee:	d014      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f4:	d80b      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d011      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042fe:	d106      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004300:	4bc3      	ldr	r3, [pc, #780]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	4ac2      	ldr	r2, [pc, #776]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800430a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800430c:	e008      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004314:	e004      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004316:	bf00      	nop
 8004318:	e002      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800431a:	bf00      	nop
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800431e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004320:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004328:	4bb9      	ldr	r3, [pc, #740]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004338:	4ab5      	ldr	r2, [pc, #724]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800433a:	430b      	orrs	r3, r1
 800433c:	6553      	str	r3, [r2, #84]	@ 0x54
 800433e:	e003      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004344:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004354:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004356:	2300      	movs	r3, #0
 8004358:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800435a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004364:	4baa      	ldr	r3, [pc, #680]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004368:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004372:	4aa7      	ldr	r2, [pc, #668]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004374:	430b      	orrs	r3, r1
 8004376:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004384:	653b      	str	r3, [r7, #80]	@ 0x50
 8004386:	2300      	movs	r3, #0
 8004388:	657b      	str	r3, [r7, #84]	@ 0x54
 800438a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800438e:	460b      	mov	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004394:	4b9e      	ldr	r3, [pc, #632]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004398:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	4a9b      	ldr	r2, [pc, #620]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80043a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80043b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b6:	2300      	movs	r3, #0
 80043b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043be:	460b      	mov	r3, r1
 80043c0:	4313      	orrs	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80043c4:	4b92      	ldr	r3, [pc, #584]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80043cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d2:	4a8f      	ldr	r2, [pc, #572]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043e6:	2300      	movs	r3, #0
 80043e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043ee:	460b      	mov	r3, r1
 80043f0:	4313      	orrs	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043f4:	4b86      	ldr	r3, [pc, #536]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	4a85      	ldr	r2, [pc, #532]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043fe:	6113      	str	r3, [r2, #16]
 8004400:	4b83      	ldr	r3, [pc, #524]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004402:	6919      	ldr	r1, [r3, #16]
 8004404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004408:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800440c:	4a80      	ldr	r2, [pc, #512]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800440e:	430b      	orrs	r3, r1
 8004410:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800441e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004420:	2300      	movs	r3, #0
 8004422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004424:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004428:	460b      	mov	r3, r1
 800442a:	4313      	orrs	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800442e:	4b78      	ldr	r3, [pc, #480]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004432:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800443a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443c:	4a74      	ldr	r2, [pc, #464]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800443e:	430b      	orrs	r3, r1
 8004440:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800444e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004450:	2300      	movs	r3, #0
 8004452:	637b      	str	r3, [r7, #52]	@ 0x34
 8004454:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800445e:	4b6c      	ldr	r3, [pc, #432]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004462:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446e:	4a68      	ldr	r2, [pc, #416]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004470:	430b      	orrs	r3, r1
 8004472:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	2100      	movs	r1, #0
 800447e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004486:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	d011      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004494:	3308      	adds	r3, #8
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f9a3 	bl	80057e4 <RCCEx_PLL2_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	2100      	movs	r1, #0
 80044be:	6239      	str	r1, [r7, #32]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044ca:	460b      	mov	r3, r1
 80044cc:	4313      	orrs	r3, r2
 80044ce:	d011      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d4:	3308      	adds	r3, #8
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f983 	bl	80057e4 <RCCEx_PLL2_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	2100      	movs	r1, #0
 80044fe:	61b9      	str	r1, [r7, #24]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800450a:	460b      	mov	r3, r1
 800450c:	4313      	orrs	r3, r2
 800450e:	d011      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004514:	3308      	adds	r3, #8
 8004516:	2102      	movs	r1, #2
 8004518:	4618      	mov	r0, r3
 800451a:	f001 f963 	bl	80057e4 <RCCEx_PLL2_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004524:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004530:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	2100      	movs	r1, #0
 800453e:	6139      	str	r1, [r7, #16]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800454a:	460b      	mov	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	d011      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004554:	3328      	adds	r3, #40	@ 0x28
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f001 f9f5 	bl	8005948 <RCCEx_PLL3_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004564:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004570:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	2100      	movs	r1, #0
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800458a:	460b      	mov	r3, r1
 800458c:	4313      	orrs	r3, r2
 800458e:	d011      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004594:	3328      	adds	r3, #40	@ 0x28
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f001 f9d5 	bl	8005948 <RCCEx_PLL3_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	2100      	movs	r1, #0
 80045be:	6039      	str	r1, [r7, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d011      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d4:	3328      	adds	r3, #40	@ 0x28
 80045d6:	2102      	movs	r1, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 f9b5 	bl	8005948 <RCCEx_PLL3_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80045f4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
}
 8004602:	4618      	mov	r0, r3
 8004604:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460e:	bf00      	nop
 8004610:	58024400 	.word	0x58024400

08004614 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b090      	sub	sp, #64	@ 0x40
 8004618:	af00      	add	r7, sp, #0
 800461a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800461e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004622:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004626:	430b      	orrs	r3, r1
 8004628:	f040 8094 	bne.w	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800462c:	4b97      	ldr	r3, [pc, #604]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800462e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	2b04      	cmp	r3, #4
 800463a:	f200 8087 	bhi.w	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800463e:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004659 	.word	0x08004659
 8004648:	08004681 	.word	0x08004681
 800464c:	080046a9 	.word	0x080046a9
 8004650:	08004745 	.word	0x08004745
 8004654:	080046d1 	.word	0x080046d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004658:	4b8c      	ldr	r3, [pc, #560]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004664:	d108      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800466a:	4618      	mov	r0, r3
 800466c:	f000 ff68 	bl	8005540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004674:	f000 bc97 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800467c:	f000 bc93 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004680:	4b82      	ldr	r3, [pc, #520]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800468c:	d108      	bne.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800468e:	f107 0318 	add.w	r3, r7, #24
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fcac 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800469c:	f000 bc83 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046a4:	f000 bc7f 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046a8:	4b78      	ldr	r3, [pc, #480]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b4:	d108      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046b6:	f107 030c 	add.w	r3, r7, #12
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fdec 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046c4:	f000 bc6f 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046cc:	f000 bc6b 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80046d0:	4b6e      	ldr	r3, [pc, #440]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046da:	4b6c      	ldr	r3, [pc, #432]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d10c      	bne.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80046e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046ec:	4b67      	ldr	r3, [pc, #412]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	4a66      	ldr	r2, [pc, #408]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
 80046fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046fe:	e01f      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004700:	4b62      	ldr	r3, [pc, #392]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470c:	d106      	bne.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800470e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004714:	d102      	bne.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004716:	4b5f      	ldr	r3, [pc, #380]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471a:	e011      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800471c:	4b5b      	ldr	r3, [pc, #364]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004728:	d106      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800472a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800472c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004730:	d102      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004732:	4b59      	ldr	r3, [pc, #356]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800473c:	f000 bc33 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004740:	f000 bc31 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004744:	4b55      	ldr	r3, [pc, #340]	@ (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004748:	f000 bc2d 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004750:	f000 bc29 	b.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004758:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800475c:	430b      	orrs	r3, r1
 800475e:	f040 809f 	bne.w	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8004762:	4b4a      	ldr	r3, [pc, #296]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004766:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800476a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004772:	d04d      	beq.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800477a:	f200 8084 	bhi.w	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	2bc0      	cmp	r3, #192	@ 0xc0
 8004782:	d07d      	beq.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	2bc0      	cmp	r3, #192	@ 0xc0
 8004788:	d87d      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	2b80      	cmp	r3, #128	@ 0x80
 800478e:	d02d      	beq.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004792:	2b80      	cmp	r3, #128	@ 0x80
 8004794:	d877      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	2b40      	cmp	r3, #64	@ 0x40
 80047a0:	d012      	beq.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80047a2:	e070      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047a4:	4b39      	ldr	r3, [pc, #228]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047b0:	d107      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fec2 	bl	8005540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047c0:	e3f1      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047c6:	e3ee      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047c8:	4b30      	ldr	r3, [pc, #192]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047d4:	d107      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047d6:	f107 0318 	add.w	r3, r7, #24
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fc08 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047e4:	e3df      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047ea:	e3dc      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047ec:	4b27      	ldr	r3, [pc, #156]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f8:	d107      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047fa:	f107 030c 	add.w	r3, r7, #12
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fd4a 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004808:	e3cd      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800480e:	e3ca      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004810:	4b1e      	ldr	r3, [pc, #120]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004814:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004818:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800481a:	4b1c      	ldr	r3, [pc, #112]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d10c      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	08db      	lsrs	r3, r3, #3
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	4a16      	ldr	r2, [pc, #88]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
 800483c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800483e:	e01e      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004840:	4b12      	ldr	r3, [pc, #72]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800484c:	d106      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800484e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004854:	d102      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004856:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800485a:	e010      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004868:	d106      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800486a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004870:	d102      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004872:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004876:	e002      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800487c:	e393      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800487e:	e392      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004880:	4b06      	ldr	r3, [pc, #24]	@ (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004884:	e38f      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800488a:	e38c      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800488c:	58024400 	.word	0x58024400
 8004890:	03d09000 	.word	0x03d09000
 8004894:	003d0900 	.word	0x003d0900
 8004898:	016e3600 	.word	0x016e3600
 800489c:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80048a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80048a8:	430b      	orrs	r3, r1
 80048aa:	f040 809c 	bne.w	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80048ae:	4b9e      	ldr	r3, [pc, #632]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80048b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80048b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80048b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048be:	d054      	beq.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c6:	f200 808b 	bhi.w	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80048ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048d0:	f000 8083 	beq.w	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048da:	f200 8081 	bhi.w	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e4:	d02f      	beq.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ec:	d878      	bhi.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048fa:	d012      	beq.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80048fc:	e070      	b.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048fe:	4b8a      	ldr	r3, [pc, #552]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800490a:	d107      	bne.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800490c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fe15 	bl	8005540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800491a:	e344      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004920:	e341      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004922:	4b81      	ldr	r3, [pc, #516]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800492a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800492e:	d107      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004930:	f107 0318 	add.w	r3, r7, #24
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fb5b 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800493e:	e332      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004944:	e32f      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004946:	4b78      	ldr	r3, [pc, #480]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800494e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004952:	d107      	bne.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004954:	f107 030c 	add.w	r3, r7, #12
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fc9d 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004962:	e320      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004968:	e31d      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800496a:	4b6f      	ldr	r3, [pc, #444]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004972:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004974:	4b6c      	ldr	r3, [pc, #432]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b04      	cmp	r3, #4
 800497e:	d10c      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004986:	4b68      	ldr	r3, [pc, #416]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	08db      	lsrs	r3, r3, #3
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	4a66      	ldr	r2, [pc, #408]	@ (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004998:	e01e      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800499a:	4b63      	ldr	r3, [pc, #396]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a6:	d106      	bne.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80049a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ae:	d102      	bne.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80049b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b4:	e010      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c2:	d106      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80049c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049ca:	d102      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80049cc:	4b59      	ldr	r3, [pc, #356]	@ (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80049ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80049d6:	e2e6      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80049d8:	e2e5      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80049da:	4b57      	ldr	r3, [pc, #348]	@ (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80049dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049de:	e2e2      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049e4:	e2df      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80049e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ea:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80049ee:	430b      	orrs	r3, r1
 80049f0:	f040 80a7 	bne.w	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80049f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80049f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80049fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a04:	d055      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a0c:	f200 8096 	bhi.w	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a16:	f000 8084 	beq.w	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a20:	f200 808c 	bhi.w	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2a:	d030      	beq.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a32:	f200 8083 	bhi.w	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a42:	d012      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8004a44:	e07a      	b.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a46:	4b38      	ldr	r3, [pc, #224]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a52:	d107      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fd71 	bl	8005540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a62:	e2a0      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a68:	e29d      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a76:	d107      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a78:	f107 0318 	add.w	r3, r7, #24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fab7 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a86:	e28e      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a8c:	e28b      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a8e:	4b26      	ldr	r3, [pc, #152]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a9a:	d107      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fbf9 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004aaa:	e27c      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ab0:	e279      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004aba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004abc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d10c      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8004ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ace:	4b16      	ldr	r3, [pc, #88]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	08db      	lsrs	r3, r3, #3
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	4a14      	ldr	r2, [pc, #80]	@ (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae0:	e01e      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ae2:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aee:	d106      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004af6:	d102      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004af8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004afc:	e010      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b12:	d102      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004b14:	4b07      	ldr	r3, [pc, #28]	@ (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b18:	e002      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004b1e:	e242      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004b20:	e241      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b22:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b26:	e23e      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	03d09000 	.word	0x03d09000
 8004b30:	003d0900 	.word	0x003d0900
 8004b34:	016e3600 	.word	0x016e3600
 8004b38:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b40:	e231      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b46:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	f040 8085 	bne.w	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004b50:	4b9c      	ldr	r3, [pc, #624]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b54:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004b58:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b60:	d06b      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b68:	d874      	bhi.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b70:	d056      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b78:	d86c      	bhi.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b80:	d03b      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b88:	d864      	bhi.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b90:	d021      	beq.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b98:	d85c      	bhi.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba6:	d004      	beq.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8004ba8:	e054      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004baa:	f7fe fb5f 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8004bae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bb0:	e1f9      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bb2:	4b84      	ldr	r3, [pc, #528]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bc0:	f107 0318 	add.w	r3, r7, #24
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fa13 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bce:	e1ea      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bd4:	e1e7      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004be4:	f107 030c 	add.w	r3, r7, #12
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fb55 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bf2:	e1d8      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bf8:	e1d5      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bfa:	4b72      	ldr	r3, [pc, #456]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d109      	bne.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c06:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	08db      	lsrs	r3, r3, #3
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004c12:	fa22 f303 	lsr.w	r3, r2, r3
 8004c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c18:	e1c5      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c1e:	e1c2      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004c20:	4b68      	ldr	r3, [pc, #416]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2c:	d102      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8004c2e:	4b67      	ldr	r3, [pc, #412]	@ (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c32:	e1b8      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c38:	e1b5      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c3a:	4b62      	ldr	r3, [pc, #392]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c46:	d102      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8004c48:	4b61      	ldr	r3, [pc, #388]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8004c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c4c:	e1ab      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c52:	e1a8      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c58:	e1a5      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c5e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8004c62:	430b      	orrs	r3, r1
 8004c64:	d173      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004c66:	4b57      	ldr	r3, [pc, #348]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c6e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c76:	d02f      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c7e:	d863      	bhi.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8c:	d012      	beq.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8004c8e:	e05b      	b.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c90:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c9c:	d107      	bne.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c9e:	f107 0318 	add.w	r3, r7, #24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f9a4 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cac:	e17b      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cb2:	e178      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cb4:	4b43      	ldr	r3, [pc, #268]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cc2:	f107 030c 	add.w	r3, r7, #12
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fae6 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cd0:	e169      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cd6:	e166      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ce2:	4b38      	ldr	r3, [pc, #224]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cf4:	4b33      	ldr	r3, [pc, #204]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	08db      	lsrs	r3, r3, #3
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	4a32      	ldr	r2, [pc, #200]	@ (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
 8004d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d06:	e01e      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d08:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d14:	d106      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8004d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d22:	e010      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d24:	4b27      	ldr	r3, [pc, #156]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d30:	d106      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d38:	d102      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004d3a:	4b25      	ldr	r3, [pc, #148]	@ (8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8004d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d3e:	e002      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004d44:	e12f      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004d46:	e12e      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d4c:	e12b      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d52:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004d56:	430b      	orrs	r3, r1
 8004d58:	d13c      	bne.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d62:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d70:	d012      	beq.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8004d72:	e023      	b.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d74:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d80:	d107      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fbda 	bl	8005540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d90:	e109      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d96:	e106      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004da4:	d107      	bne.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004da6:	f107 0318 	add.w	r3, r7, #24
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f920 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004db4:	e0f7      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dba:	e0f4      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dc0:	e0f1      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	03d09000 	.word	0x03d09000
 8004dcc:	003d0900 	.word	0x003d0900
 8004dd0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	f040 8091 	bne.w	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004de2:	4b73      	ldr	r3, [pc, #460]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004dea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dee:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004df2:	f000 8081 	beq.w	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004dfc:	d87f      	bhi.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e04:	d06b      	beq.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0c:	d877      	bhi.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e14:	d056      	beq.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1c:	d86f      	bhi.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e24:	d03b      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e2c:	d867      	bhi.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e34:	d021      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e3c:	d85f      	bhi.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d004      	beq.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e4a:	d004      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004e4c:	e057      	b.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e4e:	f000 f8b9 	bl	8004fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e54:	e0a7      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e56:	4b56      	ldr	r3, [pc, #344]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e62:	d107      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e64:	f107 0318 	add.w	r3, r7, #24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 f8c1 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e72:	e098      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e78:	e095      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e86:	d107      	bne.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e88:	f107 030c 	add.w	r3, r7, #12
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fa03 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e96:	e086      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e9c:	e083      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e9e:	4b44      	ldr	r3, [pc, #272]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eaa:	4b41      	ldr	r3, [pc, #260]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	08db      	lsrs	r3, r3, #3
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	4a3f      	ldr	r2, [pc, #252]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ebc:	e073      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec2:	e070      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed0:	d102      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8004ed2:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8004ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ed6:	e066      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004edc:	e063      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ede:	4b34      	ldr	r3, [pc, #208]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eea:	d102      	bne.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8004eec:	4b33      	ldr	r3, [pc, #204]	@ (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ef0:	e059      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ef6:	e056      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ef8:	4b31      	ldr	r3, [pc, #196]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8004efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004efc:	e053      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f02:	e050      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f08:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	d148      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004f10:	4b27      	ldr	r3, [pc, #156]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f20:	d02a      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8004f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f28:	d838      	bhi.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8004f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f36:	d00d      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8004f38:	e030      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f46:	d102      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8004f48:	4b1c      	ldr	r3, [pc, #112]	@ (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f4c:	e02b      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f52:	e028      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f54:	4b16      	ldr	r3, [pc, #88]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f60:	d107      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 faea 	bl	8005540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f70:	e019      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f76:	e016      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f78:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f84:	d107      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f86:	f107 0318 	add.w	r3, r7, #24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f830 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f94:	e007      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f9a:	e004      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fa0:	e001      	b.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3740      	adds	r7, #64	@ 0x40
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	03d09000 	.word	0x03d09000
 8004fb8:	003d0900 	.word	0x003d0900
 8004fbc:	016e3600 	.word	0x016e3600
 8004fc0:	00bb8000 	.word	0x00bb8000

08004fc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004fc8:	f7fe f920 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4904      	ldr	r1, [pc, #16]	@ (8004fec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	080064dc 	.word	0x080064dc

08004ff0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b089      	sub	sp, #36	@ 0x24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ff8:	4ba1      	ldr	r3, [pc, #644]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005002:	4b9f      	ldr	r3, [pc, #636]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	0b1b      	lsrs	r3, r3, #12
 8005008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800500c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800500e:	4b9c      	ldr	r3, [pc, #624]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800501a:	4b99      	ldr	r3, [pc, #612]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8111 	beq.w	8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	f000 8083 	beq.w	800514c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b02      	cmp	r3, #2
 800504a:	f200 80a1 	bhi.w	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d056      	beq.n	8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800505a:	e099      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800505c:	4b88      	ldr	r3, [pc, #544]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d02d      	beq.n	80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005068:	4b85      	ldr	r3, [pc, #532]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	4a84      	ldr	r2, [pc, #528]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b7b      	ldr	r3, [pc, #492]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050c2:	e087      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800528c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005106:	e065      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b59      	ldr	r3, [pc, #356]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514a:	e043      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b48      	ldr	r3, [pc, #288]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518e:	e021      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a2:	4b37      	ldr	r3, [pc, #220]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d8:	0a5b      	lsrs	r3, r3, #9
 80051da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fa:	ee17 2a90 	vmov	r2, s15
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005202:	4b1f      	ldr	r3, [pc, #124]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005214:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005228:	ee17 2a90 	vmov	r2, s15
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005230:	4b13      	ldr	r3, [pc, #76]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524a:	edd7 6a07 	vldr	s13, [r7, #28]
 800524e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005256:	ee17 2a90 	vmov	r2, s15
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800525e:	e008      	b.n	8005272 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	609a      	str	r2, [r3, #8]
}
 8005272:	bf00      	nop
 8005274:	3724      	adds	r7, #36	@ 0x24
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	58024400 	.word	0x58024400
 8005284:	03d09000 	.word	0x03d09000
 8005288:	46000000 	.word	0x46000000
 800528c:	4c742400 	.word	0x4c742400
 8005290:	4a742400 	.word	0x4a742400
 8005294:	4bb71b00 	.word	0x4bb71b00

08005298 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005298:	b480      	push	{r7}
 800529a:	b089      	sub	sp, #36	@ 0x24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052a0:	4ba1      	ldr	r3, [pc, #644]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052aa:	4b9f      	ldr	r3, [pc, #636]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	0d1b      	lsrs	r3, r3, #20
 80052b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052b6:	4b9c      	ldr	r3, [pc, #624]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052c2:	4b99      	ldr	r3, [pc, #612]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	08db      	lsrs	r3, r3, #3
 80052c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8111 	beq.w	8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	f000 8083 	beq.w	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	f200 80a1 	bhi.w	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d056      	beq.n	80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005302:	e099      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005304:	4b88      	ldr	r3, [pc, #544]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d02d      	beq.n	800536c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005310:	4b85      	ldr	r3, [pc, #532]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	4a84      	ldr	r2, [pc, #528]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533a:	4b7b      	ldr	r3, [pc, #492]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534a:	ed97 6a03 	vldr	s12, [r7, #12]
 800534e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800536a:	e087      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800537a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537e:	4b6a      	ldr	r3, [pc, #424]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005392:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ae:	e065      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b59      	ldr	r3, [pc, #356]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f2:	e043      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800553c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b48      	ldr	r3, [pc, #288]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a03 	vldr	s12, [r7, #12]
 800541a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005436:	e021      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544a:	4b37      	ldr	r3, [pc, #220]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545a:	ed97 6a03 	vldr	s12, [r7, #12]
 800545e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800547c:	4b2a      	ldr	r3, [pc, #168]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	0a5b      	lsrs	r3, r3, #9
 8005482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005496:	edd7 6a07 	vldr	s13, [r7, #28]
 800549a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800549e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a2:	ee17 2a90 	vmov	r2, s15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b4:	ee07 3a90 	vmov	s15, r3
 80054b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d0:	ee17 2a90 	vmov	r2, s15
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80054d8:	4b13      	ldr	r3, [pc, #76]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054dc:	0e1b      	lsrs	r3, r3, #24
 80054de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054fe:	ee17 2a90 	vmov	r2, s15
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005506:	e008      	b.n	800551a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	bf00      	nop
 800551c:	3724      	adds	r7, #36	@ 0x24
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	58024400 	.word	0x58024400
 800552c:	03d09000 	.word	0x03d09000
 8005530:	46000000 	.word	0x46000000
 8005534:	4c742400 	.word	0x4c742400
 8005538:	4a742400 	.word	0x4a742400
 800553c:	4bb71b00 	.word	0x4bb71b00

08005540 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	@ 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005548:	4ba0      	ldr	r3, [pc, #640]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005552:	4b9e      	ldr	r3, [pc, #632]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	091b      	lsrs	r3, r3, #4
 8005558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800555c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800555e:	4b9b      	ldr	r3, [pc, #620]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005568:	4b98      	ldr	r3, [pc, #608]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800556a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556c:	08db      	lsrs	r3, r3, #3
 800556e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005580:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 8111 	beq.w	80057ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b02      	cmp	r3, #2
 8005590:	f000 8083 	beq.w	800569a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b02      	cmp	r3, #2
 8005598:	f200 80a1 	bhi.w	80056de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d056      	beq.n	8005656 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055a8:	e099      	b.n	80056de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055aa:	4b88      	ldr	r3, [pc, #544]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02d      	beq.n	8005612 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055b6:	4b85      	ldr	r3, [pc, #532]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	08db      	lsrs	r3, r3, #3
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	4a83      	ldr	r2, [pc, #524]	@ (80057d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e0:	4b7a      	ldr	r3, [pc, #488]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e8:	ee07 3a90 	vmov	s15, r3
 80055ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005610:	e087      	b.n	8005722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	ee07 3a90 	vmov	s15, r3
 8005618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80057d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005624:	4b69      	ldr	r3, [pc, #420]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005634:	ed97 6a03 	vldr	s12, [r7, #12]
 8005638:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800563c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005654:	e065      	b.n	8005722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005660:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005668:	4b58      	ldr	r3, [pc, #352]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005678:	ed97 6a03 	vldr	s12, [r7, #12]
 800567c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800568c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005698:	e043      	b.n	8005722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	ee07 3a90 	vmov	s15, r3
 80056a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80057e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ac:	4b47      	ldr	r3, [pc, #284]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80056c0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056dc:	e021      	b.n	8005722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80057d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80056ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f0:	4b36      	ldr	r3, [pc, #216]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005700:	ed97 6a03 	vldr	s12, [r7, #12]
 8005704:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80057d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005710:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005720:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005722:	4b2a      	ldr	r3, [pc, #168]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	0a5b      	lsrs	r3, r3, #9
 8005728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800573c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005748:	ee17 2a90 	vmov	r2, s15
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005750:	4b1e      	ldr	r3, [pc, #120]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800576a:	edd7 6a07 	vldr	s13, [r7, #28]
 800576e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005776:	ee17 2a90 	vmov	r2, s15
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800577e:	4b13      	ldr	r3, [pc, #76]	@ (80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	0e1b      	lsrs	r3, r3, #24
 8005784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005794:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005798:	edd7 6a07 	vldr	s13, [r7, #28]
 800579c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a4:	ee17 2a90 	vmov	r2, s15
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057ac:	e008      	b.n	80057c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	bf00      	nop
 80057c2:	3724      	adds	r7, #36	@ 0x24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	58024400 	.word	0x58024400
 80057d0:	03d09000 	.word	0x03d09000
 80057d4:	46000000 	.word	0x46000000
 80057d8:	4c742400 	.word	0x4c742400
 80057dc:	4a742400 	.word	0x4a742400
 80057e0:	4bb71b00 	.word	0x4bb71b00

080057e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057f2:	4b53      	ldr	r3, [pc, #332]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d101      	bne.n	8005802 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e099      	b.n	8005936 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005802:	4b4f      	ldr	r3, [pc, #316]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a4e      	ldr	r2, [pc, #312]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005808:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800580c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580e:	f7fb fe03 	bl	8001418 <HAL_GetTick>
 8005812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005814:	e008      	b.n	8005828 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005816:	f7fb fdff 	bl	8001418 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e086      	b.n	8005936 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005828:	4b45      	ldr	r3, [pc, #276]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f0      	bne.n	8005816 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005834:	4b42      	ldr	r3, [pc, #264]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005838:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	493f      	ldr	r1, [pc, #252]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	628b      	str	r3, [r1, #40]	@ 0x28
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	3b01      	subs	r3, #1
 800584e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	3b01      	subs	r3, #1
 8005858:	025b      	lsls	r3, r3, #9
 800585a:	b29b      	uxth	r3, r3
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	3b01      	subs	r3, #1
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	3b01      	subs	r3, #1
 8005872:	061b      	lsls	r3, r3, #24
 8005874:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005878:	4931      	ldr	r1, [pc, #196]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 800587a:	4313      	orrs	r3, r2
 800587c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800587e:	4b30      	ldr	r3, [pc, #192]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005882:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	492d      	ldr	r1, [pc, #180]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005890:	4b2b      	ldr	r3, [pc, #172]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005894:	f023 0220 	bic.w	r2, r3, #32
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	4928      	ldr	r1, [pc, #160]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058a2:	4b27      	ldr	r3, [pc, #156]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a6:	4a26      	ldr	r2, [pc, #152]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058a8:	f023 0310 	bic.w	r3, r3, #16
 80058ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058ae:	4b24      	ldr	r3, [pc, #144]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058b2:	4b24      	ldr	r3, [pc, #144]	@ (8005944 <RCCEx_PLL2_Config+0x160>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	69d2      	ldr	r2, [r2, #28]
 80058ba:	00d2      	lsls	r2, r2, #3
 80058bc:	4920      	ldr	r1, [pc, #128]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	f043 0310 	orr.w	r3, r3, #16
 80058cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	4a19      	ldr	r2, [pc, #100]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058e0:	e00f      	b.n	8005902 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d106      	bne.n	80058f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058e8:	4b15      	ldr	r3, [pc, #84]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	4a14      	ldr	r2, [pc, #80]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058f4:	e005      	b.n	8005902 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058f6:	4b12      	ldr	r3, [pc, #72]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fa:	4a11      	ldr	r2, [pc, #68]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005900:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005902:	4b0f      	ldr	r3, [pc, #60]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a0e      	ldr	r2, [pc, #56]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 8005908:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800590c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590e:	f7fb fd83 	bl	8001418 <HAL_GetTick>
 8005912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005914:	e008      	b.n	8005928 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005916:	f7fb fd7f 	bl	8001418 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005928:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <RCCEx_PLL2_Config+0x15c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	58024400 	.word	0x58024400
 8005944:	ffff0007 	.word	0xffff0007

08005948 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005956:	4b53      	ldr	r3, [pc, #332]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d101      	bne.n	8005966 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e099      	b.n	8005a9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005966:	4b4f      	ldr	r3, [pc, #316]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a4e      	ldr	r2, [pc, #312]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 800596c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005972:	f7fb fd51 	bl	8001418 <HAL_GetTick>
 8005976:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005978:	e008      	b.n	800598c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800597a:	f7fb fd4d 	bl	8001418 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e086      	b.n	8005a9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800598c:	4b45      	ldr	r3, [pc, #276]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005998:	4b42      	ldr	r3, [pc, #264]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	051b      	lsls	r3, r3, #20
 80059a6:	493f      	ldr	r1, [pc, #252]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	025b      	lsls	r3, r3, #9
 80059be:	b29b      	uxth	r3, r3
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	061b      	lsls	r3, r3, #24
 80059d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059dc:	4931      	ldr	r1, [pc, #196]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059e2:	4b30      	ldr	r3, [pc, #192]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	492d      	ldr	r1, [pc, #180]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059f4:	4b2b      	ldr	r3, [pc, #172]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	4928      	ldr	r1, [pc, #160]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a06:	4b27      	ldr	r3, [pc, #156]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	4a26      	ldr	r2, [pc, #152]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a12:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a16:	4b24      	ldr	r3, [pc, #144]	@ (8005aa8 <RCCEx_PLL3_Config+0x160>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	69d2      	ldr	r2, [r2, #28]
 8005a1e:	00d2      	lsls	r2, r2, #3
 8005a20:	4920      	ldr	r1, [pc, #128]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a26:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a38:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3c:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a44:	e00f      	b.n	8005a66 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d106      	bne.n	8005a5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a4c:	4b15      	ldr	r3, [pc, #84]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a50:	4a14      	ldr	r2, [pc, #80]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a58:	e005      	b.n	8005a66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a5a:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5e:	4a11      	ldr	r2, [pc, #68]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a66:	4b0f      	ldr	r3, [pc, #60]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a72:	f7fb fcd1 	bl	8001418 <HAL_GetTick>
 8005a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a7a:	f7fb fccd 	bl	8001418 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e006      	b.n	8005a9a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a8c:	4b05      	ldr	r3, [pc, #20]	@ (8005aa4 <RCCEx_PLL3_Config+0x15c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	ffff0007 	.word	0xffff0007

08005aac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e02b      	b.n	8005b18 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fa fd95 	bl	8000604 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4619      	mov	r1, r3
 8005aec:	4610      	mov	r0, r2
 8005aee:	f000 f8ef 	bl	8005cd0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	f000 f943 	bl	8005d88 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005b02:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <HAL_SDRAM_Init+0x74>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a06      	ldr	r2, [pc, #24]	@ (8005b20 <HAL_SDRAM_Init+0x74>)
 8005b08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b0c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	52004000 	.word	0x52004000

08005b24 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e05e      	b.n	8005bf4 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fb f9e4 	bl	8000f18 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0203 	bic.w	r2, r2, #3
 8005b66:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4b22      	ldr	r3, [pc, #136]	@ (8005bfc <HAL_SPDIFRX_Init+0xd8>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8005b80:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8005b86:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8005b8c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8005b92:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8005b98:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8005b9e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8005ba4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8005baa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8005bb0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d103      	bne.n	8005bca <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d103      	bne.n	8005bdc <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bda:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	ffc88407 	.word	0xffc88407

08005c00 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, FMC_NAND_InitTypeDef *Init)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b10      	ldr	r3, [pc, #64]	@ (8005c50 <FMC_NAND_Init+0x50>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	6851      	ldr	r1, [r2, #4]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	6892      	ldr	r2, [r2, #8]
 8005c1a:	4311      	orrs	r1, r2
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	68d2      	ldr	r2, [r2, #12]
 8005c20:	4311      	orrs	r1, r2
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	6912      	ldr	r2, [r2, #16]
 8005c26:	4311      	orrs	r1, r2
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	6952      	ldr	r2, [r2, #20]
 8005c2c:	0252      	lsls	r2, r2, #9
 8005c2e:	4311      	orrs	r1, r2
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	6992      	ldr	r2, [r2, #24]
 8005c34:	0352      	lsls	r2, r2, #13
 8005c36:	430a      	orrs	r2, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f043 0208 	orr.w	r2, r3, #8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	fff00189 	.word	0xfff00189

08005c54 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PMEM, PMEM_CLEAR_MASK, (Timing->SetupTime                                 |
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	041b      	lsls	r3, r3, #16
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	061b      	lsls	r3, r3, #24
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	609a      	str	r2, [r3, #8]
                                             ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
                                             ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
                                             ((Timing->HiZSetupTime)  << FMC_PMEM_MEMHIZ_Pos)));

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PATT, PATT_CLEAR_MASK, (Timing->SetupTime                                 |
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	431a      	orrs	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	061b      	lsls	r3, r3, #24
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	60da      	str	r2, [r3, #12]
                                             ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
                                             ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
                                             ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos)));

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d121      	bne.n	8005d26 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b27      	ldr	r3, [pc, #156]	@ (8005d84 <FMC_SDRAM_Init+0xb4>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	6851      	ldr	r1, [r2, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	6892      	ldr	r2, [r2, #8]
 8005cf2:	4311      	orrs	r1, r2
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	68d2      	ldr	r2, [r2, #12]
 8005cf8:	4311      	orrs	r1, r2
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	6912      	ldr	r2, [r2, #16]
 8005cfe:	4311      	orrs	r1, r2
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	6952      	ldr	r2, [r2, #20]
 8005d04:	4311      	orrs	r1, r2
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	6992      	ldr	r2, [r2, #24]
 8005d0a:	4311      	orrs	r1, r2
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	69d2      	ldr	r2, [r2, #28]
 8005d10:	4311      	orrs	r1, r2
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	6a12      	ldr	r2, [r2, #32]
 8005d16:	4311      	orrs	r1, r2
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e026      	b.n	8005d74 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	69d9      	ldr	r1, [r3, #28]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	4319      	orrs	r1, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	4b0e      	ldr	r3, [pc, #56]	@ (8005d84 <FMC_SDRAM_Init+0xb4>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	6851      	ldr	r1, [r2, #4]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	6892      	ldr	r2, [r2, #8]
 8005d54:	4311      	orrs	r1, r2
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	68d2      	ldr	r2, [r2, #12]
 8005d5a:	4311      	orrs	r1, r2
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	6912      	ldr	r2, [r2, #16]
 8005d60:	4311      	orrs	r1, r2
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	6952      	ldr	r2, [r2, #20]
 8005d66:	4311      	orrs	r1, r2
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	6992      	ldr	r2, [r2, #24]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	ffff8000 	.word	0xffff8000

08005d88 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d128      	bne.n	8005dec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	1e59      	subs	r1, r3, #1
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	4319      	orrs	r1, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	4319      	orrs	r1, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	031b      	lsls	r3, r3, #12
 8005dc4:	4319      	orrs	r1, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	4319      	orrs	r1, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	051b      	lsls	r3, r3, #20
 8005dd8:	4319      	orrs	r1, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	061b      	lsls	r3, r3, #24
 8005de2:	430b      	orrs	r3, r1
 8005de4:	431a      	orrs	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	609a      	str	r2, [r3, #8]
 8005dea:	e02d      	b.n	8005e48 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	4b19      	ldr	r3, [pc, #100]	@ (8005e58 <FMC_SDRAM_Timing_Init+0xd0>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	68d2      	ldr	r2, [r2, #12]
 8005df8:	3a01      	subs	r2, #1
 8005dfa:	0311      	lsls	r1, r2, #12
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	6952      	ldr	r2, [r2, #20]
 8005e00:	3a01      	subs	r2, #1
 8005e02:	0512      	lsls	r2, r2, #20
 8005e04:	430a      	orrs	r2, r1
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	1e59      	subs	r1, r3, #1
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	4319      	orrs	r1, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	4319      	orrs	r1, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	4319      	orrs	r1, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	061b      	lsls	r3, r3, #24
 8005e40:	430b      	orrs	r3, r1
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	ff0f0fff 	.word	0xff0f0fff

08005e5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	f107 001c 	add.w	r0, r7, #28
 8005e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d121      	bne.n	8005eba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	4b2c      	ldr	r3, [pc, #176]	@ (8005f38 <USB_CoreInit+0xdc>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d105      	bne.n	8005eae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 faaa 	bl	8006408 <USB_CoreReset>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	73fb      	strb	r3, [r7, #15]
 8005eb8:	e01b      	b.n	8005ef2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa9e 	bl	8006408 <USB_CoreReset>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ed0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ee4:	e005      	b.n	8005ef2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ef2:	7fbb      	ldrb	r3, [r7, #30]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d116      	bne.n	8005f26 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <USB_CoreInit+0xe0>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f043 0206 	orr.w	r2, r3, #6
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f32:	b004      	add	sp, #16
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	ffbdffbf 	.word	0xffbdffbf
 8005f3c:	03ee0000 	.word	0x03ee0000

08005f40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f023 0201 	bic.w	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d115      	bne.n	8005fb0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f90:	200a      	movs	r0, #10
 8005f92:	f7fb fa4d 	bl	8001430 <HAL_Delay>
      ms += 10U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	330a      	adds	r3, #10
 8005f9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa25 	bl	80063ec <USB_GetMode>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d01e      	beq.n	8005fe6 <USB_SetCurrentMode+0x84>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fac:	d9f0      	bls.n	8005f90 <USB_SetCurrentMode+0x2e>
 8005fae:	e01a      	b.n	8005fe6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d115      	bne.n	8005fe2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fc2:	200a      	movs	r0, #10
 8005fc4:	f7fb fa34 	bl	8001430 <HAL_Delay>
      ms += 10U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	330a      	adds	r3, #10
 8005fcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa0c 	bl	80063ec <USB_GetMode>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <USB_SetCurrentMode+0x84>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fde:	d9f0      	bls.n	8005fc2 <USB_SetCurrentMode+0x60>
 8005fe0:	e001      	b.n	8005fe6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e005      	b.n	8005ff2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005fea:	d101      	bne.n	8005ff0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800600a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	e009      	b.n	8006030 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3340      	adds	r3, #64	@ 0x40
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	2200      	movs	r2, #0
 8006028:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	3301      	adds	r3, #1
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b0e      	cmp	r3, #14
 8006034:	d9f2      	bls.n	800601c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006036:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800603a:	2b00      	cmp	r3, #0
 800603c:	d11c      	bne.n	8006078 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800604c:	f043 0302 	orr.w	r3, r3, #2
 8006050:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e005      	b.n	8006084 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800608a:	461a      	mov	r2, r3
 800608c:	2300      	movs	r3, #0
 800608e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006090:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006094:	2b01      	cmp	r3, #1
 8006096:	d10d      	bne.n	80060b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060a0:	2100      	movs	r1, #0
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f968 	bl	8006378 <USB_SetDevSpeed>
 80060a8:	e008      	b.n	80060bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060aa:	2101      	movs	r1, #1
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f963 	bl	8006378 <USB_SetDevSpeed>
 80060b2:	e003      	b.n	80060bc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060b4:	2103      	movs	r1, #3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f95e 	bl	8006378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060bc:	2110      	movs	r1, #16
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f8fa 	bl	80062b8 <USB_FlushTxFifo>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f924 	bl	800631c <USB_FlushRxFifo>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e4:	461a      	mov	r2, r3
 80060e6:	2300      	movs	r3, #0
 80060e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	461a      	mov	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060fc:	461a      	mov	r2, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e043      	b.n	8006190 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800611a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800611e:	d118      	bne.n	8006152 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006132:	461a      	mov	r2, r3
 8006134:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e013      	b.n	8006164 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006148:	461a      	mov	r2, r3
 800614a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	e008      	b.n	8006164 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615e:	461a      	mov	r2, r3
 8006160:	2300      	movs	r3, #0
 8006162:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006170:	461a      	mov	r2, r3
 8006172:	2300      	movs	r3, #0
 8006174:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006182:	461a      	mov	r2, r3
 8006184:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006188:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	3301      	adds	r3, #1
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006194:	461a      	mov	r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4293      	cmp	r3, r2
 800619a:	d3b5      	bcc.n	8006108 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	e043      	b.n	800622a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061b8:	d118      	bne.n	80061ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061cc:	461a      	mov	r2, r3
 80061ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e013      	b.n	80061fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e2:	461a      	mov	r2, r3
 80061e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	e008      	b.n	80061fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f8:	461a      	mov	r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620a:	461a      	mov	r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621c:	461a      	mov	r2, r3
 800621e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006222:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	3301      	adds	r3, #1
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800622e:	461a      	mov	r2, r3
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4293      	cmp	r3, r2
 8006234:	d3b5      	bcc.n	80061a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006248:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006256:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006258:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f043 0210 	orr.w	r2, r3, #16
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699a      	ldr	r2, [r3, #24]
 8006270:	4b0f      	ldr	r3, [pc, #60]	@ (80062b0 <USB_DevInit+0x2b4>)
 8006272:	4313      	orrs	r3, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006278:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	f043 0208 	orr.w	r2, r3, #8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800628c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006290:	2b01      	cmp	r3, #1
 8006292:	d105      	bne.n	80062a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <USB_DevInit+0x2b8>)
 800629a:	4313      	orrs	r3, r2
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ac:	b004      	add	sp, #16
 80062ae:	4770      	bx	lr
 80062b0:	803c3800 	.word	0x803c3800
 80062b4:	40000004 	.word	0x40000004

080062b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062d2:	d901      	bls.n	80062d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e01b      	b.n	8006310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	daf2      	bge.n	80062c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	019b      	lsls	r3, r3, #6
 80062e8:	f043 0220 	orr.w	r2, r3, #32
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062fc:	d901      	bls.n	8006302 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e006      	b.n	8006310 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d0f0      	beq.n	80062f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006334:	d901      	bls.n	800633a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e018      	b.n	800636c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	daf2      	bge.n	8006328 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2210      	movs	r2, #16
 800634a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3301      	adds	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006358:	d901      	bls.n	800635e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e006      	b.n	800636c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b10      	cmp	r3, #16
 8006368:	d0f0      	beq.n	800634c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063c4:	f023 0303 	bic.w	r3, r3, #3
 80063c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0301 	and.w	r3, r3, #1
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006420:	d901      	bls.n	8006426 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e01b      	b.n	800645e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	daf2      	bge.n	8006414 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f043 0201 	orr.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3301      	adds	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800644a:	d901      	bls.n	8006450 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e006      	b.n	800645e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b01      	cmp	r3, #1
 800645a:	d0f0      	beq.n	800643e <USB_CoreReset+0x36>

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <memset>:
 800646a:	4402      	add	r2, r0
 800646c:	4603      	mov	r3, r0
 800646e:	4293      	cmp	r3, r2
 8006470:	d100      	bne.n	8006474 <memset+0xa>
 8006472:	4770      	bx	lr
 8006474:	f803 1b01 	strb.w	r1, [r3], #1
 8006478:	e7f9      	b.n	800646e <memset+0x4>
	...

0800647c <__libc_init_array>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4d0d      	ldr	r5, [pc, #52]	@ (80064b4 <__libc_init_array+0x38>)
 8006480:	4c0d      	ldr	r4, [pc, #52]	@ (80064b8 <__libc_init_array+0x3c>)
 8006482:	1b64      	subs	r4, r4, r5
 8006484:	10a4      	asrs	r4, r4, #2
 8006486:	2600      	movs	r6, #0
 8006488:	42a6      	cmp	r6, r4
 800648a:	d109      	bne.n	80064a0 <__libc_init_array+0x24>
 800648c:	4d0b      	ldr	r5, [pc, #44]	@ (80064bc <__libc_init_array+0x40>)
 800648e:	4c0c      	ldr	r4, [pc, #48]	@ (80064c0 <__libc_init_array+0x44>)
 8006490:	f000 f818 	bl	80064c4 <_init>
 8006494:	1b64      	subs	r4, r4, r5
 8006496:	10a4      	asrs	r4, r4, #2
 8006498:	2600      	movs	r6, #0
 800649a:	42a6      	cmp	r6, r4
 800649c:	d105      	bne.n	80064aa <__libc_init_array+0x2e>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a4:	4798      	blx	r3
 80064a6:	3601      	adds	r6, #1
 80064a8:	e7ee      	b.n	8006488 <__libc_init_array+0xc>
 80064aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ae:	4798      	blx	r3
 80064b0:	3601      	adds	r6, #1
 80064b2:	e7f2      	b.n	800649a <__libc_init_array+0x1e>
 80064b4:	080064ec 	.word	0x080064ec
 80064b8:	080064ec 	.word	0x080064ec
 80064bc:	080064ec 	.word	0x080064ec
 80064c0:	080064f0 	.word	0x080064f0

080064c4 <_init>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr

080064d0 <_fini>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	bf00      	nop
 80064d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d6:	bc08      	pop	{r3}
 80064d8:	469e      	mov	lr, r3
 80064da:	4770      	bx	lr
