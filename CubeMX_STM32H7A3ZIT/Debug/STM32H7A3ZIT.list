
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c388  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800c638  0800c638  0000d638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c748  0800c748  0000d748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c750  0800c750  0000d750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c754  0800c754  0000d754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800c758  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f7c  24000160  0800c8b8  0000e160  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240020dc  0800c8b8  0000f0dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020d0d  00000000  00000000  0000e18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f85  00000000  00000000  0002ee9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001890  00000000  00000000  00033e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001282  00000000  00000000  000356b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035a61  00000000  00000000  00036932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000251c3  00000000  00000000  0006c393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b4a8  00000000  00000000  00091556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc9fe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c50  00000000  00000000  001cca44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001d3694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c620 	.word	0x0800c620

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800c620 	.word	0x0800c620

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <flashBoot>:
#include "sdram_init.h"

FMC_SDRAM_CommandTypeDef command;


void flashBoot(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	*(uint8_t *) (FLASH_COMMON_BANK_ADDR + FLASH_COMMAND_OFFSET) = 0xFF;
 8000394:	f04f 4301 	mov.w	r3, #2164260864	@ 0x81000000
 8000398:	22ff      	movs	r2, #255	@ 0xff
 800039a:	701a      	strb	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
	...

080003a8 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	@ 0x40
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80003ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003bc:	f107 0320 	add.w	r3, r7, #32
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003dc:	4b48      	ldr	r3, [pc, #288]	@ (8000500 <MX_FMC_Init+0x158>)
 80003de:	4a49      	ldr	r2, [pc, #292]	@ (8000504 <MX_FMC_Init+0x15c>)
 80003e0:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003e2:	4b47      	ldr	r3, [pc, #284]	@ (8000500 <MX_FMC_Init+0x158>)
 80003e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003ea:	4b45      	ldr	r3, [pc, #276]	@ (8000500 <MX_FMC_Init+0x158>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003f0:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 80003f6:	4b42      	ldr	r3, [pc, #264]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003fc:	4b40      	ldr	r3, [pc, #256]	@ (8000500 <MX_FMC_Init+0x158>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000402:	4b3f      	ldr	r3, [pc, #252]	@ (8000500 <MX_FMC_Init+0x158>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000408:	4b3d      	ldr	r3, [pc, #244]	@ (8000500 <MX_FMC_Init+0x158>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 800040e:	4b3c      	ldr	r3, [pc, #240]	@ (8000500 <MX_FMC_Init+0x158>)
 8000410:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 8000416:	4b3a      	ldr	r3, [pc, #232]	@ (8000500 <MX_FMC_Init+0x158>)
 8000418:	2240      	movs	r2, #64	@ 0x40
 800041a:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 800041c:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <MX_FMC_Init+0x158>)
 800041e:	2240      	movs	r2, #64	@ 0x40
 8000420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 8000422:	4b37      	ldr	r3, [pc, #220]	@ (8000500 <MX_FMC_Init+0x158>)
 8000424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 0;
 800042a:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <MX_FMC_Init+0x158>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000430:	4b33      	ldr	r3, [pc, #204]	@ (8000500 <MX_FMC_Init+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8000436:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_FMC_Init+0x158>)
 8000438:	2201      	movs	r2, #1
 800043a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 8000446:	23fc      	movs	r3, #252	@ 0xfc
 8000448:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 800044a:	23fc      	movs	r3, #252	@ 0xfc
 800044c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800044e:	23fc      	movs	r3, #252	@ 0xfc
 8000450:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 8000452:	23fc      	movs	r3, #252	@ 0xfc
 8000454:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 8000456:	23fc      	movs	r3, #252	@ 0xfc
 8000458:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 800045a:	23fc      	movs	r3, #252	@ 0xfc
 800045c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800045e:	f107 0220 	add.w	r2, r7, #32
 8000462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000466:	4619      	mov	r1, r3
 8000468:	4825      	ldr	r0, [pc, #148]	@ (8000500 <MX_FMC_Init+0x158>)
 800046a:	f001 ff75 	bl	8002358 <HAL_NAND_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 8000474:	f000 fe1c 	bl	80010b0 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000478:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <MX_FMC_Init+0x160>)
 800047a:	4a24      	ldr	r2, [pc, #144]	@ (800050c <MX_FMC_Init+0x164>)
 800047c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <MX_FMC_Init+0x160>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000484:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <MX_FMC_Init+0x160>)
 8000486:	2201      	movs	r2, #1
 8000488:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800048a:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <MX_FMC_Init+0x160>)
 800048c:	2204      	movs	r2, #4
 800048e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000490:	4b1d      	ldr	r3, [pc, #116]	@ (8000508 <MX_FMC_Init+0x160>)
 8000492:	2210      	movs	r2, #16
 8000494:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MX_FMC_Init+0x160>)
 8000498:	2240      	movs	r2, #64	@ 0x40
 800049a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_FMC_Init+0x160>)
 800049e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80004a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_FMC_Init+0x160>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80004b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80004b2:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_FMC_Init+0x160>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004c2:	2309      	movs	r3, #9
 80004c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004c6:	2306      	movs	r3, #6
 80004c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004ca:	2309      	movs	r3, #9
 80004cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004ce:	2303      	movs	r3, #3
 80004d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004d2:	2303      	movs	r3, #3
 80004d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	480a      	ldr	r0, [pc, #40]	@ (8000508 <MX_FMC_Init+0x160>)
 80004e0:	f006 fe20 	bl	8007124 <HAL_SDRAM_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80004ea:	f000 fde1 	bl	80010b0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80004ee:	4908      	ldr	r1, [pc, #32]	@ (8000510 <MX_FMC_Init+0x168>)
 80004f0:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_FMC_Init+0x160>)
 80004f2:	f000 fde3 	bl	80010bc <SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	@ 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2400018c 	.word	0x2400018c
 8000504:	52004080 	.word	0x52004080
 8000508:	240001cc 	.word	0x240001cc
 800050c:	52004140 	.word	0x52004140
 8000510:	2400017c 	.word	0x2400017c

08000514 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0b8      	sub	sp, #224	@ 0xe0
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800052a:	4b5c      	ldr	r3, [pc, #368]	@ (800069c <HAL_FMC_MspInit+0x188>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 80af 	bne.w	8000692 <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 8000534:	4b59      	ldr	r3, [pc, #356]	@ (800069c <HAL_FMC_MspInit+0x188>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	22c0      	movs	r2, #192	@ 0xc0
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f00b fa1f 	bl	800b986 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800054c:	f04f 0300 	mov.w	r3, #0
 8000550:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_CLKP;
 8000554:	2303      	movs	r3, #3
 8000556:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4618      	mov	r0, r3
 800055e:	f004 f9d7 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000568:	f000 fda2 	bl	80010b0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800056c:	4b4c      	ldr	r3, [pc, #304]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800056e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000572:	4a4b      	ldr	r2, [pc, #300]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 8000574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000578:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800057c:	4b48      	ldr	r3, [pc, #288]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800057e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800058a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800058e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a4:	230c      	movs	r3, #12
 80005a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005ae:	4619      	mov	r1, r3
 80005b0:	483c      	ldr	r0, [pc, #240]	@ (80006a4 <HAL_FMC_MspInit+0x190>)
 80005b2:	f001 fa89 	bl	8001ac8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80005b6:	230d      	movs	r3, #13
 80005b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005ce:	230c      	movs	r3, #12
 80005d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005d8:	4619      	mov	r1, r3
 80005da:	4833      	ldr	r0, [pc, #204]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 80005dc:	f001 fa74 	bl	8001ac8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005fa:	230c      	movs	r3, #12
 80005fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000600:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000604:	4619      	mov	r1, r3
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <HAL_FMC_MspInit+0x198>)
 8000608:	f001 fa5e 	bl	8001ac8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800060c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000626:	230c      	movs	r3, #12
 8000628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000630:	4619      	mov	r1, r3
 8000632:	481f      	ldr	r0, [pc, #124]	@ (80006b0 <HAL_FMC_MspInit+0x19c>)
 8000634:	f001 fa48 	bl	8001ac8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000638:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 800063c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000652:	230c      	movs	r3, #12
 8000654:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000658:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800065c:	4619      	mov	r1, r3
 800065e:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <HAL_FMC_MspInit+0x1a0>)
 8000660:	f001 fa32 	bl	8001ac8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800067e:	2309      	movs	r3, #9
 8000680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000688:	4619      	mov	r1, r3
 800068a:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 800068c:	f001 fa1c 	bl	8001ac8 <HAL_GPIO_Init>
 8000690:	e000      	b.n	8000694 <HAL_FMC_MspInit+0x180>
    return;
 8000692:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000694:	37e0      	adds	r7, #224	@ 0xe0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000200 	.word	0x24000200
 80006a0:	58024400 	.word	0x58024400
 80006a4:	58021400 	.word	0x58021400
 80006a8:	58020800 	.word	0x58020800
 80006ac:	58021800 	.word	0x58021800
 80006b0:	58021000 	.word	0x58021000
 80006b4:	58020c00 	.word	0x58020c00

080006b8 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80006c0:	f7ff ff28 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006d4:	f7ff ff1e 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	4b60      	ldr	r3, [pc, #384]	@ (8000878 <MX_GPIO_Init+0x198>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006fc:	4a5e      	ldr	r2, [pc, #376]	@ (8000878 <MX_GPIO_Init+0x198>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000706:	4b5c      	ldr	r3, [pc, #368]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000714:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800071a:	4a57      	ldr	r2, [pc, #348]	@ (8000878 <MX_GPIO_Init+0x198>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000724:	4b54      	ldr	r3, [pc, #336]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000738:	4a4f      	ldr	r2, [pc, #316]	@ (8000878 <MX_GPIO_Init+0x198>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000742:	4b4d      	ldr	r3, [pc, #308]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000748:	f003 0320 	and.w	r3, r3, #32
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b49      	ldr	r3, [pc, #292]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000756:	4a48      	ldr	r2, [pc, #288]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000760:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000774:	4a40      	ldr	r2, [pc, #256]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800077a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800077e:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000780:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <MX_GPIO_Init+0x198>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000792:	4a39      	ldr	r2, [pc, #228]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800079c:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x198>)
 800079e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b0:	4a31      	ldr	r2, [pc, #196]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2150      	movs	r1, #80	@ 0x50
 80007cc:	482b      	ldr	r0, [pc, #172]	@ (800087c <MX_GPIO_Init+0x19c>)
 80007ce:	f001 fb2b 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d8:	4829      	ldr	r0, [pc, #164]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 80007da:	f001 fb25 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	21c0      	movs	r1, #192	@ 0xc0
 80007e2:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_GPIO_Init+0x1a4>)
 80007e4:	f001 fb20 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007e8:	232c      	movs	r3, #44	@ 0x2c
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4820      	ldr	r0, [pc, #128]	@ (800087c <MX_GPIO_Init+0x19c>)
 80007fc:	f001 f964 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000800:	2350      	movs	r3, #80	@ 0x50
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4819      	ldr	r0, [pc, #100]	@ (800087c <MX_GPIO_Init+0x19c>)
 8000818:	f001 f956 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000836:	f001 f947 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800083a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000850:	f001 f93a 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000854:	23c0      	movs	r3, #192	@ 0xc0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x1a4>)
 800086c:	f001 f92c 	bl	8001ac8 <HAL_GPIO_Init>

}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	@ 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58024400 	.word	0x58024400
 800087c:	58021000 	.word	0x58021000
 8000880:	58020800 	.word	0x58020800
 8000884:	58021400 	.word	0x58021400

08000888 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_I2C1_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <MX_I2C1_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_I2C1_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <MX_I2C1_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008c4:	f001 fae4 	bl	8001e90 <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f000 fbef 	bl	80010b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008d6:	f001 fb77 	bl	8001fc8 <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 fbe6 	bl	80010b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008e8:	f001 fbb9 	bl	800205e <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fbdd 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000204 	.word	0x24000204
 8000900:	40005400 	.word	0x40005400
 8000904:	20b0ccff 	.word	0x20b0ccff

08000908 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_I2C2_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <MX_I2C2_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_I2C2_Init+0x74>)
 8000914:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <MX_I2C2_Init+0x7c>)
 8000916:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_I2C2_Init+0x74>)
 8000920:	2201      	movs	r2, #1
 8000922:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_I2C2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_I2C2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_I2C2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_I2C2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000942:	480e      	ldr	r0, [pc, #56]	@ (800097c <MX_I2C2_Init+0x74>)
 8000944:	f001 faa4 	bl	8001e90 <HAL_I2C_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800094e:	f000 fbaf 	bl	80010b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4809      	ldr	r0, [pc, #36]	@ (800097c <MX_I2C2_Init+0x74>)
 8000956:	f001 fb37 	bl	8001fc8 <HAL_I2CEx_ConfigAnalogFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 fba6 	bl	80010b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_I2C2_Init+0x74>)
 8000968:	f001 fb79 	bl	800205e <HAL_I2CEx_ConfigDigitalFilter>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 fb9d 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	24000258 	.word	0x24000258
 8000980:	40005800 	.word	0x40005800
 8000984:	20b0ccff 	.word	0x20b0ccff

08000988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0bc      	sub	sp, #240	@ 0xf0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	22c0      	movs	r2, #192	@ 0xc0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00a ffec 	bl	800b986 <memset>
  if(i2cHandle->Instance==I2C1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ae8 <HAL_I2C_MspInit+0x160>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d146      	bne.n	8000a46 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009b8:	f04f 0208 	mov.w	r2, #8
 80009bc:	f04f 0300 	mov.w	r3, #0
 80009c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 ff9e 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009da:	f000 fb69 	bl	80010b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b43      	ldr	r3, [pc, #268]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009e4:	4a41      	ldr	r2, [pc, #260]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ee:	4b3f      	ldr	r3, [pc, #252]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fc:	23c0      	movs	r3, #192	@ 0xc0
 80009fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a02:	2312      	movs	r3, #18
 8000a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a14:	2304      	movs	r3, #4
 8000a16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4833      	ldr	r0, [pc, #204]	@ (8000af0 <HAL_I2C_MspInit+0x168>)
 8000a22:	f001 f851 	bl	8001ac8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a26:	4b31      	ldr	r3, [pc, #196]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a28:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a32:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a36:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a38:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a44:	e04b      	b.n	8000ade <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000af4 <HAL_I2C_MspInit+0x16c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d146      	bne.n	8000ade <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a50:	f04f 0208 	mov.w	r2, #8
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 ff52 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a72:	f000 fb1d 	bl	80010b0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <HAL_I2C_MspInit+0x168>)
 8000abc:	f001 f804 	bl	8001ac8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ac2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ac6:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ac8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000acc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ad2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
}
 8000ade:	bf00      	nop
 8000ae0:	37f0      	adds	r7, #240	@ 0xf0
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58020400 	.word	0x58020400
 8000af4:	40005800 	.word	0x40005800

08000af8 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000afe:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <MX_I2S1_Init+0x64>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b04:	2206      	movs	r2, #6
 8000b06:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b14:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b20:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b24:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b46:	f001 fad7 	bl	80020f8 <HAL_I2S_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b50:	f000 faae 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	240002ac 	.word	0x240002ac
 8000b5c:	40013000 	.word	0x40013000

08000b60 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <MX_I2S2_Init+0x64>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b82:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b86:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b8a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000bac:	f001 faa4 	bl	80020f8 <HAL_I2S_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000bb6:	f000 fa7b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	24000300 	.word	0x24000300
 8000bc4:	40003800 	.word	0x40003800

08000bc8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0be      	sub	sp, #248	@ 0xf8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	22c0      	movs	r2, #192	@ 0xc0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00a fecc 	bl	800b986 <memset>
  if(i2sHandle->Instance==SPI1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a71      	ldr	r2, [pc, #452]	@ (8000db8 <HAL_I2S_MspInit+0x1f0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d16b      	bne.n	8000cd0 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 fe7e 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000c1a:	f000 fa49 	bl	80010b0 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	4b67      	ldr	r3, [pc, #412]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c20:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c24:	4a65      	ldr	r2, [pc, #404]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c2a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c2e:	4b63      	ldr	r3, [pc, #396]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c30:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c42:	4a5e      	ldr	r2, [pc, #376]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b58      	ldr	r3, [pc, #352]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c60:	4a56      	ldr	r2, [pc, #344]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c6a:	4b54      	ldr	r3, [pc, #336]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000c6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c78:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c92:	2305      	movs	r3, #5
 8000c94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4848      	ldr	r0, [pc, #288]	@ (8000dc0 <HAL_I2S_MspInit+0x1f8>)
 8000ca0:	f000 ff12 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	483e      	ldr	r0, [pc, #248]	@ (8000dc4 <HAL_I2S_MspInit+0x1fc>)
 8000cca:	f000 fefd 	bl	8001ac8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cce:	e06f      	b.n	8000db0 <HAL_I2S_MspInit+0x1e8>
  else if(i2sHandle->Instance==SPI2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8000dc8 <HAL_I2S_MspInit+0x200>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d16a      	bne.n	8000db0 <HAL_I2S_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cde:	f04f 0300 	mov.w	r3, #0
 8000ce2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fe0d 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_I2S_MspInit+0x138>
      Error_Handler();
 8000cfc:	f000 f9d8 	bl	80010b0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d00:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d02:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d06:	4a2d      	ldr	r2, [pc, #180]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d10:	4b2a      	ldr	r3, [pc, #168]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d12:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d24:	4a25      	ldr	r2, [pc, #148]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d42:	4a1e      	ldr	r2, [pc, #120]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <HAL_I2S_MspInit+0x1f4>)
 8000d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d5a:	2342      	movs	r3, #66	@ 0x42
 8000d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d72:	2305      	movs	r3, #5
 8000d74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <HAL_I2S_MspInit+0x1fc>)
 8000d80:	f000 fea2 	bl	8001ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d84:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4808      	ldr	r0, [pc, #32]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000dac:	f000 fe8c 	bl	8001ac8 <HAL_GPIO_Init>
}
 8000db0:	bf00      	nop
 8000db2:	37f8      	adds	r7, #248	@ 0xf8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020000 	.word	0x58020000
 8000dc4:	58020800 	.word	0x58020800
 8000dc8:	40003800 	.word	0x40003800
 8000dcc:	58020400 	.word	0x58020400

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b08b      	sub	sp, #44	@ 0x2c
 8000dd4:	af00      	add	r7, sp, #0
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dd6:	f000 f921 	bl	800101c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dda:	f000 fc37 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dde:	f000 f887 	bl	8000ef0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000de2:	f000 f8fd 	bl	8000fe0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f7ff fc7b 	bl	80006e0 <MX_GPIO_Init>
  MX_FMC_Init();
 8000dea:	f7ff fadd 	bl	80003a8 <MX_FMC_Init>
  MX_I2S1_Init();
 8000dee:	f7ff fe83 	bl	8000af8 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000df2:	f7ff feb5 	bl	8000b60 <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000df6:	f000 f9cd 	bl	8001194 <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000dfa:	f7ff fd45 	bl	8000888 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000dfe:	f7ff fd83 	bl	8000908 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000e02:	f009 ff2d 	bl	800ac60 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  flashBoot();
 8000e06:	f7ff fac3 	bl	8000390 <flashBoot>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HardFault_Handler();
	  // Write to starting address
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0e:	4835      	ldr	r0, [pc, #212]	@ (8000ee4 <main+0x114>)
 8000e10:	f001 f823 	bl	8001e5a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000e14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e18:	f000 fcaa 	bl	8001770 <HAL_Delay>
	  //*(__IO uint32_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = 42;

	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e1c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e24:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e2c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e34:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e3c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = 42;
 8000e44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e48:	222a      	movs	r2, #42	@ 0x2a
 8000e4a:	701a      	strb	r2, [r3, #0]
	  	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x10;
 8000e4c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e50:	2210      	movs	r2, #16
 8000e52:	701a      	strb	r2, [r3, #0]
	  	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x10;
 8000e54:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e58:	2210      	movs	r2, #16
 8000e5a:	701a      	strb	r2, [r3, #0]
	  	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x10;
 8000e5c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e60:	2210      	movs	r2, #16
 8000e62:	701a      	strb	r2, [r3, #0]
	  	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x10;
 8000e64:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e68:	2210      	movs	r2, #16
 8000e6a:	701a      	strb	r2, [r3, #0]
	  	  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x10;
 8000e6c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e70:	2210      	movs	r2, #16
 8000e72:	701a      	strb	r2, [r3, #0]
	  	*(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = 12;
 8000e74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e78:	220c      	movs	r2, #12
 8000e7a:	701a      	strb	r2, [r3, #0]
	  	*(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e7c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
	  		  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e84:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
	  		  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e8c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
	  		  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
 8000e94:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
	  		  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0xFF;
 8000e9c:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
 8000ea0:	22ff      	movs	r2, #255	@ 0xff
 8000ea2:	701a      	strb	r2, [r3, #0]
	//  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x01;
	//  *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = 0xFF;
	 // *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = 0x00;
	  good = *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET);
 8000ea4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
	  //printf("%d", bad);
	  if(good == 42) {
 8000eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8000eb0:	d10c      	bne.n	8000ecc <main+0xfc>
		  uint8_t str[] = "FLASH Success\r\n";
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <main+0x118>)
 8000eb4:	f107 0414 	add.w	r4, r7, #20
 8000eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  CDC_Transmit_HS(str, sizeof(str));
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f009 ff8b 	bl	800ade0 <CDC_Transmit_HS>
 8000eca:	e79e      	b.n	8000e0a <main+0x3a>
	  } else {
		  uint8_t str[] = "FLASH Failure\r\n";
 8000ecc:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <main+0x11c>)
 8000ece:	1d3c      	adds	r4, r7, #4
 8000ed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  CDC_Transmit_HS(str, sizeof(str));
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2110      	movs	r1, #16
 8000eda:	4618      	mov	r0, r3
 8000edc:	f009 ff80 	bl	800ade0 <CDC_Transmit_HS>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ee0:	e793      	b.n	8000e0a <main+0x3a>
 8000ee2:	bf00      	nop
 8000ee4:	58020800 	.word	0x58020800
 8000ee8:	0800c638 	.word	0x0800c638
 8000eec:	0800c648 	.word	0x0800c648

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	@ 0x70
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	224c      	movs	r2, #76	@ 0x4c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00a fd41 	bl	800b986 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2220      	movs	r2, #32
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00a fd3b 	bl	800b986 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f10:	4b31      	ldr	r3, [pc, #196]	@ (8000fd8 <SystemClock_Config+0xe8>)
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295
 8000f16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f002 fd06 	bl	800392c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <SystemClock_Config+0xec>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a2c      	ldr	r2, [pc, #176]	@ (8000fdc <SystemClock_Config+0xec>)
 8000f2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <SystemClock_Config+0xec>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f3c:	bf00      	nop
 8000f3e:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <SystemClock_Config+0xec>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f4a:	d1f8      	bne.n	8000f3e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f4c:	2322      	movs	r3, #34	@ 0x22
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000f54:	2340      	movs	r3, #64	@ 0x40
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f60:	2300      	movs	r3, #0
 8000f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000f68:	2323      	movs	r3, #35	@ 0x23
 8000f6a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 fd19 	bl	80039c0 <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000f94:	f000 f88c 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	233f      	movs	r3, #63	@ 0x3f
 8000f9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fa8:	2340      	movs	r3, #64	@ 0x40
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fac:	2340      	movs	r3, #64	@ 0x40
 8000fae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fb6:	2340      	movs	r3, #64	@ 0x40
 8000fb8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2106      	movs	r1, #6
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 f930 	bl	8004224 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000fca:	f000 f871 	bl	80010b0 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3770      	adds	r7, #112	@ 0x70
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58024800 	.word	0x58024800

08000fe0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0b0      	sub	sp, #192	@ 0xc0
 8000fe4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	22c0      	movs	r2, #192	@ 0xc0
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00a fcca 	bl	800b986 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000ff2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000ffe:	2300      	movs	r3, #0
 8001000:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fc83 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001010:	f000 f84e 	bl	80010b0 <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	37c0      	adds	r7, #192	@ 0xc0
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800102e:	f000 fcd3 	bl	80019d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001032:	2301      	movs	r3, #1
 8001034:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001036:	2300      	movs	r3, #0
 8001038:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800103e:	231f      	movs	r3, #31
 8001040:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001042:	2387      	movs	r3, #135	@ 0x87
 8001044:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001046:	2300      	movs	r3, #0
 8001048:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800104a:	2300      	movs	r3, #0
 800104c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800104e:	2301      	movs	r3, #1
 8001050:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001052:	2301      	movs	r3, #1
 8001054:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800105e:	463b      	mov	r3, r7
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fcf1 	bl	8001a48 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001066:	2301      	movs	r3, #1
 8001068:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 800106a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800106e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001070:	2317      	movs	r3, #23
 8001072:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001074:	2300      	movs	r3, #0
 8001076:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001078:	2301      	movs	r3, #1
 800107a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800107c:	2303      	movs	r3, #3
 800107e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001084:	463b      	mov	r3, r7
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fcde 	bl	8001a48 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800108c:	2302      	movs	r3, #2
 800108e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x8000000;
 8001090:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001094:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001096:	231f      	movs	r3, #31
 8001098:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800109a:	463b      	mov	r3, r7
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcd3 	bl	8001a48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010a2:	2004      	movs	r0, #4
 80010a4:	f000 fcb0 	bl	8001a08 <HAL_MPU_Enable>

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <Error_Handler+0x8>

080010bc <SDRAM_Initialization_Sequence>:
 * 6 Min of 2 auto-refresh cycles
 *
 */
#include "sdram_init.h"

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	 __IO uint32_t tmpmrd =0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
	/* Step 2:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2210      	movs	r2, #16
 80010d4:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2201      	movs	r2, #1
 80010da:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f006 f857 	bl	800719c <HAL_SDRAM_SendCommand>

	  /* Step 3: Insert 200 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f000 fb3e 	bl	8001770 <HAL_Delay>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2202      	movs	r2, #2
 80010f8:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2210      	movs	r2, #16
 80010fe:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800110c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f006 f842 	bl	800719c <HAL_SDRAM_SendCommand>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2202      	movs	r2, #2
 800111c:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2210      	movs	r2, #16
 8001122:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2201      	movs	r2, #1
 8001128:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001130:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001134:	6839      	ldr	r1, [r7, #0]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f006 f830 	bl	800719c <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800113c:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001140:	60fb      	str	r3, [r7, #12]
	                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_3           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2204      	movs	r2, #4
 8001146:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2210      	movs	r2, #16
 800114c:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2201      	movs	r2, #1
 8001152:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800115a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f006 f81b 	bl	800719c <HAL_SDRAM_SendCommand>

	  /* Step 6 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	2203      	movs	r2, #3
 800116a:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2210      	movs	r2, #16
 8001170:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 2;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2202      	movs	r2, #2
 8001176:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]

	  /* Send the command twice*/
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800117e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001182:	6839      	ldr	r1, [r7, #0]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f006 f809 	bl	800719c <HAL_SDRAM_SendCommand>
	  //HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);

}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 800119a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800119e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MX_SPDIFRX_Init+0x6c>)
 80011ee:	f006 f80b 	bl	8007208 <HAL_SPDIFRX_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 80011f8:	f7ff ff5a 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	24000354 	.word	0x24000354

08001204 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0ba      	sub	sp, #232	@ 0xe8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	22c0      	movs	r2, #192	@ 0xc0
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00a fbae 	bl	800b986 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8001232:	d141      	bne.n	80012b8 <HAL_SPDIFRX_MspInit+0xb4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001234:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8001240:	2300      	movs	r3, #0
 8001242:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fb61 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8001254:	f7ff ff2c 	bl	80010b0 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001258:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_SPDIFRX_MspInit+0xbc>)
 800125a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800125e:	4a18      	ldr	r2, [pc, #96]	@ (80012c0 <HAL_SPDIFRX_MspInit+0xbc>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001264:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_SPDIFRX_MspInit+0xbc>)
 800126a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800126e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_SPDIFRX_MspInit+0xbc>)
 8001278:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800127c:	4a10      	ldr	r2, [pc, #64]	@ (80012c0 <HAL_SPDIFRX_MspInit+0xbc>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_SPDIFRX_MspInit+0xbc>)
 8001288:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001294:	2380      	movs	r3, #128	@ 0x80
 8001296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <HAL_SPDIFRX_MspInit+0xc0>)
 80012b4:	f000 fc08 	bl	8001ac8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	37e8      	adds	r7, #232	@ 0xe8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58020c00 	.word	0x58020c00

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_MspInit+0x30>)
 80012d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80012d4:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_MspInit+0x30>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_MspInit+0x30>)
 80012e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	58024400 	.word	0x58024400

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <NMI_Handler+0x4>

08001304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800130a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800130e:	4807      	ldr	r0, [pc, #28]	@ (800132c <HardFault_Handler+0x28>)
 8001310:	f000 fda3 	bl	8001e5a <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	e002      	b.n	8001320 <HardFault_Handler+0x1c>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a03      	ldr	r2, [pc, #12]	@ (8001330 <HardFault_Handler+0x2c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	ddf8      	ble.n	800131a <HardFault_Handler+0x16>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001328:	e7ef      	b.n	800130a <HardFault_Handler+0x6>
 800132a:	bf00      	nop
 800132c:	58020800 	.word	0x58020800
 8001330:	000f423f 	.word	0x000f423f

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f9d9 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800138a:	f001 f970 	bl	800266e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2400188c 	.word	0x2400188c

08001398 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 800139e:	f001 f966 	bl	800266e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2400188c 	.word	0x2400188c

080013ac <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <OTG_HS_IRQHandler+0x10>)
 80013b2:	f001 f95c 	bl	800266e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2400188c 	.word	0x2400188c

080013c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e00a      	b.n	80013e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d2:	f3af 8000 	nop.w
 80013d6:	4601      	mov	r1, r0
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	b2ca      	uxtb	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf0      	blt.n	80013d2 <_read+0x12>
  }

  return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e009      	b.n	8001420 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbf1      	blt.n	800140c <_write+0x12>
  }
  return len;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_close>:

int _close(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800145a:	605a      	str	r2, [r3, #4]
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_isatty>:

int _isatty(int file)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f00a faaa 	bl	800ba24 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	24100000 	.word	0x24100000
 80014fc:	00000400 	.word	0x00000400
 8001500:	240003a4 	.word	0x240003a4
 8001504:	240020e0 	.word	0x240020e0

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800150c:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <SystemInit+0xd0>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a31      	ldr	r2, [pc, #196]	@ (80015d8 <SystemInit+0xd0>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800151c:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <SystemInit+0xd4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	2b02      	cmp	r3, #2
 8001526:	d807      	bhi.n	8001538 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001528:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <SystemInit+0xd4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 030f 	bic.w	r3, r3, #15
 8001530:	4a2a      	ldr	r2, [pc, #168]	@ (80015dc <SystemInit+0xd4>)
 8001532:	f043 0303 	orr.w	r3, r3, #3
 8001536:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001538:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <SystemInit+0xd8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a28      	ldr	r2, [pc, #160]	@ (80015e0 <SystemInit+0xd8>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001544:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <SystemInit+0xd8>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800154a:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <SystemInit+0xd8>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4924      	ldr	r1, [pc, #144]	@ (80015e0 <SystemInit+0xd8>)
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <SystemInit+0xdc>)
 8001552:	4013      	ands	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <SystemInit+0xd4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <SystemInit+0xd4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 030f 	bic.w	r3, r3, #15
 800156a:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <SystemInit+0xd4>)
 800156c:	f043 0303 	orr.w	r3, r3, #3
 8001570:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <SystemInit+0xd8>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <SystemInit+0xd8>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <SystemInit+0xd8>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <SystemInit+0xd8>)
 8001586:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <SystemInit+0xe0>)
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <SystemInit+0xd8>)
 800158c:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <SystemInit+0xe4>)
 800158e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <SystemInit+0xd8>)
 8001592:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <SystemInit+0xe8>)
 8001594:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <SystemInit+0xd8>)
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800159c:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <SystemInit+0xd8>)
 800159e:	4a14      	ldr	r2, [pc, #80]	@ (80015f0 <SystemInit+0xe8>)
 80015a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <SystemInit+0xd8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <SystemInit+0xd8>)
 80015aa:	4a11      	ldr	r2, [pc, #68]	@ (80015f0 <SystemInit+0xe8>)
 80015ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <SystemInit+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <SystemInit+0xd8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <SystemInit+0xd8>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <SystemInit+0xd8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <SystemInit+0xec>)
 80015c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	52002000 	.word	0x52002000
 80015e0:	58024400 	.word	0x58024400
 80015e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015e8:	02020200 	.word	0x02020200
 80015ec:	01ff0000 	.word	0x01ff0000
 80015f0:	01010280 	.word	0x01010280
 80015f4:	52004000 	.word	0x52004000

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001630 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015fc:	f7ff ff84 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	@ (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f00a fa03 	bl	800ba30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fbd1 	bl	8000dd0 <main>
  bx  lr
 800162e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001638:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 800163c:	0800c758 	.word	0x0800c758
  ldr r2, =_sbss
 8001640:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8001644:	240020dc 	.word	0x240020dc

08001648 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001652:	2003      	movs	r0, #3
 8001654:	f000 f980 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001658:	f002 ff9a 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 800165c:	4602      	mov	r2, r0
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_Init+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	4913      	ldr	r1, [pc, #76]	@ (80016b8 <HAL_Init+0x6c>)
 800166a:	5ccb      	ldrb	r3, [r1, r3]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_Init+0x68>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	4a0e      	ldr	r2, [pc, #56]	@ (80016b8 <HAL_Init+0x6c>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	4a0b      	ldr	r2, [pc, #44]	@ (80016bc <HAL_Init+0x70>)
 800168e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001690:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <HAL_Init+0x74>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f814 	bl	80016c4 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e002      	b.n	80016ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016a6:	f7ff fe0f 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	58024400 	.word	0x58024400
 80016b8:	0800c704 	.word	0x0800c704
 80016bc:	24000004 	.word	0x24000004
 80016c0:	24000000 	.word	0x24000000

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_InitTick+0x60>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e021      	b.n	800171c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016d8:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <HAL_InitTick+0x64>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f965 	bl	80019be <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 f92f 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	@ (800172c <HAL_InitTick+0x68>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2400000c 	.word	0x2400000c
 8001728:	24000000 	.word	0x24000000
 800172c:	24000008 	.word	0x24000008

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2400000c 	.word	0x2400000c
 8001754:	240003a8 	.word	0x240003a8

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	240003a8 	.word	0x240003a8

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2400000c 	.word	0x2400000c

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x40>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00
 80017fc:	05fa0000 	.word	0x05fa0000

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff40 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff33 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa4 	bl	8001914 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019dc:	f3bf 8f5f 	dmb	sy
}
 80019e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019e2:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <HAL_MPU_Disable+0x28>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	4a06      	ldr	r2, [pc, #24]	@ (8001a00 <HAL_MPU_Disable+0x28>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019ee:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_MPU_Disable+0x2c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed90 	.word	0xe000ed90

08001a08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a10:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <HAL_MPU_Enable+0x38>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_MPU_Enable+0x3c>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <HAL_MPU_Enable+0x3c>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a24:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a26:	f3bf 8f4f 	dsb	sy
}
 8001a2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a2c:	f3bf 8f6f 	isb	sy
}
 8001a30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed90 	.word	0xe000ed90
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	785a      	ldrb	r2, [r3, #1]
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a56:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a64:	4a17      	ldr	r2, [pc, #92]	@ (8001ac4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7b1b      	ldrb	r3, [r3, #12]
 8001a70:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7adb      	ldrb	r3, [r3, #11]
 8001a76:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7a9b      	ldrb	r3, [r3, #10]
 8001a7e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7b5b      	ldrb	r3, [r3, #13]
 8001a86:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7b9b      	ldrb	r3, [r3, #14]
 8001a8e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7bdb      	ldrb	r3, [r3, #15]
 8001a96:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7a5b      	ldrb	r3, [r3, #9]
 8001a9e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7a1b      	ldrb	r3, [r3, #8]
 8001aa6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aa8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ab2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab4:	6113      	str	r3, [r2, #16]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed90 	.word	0xe000ed90

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ad6:	4b89      	ldr	r3, [pc, #548]	@ (8001cfc <HAL_GPIO_Init+0x234>)
 8001ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ada:	e194      	b.n	8001e06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8186 	beq.w	8001e00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x44>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 0201 	and.w	r2, r3, #1
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d017      	beq.n	8001baa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d123      	bne.n	8001bfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	69b9      	ldr	r1, [r7, #24]
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0203 	and.w	r2, r3, #3
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80e0 	beq.w	8001e00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <HAL_GPIO_Init+0x238>)
 8001c42:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001c46:	4a2e      	ldr	r2, [pc, #184]	@ (8001d00 <HAL_GPIO_Init+0x238>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_GPIO_Init+0x238>)
 8001c52:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c5e:	4a29      	ldr	r2, [pc, #164]	@ (8001d04 <HAL_GPIO_Init+0x23c>)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a20      	ldr	r2, [pc, #128]	@ (8001d08 <HAL_GPIO_Init+0x240>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d052      	beq.n	8001d30 <HAL_GPIO_Init+0x268>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d0c <HAL_GPIO_Init+0x244>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d031      	beq.n	8001cf6 <HAL_GPIO_Init+0x22e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1e      	ldr	r2, [pc, #120]	@ (8001d10 <HAL_GPIO_Init+0x248>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d02b      	beq.n	8001cf2 <HAL_GPIO_Init+0x22a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <HAL_GPIO_Init+0x24c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d025      	beq.n	8001cee <HAL_GPIO_Init+0x226>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <HAL_GPIO_Init+0x250>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01f      	beq.n	8001cea <HAL_GPIO_Init+0x222>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <HAL_GPIO_Init+0x254>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x21e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d20 <HAL_GPIO_Init+0x258>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x21a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <HAL_GPIO_Init+0x25c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x216>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a18      	ldr	r2, [pc, #96]	@ (8001d28 <HAL_GPIO_Init+0x260>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x212>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <HAL_GPIO_Init+0x264>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x20e>
 8001cd2:	2309      	movs	r3, #9
 8001cd4:	e02d      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	e02b      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001cda:	2308      	movs	r3, #8
 8001cdc:	e029      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e027      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e025      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e023      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e021      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e01f      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e01d      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e01b      	b.n	8001d32 <HAL_GPIO_Init+0x26a>
 8001cfa:	bf00      	nop
 8001cfc:	58000080 	.word	0x58000080
 8001d00:	58024400 	.word	0x58024400
 8001d04:	58000400 	.word	0x58000400
 8001d08:	58020000 	.word	0x58020000
 8001d0c:	58020400 	.word	0x58020400
 8001d10:	58020800 	.word	0x58020800
 8001d14:	58020c00 	.word	0x58020c00
 8001d18:	58021000 	.word	0x58021000
 8001d1c:	58021400 	.word	0x58021400
 8001d20:	58021800 	.word	0x58021800
 8001d24:	58021c00 	.word	0x58021c00
 8001d28:	58022000 	.word	0x58022000
 8001d2c:	58022400 	.word	0x58022400
 8001d30:	2300      	movs	r3, #0
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	f002 0203 	and.w	r2, r2, #3
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	4093      	lsls	r3, r2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d42:	4938      	ldr	r1, [pc, #224]	@ (8001e24 <HAL_GPIO_Init+0x35c>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001da4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	3301      	adds	r3, #1
 8001e04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f ae63 	bne.w	8001adc <HAL_GPIO_Init+0x14>
  }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3724      	adds	r7, #36	@ 0x24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	58000400 	.word	0x58000400

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e6c:	887a      	ldrh	r2, [r7, #2]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	041a      	lsls	r2, r3, #16
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e08b      	b.n	8001fba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7fe fd66 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	@ 0x24
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ee0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ef0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	e006      	b.n	8001f18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d108      	bne.n	8001f32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	e007      	b.n	8001f42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <HAL_I2C_Init+0x134>)
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69d9      	ldr	r1, [r3, #28]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	02008000 	.word	0x02008000

08001fc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d138      	bne.n	8002050 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e032      	b.n	8002052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	@ 0x24
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800201a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b20      	cmp	r3, #32
 8002072:	d139      	bne.n	80020e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800207e:	2302      	movs	r3, #2
 8002080:	e033      	b.n	80020ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2224      	movs	r2, #36	@ 0x24
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020e8:	2302      	movs	r3, #2
  }
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e11a      	b.n	8002340 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fd52 	bl	8000bc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b04      	cmp	r3, #4
 8002158:	d008      	beq.n	800216c <HAL_I2S_Init+0x74>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b06      	cmp	r3, #6
 8002160:	d004      	beq.n	800216c <HAL_I2S_Init+0x74>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b0a      	cmp	r3, #10
 8002168:	f040 8094 	bne.w	8002294 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d067      	beq.n	8002244 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800217c:	2302      	movs	r3, #2
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	e001      	b.n	8002186 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b30      	cmp	r3, #48	@ 0x30
 800218c:	d003      	beq.n	8002196 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002192:	2bb0      	cmp	r3, #176	@ 0xb0
 8002194:	d102      	bne.n	800219c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8002196:	2301      	movs	r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	e001      	b.n	80021a0 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a68      	ldr	r2, [pc, #416]	@ (8002348 <HAL_I2S_Init+0x250>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d107      	bne.n	80021ba <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80021aa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80021ae:	f04f 0100 	mov.w	r1, #0
 80021b2:	f003 fd6b 	bl	8005c8c <HAL_RCCEx_GetPeriphCLKFreq>
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	e006      	b.n	80021c8 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80021ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	f003 fd63 	bl	8005c8c <HAL_RCCEx_GetPeriphCLKFreq>
 80021c6:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021d0:	d113      	bne.n	80021fa <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80021d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	fbb2 f2f3 	udiv	r2, r2, r3
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	3305      	adds	r3, #5
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e014      	b.n	8002224 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80021fa:	2220      	movs	r2, #32
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	fbb2 f2f3 	udiv	r2, r2, r3
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	461a      	mov	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	3305      	adds	r3, #5
 8002222:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4a49      	ldr	r2, [pc, #292]	@ (800234c <HAL_I2S_Init+0x254>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e003      	b.n	800224c <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8002244:	2302      	movs	r3, #2
 8002246:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_I2S_Init+0x160>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d002      	beq.n	800225e <HAL_I2S_Init+0x166>
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2bff      	cmp	r3, #255	@ 0xff
 800225c:	d907      	bls.n	800226e <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e068      	b.n	8002340 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8002274:	2301      	movs	r3, #1
 8002276:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800227e:	4b34      	ldr	r3, [pc, #208]	@ (8002350 <HAL_I2S_Init+0x258>)
 8002280:	4013      	ands	r3, r2
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	0411      	lsls	r1, r2, #16
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	0612      	lsls	r2, r2, #24
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	430b      	orrs	r3, r1
 8002292:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800229a:	4b2e      	ldr	r3, [pc, #184]	@ (8002354 <HAL_I2S_Init+0x25c>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6851      	ldr	r1, [r2, #4]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68d2      	ldr	r2, [r2, #12]
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6992      	ldr	r2, [r2, #24]
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6a12      	ldr	r2, [r2, #32]
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6912      	ldr	r2, [r2, #16]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80022da:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022ea:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b04      	cmp	r3, #4
 8002308:	d007      	beq.n	800231a <HAL_I2S_Init+0x222>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b06      	cmp	r3, #6
 8002310:	d003      	beq.n	800231a <HAL_I2S_Init+0x222>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b0a      	cmp	r3, #10
 8002318:	d10a      	bne.n	8002330 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	58001400 	.word	0x58001400
 800234c:	cccccccd 	.word	0xcccccccd
 8002350:	fe00ffff 	.word	0xfe00ffff
 8002354:	fdff9040 	.word	0xfdff9040

08002358 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e037      	b.n	80023de <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7fe f998 	bl	80006b8 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3304      	adds	r3, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f004 ffa6 	bl	80072e4 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	461a      	mov	r2, r3
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	f004 ffc8 	bl	8007338 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	461a      	mov	r2, r3
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	f004 ffdd 	bl	8007372 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0204 	orr.w	r2, r2, #4
 80023c6:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80023c8:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <HAL_NAND_Init+0x90>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a06      	ldr	r2, [pc, #24]	@ (80023e8 <HAL_NAND_Init+0x90>)
 80023ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023d2:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	52004000 	.word	0x52004000

080023ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0fe      	b.n	80025fc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f008 fe2c 	bl	800b070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f005 f9d0 	bl	80077ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7c1a      	ldrb	r2, [r3, #16]
 8002432:	f88d 2000 	strb.w	r2, [sp]
 8002436:	3304      	adds	r3, #4
 8002438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243a:	f005 f8a1 	bl	8007580 <USB_CoreInit>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0d5      	b.n	80025fc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f005 f9c8 	bl	80077ec <USB_SetCurrentMode>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0c6      	b.n	80025fc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e04a      	b.n	800250a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3315      	adds	r3, #21
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3314      	adds	r3, #20
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	b298      	uxth	r0, r3
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	332e      	adds	r3, #46	@ 0x2e
 80024b0:	4602      	mov	r2, r0
 80024b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3318      	adds	r3, #24
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	331c      	adds	r3, #28
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3320      	adds	r3, #32
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3324      	adds	r3, #36	@ 0x24
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	3301      	adds	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	791b      	ldrb	r3, [r3, #4]
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	429a      	cmp	r2, r3
 8002512:	d3af      	bcc.n	8002474 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e044      	b.n	80025a4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	791b      	ldrb	r3, [r3, #4]
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3b5      	bcc.n	800251a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7c1a      	ldrb	r2, [r3, #16]
 80025b6:	f88d 2000 	strb.w	r2, [sp]
 80025ba:	3304      	adds	r3, #4
 80025bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025be:	f005 f961 	bl	8007884 <USB_DevInit>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e013      	b.n	80025fc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7b1b      	ldrb	r3, [r3, #12]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d102      	bne.n	80025f0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f001 f96e 	bl	80038cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f006 f9a4 	bl	8008942 <USB_DevDisconnect>

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_PCD_Start+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e022      	b.n	8002666 <HAL_PCD_Start+0x62>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002640:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f005 f8ab 	bl	80077a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f006 f952 	bl	8008900 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800266e:	b590      	push	{r4, r7, lr}
 8002670:	b08d      	sub	sp, #52	@ 0x34
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f006 fa10 	bl	8008aaa <USB_GetMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 84b9 	bne.w	8003004 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f006 f974 	bl	8008984 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 84af 	beq.w	8003002 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f006 f961 	bl	8008984 <USB_ReadInterrupts>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d107      	bne.n	80026dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f002 0202 	and.w	r2, r2, #2
 80026da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f006 f94f 	bl	8008984 <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d161      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0210 	bic.w	r2, r2, #16
 80026fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	0c5b      	lsrs	r3, r3, #17
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	2b02      	cmp	r3, #2
 800272a:	d124      	bne.n	8002776 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d035      	beq.n	80027a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	6a38      	ldr	r0, [r7, #32]
 800274c:	f005 ff86 	bl	800865c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800275c:	441a      	add	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276e:	441a      	add	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	615a      	str	r2, [r3, #20]
 8002774:	e016      	b.n	80027a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	0c5b      	lsrs	r3, r3, #17
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	2b06      	cmp	r3, #6
 8002780:	d110      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002788:	2208      	movs	r2, #8
 800278a:	4619      	mov	r1, r3
 800278c:	6a38      	ldr	r0, [r7, #32]
 800278e:	f005 ff65 	bl	800865c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279e:	441a      	add	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0210 	orr.w	r2, r2, #16
 80027b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f006 f8e3 	bl	8008984 <USB_ReadInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027c8:	f040 80a7 	bne.w	800291a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f006 f8e8 	bl	80089aa <USB_ReadDevAllOutEpInterrupt>
 80027da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027dc:	e099      	b.n	8002912 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 808e 	beq.w	8002906 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f006 f90c 	bl	8008a12 <USB_ReadDevOutEPInterrupt>
 80027fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002812:	461a      	mov	r2, r3
 8002814:	2301      	movs	r3, #1
 8002816:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002818:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fed0 	bl	80035c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002836:	461a      	mov	r2, r3
 8002838:	2308      	movs	r3, #8
 800283a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800283c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 ffa6 	bl	8003790 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	2310      	movs	r3, #16
 800285e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d030      	beq.n	80028cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002872:	2b80      	cmp	r3, #128	@ 0x80
 8002874:	d109      	bne.n	800288a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002888:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2200      	movs	r2, #0
 80028ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f008 fd33 	bl	800b320 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028c6:	461a      	mov	r2, r3
 80028c8:	2302      	movs	r3, #2
 80028ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e2:	461a      	mov	r2, r3
 80028e4:	2320      	movs	r3, #32
 80028e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fe:	461a      	mov	r2, r3
 8002900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002904:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af62 	bne.w	80027de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f006 f830 	bl	8008984 <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800292a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800292e:	f040 80db 	bne.w	8002ae8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f006 f851 	bl	80089de <USB_ReadDevAllInEpInterrupt>
 800293c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002942:	e0cd      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80c2 	beq.w	8002ad4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f006 f877 	bl	8008a4e <USB_ReadDevInEPInterrupt>
 8002960:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d057      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	2201      	movs	r2, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	69f9      	ldr	r1, [r7, #28]
 8002988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800298c:	4013      	ands	r3, r2
 800298e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800299c:	461a      	mov	r2, r3
 800299e:	2301      	movs	r3, #1
 80029a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	799b      	ldrb	r3, [r3, #6]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d132      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3320      	adds	r3, #32
 80029ba:	6819      	ldr	r1, [r3, #0]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4403      	add	r3, r0
 80029ca:	331c      	adds	r3, #28
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4419      	add	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4403      	add	r3, r0
 80029de:	3320      	adds	r3, #32
 80029e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d113      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3324      	adds	r3, #36	@ 0x24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	f006 f880 	bl	8008b10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f008 fbfd 	bl	800b216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a32:	461a      	mov	r2, r3
 8002a34:	2308      	movs	r3, #8
 8002a36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2310      	movs	r3, #16
 8002a52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2340      	movs	r3, #64	@ 0x40
 8002a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d023      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a7c:	6a38      	ldr	r0, [r7, #32]
 8002a7e:	f005 f85f 	bl	8007b40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	78db      	ldrb	r3, [r3, #3]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d108      	bne.n	8002ab0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f008 fc4a 	bl	800b344 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002abc:	461a      	mov	r2, r3
 8002abe:	2302      	movs	r3, #2
 8002ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002acc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fcea 	bl	80034a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f47f af2e 	bne.w	8002944 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f005 ff49 	bl	8008984 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002afc:	d122      	bne.n	8002b44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d108      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b24:	2100      	movs	r1, #0
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fef4 	bl	8003914 <HAL_PCDEx_LPM_Callback>
 8002b2c:	e002      	b.n	8002b34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f008 fbe8 	bl	800b304 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f005 ff1b 	bl	8008984 <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b58:	d112      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f008 fba4 	bl	800b2b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f005 fefd 	bl	8008984 <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b94:	d121      	bne.n	8002bda <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002ba4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d111      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	f003 020f 	and.w	r2, r3, #15
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bca:	2101      	movs	r1, #1
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fea1 	bl	8003914 <HAL_PCDEx_LPM_Callback>
 8002bd2:	e002      	b.n	8002bda <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f008 fb6f 	bl	800b2b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f005 fed0 	bl	8008984 <USB_ReadInterrupts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bee:	f040 80b7 	bne.w	8002d60 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2110      	movs	r1, #16
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 ff97 	bl	8007b40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c16:	e046      	b.n	8002ca6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c24:	461a      	mov	r2, r3
 8002c26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c3c:	0151      	lsls	r1, r2, #5
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	440a      	add	r2, r1
 8002c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c70:	0151      	lsls	r1, r2, #5
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	440a      	add	r2, r1
 8002c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c90:	0151      	lsls	r1, r2, #5
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	440a      	add	r2, r1
 8002c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	791b      	ldrb	r3, [r3, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d3b2      	bcc.n	8002c18 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7bdb      	ldrb	r3, [r3, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cde:	f043 030b 	orr.w	r3, r3, #11
 8002ce2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cf4:	f043 030b 	orr.w	r3, r3, #11
 8002cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfa:	e015      	b.n	8002d28 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002d10:	4313      	orrs	r3, r2
 8002d12:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d22:	f043 030b 	orr.w	r3, r3, #11
 8002d26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d36:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f005 fee0 	bl	8008b10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 fe0d 	bl	8008984 <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d74:	d123      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f005 fea4 	bl	8008ac8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 ff54 	bl	8007c32 <USB_GetDevSpeed>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681c      	ldr	r4, [r3, #0]
 8002d96:	f001 fd75 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 8002d9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da0:	461a      	mov	r2, r3
 8002da2:	4620      	mov	r0, r4
 8002da4:	f004 fc5e 	bl	8007664 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f008 fa5c 	bl	800b266 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f005 fdde 	bl	8008984 <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d10a      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f008 fa39 	bl	800b24a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f002 0208 	and.w	r2, r2, #8
 8002de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f005 fdc9 	bl	8008984 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df8:	2b80      	cmp	r3, #128	@ 0x80
 8002dfa:	d123      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e08:	2301      	movs	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0c:	e014      	b.n	8002e38 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d105      	bne.n	8002e32 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fb0a 	bl	8003446 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	3301      	adds	r3, #1
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	791b      	ldrb	r3, [r3, #4]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d3e4      	bcc.n	8002e0e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f005 fd9b 	bl	8008984 <USB_ReadInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e58:	d13c      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	e02b      	b.n	8002eb8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3318      	adds	r3, #24
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d115      	bne.n	8002eb2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	da12      	bge.n	8002eb2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3317      	adds	r3, #23
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 faca 	bl	8003446 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	791b      	ldrb	r3, [r3, #4]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d3cd      	bcc.n	8002e60 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f005 fd53 	bl	8008984 <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ee8:	d156      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eea:	2301      	movs	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eee:	e045      	b.n	8002f7c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d12e      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da2b      	bge.n	8002f76 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	0c1a      	lsrs	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f28:	4053      	eors	r3, r2
 8002f2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d121      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f72:	6053      	str	r3, [r2, #4]
            break;
 8002f74:	e008      	b.n	8002f88 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	3301      	adds	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	461a      	mov	r2, r3
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d3b3      	bcc.n	8002ef0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f005 fcf1 	bl	8008984 <USB_ReadInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fac:	d10a      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f008 f9da 	bl	800b368 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f005 fcdb 	bl	8008984 <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d115      	bne.n	8003004 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f008 f9ca 	bl	800b384 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	e000      	b.n	8003004 <HAL_PCD_IRQHandler+0x996>
      return;
 8003002:	bf00      	nop
    }
  }
}
 8003004:	3734      	adds	r7, #52	@ 0x34
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}

0800300a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_PCD_SetAddress+0x1a>
 8003020:	2302      	movs	r3, #2
 8003022:	e012      	b.n	800304a <HAL_PCD_SetAddress+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f005 fc3a 	bl	80088b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	4608      	mov	r0, r1
 800305c:	4611      	mov	r1, r2
 800305e:	461a      	mov	r2, r3
 8003060:	4603      	mov	r3, r0
 8003062:	70fb      	strb	r3, [r7, #3]
 8003064:	460b      	mov	r3, r1
 8003066:	803b      	strh	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003074:	2b00      	cmp	r3, #0
 8003076:	da0f      	bge.n	8003098 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	3310      	adds	r3, #16
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	705a      	strb	r2, [r3, #1]
 8003096:	e00f      	b.n	80030b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	3304      	adds	r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80030c4:	883b      	ldrh	r3, [r7, #0]
 80030c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	78ba      	ldrb	r2, [r7, #2]
 80030d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030e6:	78bb      	ldrb	r3, [r7, #2]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d102      	bne.n	80030f2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_EP_Open+0xae>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e00e      	b.n	800311e <HAL_PCD_EP_Open+0xcc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68f9      	ldr	r1, [r7, #12]
 800310e:	4618      	mov	r0, r3
 8003110:	f004 fdb4 	bl	8007c7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800311c:	7afb      	ldrb	r3, [r7, #11]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003136:	2b00      	cmp	r3, #0
 8003138:	da0f      	bge.n	800315a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	f003 020f 	and.w	r2, r3, #15
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	3310      	adds	r3, #16
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	3304      	adds	r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	705a      	strb	r2, [r3, #1]
 8003158:	e00f      	b.n	800317a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	3304      	adds	r3, #4
 8003172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_PCD_EP_Close+0x6e>
 8003190:	2302      	movs	r3, #2
 8003192:	e00e      	b.n	80031b2 <HAL_PCD_EP_Close+0x8c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68f9      	ldr	r1, [r7, #12]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f004 fdf2 	bl	8007d8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	460b      	mov	r3, r1
 80031c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ca:	7afb      	ldrb	r3, [r7, #11]
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	3304      	adds	r3, #4
 80031e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2200      	movs	r2, #0
 80031f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fc:	7afb      	ldrb	r3, [r7, #11]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	b2da      	uxtb	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	799b      	ldrb	r3, [r3, #6]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d102      	bne.n	8003216 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	799b      	ldrb	r3, [r3, #6]
 800321e:	461a      	mov	r2, r3
 8003220:	6979      	ldr	r1, [r7, #20]
 8003222:	f004 fe8f 	bl	8007f44 <USB_EPStartXfer>

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	f003 020f 	and.w	r2, r3, #15
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	460b      	mov	r3, r1
 800326e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003270:	7afb      	ldrb	r3, [r7, #11]
 8003272:	f003 020f 	and.w	r2, r3, #15
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	3310      	adds	r3, #16
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	3304      	adds	r3, #4
 8003286:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2200      	movs	r2, #0
 8003298:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2201      	movs	r2, #1
 800329e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	799b      	ldrb	r3, [r3, #6]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	799b      	ldrb	r3, [r3, #6]
 80032c2:	461a      	mov	r2, r3
 80032c4:	6979      	ldr	r1, [r7, #20]
 80032c6:	f004 fe3d 	bl	8007f44 <USB_EPStartXfer>

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	7912      	ldrb	r2, [r2, #4]
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e04f      	b.n	8003392 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da0f      	bge.n	800331a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	3310      	adds	r3, #16
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	705a      	strb	r2, [r3, #1]
 8003318:	e00d      	b.n	8003336 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	3304      	adds	r3, #4
 800332e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_PCD_EP_SetStall+0x82>
 8003352:	2302      	movs	r3, #2
 8003354:	e01d      	b.n	8003392 <HAL_PCD_EP_SetStall+0xbe>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68f9      	ldr	r1, [r7, #12]
 8003364:	4618      	mov	r0, r3
 8003366:	f005 f9d1 	bl	800870c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7999      	ldrb	r1, [r3, #6]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003382:	461a      	mov	r2, r3
 8003384:	f005 fbc4 	bl	8008b10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	7912      	ldrb	r2, [r2, #4]
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e042      	b.n	800343e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0f      	bge.n	80033e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3310      	adds	r3, #16
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	705a      	strb	r2, [r3, #1]
 80033de:	e00f      	b.n	8003400 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_PCD_EP_ClrStall+0x86>
 800341c:	2302      	movs	r3, #2
 800341e:	e00e      	b.n	800343e <HAL_PCD_EP_ClrStall+0xa4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	f005 f9da 	bl	80087e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da0c      	bge.n	8003474 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3310      	adds	r3, #16
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e00c      	b.n	800348e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	f003 020f 	and.w	r2, r3, #15
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	3304      	adds	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f004 fff9 	bl	800848c <USB_EPStopXfer>
 800349a:	4603      	mov	r3, r0
 800349c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800349e:	7afb      	ldrb	r3, [r7, #11]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	3310      	adds	r3, #16
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d901      	bls.n	80034e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e06b      	b.n	80035b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d902      	bls.n	80034fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	3303      	adds	r3, #3
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003504:	e02a      	b.n	800355c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3303      	adds	r3, #3
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68d9      	ldr	r1, [r3, #12]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	4603      	mov	r3, r0
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f005 f84e 	bl	80085e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	441a      	add	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	441a      	add	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	429a      	cmp	r2, r3
 8003570:	d809      	bhi.n	8003586 <PCD_WriteEmptyTxFifo+0xde>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800357a:	429a      	cmp	r2, r3
 800357c:	d203      	bcs.n	8003586 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1bf      	bne.n	8003506 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	429a      	cmp	r2, r3
 8003590:	d811      	bhi.n	80035b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	2201      	movs	r2, #1
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	6939      	ldr	r1, [r7, #16]
 80035ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035b2:	4013      	ands	r3, r2
 80035b4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	333c      	adds	r3, #60	@ 0x3c
 80035d8:	3304      	adds	r3, #4
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	799b      	ldrb	r3, [r3, #6]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d17b      	bne.n	80036ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4a61      	ldr	r2, [pc, #388]	@ (8003788 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	f240 80b9 	bls.w	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80b3 	beq.w	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003622:	461a      	mov	r2, r3
 8003624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003628:	6093      	str	r3, [r2, #8]
 800362a:	e0a7      	b.n	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	2320      	movs	r3, #32
 8003646:	6093      	str	r3, [r2, #8]
 8003648:	e098      	b.n	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 8093 	bne.w	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	4a4b      	ldr	r2, [pc, #300]	@ (8003788 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d90f      	bls.n	800367e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003674:	461a      	mov	r2, r3
 8003676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800367a:	6093      	str	r3, [r2, #8]
 800367c:	e07e      	b.n	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	3304      	adds	r3, #4
 8003692:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	0159      	lsls	r1, r3, #5
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	440b      	add	r3, r1
 80036a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036aa:	1ad2      	subs	r2, r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d114      	bne.n	80036e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036c8:	461a      	mov	r2, r3
 80036ca:	2101      	movs	r1, #1
 80036cc:	f005 fa20 	bl	8008b10 <USB_EP0_OutStart>
 80036d0:	e006      	b.n	80036e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f007 fd7a 	bl	800b1e0 <HAL_PCD_DataOutStageCallback>
 80036ec:	e046      	b.n	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	4a26      	ldr	r2, [pc, #152]	@ (800378c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d124      	bne.n	8003740 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370c:	461a      	mov	r2, r3
 800370e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003712:	6093      	str	r3, [r2, #8]
 8003714:	e032      	b.n	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372c:	461a      	mov	r2, r3
 800372e:	2320      	movs	r3, #32
 8003730:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	4619      	mov	r1, r3
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f007 fd51 	bl	800b1e0 <HAL_PCD_DataOutStageCallback>
 800373e:	e01d      	b.n	800377c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d114      	bne.n	8003770 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003768:	461a      	mov	r2, r3
 800376a:	2100      	movs	r1, #0
 800376c:	f005 f9d0 	bl	8008b10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f007 fd32 	bl	800b1e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	4f54300a 	.word	0x4f54300a
 800378c:	4f54310a 	.word	0x4f54310a

08003790 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	333c      	adds	r3, #60	@ 0x3c
 80037a8:	3304      	adds	r3, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <PCD_EP_OutSetupPacket_int+0x88>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d90e      	bls.n	80037e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d009      	beq.n	80037e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f007 fce9 	bl	800b1bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <PCD_EP_OutSetupPacket_int+0x88>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d90c      	bls.n	800380c <PCD_EP_OutSetupPacket_int+0x7c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	799b      	ldrb	r3, [r3, #6]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d108      	bne.n	800380c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003804:	461a      	mov	r2, r3
 8003806:	2101      	movs	r1, #1
 8003808:	f005 f982 	bl	8008b10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	4f54300a 	.word	0x4f54300a

0800381c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
 8003828:	4613      	mov	r3, r2
 800382a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d107      	bne.n	800384a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800383a:	883b      	ldrh	r3, [r7, #0]
 800383c:	0419      	lsls	r1, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	430a      	orrs	r2, r1
 8003846:	629a      	str	r2, [r3, #40]	@ 0x28
 8003848:	e028      	b.n	800389c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4413      	add	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e00d      	b.n	800387a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	3340      	adds	r3, #64	@ 0x40
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	3301      	adds	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	3b01      	subs	r3, #1
 8003880:	429a      	cmp	r2, r3
 8003882:	d3ec      	bcc.n	800385e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003884:	883b      	ldrh	r3, [r7, #0]
 8003886:	0418      	lsls	r0, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6819      	ldr	r1, [r3, #0]
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	3b01      	subs	r3, #1
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4302      	orrs	r2, r0
 8003894:	3340      	adds	r3, #64	@ 0x40
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_PCDEx_ActivateLPM+0x44>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	10000003 	.word	0x10000003

08003914 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003934:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_PWREx_ConfigSupply+0x70>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d00a      	beq.n	8003956 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003940:	4b16      	ldr	r3, [pc, #88]	@ (800399c <HAL_PWREx_ConfigSupply+0x70>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	429a      	cmp	r2, r3
 800394c:	d001      	beq.n	8003952 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e01f      	b.n	8003992 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e01d      	b.n	8003992 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003956:	4b11      	ldr	r3, [pc, #68]	@ (800399c <HAL_PWREx_ConfigSupply+0x70>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	490f      	ldr	r1, [pc, #60]	@ (800399c <HAL_PWREx_ConfigSupply+0x70>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4313      	orrs	r3, r2
 8003964:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003966:	f7fd fef7 	bl	8001758 <HAL_GetTick>
 800396a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800396c:	e009      	b.n	8003982 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800396e:	f7fd fef3 	bl	8001758 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800397c:	d901      	bls.n	8003982 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e007      	b.n	8003992 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_PWREx_ConfigSupply+0x70>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800398a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800398e:	d1ee      	bne.n	800396e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	58024800 	.word	0x58024800

080039a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80039aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ae:	60d3      	str	r3, [r2, #12]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	58024800 	.word	0x58024800

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08c      	sub	sp, #48	@ 0x30
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f000 bc1f 	b.w	8004212 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80b3 	beq.w	8003b48 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e2:	4b95      	ldr	r3, [pc, #596]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039ec:	4b92      	ldr	r3, [pc, #584]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d007      	beq.n	8003a08 <HAL_RCC_OscConfig+0x48>
 80039f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fa:	2b18      	cmp	r3, #24
 80039fc:	d112      	bne.n	8003a24 <HAL_RCC_OscConfig+0x64>
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d10d      	bne.n	8003a24 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	4b8b      	ldr	r3, [pc, #556]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8098 	beq.w	8003b46 <HAL_RCC_OscConfig+0x186>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 8093 	bne.w	8003b46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e3f6      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCC_OscConfig+0x7c>
 8003a2e:	4b82      	ldr	r3, [pc, #520]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a81      	ldr	r2, [pc, #516]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e058      	b.n	8003aee <HAL_RCC_OscConfig+0x12e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d112      	bne.n	8003a6a <HAL_RCC_OscConfig+0xaa>
 8003a44:	4b7c      	ldr	r3, [pc, #496]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a7b      	ldr	r2, [pc, #492]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b79      	ldr	r3, [pc, #484]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a78      	ldr	r2, [pc, #480]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a56:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b76      	ldr	r3, [pc, #472]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a75      	ldr	r2, [pc, #468]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e041      	b.n	8003aee <HAL_RCC_OscConfig+0x12e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a72:	d112      	bne.n	8003a9a <HAL_RCC_OscConfig+0xda>
 8003a74:	4b70      	ldr	r3, [pc, #448]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a6f      	ldr	r2, [pc, #444]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b6d      	ldr	r3, [pc, #436]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a6c      	ldr	r2, [pc, #432]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a86:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a69      	ldr	r2, [pc, #420]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e029      	b.n	8003aee <HAL_RCC_OscConfig+0x12e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003aa2:	d112      	bne.n	8003aca <HAL_RCC_OscConfig+0x10a>
 8003aa4:	4b64      	ldr	r3, [pc, #400]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a63      	ldr	r2, [pc, #396]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003aaa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b61      	ldr	r3, [pc, #388]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a60      	ldr	r2, [pc, #384]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b5e      	ldr	r3, [pc, #376]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e011      	b.n	8003aee <HAL_RCC_OscConfig+0x12e>
 8003aca:	4b5b      	ldr	r3, [pc, #364]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a5a      	ldr	r2, [pc, #360]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b58      	ldr	r3, [pc, #352]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a57      	ldr	r2, [pc, #348]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003adc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b55      	ldr	r3, [pc, #340]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a54      	ldr	r2, [pc, #336]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ae8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003aec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d013      	beq.n	8003b1e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd fe2f 	bl	8001758 <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003afe:	f7fd fe2b 	bl	8001758 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	@ 0x64
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e380      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b10:	4b49      	ldr	r3, [pc, #292]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x13e>
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fd fe1b 	bl	8001758 <HAL_GetTick>
 8003b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b26:	f7fd fe17 	bl	8001758 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b64      	cmp	r3, #100	@ 0x64
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e36c      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b38:	4b3f      	ldr	r3, [pc, #252]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x166>
 8003b44:	e000      	b.n	8003b48 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 808c 	beq.w	8003c6e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b56:	4b38      	ldr	r3, [pc, #224]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b5e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b60:	4b35      	ldr	r3, [pc, #212]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_RCC_OscConfig+0x1bc>
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	2b18      	cmp	r3, #24
 8003b70:	d137      	bne.n	8003be2 <HAL_RCC_OscConfig+0x222>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d132      	bne.n	8003be2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x1d4>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e33e      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b94:	4b28      	ldr	r3, [pc, #160]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 0219 	bic.w	r2, r3, #25
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4925      	ldr	r1, [pc, #148]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fd fdd7 	bl	8001758 <HAL_GetTick>
 8003baa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bae:	f7fd fdd3 	bl	8001758 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e328      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	4917      	ldr	r1, [pc, #92]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be0:	e045      	b.n	8003c6e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d028      	beq.n	8003c3c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bea:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 0219 	bic.w	r2, r3, #25
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4910      	ldr	r1, [pc, #64]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fdac 	bl	8001758 <HAL_GetTick>
 8003c00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fd fda8 	bl	8001758 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e2fd      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c16:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	4901      	ldr	r1, [pc, #4]	@ (8003c38 <HAL_RCC_OscConfig+0x278>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
 8003c36:	e01a      	b.n	8003c6e <HAL_RCC_OscConfig+0x2ae>
 8003c38:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3c:	4b97      	ldr	r3, [pc, #604]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a96      	ldr	r2, [pc, #600]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fd86 	bl	8001758 <HAL_GetTick>
 8003c4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c50:	f7fd fd82 	bl	8001758 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e2d7      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c62:	4b8e      	ldr	r3, [pc, #568]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d06a      	beq.n	8003d50 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c7a:	4b88      	ldr	r3, [pc, #544]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c84:	4b85      	ldr	r3, [pc, #532]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d007      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2e0>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b18      	cmp	r3, #24
 8003c94:	d11b      	bne.n	8003cce <HAL_RCC_OscConfig+0x30e>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d116      	bne.n	8003cce <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x2f8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	2b80      	cmp	r3, #128	@ 0x80
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e2ac      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cb8:	4b78      	ldr	r3, [pc, #480]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	4975      	ldr	r1, [pc, #468]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ccc:	e040      	b.n	8003d50 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d023      	beq.n	8003d1e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cd6:	4b71      	ldr	r3, [pc, #452]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a70      	ldr	r2, [pc, #448]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fd fd39 	bl	8001758 <HAL_GetTick>
 8003ce6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cea:	f7fd fd35 	bl	8001758 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e28a      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cfc:	4b67      	ldr	r3, [pc, #412]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d08:	4b64      	ldr	r3, [pc, #400]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	4961      	ldr	r1, [pc, #388]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60cb      	str	r3, [r1, #12]
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a5e      	ldr	r2, [pc, #376]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fd15 	bl	8001758 <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d32:	f7fd fd11 	bl	8001758 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e266      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d44:	4b55      	ldr	r3, [pc, #340]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d036      	beq.n	8003dca <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d019      	beq.n	8003d98 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d64:	4b4d      	ldr	r3, [pc, #308]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d68:	4a4c      	ldr	r2, [pc, #304]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd fcf2 	bl	8001758 <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fd fcee 	bl	8001758 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e243      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d8a:	4b44      	ldr	r3, [pc, #272]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x3b8>
 8003d96:	e018      	b.n	8003dca <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	4b40      	ldr	r3, [pc, #256]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fd fcd8 	bl	8001758 <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dac:	f7fd fcd4 	bl	8001758 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e229      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dbe:	4b37      	ldr	r3, [pc, #220]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d036      	beq.n	8003e44 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d019      	beq.n	8003e12 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dde:	4b2f      	ldr	r3, [pc, #188]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003de4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003de8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dea:	f7fd fcb5 	bl	8001758 <HAL_GetTick>
 8003dee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003df2:	f7fd fcb1 	bl	8001758 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e206      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e04:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x432>
 8003e10:	e018      	b.n	8003e44 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e12:	4b22      	ldr	r3, [pc, #136]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a21      	ldr	r2, [pc, #132]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fc9b 	bl	8001758 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e26:	f7fd fc97 	bl	8001758 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1ec      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e38:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80af 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e52:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <HAL_RCC_OscConfig+0x4e0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a12      	ldr	r2, [pc, #72]	@ (8003ea0 <HAL_RCC_OscConfig+0x4e0>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd fc7b 	bl	8001758 <HAL_GetTick>
 8003e62:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fd fc77 	bl	8001758 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	@ 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1cc      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e78:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <HAL_RCC_OscConfig+0x4e0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4e4>
 8003e8c:	4b03      	ldr	r3, [pc, #12]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e90:	4a02      	ldr	r2, [pc, #8]	@ (8003e9c <HAL_RCC_OscConfig+0x4dc>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e98:	e05b      	b.n	8003f52 <HAL_RCC_OscConfig+0x592>
 8003e9a:	bf00      	nop
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	58024800 	.word	0x58024800
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d112      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x512>
 8003eac:	4b9d      	ldr	r3, [pc, #628]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	4a9c      	ldr	r2, [pc, #624]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb8:	4b9a      	ldr	r3, [pc, #616]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebc:	4a99      	ldr	r2, [pc, #612]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec4:	4b97      	ldr	r3, [pc, #604]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec8:	4a96      	ldr	r2, [pc, #600]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003eca:	f023 0304 	bic.w	r3, r3, #4
 8003ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed0:	e03f      	b.n	8003f52 <HAL_RCC_OscConfig+0x592>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d112      	bne.n	8003f00 <HAL_RCC_OscConfig+0x540>
 8003eda:	4b92      	ldr	r3, [pc, #584]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	4a91      	ldr	r2, [pc, #580]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee6:	4b8f      	ldr	r3, [pc, #572]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eea:	4a8e      	ldr	r2, [pc, #568]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef2:	4b8c      	ldr	r3, [pc, #560]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef6:	4a8b      	ldr	r2, [pc, #556]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003efe:	e028      	b.n	8003f52 <HAL_RCC_OscConfig+0x592>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b85      	cmp	r3, #133	@ 0x85
 8003f06:	d112      	bne.n	8003f2e <HAL_RCC_OscConfig+0x56e>
 8003f08:	4b86      	ldr	r3, [pc, #536]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0c:	4a85      	ldr	r2, [pc, #532]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f14:	4b83      	ldr	r3, [pc, #524]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f18:	4a82      	ldr	r2, [pc, #520]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f20:	4b80      	ldr	r3, [pc, #512]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f24:	4a7f      	ldr	r2, [pc, #508]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f2c:	e011      	b.n	8003f52 <HAL_RCC_OscConfig+0x592>
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f32:	4a7c      	ldr	r2, [pc, #496]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	4a79      	ldr	r2, [pc, #484]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f40:	f023 0304 	bic.w	r3, r3, #4
 8003f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f46:	4b77      	ldr	r3, [pc, #476]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	4a76      	ldr	r2, [pc, #472]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d015      	beq.n	8003f86 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fd fbfd 	bl	8001758 <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fd fbf9 	bl	8001758 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e14c      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f78:	4b6a      	ldr	r3, [pc, #424]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ee      	beq.n	8003f62 <HAL_RCC_OscConfig+0x5a2>
 8003f84:	e014      	b.n	8003fb0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fd fbe7 	bl	8001758 <HAL_GetTick>
 8003f8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd fbe3 	bl	8001758 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e136      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fa4:	4b5f      	ldr	r3, [pc, #380]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ee      	bne.n	8003f8e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 812b 	beq.w	8004210 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fba:	4b5a      	ldr	r3, [pc, #360]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fc2:	2b18      	cmp	r3, #24
 8003fc4:	f000 80bb 	beq.w	800413e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	f040 8095 	bne.w	80040fc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd2:	4b54      	ldr	r3, [pc, #336]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a53      	ldr	r2, [pc, #332]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003fd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd fbbb 	bl	8001758 <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fd fbb7 	bl	8001758 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e10c      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004004:	4b47      	ldr	r3, [pc, #284]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004006:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004008:	4b47      	ldr	r3, [pc, #284]	@ (8004128 <HAL_RCC_OscConfig+0x768>)
 800400a:	4013      	ands	r3, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004014:	0112      	lsls	r2, r2, #4
 8004016:	430a      	orrs	r2, r1
 8004018:	4942      	ldr	r1, [pc, #264]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 800401a:	4313      	orrs	r3, r2
 800401c:	628b      	str	r3, [r1, #40]	@ 0x28
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	3b01      	subs	r3, #1
 8004024:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402c:	3b01      	subs	r3, #1
 800402e:	025b      	lsls	r3, r3, #9
 8004030:	b29b      	uxth	r3, r3
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	3b01      	subs	r3, #1
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	3b01      	subs	r3, #1
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800404e:	4935      	ldr	r1, [pc, #212]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004050:	4313      	orrs	r3, r2
 8004052:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004054:	4b33      	ldr	r3, [pc, #204]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	4a32      	ldr	r2, [pc, #200]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004060:	4b30      	ldr	r3, [pc, #192]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004064:	4b31      	ldr	r3, [pc, #196]	@ (800412c <HAL_RCC_OscConfig+0x76c>)
 8004066:	4013      	ands	r3, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800406c:	00d2      	lsls	r2, r2, #3
 800406e:	492d      	ldr	r1, [pc, #180]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004070:	4313      	orrs	r3, r2
 8004072:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004074:	4b2b      	ldr	r3, [pc, #172]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	f023 020c 	bic.w	r2, r3, #12
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	4928      	ldr	r1, [pc, #160]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004082:	4313      	orrs	r3, r2
 8004084:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004086:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408a:	f023 0202 	bic.w	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	4924      	ldr	r1, [pc, #144]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004094:	4313      	orrs	r3, r2
 8004096:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004098:	4b22      	ldr	r3, [pc, #136]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	4a21      	ldr	r2, [pc, #132]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 800409e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80040bc:	4b19      	ldr	r3, [pc, #100]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c0:	4a18      	ldr	r2, [pc, #96]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd fb40 	bl	8001758 <HAL_GetTick>
 80040d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd fb3c 	bl	8001758 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e091      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x71c>
 80040fa:	e089      	b.n	8004210 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a08      	ldr	r2, [pc, #32]	@ (8004124 <HAL_RCC_OscConfig+0x764>)
 8004102:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fb26 	bl	8001758 <HAL_GetTick>
 800410c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800410e:	e00f      	b.n	8004130 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004110:	f7fd fb22 	bl	8001758 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d908      	bls.n	8004130 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e077      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
 8004122:	bf00      	nop
 8004124:	58024400 	.word	0x58024400
 8004128:	fffffc0c 	.word	0xfffffc0c
 800412c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004130:	4b3a      	ldr	r3, [pc, #232]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e9      	bne.n	8004110 <HAL_RCC_OscConfig+0x750>
 800413c:	e068      	b.n	8004210 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800413e:	4b37      	ldr	r3, [pc, #220]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 8004140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004142:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004144:	4b35      	ldr	r3, [pc, #212]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	2b01      	cmp	r3, #1
 8004150:	d031      	beq.n	80041b6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f003 0203 	and.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d12a      	bne.n	80041b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d122      	bne.n	80041b6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d11a      	bne.n	80041b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	0a5b      	lsrs	r3, r3, #9
 8004184:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d111      	bne.n	80041b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d108      	bne.n	80041b6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	0e1b      	lsrs	r3, r3, #24
 80041a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e02b      	b.n	8004212 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80041ba:	4b18      	ldr	r3, [pc, #96]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 80041bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041be:	08db      	lsrs	r3, r3, #3
 80041c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041c4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d01f      	beq.n	8004210 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80041d0:	4b12      	ldr	r3, [pc, #72]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	4a11      	ldr	r2, [pc, #68]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041dc:	f7fd fabc 	bl	8001758 <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80041e2:	bf00      	nop
 80041e4:	f7fd fab8 	bl	8001758 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d0f9      	beq.n	80041e4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041f0:	4b0a      	ldr	r3, [pc, #40]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 80041f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004220 <HAL_RCC_OscConfig+0x860>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80041fc:	00d2      	lsls	r2, r2, #3
 80041fe:	4907      	ldr	r1, [pc, #28]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004204:	4b05      	ldr	r3, [pc, #20]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	4a04      	ldr	r2, [pc, #16]	@ (800421c <HAL_RCC_OscConfig+0x85c>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3730      	adds	r7, #48	@ 0x30
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	58024400 	.word	0x58024400
 8004220:	ffff0007 	.word	0xffff0007

08004224 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e19c      	b.n	8004572 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004238:	4b8a      	ldr	r3, [pc, #552]	@ (8004464 <HAL_RCC_ClockConfig+0x240>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d910      	bls.n	8004268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b87      	ldr	r3, [pc, #540]	@ (8004464 <HAL_RCC_ClockConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 020f 	bic.w	r2, r3, #15
 800424e:	4985      	ldr	r1, [pc, #532]	@ (8004464 <HAL_RCC_ClockConfig+0x240>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b83      	ldr	r3, [pc, #524]	@ (8004464 <HAL_RCC_ClockConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e184      	b.n	8004572 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	4b7b      	ldr	r3, [pc, #492]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004280:	429a      	cmp	r2, r3
 8004282:	d908      	bls.n	8004296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004284:	4b78      	ldr	r3, [pc, #480]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	4975      	ldr	r1, [pc, #468]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004292:	4313      	orrs	r3, r2
 8004294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d010      	beq.n	80042c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	4b70      	ldr	r3, [pc, #448]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d908      	bls.n	80042c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	496a      	ldr	r1, [pc, #424]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d010      	beq.n	80042f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	4b64      	ldr	r3, [pc, #400]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042dc:	429a      	cmp	r2, r3
 80042de:	d908      	bls.n	80042f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042e0:	4b61      	ldr	r3, [pc, #388]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	495e      	ldr	r1, [pc, #376]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d010      	beq.n	8004320 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	4b59      	ldr	r3, [pc, #356]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800430a:	429a      	cmp	r2, r3
 800430c:	d908      	bls.n	8004320 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800430e:	4b56      	ldr	r3, [pc, #344]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	4953      	ldr	r1, [pc, #332]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 800431c:	4313      	orrs	r3, r2
 800431e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	4b4d      	ldr	r3, [pc, #308]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	429a      	cmp	r2, r3
 800433a:	d908      	bls.n	800434e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433c:	4b4a      	ldr	r3, [pc, #296]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f023 020f 	bic.w	r2, r3, #15
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4947      	ldr	r1, [pc, #284]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 800434a:	4313      	orrs	r3, r2
 800434c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d055      	beq.n	8004406 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800435a:	4b43      	ldr	r3, [pc, #268]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	4940      	ldr	r1, [pc, #256]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004368:	4313      	orrs	r3, r2
 800436a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d107      	bne.n	8004384 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004374:	4b3c      	ldr	r3, [pc, #240]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d121      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0f6      	b.n	8004572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d107      	bne.n	800439c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800438c:	4b36      	ldr	r3, [pc, #216]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d115      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0ea      	b.n	8004572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043a4:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0de      	b.n	8004572 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0d6      	b.n	8004572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043c4:	4b28      	ldr	r3, [pc, #160]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f023 0207 	bic.w	r2, r3, #7
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4925      	ldr	r1, [pc, #148]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d6:	f7fd f9bf 	bl	8001758 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043de:	f7fd f9bb 	bl	8001758 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0be      	b.n	8004572 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	429a      	cmp	r2, r3
 8004404:	d1eb      	bne.n	80043de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	429a      	cmp	r2, r3
 8004420:	d208      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004422:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f023 020f 	bic.w	r2, r3, #15
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	490e      	ldr	r1, [pc, #56]	@ (8004468 <HAL_RCC_ClockConfig+0x244>)
 8004430:	4313      	orrs	r3, r2
 8004432:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004434:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <HAL_RCC_ClockConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d214      	bcs.n	800446c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <HAL_RCC_ClockConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 020f 	bic.w	r2, r3, #15
 800444a:	4906      	ldr	r1, [pc, #24]	@ (8004464 <HAL_RCC_ClockConfig+0x240>)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <HAL_RCC_ClockConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e086      	b.n	8004572 <HAL_RCC_ClockConfig+0x34e>
 8004464:	52002000 	.word	0x52002000
 8004468:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d010      	beq.n	800449a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	4b3f      	ldr	r3, [pc, #252]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004484:	429a      	cmp	r2, r3
 8004486:	d208      	bcs.n	800449a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004488:	4b3c      	ldr	r3, [pc, #240]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	4939      	ldr	r1, [pc, #228]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 8004496:	4313      	orrs	r3, r2
 8004498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d010      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	4b34      	ldr	r3, [pc, #208]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d208      	bcs.n	80044c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044b6:	4b31      	ldr	r3, [pc, #196]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	492e      	ldr	r1, [pc, #184]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	4b28      	ldr	r3, [pc, #160]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d208      	bcs.n	80044f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044e4:	4b25      	ldr	r3, [pc, #148]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	4922      	ldr	r1, [pc, #136]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d010      	beq.n	8004524 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	4b1d      	ldr	r3, [pc, #116]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800450e:	429a      	cmp	r2, r3
 8004510:	d208      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004512:	4b1a      	ldr	r3, [pc, #104]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4917      	ldr	r1, [pc, #92]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 8004520:	4313      	orrs	r3, r2
 8004522:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004524:	f000 f834 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b14      	ldr	r3, [pc, #80]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	4912      	ldr	r1, [pc, #72]	@ (8004580 <HAL_RCC_ClockConfig+0x35c>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
 8004540:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004542:	4b0e      	ldr	r3, [pc, #56]	@ (800457c <HAL_RCC_ClockConfig+0x358>)
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	4a0d      	ldr	r2, [pc, #52]	@ (8004580 <HAL_RCC_ClockConfig+0x35c>)
 800454c:	5cd3      	ldrb	r3, [r2, r3]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	4a0a      	ldr	r2, [pc, #40]	@ (8004584 <HAL_RCC_ClockConfig+0x360>)
 800455a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800455c:	4a0a      	ldr	r2, [pc, #40]	@ (8004588 <HAL_RCC_ClockConfig+0x364>)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004562:	4b0a      	ldr	r3, [pc, #40]	@ (800458c <HAL_RCC_ClockConfig+0x368>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd f8ac 	bl	80016c4 <HAL_InitTick>
 800456c:	4603      	mov	r3, r0
 800456e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	58024400 	.word	0x58024400
 8004580:	0800c704 	.word	0x0800c704
 8004584:	24000004 	.word	0x24000004
 8004588:	24000000 	.word	0x24000000
 800458c:	24000008 	.word	0x24000008

08004590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	b089      	sub	sp, #36	@ 0x24
 8004594:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004596:	4bb3      	ldr	r3, [pc, #716]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800459e:	2b18      	cmp	r3, #24
 80045a0:	f200 8155 	bhi.w	800484e <HAL_RCC_GetSysClockFreq+0x2be>
 80045a4:	a201      	add	r2, pc, #4	@ (adr r2, 80045ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	08004611 	.word	0x08004611
 80045b0:	0800484f 	.word	0x0800484f
 80045b4:	0800484f 	.word	0x0800484f
 80045b8:	0800484f 	.word	0x0800484f
 80045bc:	0800484f 	.word	0x0800484f
 80045c0:	0800484f 	.word	0x0800484f
 80045c4:	0800484f 	.word	0x0800484f
 80045c8:	0800484f 	.word	0x0800484f
 80045cc:	08004637 	.word	0x08004637
 80045d0:	0800484f 	.word	0x0800484f
 80045d4:	0800484f 	.word	0x0800484f
 80045d8:	0800484f 	.word	0x0800484f
 80045dc:	0800484f 	.word	0x0800484f
 80045e0:	0800484f 	.word	0x0800484f
 80045e4:	0800484f 	.word	0x0800484f
 80045e8:	0800484f 	.word	0x0800484f
 80045ec:	0800463d 	.word	0x0800463d
 80045f0:	0800484f 	.word	0x0800484f
 80045f4:	0800484f 	.word	0x0800484f
 80045f8:	0800484f 	.word	0x0800484f
 80045fc:	0800484f 	.word	0x0800484f
 8004600:	0800484f 	.word	0x0800484f
 8004604:	0800484f 	.word	0x0800484f
 8004608:	0800484f 	.word	0x0800484f
 800460c:	08004643 	.word	0x08004643
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004610:	4b94      	ldr	r3, [pc, #592]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800461c:	4b91      	ldr	r3, [pc, #580]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	4a90      	ldr	r2, [pc, #576]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800462e:	e111      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004630:	4b8d      	ldr	r3, [pc, #564]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004632:	61bb      	str	r3, [r7, #24]
      break;
 8004634:	e10e      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004636:	4b8d      	ldr	r3, [pc, #564]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004638:	61bb      	str	r3, [r7, #24]
      break;
 800463a:	e10b      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800463c:	4b8c      	ldr	r3, [pc, #560]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800463e:	61bb      	str	r3, [r7, #24]
      break;
 8004640:	e108      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004642:	4b88      	ldr	r3, [pc, #544]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800464c:	4b85      	ldr	r3, [pc, #532]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004656:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004658:	4b82      	ldr	r3, [pc, #520]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004662:	4b80      	ldr	r3, [pc, #512]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004666:	08db      	lsrs	r3, r3, #3
 8004668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80e1 	beq.w	8004848 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b02      	cmp	r3, #2
 800468a:	f000 8083 	beq.w	8004794 <HAL_RCC_GetSysClockFreq+0x204>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b02      	cmp	r3, #2
 8004692:	f200 80a1 	bhi.w	80047d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x114>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d056      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x1c0>
 80046a2:	e099      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d02d      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	08db      	lsrs	r3, r3, #3
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	4a6b      	ldr	r2, [pc, #428]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
 80046c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046da:	4b62      	ldr	r3, [pc, #392]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800470a:	e087      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004716:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004878 <HAL_RCC_GetSysClockFreq+0x2e8>
 800471a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471e:	4b51      	ldr	r3, [pc, #324]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004732:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800474e:	e065      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800487c <HAL_RCC_GetSysClockFreq+0x2ec>
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b40      	ldr	r3, [pc, #256]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a02 	vldr	s12, [r7, #8]
 8004776:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004792:	e043      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004880 <HAL_RCC_GetSysClockFreq+0x2f0>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047d6:	e021      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800487c <HAL_RCC_GetSysClockFreq+0x2ec>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800481a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800481c:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	0a5b      	lsrs	r3, r3, #9
 8004822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004826:	3301      	adds	r3, #1
 8004828:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004834:	edd7 6a07 	vldr	s13, [r7, #28]
 8004838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800483c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004840:	ee17 3a90 	vmov	r3, s15
 8004844:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004846:	e005      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
      break;
 800484c:	e002      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800484e:	4b07      	ldr	r3, [pc, #28]	@ (800486c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004850:	61bb      	str	r3, [r7, #24]
      break;
 8004852:	bf00      	nop
  }

  return sysclockfreq;
 8004854:	69bb      	ldr	r3, [r7, #24]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3724      	adds	r7, #36	@ 0x24
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	58024400 	.word	0x58024400
 8004868:	03d09000 	.word	0x03d09000
 800486c:	003d0900 	.word	0x003d0900
 8004870:	016e3600 	.word	0x016e3600
 8004874:	46000000 	.word	0x46000000
 8004878:	4c742400 	.word	0x4c742400
 800487c:	4a742400 	.word	0x4a742400
 8004880:	4bb71b00 	.word	0x4bb71b00

08004884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800488a:	f7ff fe81 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 800488e:	4602      	mov	r2, r0
 8004890:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	490f      	ldr	r1, [pc, #60]	@ (80048d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800489c:	5ccb      	ldrb	r3, [r1, r3]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	fa22 f303 	lsr.w	r3, r2, r3
 80048a6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80048a8:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	4a09      	ldr	r2, [pc, #36]	@ (80048d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80048b2:	5cd3      	ldrb	r3, [r2, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a07      	ldr	r2, [pc, #28]	@ (80048dc <HAL_RCC_GetHCLKFreq+0x58>)
 80048c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048c2:	4a07      	ldr	r2, [pc, #28]	@ (80048e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80048c8:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <HAL_RCC_GetHCLKFreq+0x58>)
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	58024400 	.word	0x58024400
 80048d8:	0800c704 	.word	0x0800c704
 80048dc:	24000004 	.word	0x24000004
 80048e0:	24000000 	.word	0x24000000

080048e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80048e8:	f7ff ffcc 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4904      	ldr	r1, [pc, #16]	@ (800490c <HAL_RCC_GetPCLK1Freq+0x28>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	58024400 	.word	0x58024400
 800490c:	0800c704 	.word	0x0800c704

08004910 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b0c8      	sub	sp, #288	@ 0x120
 8004916:	af00      	add	r7, sp, #0
 8004918:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800491c:	2300      	movs	r3, #0
 800491e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004922:	2300      	movs	r3, #0
 8004924:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004934:	2500      	movs	r5, #0
 8004936:	ea54 0305 	orrs.w	r3, r4, r5
 800493a:	d049      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800493c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004942:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004948:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800494c:	d828      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800494e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004952:	d01a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004958:	d822      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004962:	d007      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004964:	e01c      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004966:	4ba7      	ldr	r3, [pc, #668]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	4aa6      	ldr	r2, [pc, #664]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800496c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004972:	e01a      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004978:	3308      	adds	r3, #8
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f002 fa6d 	bl	8006e5c <RCCEx_PLL2_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004988:	e00f      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800498e:	3328      	adds	r3, #40	@ 0x28
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f002 fb14 	bl	8006fc0 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800499e:	e004      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80049a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049b2:	4b94      	ldr	r3, [pc, #592]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c0:	4a90      	ldr	r2, [pc, #576]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80049dc:	f04f 0900 	mov.w	r9, #0
 80049e0:	ea58 0309 	orrs.w	r3, r8, r9
 80049e4:	d047      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80049e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d82a      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80049f0:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a1b 	.word	0x08004a1b
 8004a00:	08004a31 	.word	0x08004a31
 8004a04:	08004a4f 	.word	0x08004a4f
 8004a08:	08004a4f 	.word	0x08004a4f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0c:	4b7d      	ldr	r3, [pc, #500]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	4a7c      	ldr	r2, [pc, #496]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a18:	e01a      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a1e:	3308      	adds	r3, #8
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f002 fa1a 	bl	8006e5c <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a2e:	e00f      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a34:	3328      	adds	r3, #40	@ 0x28
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f002 fac1 	bl	8006fc0 <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a44:	e004      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a4c:	e000      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a58:	4b6a      	ldr	r3, [pc, #424]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5c:	f023 0107 	bic.w	r1, r3, #7
 8004a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a66:	4a67      	ldr	r2, [pc, #412]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a6c:	e003      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004a82:	f04f 0b00 	mov.w	fp, #0
 8004a86:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a8a:	d054      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a96:	d036      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004a98:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004a9c:	d82f      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aa2:	d032      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aa8:	d829      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aac:	d02f      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ab0:	d825      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ab2:	2b80      	cmp	r3, #128	@ 0x80
 8004ab4:	d018      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004ab6:	2b80      	cmp	r3, #128	@ 0x80
 8004ab8:	d821      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004abe:	2b40      	cmp	r3, #64	@ 0x40
 8004ac0:	d007      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004ac2:	e01c      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	4a4e      	ldr	r2, [pc, #312]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004ad0:	e01e      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f002 f9be 	bl	8006e5c <RCCEx_PLL2_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004ae6:	e013      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aec:	3328      	adds	r3, #40	@ 0x28
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f002 fa65 	bl	8006fc0 <RCCEx_PLL3_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b04:	e004      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004b06:	bf00      	nop
 8004b08:	e002      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004b0a:	bf00      	nop
 8004b0c:	e000      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004b18:	4b3a      	ldr	r3, [pc, #232]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b26:	4a37      	ldr	r2, [pc, #220]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b2c:	e003      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b46:	2300      	movs	r3, #0
 8004b48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004b50:	460b      	mov	r3, r1
 8004b52:	4313      	orrs	r3, r2
 8004b54:	d05c      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b60:	d03b      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b62:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b66:	d834      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6c:	d037      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b72:	d82e      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b78:	d033      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b7e:	d828      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b84:	d01a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8a:	d822      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b94:	d007      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004b96:	e01c      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b98:	4b1a      	ldr	r3, [pc, #104]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004ba4:	e01e      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004baa:	3308      	adds	r3, #8
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f002 f954 	bl	8006e5c <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004bba:	e013      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bc0:	3328      	adds	r3, #40	@ 0x28
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f002 f9fb 	bl	8006fc0 <RCCEx_PLL3_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004bd0:	e008      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bd8:	e004      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10d      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bfa:	4a02      	ldr	r2, [pc, #8]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c00:	e006      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004c02:	bf00      	nop
 8004c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	d03a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c36:	2b30      	cmp	r3, #48	@ 0x30
 8004c38:	d01f      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004c3a:	2b30      	cmp	r3, #48	@ 0x30
 8004c3c:	d819      	bhi.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d00c      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d815      	bhi.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d019      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	d111      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4e:	4bae      	ldr	r3, [pc, #696]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	4aad      	ldr	r2, [pc, #692]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c5a:	e011      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c60:	3308      	adds	r3, #8
 8004c62:	2102      	movs	r1, #2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f002 f8f9 	bl	8006e5c <RCCEx_PLL2_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c70:	e006      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c78:	e002      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c88:	4b9f      	ldr	r3, [pc, #636]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c96:	4a9c      	ldr	r2, [pc, #624]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c9c:	e003      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ca2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004cb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	d051      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd0:	d035      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004cd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd6:	d82e      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cdc:	d031      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004cde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ce2:	d828      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce8:	d01a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cee:	d822      	bhi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf8:	d007      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004cfa:	e01c      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfc:	4b82      	ldr	r3, [pc, #520]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	4a81      	ldr	r2, [pc, #516]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d08:	e01c      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d0e:	3308      	adds	r3, #8
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f002 f8a2 	bl	8006e5c <RCCEx_PLL2_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d1e:	e011      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d24:	3328      	adds	r3, #40	@ 0x28
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f002 f949 	bl	8006fc0 <RCCEx_PLL3_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d34:	e006      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d3c:	e002      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d4c:	4b6e      	ldr	r3, [pc, #440]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d50:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d5a:	4a6b      	ldr	r2, [pc, #428]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d60:	e003      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d053      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d94:	d033      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004d96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d9a:	d82c      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004da0:	d02f      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004da2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004da6:	d826      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004da8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dac:	d02b      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004dae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004db2:	d820      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db8:	d012      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dbe:	d81a      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d022      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc8:	d115      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dce:	3308      	adds	r3, #8
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f002 f842 	bl	8006e5c <RCCEx_PLL2_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dde:	e015      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de4:	3328      	adds	r3, #40	@ 0x28
 8004de6:	2101      	movs	r1, #1
 8004de8:	4618      	mov	r0, r3
 8004dea:	f002 f8e9 	bl	8006fc0 <RCCEx_PLL3_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004df4:	e00a      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e004      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004e02:	bf00      	nop
 8004e04:	e002      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e14:	4b3c      	ldr	r3, [pc, #240]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e22:	4a39      	ldr	r2, [pc, #228]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e42:	2300      	movs	r3, #0
 8004e44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	d060      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e5a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004e5e:	d039      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004e60:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004e64:	d832      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e6a:	d035      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e70:	d82c      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e76:	d031      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7c:	d826      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e82:	d02d      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004e84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e88:	d820      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e8e:	d012      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e94:	d81a      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d024      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e9e:	d115      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 ffd7 	bl	8006e5c <RCCEx_PLL2_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004eb4:	e017      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eba:	3328      	adds	r3, #40	@ 0x28
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f002 f87e 	bl	8006fc0 <RCCEx_PLL3_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004eca:	e00c      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ed4:	bf00      	nop
 8004ed6:	e006      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ed8:	bf00      	nop
 8004eda:	e004      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004edc:	bf00      	nop
 8004ede:	e002      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10e      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004efe:	4a02      	ldr	r2, [pc, #8]	@ (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f04:	e006      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f24:	2300      	movs	r3, #0
 8004f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	d037      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3e:	d00e      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f44:	d816      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d018      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4e:	d111      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f50:	4bc4      	ldr	r3, [pc, #784]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	4ac3      	ldr	r2, [pc, #780]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f5c:	e00f      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f62:	3308      	adds	r3, #8
 8004f64:	2101      	movs	r1, #1
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 ff78 	bl	8006e5c <RCCEx_PLL2_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f72:	e004      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f7a:	e000      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f86:	4bb7      	ldr	r3, [pc, #732]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f94:	4ab3      	ldr	r2, [pc, #716]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f96:	430b      	orrs	r3, r1
 8004f98:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f9a:	e003      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004fba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	d039      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d81c      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004fce:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08005011 	.word	0x08005011
 8004fd8:	08004fe5 	.word	0x08004fe5
 8004fdc:	08004ff3 	.word	0x08004ff3
 8004fe0:	08005011 	.word	0x08005011
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe4:	4b9f      	ldr	r3, [pc, #636]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	4a9e      	ldr	r2, [pc, #632]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ff0:	e00f      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 ff2e 	bl	8006e5c <RCCEx_PLL2_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005006:	e004      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800500e:	e000      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005012:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800501a:	4b92      	ldr	r3, [pc, #584]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800501c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501e:	f023 0103 	bic.w	r1, r3, #3
 8005022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005028:	4a8e      	ldr	r2, [pc, #568]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800502a:	430b      	orrs	r3, r1
 800502c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800502e:	e003      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005034:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005048:	2300      	movs	r3, #0
 800504a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800504e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005052:	460b      	mov	r3, r1
 8005054:	4313      	orrs	r3, r2
 8005056:	f000 8099 	beq.w	800518c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800505a:	4b83      	ldr	r3, [pc, #524]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a82      	ldr	r2, [pc, #520]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005066:	f7fc fb77 	bl	8001758 <HAL_GetTick>
 800506a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800506e:	e00b      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005070:	f7fc fb72 	bl	8001758 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b64      	cmp	r3, #100	@ 0x64
 800507e:	d903      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005086:	e005      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005088:	4b77      	ldr	r3, [pc, #476]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ed      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005094:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005098:	2b00      	cmp	r3, #0
 800509a:	d173      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800509c:	4b71      	ldr	r3, [pc, #452]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050a8:	4053      	eors	r3, r2
 80050aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d015      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050be:	4b69      	ldr	r3, [pc, #420]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	4a68      	ldr	r2, [pc, #416]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ca:	4b66      	ldr	r3, [pc, #408]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	4a65      	ldr	r2, [pc, #404]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050d6:	4a63      	ldr	r2, [pc, #396]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ea:	d118      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fc fb34 	bl	8001758 <HAL_GetTick>
 80050f0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f4:	e00d      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fc fb2f 	bl	8001758 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005100:	1ad2      	subs	r2, r2, r3
 8005102:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005106:	429a      	cmp	r2, r3
 8005108:	d903      	bls.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005110:	e005      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005112:	4b54      	ldr	r3, [pc, #336]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0eb      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800511e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005122:	2b00      	cmp	r3, #0
 8005124:	d129      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800512a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800512e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005136:	d10e      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005138:	4b4a      	ldr	r3, [pc, #296]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005144:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005148:	091a      	lsrs	r2, r3, #4
 800514a:	4b48      	ldr	r3, [pc, #288]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800514c:	4013      	ands	r3, r2
 800514e:	4a45      	ldr	r2, [pc, #276]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005150:	430b      	orrs	r3, r1
 8005152:	6113      	str	r3, [r2, #16]
 8005154:	e005      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005156:	4b43      	ldr	r3, [pc, #268]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	4a42      	ldr	r2, [pc, #264]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800515c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005160:	6113      	str	r3, [r2, #16]
 8005162:	4b40      	ldr	r3, [pc, #256]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005164:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800516a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800516e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005172:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005174:	430b      	orrs	r3, r1
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
 8005178:	e008      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800517a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800517e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005182:	e003      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005184:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005188:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800518c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f002 0301 	and.w	r3, r2, #1
 8005198:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800519c:	2300      	movs	r3, #0
 800519e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f000 8090 	beq.w	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b6:	2b28      	cmp	r3, #40	@ 0x28
 80051b8:	d870      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80051ba:	a201      	add	r2, pc, #4	@ (adr r2, 80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080052a5 	.word	0x080052a5
 80051c4:	0800529d 	.word	0x0800529d
 80051c8:	0800529d 	.word	0x0800529d
 80051cc:	0800529d 	.word	0x0800529d
 80051d0:	0800529d 	.word	0x0800529d
 80051d4:	0800529d 	.word	0x0800529d
 80051d8:	0800529d 	.word	0x0800529d
 80051dc:	0800529d 	.word	0x0800529d
 80051e0:	08005271 	.word	0x08005271
 80051e4:	0800529d 	.word	0x0800529d
 80051e8:	0800529d 	.word	0x0800529d
 80051ec:	0800529d 	.word	0x0800529d
 80051f0:	0800529d 	.word	0x0800529d
 80051f4:	0800529d 	.word	0x0800529d
 80051f8:	0800529d 	.word	0x0800529d
 80051fc:	0800529d 	.word	0x0800529d
 8005200:	08005287 	.word	0x08005287
 8005204:	0800529d 	.word	0x0800529d
 8005208:	0800529d 	.word	0x0800529d
 800520c:	0800529d 	.word	0x0800529d
 8005210:	0800529d 	.word	0x0800529d
 8005214:	0800529d 	.word	0x0800529d
 8005218:	0800529d 	.word	0x0800529d
 800521c:	0800529d 	.word	0x0800529d
 8005220:	080052a5 	.word	0x080052a5
 8005224:	0800529d 	.word	0x0800529d
 8005228:	0800529d 	.word	0x0800529d
 800522c:	0800529d 	.word	0x0800529d
 8005230:	0800529d 	.word	0x0800529d
 8005234:	0800529d 	.word	0x0800529d
 8005238:	0800529d 	.word	0x0800529d
 800523c:	0800529d 	.word	0x0800529d
 8005240:	080052a5 	.word	0x080052a5
 8005244:	0800529d 	.word	0x0800529d
 8005248:	0800529d 	.word	0x0800529d
 800524c:	0800529d 	.word	0x0800529d
 8005250:	0800529d 	.word	0x0800529d
 8005254:	0800529d 	.word	0x0800529d
 8005258:	0800529d 	.word	0x0800529d
 800525c:	0800529d 	.word	0x0800529d
 8005260:	080052a5 	.word	0x080052a5
 8005264:	58024400 	.word	0x58024400
 8005268:	58024800 	.word	0x58024800
 800526c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005274:	3308      	adds	r3, #8
 8005276:	2101      	movs	r1, #1
 8005278:	4618      	mov	r0, r3
 800527a:	f001 fdef 	bl	8006e5c <RCCEx_PLL2_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005284:	e00f      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528a:	3328      	adds	r3, #40	@ 0x28
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f001 fe96 	bl	8006fc0 <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800529a:	e004      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80052a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052ae:	4bc0      	ldr	r3, [pc, #768]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80052b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052be:	4abc      	ldr	r2, [pc, #752]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052c0:	430b      	orrs	r3, r1
 80052c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80052c4:	e003      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f002 0302 	and.w	r3, r2, #2
 80052da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052de:	2300      	movs	r3, #0
 80052e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80052e4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80052e8:	460b      	mov	r3, r1
 80052ea:	4313      	orrs	r3, r2
 80052ec:	d043      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f6:	2b05      	cmp	r3, #5
 80052f8:	d824      	bhi.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80052fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	0800534d 	.word	0x0800534d
 8005304:	08005319 	.word	0x08005319
 8005308:	0800532f 	.word	0x0800532f
 800530c:	0800534d 	.word	0x0800534d
 8005310:	0800534d 	.word	0x0800534d
 8005314:	0800534d 	.word	0x0800534d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800531c:	3308      	adds	r3, #8
 800531e:	2101      	movs	r1, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f001 fd9b 	bl	8006e5c <RCCEx_PLL2_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800532c:	e00f      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005332:	3328      	adds	r3, #40	@ 0x28
 8005334:	2101      	movs	r1, #1
 8005336:	4618      	mov	r0, r3
 8005338:	f001 fe42 	bl	8006fc0 <RCCEx_PLL3_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005356:	4b96      	ldr	r3, [pc, #600]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535a:	f023 0107 	bic.w	r1, r3, #7
 800535e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005366:	4a92      	ldr	r2, [pc, #584]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6553      	str	r3, [r2, #84]	@ 0x54
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005372:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f002 0304 	and.w	r3, r2, #4
 8005382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800538c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d043      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800539a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800539e:	2b05      	cmp	r3, #5
 80053a0:	d824      	bhi.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80053a2:	a201      	add	r2, pc, #4	@ (adr r2, 80053a8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053f5 	.word	0x080053f5
 80053ac:	080053c1 	.word	0x080053c1
 80053b0:	080053d7 	.word	0x080053d7
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	080053f5 	.word	0x080053f5
 80053bc:	080053f5 	.word	0x080053f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c4:	3308      	adds	r3, #8
 80053c6:	2101      	movs	r1, #1
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 fd47 	bl	8006e5c <RCCEx_PLL2_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053d4:	e00f      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053da:	3328      	adds	r3, #40	@ 0x28
 80053dc:	2101      	movs	r1, #1
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 fdee 	bl	8006fc0 <RCCEx_PLL3_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053ea:	e004      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053f2:	e000      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80053f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053fe:	4b6c      	ldr	r3, [pc, #432]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005402:	f023 0107 	bic.w	r1, r3, #7
 8005406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800540a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800540e:	4a68      	ldr	r2, [pc, #416]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005410:	430b      	orrs	r3, r1
 8005412:	6593      	str	r3, [r2, #88]	@ 0x58
 8005414:	e003      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005416:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800541a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800541e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f002 0320 	and.w	r3, r2, #32
 800542a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800542e:	2300      	movs	r3, #0
 8005430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d055      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800543e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005442:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800544a:	d033      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800544c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005450:	d82c      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005456:	d02f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545c:	d826      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800545e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005462:	d02b      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005464:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005468:	d820      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800546a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800546e:	d012      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005474:	d81a      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d022      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800547a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800547e:	d115      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005484:	3308      	adds	r3, #8
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f001 fce7 	bl	8006e5c <RCCEx_PLL2_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005494:	e015      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800549a:	3328      	adds	r3, #40	@ 0x28
 800549c:	2102      	movs	r1, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fd8e 	bl	8006fc0 <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054aa:	e00a      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054b2:	e006      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80054c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ca:	4b39      	ldr	r3, [pc, #228]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054da:	4a35      	ldr	r2, [pc, #212]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6553      	str	r3, [r2, #84]	@ 0x54
 80054e0:	e003      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054fa:	2300      	movs	r3, #0
 80054fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005500:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d058      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800550a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800550e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005512:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005516:	d033      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005518:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800551c:	d82c      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005522:	d02f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005528:	d826      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800552a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800552e:	d02b      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005530:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005534:	d820      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005536:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800553a:	d012      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800553c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005540:	d81a      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d022      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800554a:	d115      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800554c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005550:	3308      	adds	r3, #8
 8005552:	2100      	movs	r1, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f001 fc81 	bl	8006e5c <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005560:	e015      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005566:	3328      	adds	r3, #40	@ 0x28
 8005568:	2102      	movs	r1, #2
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fd28 	bl	8006fc0 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005576:	e00a      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800557e:	e006      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005580:	bf00      	nop
 8005582:	e004      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005584:	bf00      	nop
 8005586:	e002      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005588:	bf00      	nop
 800558a:	e000      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800558c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10e      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005596:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800559e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055a6:	4a02      	ldr	r2, [pc, #8]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ac:	e006      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80055c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d055      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055e8:	d033      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80055ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055ee:	d82c      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80055f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f4:	d02f      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055fa:	d826      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80055fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005600:	d02b      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005602:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005606:	d820      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800560c:	d012      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800560e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005612:	d81a      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d022      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561c:	d115      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800561e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005622:	3308      	adds	r3, #8
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fc18 	bl	8006e5c <RCCEx_PLL2_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005632:	e015      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005638:	3328      	adds	r3, #40	@ 0x28
 800563a:	2102      	movs	r1, #2
 800563c:	4618      	mov	r0, r3
 800563e:	f001 fcbf 	bl	8006fc0 <RCCEx_PLL3_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005648:	e00a      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005650:	e006      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005652:	bf00      	nop
 8005654:	e004      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800565e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005660:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005668:	4ba1      	ldr	r3, [pc, #644]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005674:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005678:	4a9d      	ldr	r2, [pc, #628]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800567a:	430b      	orrs	r3, r1
 800567c:	6593      	str	r3, [r2, #88]	@ 0x58
 800567e:	e003      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005684:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f002 0308 	and.w	r3, r2, #8
 8005694:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005698:	2300      	movs	r3, #0
 800569a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800569e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	d01e      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80056a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ba:	3328      	adds	r3, #40	@ 0x28
 80056bc:	2102      	movs	r1, #2
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fc7e 	bl	8006fc0 <RCCEx_PLL3_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056d0:	4b87      	ldr	r3, [pc, #540]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056e0:	4a83      	ldr	r2, [pc, #524]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056e2:	430b      	orrs	r3, r1
 80056e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f002 0310 	and.w	r3, r2, #16
 80056f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056f6:	2300      	movs	r3, #0
 80056f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005700:	460b      	mov	r3, r1
 8005702:	4313      	orrs	r3, r2
 8005704:	d01e      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800570a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800570e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005712:	d10c      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005718:	3328      	adds	r3, #40	@ 0x28
 800571a:	2102      	movs	r1, #2
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fc4f 	bl	8006fc0 <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800572e:	4b70      	ldr	r3, [pc, #448]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005732:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800573a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800573e:	4a6c      	ldr	r2, [pc, #432]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005740:	430b      	orrs	r3, r1
 8005742:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005750:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800575a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d03e      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005768:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800576c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005770:	d022      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005772:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005776:	d81b      	bhi.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005780:	d00b      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005782:	e015      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005788:	3308      	adds	r3, #8
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fb65 	bl	8006e5c <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005798:	e00f      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800579e:	3328      	adds	r3, #40	@ 0x28
 80057a0:	2102      	movs	r1, #2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 fc0c 	bl	8006fc0 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057ae:	e004      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057c2:	4b4b      	ldr	r3, [pc, #300]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057d2:	4a47      	ldr	r2, [pc, #284]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057f0:	2300      	movs	r3, #0
 80057f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d03b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005806:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800580a:	d01f      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800580c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005810:	d818      	bhi.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005816:	d003      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005818:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800581c:	d007      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800581e:	e011      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005820:	4b33      	ldr	r3, [pc, #204]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	4a32      	ldr	r2, [pc, #200]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800582a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800582c:	e00f      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800582e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005832:	3328      	adds	r3, #40	@ 0x28
 8005834:	2101      	movs	r1, #1
 8005836:	4618      	mov	r0, r3
 8005838:	f001 fbc2 	bl	8006fc0 <RCCEx_PLL3_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005842:	e004      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800584a:	e000      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800584c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005856:	4b26      	ldr	r3, [pc, #152]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005866:	4a22      	ldr	r2, [pc, #136]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005868:	430b      	orrs	r3, r1
 800586a:	6553      	str	r3, [r2, #84]	@ 0x54
 800586c:	e003      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005872:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005882:	673b      	str	r3, [r7, #112]	@ 0x70
 8005884:	2300      	movs	r3, #0
 8005886:	677b      	str	r3, [r7, #116]	@ 0x74
 8005888:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800588c:	460b      	mov	r3, r1
 800588e:	4313      	orrs	r3, r2
 8005890:	d034      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a0:	d007      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a4:	4b12      	ldr	r3, [pc, #72]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	4a11      	ldr	r2, [pc, #68]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058b0:	e00e      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b6:	3308      	adds	r3, #8
 80058b8:	2102      	movs	r1, #2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 face 	bl	8006e5c <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058c6:	e003      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058d8:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e6:	4a02      	ldr	r2, [pc, #8]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80058ee:	bf00      	nop
 80058f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800590a:	2300      	movs	r3, #0
 800590c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800590e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005912:	460b      	mov	r3, r1
 8005914:	4313      	orrs	r3, r2
 8005916:	d00c      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800591c:	3328      	adds	r3, #40	@ 0x28
 800591e:	2102      	movs	r1, #2
 8005920:	4618      	mov	r0, r3
 8005922:	f001 fb4d 	bl	8006fc0 <RCCEx_PLL3_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800593e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005940:	2300      	movs	r3, #0
 8005942:	667b      	str	r3, [r7, #100]	@ 0x64
 8005944:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005948:	460b      	mov	r3, r1
 800594a:	4313      	orrs	r3, r2
 800594c:	d038      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800594e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800595a:	d018      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800595c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005960:	d811      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005966:	d014      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800596c:	d80b      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005976:	d106      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005978:	4bc3      	ldr	r3, [pc, #780]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	4ac2      	ldr	r2, [pc, #776]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800597e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005984:	e008      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800598c:	e004      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005998:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a0:	4bb9      	ldr	r3, [pc, #740]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	4ab5      	ldr	r2, [pc, #724]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059b2:	430b      	orrs	r3, r1
 80059b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80059b6:	e003      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80059cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059ce:	2300      	movs	r3, #0
 80059d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059dc:	4baa      	ldr	r3, [pc, #680]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ea:	4aa7      	ldr	r2, [pc, #668]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80059fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80059fe:	2300      	movs	r3, #0
 8005a00:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a06:	460b      	mov	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	d009      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a0c:	4b9e      	ldr	r3, [pc, #632]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a10:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1a:	4a9b      	ldr	r2, [pc, #620]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a2e:	2300      	movs	r3, #0
 8005a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a32:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a36:	460b      	mov	r3, r1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005a3c:	4b92      	ldr	r3, [pc, #584]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a40:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4a:	4a8f      	ldr	r2, [pc, #572]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a5e:	2300      	movs	r3, #0
 8005a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a6c:	4b86      	ldr	r3, [pc, #536]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	4a85      	ldr	r2, [pc, #532]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a76:	6113      	str	r3, [r2, #16]
 8005a78:	4b83      	ldr	r3, [pc, #524]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a7a:	6919      	ldr	r1, [r3, #16]
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a84:	4a80      	ldr	r2, [pc, #512]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a86:	430b      	orrs	r3, r1
 8005a88:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a98:	2300      	movs	r3, #0
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d009      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005aa6:	4b78      	ldr	r3, [pc, #480]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aaa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab4:	4a74      	ldr	r2, [pc, #464]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ac8:	2300      	movs	r3, #0
 8005aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005acc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	d00a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ada:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ae6:	4a68      	ldr	r2, [pc, #416]	@ (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	2100      	movs	r1, #0
 8005af6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005afe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b02:	460b      	mov	r3, r1
 8005b04:	4313      	orrs	r3, r2
 8005b06:	d011      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 f9a3 	bl	8006e5c <RCCEx_PLL2_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	2100      	movs	r1, #0
 8005b36:	6239      	str	r1, [r7, #32]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b42:	460b      	mov	r3, r1
 8005b44:	4313      	orrs	r3, r2
 8005b46:	d011      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	2101      	movs	r1, #1
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 f983 	bl	8006e5c <RCCEx_PLL2_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	2100      	movs	r1, #0
 8005b76:	61b9      	str	r1, [r7, #24]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b82:	460b      	mov	r3, r1
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d011      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	2102      	movs	r1, #2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 f963 	bl	8006e5c <RCCEx_PLL2_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ba8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	6139      	str	r1, [r7, #16]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	d011      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bcc:	3328      	adds	r3, #40	@ 0x28
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f9f5 	bl	8006fc0 <RCCEx_PLL3_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005be8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c02:	460b      	mov	r3, r1
 8005c04:	4313      	orrs	r3, r2
 8005c06:	d011      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c0c:	3328      	adds	r3, #40	@ 0x28
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 f9d5 	bl	8006fc0 <RCCEx_PLL3_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005c1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	2100      	movs	r1, #0
 8005c36:	6039      	str	r1, [r7, #0]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c42:	460b      	mov	r3, r1
 8005c44:	4313      	orrs	r3, r2
 8005c46:	d011      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c4c:	3328      	adds	r3, #40	@ 0x28
 8005c4e:	2102      	movs	r1, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 f9b5 	bl	8006fc0 <RCCEx_PLL3_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005c5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005c6c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e000      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005c80:	46bd      	mov	sp, r7
 8005c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c86:	bf00      	nop
 8005c88:	58024400 	.word	0x58024400

08005c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b090      	sub	sp, #64	@ 0x40
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c9a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	f040 8094 	bne.w	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005ca4:	4b97      	ldr	r3, [pc, #604]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	f200 8087 	bhi.w	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005cd1 	.word	0x08005cd1
 8005cc0:	08005cf9 	.word	0x08005cf9
 8005cc4:	08005d21 	.word	0x08005d21
 8005cc8:	08005dbd 	.word	0x08005dbd
 8005ccc:	08005d49 	.word	0x08005d49
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cdc:	d108      	bne.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ff68 	bl	8006bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cec:	f000 bc97 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf4:	f000 bc93 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cf8:	4b82      	ldr	r3, [pc, #520]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d04:	d108      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d06:	f107 0318 	add.w	r3, r7, #24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fcac 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d14:	f000 bc83 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d1c:	f000 bc7f 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d20:	4b78      	ldr	r3, [pc, #480]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d2c:	d108      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d2e:	f107 030c 	add.w	r3, r7, #12
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fdec 	bl	8006910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d3c:	f000 bc6f 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d44:	f000 bc6b 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d48:	4b6e      	ldr	r3, [pc, #440]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d50:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d52:	4b6c      	ldr	r3, [pc, #432]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d64:	4b67      	ldr	r3, [pc, #412]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	08db      	lsrs	r3, r3, #3
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	4a66      	ldr	r2, [pc, #408]	@ (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d76:	e01f      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d78:	4b62      	ldr	r3, [pc, #392]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d84:	d106      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d8c:	d102      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d92:	e011      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d94:	4b5b      	ldr	r3, [pc, #364]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005da0:	d106      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da8:	d102      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005daa:	4b59      	ldr	r3, [pc, #356]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dae:	e003      	b.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005db4:	f000 bc33 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005db8:	f000 bc31 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005dbc:	4b55      	ldr	r3, [pc, #340]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc0:	f000 bc2d 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc8:	f000 bc29 	b.w	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	f040 809f 	bne.w	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005dda:	4b4a      	ldr	r3, [pc, #296]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dde:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005de2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dea:	d04d      	beq.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005df2:	f200 8084 	bhi.w	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dfa:	d07d      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e00:	d87d      	bhi.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	2b80      	cmp	r3, #128	@ 0x80
 8005e06:	d02d      	beq.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	2b80      	cmp	r3, #128	@ 0x80
 8005e0c:	d877      	bhi.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e16:	2b40      	cmp	r3, #64	@ 0x40
 8005e18:	d012      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005e1a:	e070      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e1c:	4b39      	ldr	r3, [pc, #228]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e28:	d107      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fec2 	bl	8006bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e38:	e3f1      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e3e:	e3ee      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e40:	4b30      	ldr	r3, [pc, #192]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e4c:	d107      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e4e:	f107 0318 	add.w	r3, r7, #24
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fc08 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e5c:	e3df      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e62:	e3dc      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e64:	4b27      	ldr	r3, [pc, #156]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e70:	d107      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e72:	f107 030c 	add.w	r3, r7, #12
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fd4a 	bl	8006910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e80:	e3cd      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e86:	e3ca      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e88:	4b1e      	ldr	r3, [pc, #120]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e90:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e92:	4b1c      	ldr	r3, [pc, #112]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ea4:	4b17      	ldr	r3, [pc, #92]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	08db      	lsrs	r3, r3, #3
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	4a16      	ldr	r2, [pc, #88]	@ (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eb6:	e01e      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005eb8:	4b12      	ldr	r3, [pc, #72]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec4:	d106      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ecc:	d102      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ece:	4b0f      	ldr	r3, [pc, #60]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ed2:	e010      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ee0:	d106      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ee8:	d102      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005eea:	4b09      	ldr	r3, [pc, #36]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eee:	e002      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ef4:	e393      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005ef6:	e392      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ef8:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005efc:	e38f      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f02:	e38c      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005f04:	58024400 	.word	0x58024400
 8005f08:	03d09000 	.word	0x03d09000
 8005f0c:	003d0900 	.word	0x003d0900
 8005f10:	016e3600 	.word	0x016e3600
 8005f14:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f1c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005f20:	430b      	orrs	r3, r1
 8005f22:	f040 809c 	bne.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005f26:	4b9e      	ldr	r3, [pc, #632]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005f2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f36:	d054      	beq.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f3e:	f200 808b 	bhi.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f48:	f000 8083 	beq.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f52:	f200 8081 	bhi.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5c:	d02f      	beq.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f64:	d878      	bhi.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f72:	d012      	beq.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005f74:	e070      	b.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f76:	4b8a      	ldr	r3, [pc, #552]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f82:	d107      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fe15 	bl	8006bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f92:	e344      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f98:	e341      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f9a:	4b81      	ldr	r3, [pc, #516]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fa8:	f107 0318 	add.w	r3, r7, #24
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fb5b 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fb6:	e332      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fbc:	e32f      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fbe:	4b78      	ldr	r3, [pc, #480]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fca:	d107      	bne.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fcc:	f107 030c 	add.w	r3, r7, #12
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fc9d 	bl	8006910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fda:	e320      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fe0:	e31d      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fe2:	4b6f      	ldr	r3, [pc, #444]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fec:	4b6c      	ldr	r3, [pc, #432]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d10c      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ffe:	4b68      	ldr	r3, [pc, #416]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	08db      	lsrs	r3, r3, #3
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	4a66      	ldr	r2, [pc, #408]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006010:	e01e      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006012:	4b63      	ldr	r3, [pc, #396]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800601e:	d106      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006026:	d102      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006028:	4b5f      	ldr	r3, [pc, #380]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800602c:	e010      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800602e:	4b5c      	ldr	r3, [pc, #368]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800603a:	d106      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800603c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006042:	d102      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006044:	4b59      	ldr	r3, [pc, #356]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006048:	e002      	b.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800604e:	e2e6      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006050:	e2e5      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006052:	4b57      	ldr	r3, [pc, #348]	@ (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006056:	e2e2      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800605c:	e2df      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800605e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006062:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006066:	430b      	orrs	r3, r1
 8006068:	f040 80a7 	bne.w	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800606c:	4b4c      	ldr	r3, [pc, #304]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800606e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006070:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006074:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800607c:	d055      	beq.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800607e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006084:	f200 8096 	bhi.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800608e:	f000 8084 	beq.w	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006098:	f200 808c 	bhi.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800609c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a2:	d030      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80060a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060aa:	f200 8083 	bhi.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80060ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d004      	beq.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ba:	d012      	beq.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80060bc:	e07a      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060be:	4b38      	ldr	r3, [pc, #224]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060ca:	d107      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fd71 	bl	8006bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060da:	e2a0      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e0:	e29d      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060e2:	4b2f      	ldr	r3, [pc, #188]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060ee:	d107      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060f0:	f107 0318 	add.w	r3, r7, #24
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fab7 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060fe:	e28e      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006104:	e28b      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006106:	4b26      	ldr	r3, [pc, #152]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006112:	d107      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fbf9 	bl	8006910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006122:	e27c      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006128:	e279      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800612a:	4b1d      	ldr	r3, [pc, #116]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800612c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006132:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006134:	4b1a      	ldr	r3, [pc, #104]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b04      	cmp	r3, #4
 800613e:	d10c      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006146:	4b16      	ldr	r3, [pc, #88]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	08db      	lsrs	r3, r3, #3
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	4a14      	ldr	r2, [pc, #80]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006158:	e01e      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800615a:	4b11      	ldr	r3, [pc, #68]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006166:	d106      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800616e:	d102      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006170:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006174:	e010      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006176:	4b0a      	ldr	r3, [pc, #40]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006182:	d106      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800618a:	d102      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006190:	e002      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006196:	e242      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006198:	e241      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800619a:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619e:	e23e      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80061a0:	58024400 	.word	0x58024400
 80061a4:	03d09000 	.word	0x03d09000
 80061a8:	003d0900 	.word	0x003d0900
 80061ac:	016e3600 	.word	0x016e3600
 80061b0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b8:	e231      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80061ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061be:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80061c2:	430b      	orrs	r3, r1
 80061c4:	f040 8085 	bne.w	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80061c8:	4b9c      	ldr	r3, [pc, #624]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061cc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80061d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80061d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061d8:	d06b      	beq.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061e0:	d874      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061e8:	d056      	beq.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061f0:	d86c      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061f8:	d03b      	beq.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80061fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006200:	d864      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006208:	d021      	beq.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006210:	d85c      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800621e:	d004      	beq.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006220:	e054      	b.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006222:	f7fe fb5f 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 8006226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006228:	e1f9      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800622a:	4b84      	ldr	r3, [pc, #528]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006236:	d107      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006238:	f107 0318 	add.w	r3, r7, #24
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fa13 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006246:	e1ea      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800624c:	e1e7      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800624e:	4b7b      	ldr	r3, [pc, #492]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800625a:	d107      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800625c:	f107 030c 	add.w	r3, r7, #12
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fb55 	bl	8006910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800626a:	e1d8      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006270:	e1d5      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006272:	4b72      	ldr	r3, [pc, #456]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b04      	cmp	r3, #4
 800627c:	d109      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800627e:	4b6f      	ldr	r3, [pc, #444]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	4a6d      	ldr	r2, [pc, #436]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006290:	e1c5      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006296:	e1c2      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006298:	4b68      	ldr	r3, [pc, #416]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a4:	d102      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80062a6:	4b67      	ldr	r3, [pc, #412]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80062a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062aa:	e1b8      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b0:	e1b5      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80062b2:	4b62      	ldr	r3, [pc, #392]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062be:	d102      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80062c0:	4b61      	ldr	r3, [pc, #388]	@ (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80062c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062c4:	e1ab      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ca:	e1a8      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d0:	e1a5      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80062d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80062da:	430b      	orrs	r3, r1
 80062dc:	d173      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80062de:	4b57      	ldr	r3, [pc, #348]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062ee:	d02f      	beq.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80062f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062f6:	d863      	bhi.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006304:	d012      	beq.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006306:	e05b      	b.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006308:	4b4c      	ldr	r3, [pc, #304]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006314:	d107      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006316:	f107 0318 	add.w	r3, r7, #24
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f9a4 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006324:	e17b      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632a:	e178      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800632c:	4b43      	ldr	r3, [pc, #268]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006338:	d107      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800633a:	f107 030c 	add.w	r3, r7, #12
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fae6 	bl	8006910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006348:	e169      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800634e:	e166      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006350:	4b3a      	ldr	r3, [pc, #232]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006354:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800635a:	4b38      	ldr	r3, [pc, #224]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b04      	cmp	r3, #4
 8006364:	d10c      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800636c:	4b33      	ldr	r3, [pc, #204]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	4a32      	ldr	r2, [pc, #200]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800637e:	e01e      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006380:	4b2e      	ldr	r3, [pc, #184]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800638c:	d106      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006394:	d102      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006396:	4b2b      	ldr	r3, [pc, #172]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800639a:	e010      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800639c:	4b27      	ldr	r3, [pc, #156]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a8:	d106      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80063aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063b0:	d102      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063b2:	4b25      	ldr	r3, [pc, #148]	@ (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80063b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b6:	e002      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80063bc:	e12f      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80063be:	e12e      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c4:	e12b      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80063c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ca:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80063ce:	430b      	orrs	r3, r1
 80063d0:	d13c      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80063d2:	4b1a      	ldr	r3, [pc, #104]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80063d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e8:	d012      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80063ea:	e023      	b.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063ec:	4b13      	ldr	r3, [pc, #76]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063f8:	d107      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fbda 	bl	8006bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006408:	e109      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640e:	e106      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006410:	4b0a      	ldr	r3, [pc, #40]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800641c:	d107      	bne.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800641e:	f107 0318 	add.w	r3, r7, #24
 8006422:	4618      	mov	r0, r3
 8006424:	f000 f920 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800642c:	e0f7      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006432:	e0f4      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006438:	e0f1      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800643a:	bf00      	nop
 800643c:	58024400 	.word	0x58024400
 8006440:	03d09000 	.word	0x03d09000
 8006444:	003d0900 	.word	0x003d0900
 8006448:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800644c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006450:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006454:	430b      	orrs	r3, r1
 8006456:	f040 8091 	bne.w	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800645a:	4b73      	ldr	r3, [pc, #460]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800645c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006462:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800646a:	f000 8081 	beq.w	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800646e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006470:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006474:	d87f      	bhi.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006478:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800647c:	d06b      	beq.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006484:	d877      	bhi.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800648c:	d056      	beq.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006494:	d86f      	bhi.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800649c:	d03b      	beq.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064a4:	d867      	bhi.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ac:	d021      	beq.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80064ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064b4:	d85f      	bhi.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80064b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064c2:	d004      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80064c4:	e057      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80064c6:	f000 f8b9 	bl	800663c <HAL_RCCEx_GetD3PCLK1Freq>
 80064ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064cc:	e0a7      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064ce:	4b56      	ldr	r3, [pc, #344]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064da:	d107      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064dc:	f107 0318 	add.w	r3, r7, #24
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f8c1 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ea:	e098      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f0:	e095      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064f2:	4b4d      	ldr	r3, [pc, #308]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064fe:	d107      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006500:	f107 030c 	add.w	r3, r7, #12
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fa03 	bl	8006910 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800650e:	e086      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006514:	e083      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006516:	4b44      	ldr	r3, [pc, #272]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b04      	cmp	r3, #4
 8006520:	d109      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006522:	4b41      	ldr	r3, [pc, #260]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	08db      	lsrs	r3, r3, #3
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	4a3f      	ldr	r2, [pc, #252]	@ (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006534:	e073      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800653a:	e070      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800653c:	4b3a      	ldr	r3, [pc, #232]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006548:	d102      	bne.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800654a:	4b39      	ldr	r3, [pc, #228]	@ (8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800654c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800654e:	e066      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006554:	e063      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006556:	4b34      	ldr	r3, [pc, #208]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006562:	d102      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006564:	4b33      	ldr	r3, [pc, #204]	@ (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006568:	e059      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800656e:	e056      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006570:	4b31      	ldr	r3, [pc, #196]	@ (8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006574:	e053      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800657a:	e050      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800657c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006580:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006584:	430b      	orrs	r3, r1
 8006586:	d148      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006588:	4b27      	ldr	r3, [pc, #156]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800658a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800658c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006590:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006598:	d02a      	beq.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065a0:	d838      	bhi.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ae:	d00d      	beq.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80065b0:	e030      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80065b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065be:	d102      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80065c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065c4:	e02b      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ca:	e028      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065cc:	4b16      	ldr	r3, [pc, #88]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065d8:	d107      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 faea 	bl	8006bb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e8:	e019      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ee:	e016      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065fc:	d107      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fe:	f107 0318 	add.w	r3, r7, #24
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f830 	bl	8006668 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800660c:	e007      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006612:	e004      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006618:	e001      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800661e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006620:	4618      	mov	r0, r3
 8006622:	3740      	adds	r7, #64	@ 0x40
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	58024400 	.word	0x58024400
 800662c:	03d09000 	.word	0x03d09000
 8006630:	003d0900 	.word	0x003d0900
 8006634:	016e3600 	.word	0x016e3600
 8006638:	00bb8000 	.word	0x00bb8000

0800663c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006640:	f7fe f920 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 8006644:	4602      	mov	r2, r0
 8006646:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	091b      	lsrs	r3, r3, #4
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	4904      	ldr	r1, [pc, #16]	@ (8006664 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006652:	5ccb      	ldrb	r3, [r1, r3]
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd80      	pop	{r7, pc}
 8006660:	58024400 	.word	0x58024400
 8006664:	0800c704 	.word	0x0800c704

08006668 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	@ 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006670:	4ba1      	ldr	r3, [pc, #644]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800667a:	4b9f      	ldr	r3, [pc, #636]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	0b1b      	lsrs	r3, r3, #12
 8006680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006684:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006686:	4b9c      	ldr	r3, [pc, #624]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	091b      	lsrs	r3, r3, #4
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006692:	4b99      	ldr	r3, [pc, #612]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006696:	08db      	lsrs	r3, r3, #3
 8006698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8111 	beq.w	80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	f000 8083 	beq.w	80067c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	f200 80a1 	bhi.w	8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d056      	beq.n	8006780 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066d2:	e099      	b.n	8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066d4:	4b88      	ldr	r3, [pc, #544]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d02d      	beq.n	800673c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066e0:	4b85      	ldr	r3, [pc, #532]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	08db      	lsrs	r3, r3, #3
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	4a84      	ldr	r2, [pc, #528]	@ (80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
 80066f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	ee07 3a90 	vmov	s15, r3
 8006702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670a:	4b7b      	ldr	r3, [pc, #492]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671a:	ed97 6a03 	vldr	s12, [r7, #12]
 800671e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800672e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800673a:	e087      	b.n	800684c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674e:	4b6a      	ldr	r3, [pc, #424]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006762:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800677e:	e065      	b.n	800684c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800678e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006792:	4b59      	ldr	r3, [pc, #356]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c2:	e043      	b.n	800684c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800690c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d6:	4b48      	ldr	r3, [pc, #288]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006806:	e021      	b.n	800684c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681a:	4b37      	ldr	r3, [pc, #220]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800681c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682a:	ed97 6a03 	vldr	s12, [r7, #12]
 800682e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800683e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800684a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800684c:	4b2a      	ldr	r3, [pc, #168]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800684e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006850:	0a5b      	lsrs	r3, r3, #9
 8006852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006866:	edd7 6a07 	vldr	s13, [r7, #28]
 800686a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800686e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006872:	ee17 2a90 	vmov	r2, s15
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800687a:	4b1f      	ldr	r3, [pc, #124]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006884:	ee07 3a90 	vmov	s15, r3
 8006888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006890:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006894:	edd7 6a07 	vldr	s13, [r7, #28]
 8006898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800689c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a0:	ee17 2a90 	vmov	r2, s15
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80068a8:	4b13      	ldr	r3, [pc, #76]	@ (80068f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ac:	0e1b      	lsrs	r3, r3, #24
 80068ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ce:	ee17 2a90 	vmov	r2, s15
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068d6:	e008      	b.n	80068ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	609a      	str	r2, [r3, #8]
}
 80068ea:	bf00      	nop
 80068ec:	3724      	adds	r7, #36	@ 0x24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	58024400 	.word	0x58024400
 80068fc:	03d09000 	.word	0x03d09000
 8006900:	46000000 	.word	0x46000000
 8006904:	4c742400 	.word	0x4c742400
 8006908:	4a742400 	.word	0x4a742400
 800690c:	4bb71b00 	.word	0x4bb71b00

08006910 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006910:	b480      	push	{r7}
 8006912:	b089      	sub	sp, #36	@ 0x24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006918:	4ba1      	ldr	r3, [pc, #644]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800691a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006922:	4b9f      	ldr	r3, [pc, #636]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006926:	0d1b      	lsrs	r3, r3, #20
 8006928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800692c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800692e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800693a:	4b99      	ldr	r3, [pc, #612]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800693c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8111 	beq.w	8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f000 8083 	beq.w	8006a6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b02      	cmp	r3, #2
 800696a:	f200 80a1 	bhi.w	8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d056      	beq.n	8006a28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800697a:	e099      	b.n	8006ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800697c:	4b88      	ldr	r3, [pc, #544]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02d      	beq.n	80069e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006988:	4b85      	ldr	r3, [pc, #532]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	4a84      	ldr	r2, [pc, #528]	@ (8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069e2:	e087      	b.n	8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f6:	4b6a      	ldr	r3, [pc, #424]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a26:	e065      	b.n	8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3a:	4b59      	ldr	r3, [pc, #356]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a6a:	e043      	b.n	8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7e:	4b48      	ldr	r3, [pc, #288]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aae:	e021      	b.n	8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b37      	ldr	r3, [pc, #220]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006af4:	4b2a      	ldr	r3, [pc, #168]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af8:	0a5b      	lsrs	r3, r3, #9
 8006afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b1a:	ee17 2a90 	vmov	r2, s15
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b22:	4b1f      	ldr	r3, [pc, #124]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	0c1b      	lsrs	r3, r3, #16
 8006b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b48:	ee17 2a90 	vmov	r2, s15
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b50:	4b13      	ldr	r3, [pc, #76]	@ (8006ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b54:	0e1b      	lsrs	r3, r3, #24
 8006b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b76:	ee17 2a90 	vmov	r2, s15
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b7e:	e008      	b.n	8006b92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
}
 8006b92:	bf00      	nop
 8006b94:	3724      	adds	r7, #36	@ 0x24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	03d09000 	.word	0x03d09000
 8006ba8:	46000000 	.word	0x46000000
 8006bac:	4c742400 	.word	0x4c742400
 8006bb0:	4a742400 	.word	0x4a742400
 8006bb4:	4bb71b00 	.word	0x4bb71b00

08006bb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b089      	sub	sp, #36	@ 0x24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bc0:	4ba0      	ldr	r3, [pc, #640]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006bca:	4b9e      	ldr	r3, [pc, #632]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bd4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006bd6:	4b9b      	ldr	r3, [pc, #620]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006be0:	4b98      	ldr	r3, [pc, #608]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be4:	08db      	lsrs	r3, r3, #3
 8006be6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	fb02 f303 	mul.w	r3, r2, r3
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 8111 	beq.w	8006e26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	f000 8083 	beq.w	8006d12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	f200 80a1 	bhi.w	8006d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d056      	beq.n	8006cce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006c20:	e099      	b.n	8006d56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c22:	4b88      	ldr	r3, [pc, #544]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d02d      	beq.n	8006c8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c2e:	4b85      	ldr	r3, [pc, #532]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	08db      	lsrs	r3, r3, #3
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	4a83      	ldr	r2, [pc, #524]	@ (8006e48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c58:	4b7a      	ldr	r3, [pc, #488]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c68:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c6c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c88:	e087      	b.n	8006d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c94:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006e50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9c:	4b69      	ldr	r3, [pc, #420]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cb0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ccc:	e065      	b.n	8006d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	ee07 3a90 	vmov	s15, r3
 8006cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006e54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce0:	4b58      	ldr	r3, [pc, #352]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce8:	ee07 3a90 	vmov	s15, r3
 8006cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cf4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d10:	e043      	b.n	8006d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d24:	4b47      	ldr	r3, [pc, #284]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2c:	ee07 3a90 	vmov	s15, r3
 8006d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d38:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d54:	e021      	b.n	8006d9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d60:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006e50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d68:	4b36      	ldr	r3, [pc, #216]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d7c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006e4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9e:	0a5b      	lsrs	r3, r3, #9
 8006da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc0:	ee17 2a90 	vmov	r2, s15
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dcc:	0c1b      	lsrs	r3, r3, #16
 8006dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dee:	ee17 2a90 	vmov	r2, s15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006df6:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfa:	0e1b      	lsrs	r3, r3, #24
 8006dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1c:	ee17 2a90 	vmov	r2, s15
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006e24:	e008      	b.n	8006e38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	3724      	adds	r7, #36	@ 0x24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	58024400 	.word	0x58024400
 8006e48:	03d09000 	.word	0x03d09000
 8006e4c:	46000000 	.word	0x46000000
 8006e50:	4c742400 	.word	0x4c742400
 8006e54:	4a742400 	.word	0x4a742400
 8006e58:	4bb71b00 	.word	0x4bb71b00

08006e5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e6a:	4b53      	ldr	r3, [pc, #332]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d101      	bne.n	8006e7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e099      	b.n	8006fae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006e80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e86:	f7fa fc67 	bl	8001758 <HAL_GetTick>
 8006e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e8c:	e008      	b.n	8006ea0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e8e:	f7fa fc63 	bl	8001758 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e086      	b.n	8006fae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ea0:	4b45      	ldr	r3, [pc, #276]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f0      	bne.n	8006e8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006eac:	4b42      	ldr	r3, [pc, #264]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	031b      	lsls	r3, r3, #12
 8006eba:	493f      	ldr	r1, [pc, #252]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	025b      	lsls	r3, r3, #9
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	061b      	lsls	r3, r3, #24
 8006eec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ef0:	4931      	ldr	r1, [pc, #196]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ef6:	4b30      	ldr	r3, [pc, #192]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	492d      	ldr	r1, [pc, #180]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f08:	4b2b      	ldr	r3, [pc, #172]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	f023 0220 	bic.w	r2, r3, #32
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	4928      	ldr	r1, [pc, #160]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f1a:	4b27      	ldr	r3, [pc, #156]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a26      	ldr	r2, [pc, #152]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f20:	f023 0310 	bic.w	r3, r3, #16
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f26:	4b24      	ldr	r3, [pc, #144]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f2a:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <RCCEx_PLL2_Config+0x160>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	69d2      	ldr	r2, [r2, #28]
 8006f32:	00d2      	lsls	r2, r2, #3
 8006f34:	4920      	ldr	r1, [pc, #128]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f40:	f043 0310 	orr.w	r3, r3, #16
 8006f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f50:	4a19      	ldr	r2, [pc, #100]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f58:	e00f      	b.n	8006f7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d106      	bne.n	8006f6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f60:	4b15      	ldr	r3, [pc, #84]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	4a14      	ldr	r2, [pc, #80]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f6c:	e005      	b.n	8006f7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f6e:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	4a11      	ldr	r2, [pc, #68]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006f80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f86:	f7fa fbe7 	bl	8001758 <HAL_GetTick>
 8006f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f8c:	e008      	b.n	8006fa0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f8e:	f7fa fbe3 	bl	8001758 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e006      	b.n	8006fae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fa0:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <RCCEx_PLL2_Config+0x15c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	ffff0007 	.word	0xffff0007

08006fc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fce:	4b53      	ldr	r3, [pc, #332]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d101      	bne.n	8006fde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e099      	b.n	8007112 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fde:	4b4f      	ldr	r3, [pc, #316]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a4e      	ldr	r2, [pc, #312]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8006fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fea:	f7fa fbb5 	bl	8001758 <HAL_GetTick>
 8006fee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ff0:	e008      	b.n	8007004 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ff2:	f7fa fbb1 	bl	8001758 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e086      	b.n	8007112 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007004:	4b45      	ldr	r3, [pc, #276]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1f0      	bne.n	8006ff2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007010:	4b42      	ldr	r3, [pc, #264]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	051b      	lsls	r3, r3, #20
 800701e:	493f      	ldr	r1, [pc, #252]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8007020:	4313      	orrs	r3, r2
 8007022:	628b      	str	r3, [r1, #40]	@ 0x28
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	3b01      	subs	r3, #1
 800702a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	3b01      	subs	r3, #1
 8007034:	025b      	lsls	r3, r3, #9
 8007036:	b29b      	uxth	r3, r3
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	3b01      	subs	r3, #1
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	3b01      	subs	r3, #1
 800704e:	061b      	lsls	r3, r3, #24
 8007050:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007054:	4931      	ldr	r1, [pc, #196]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800705a:	4b30      	ldr	r3, [pc, #192]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	492d      	ldr	r1, [pc, #180]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8007068:	4313      	orrs	r3, r2
 800706a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800706c:	4b2b      	ldr	r3, [pc, #172]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	4928      	ldr	r1, [pc, #160]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 800707a:	4313      	orrs	r3, r2
 800707c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800707e:	4b27      	ldr	r3, [pc, #156]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	4a26      	ldr	r2, [pc, #152]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8007084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800708a:	4b24      	ldr	r3, [pc, #144]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 800708c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800708e:	4b24      	ldr	r3, [pc, #144]	@ (8007120 <RCCEx_PLL3_Config+0x160>)
 8007090:	4013      	ands	r3, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	69d2      	ldr	r2, [r2, #28]
 8007096:	00d2      	lsls	r2, r2, #3
 8007098:	4920      	ldr	r1, [pc, #128]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 800709a:	4313      	orrs	r3, r2
 800709c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800709e:	4b1f      	ldr	r3, [pc, #124]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a2:	4a1e      	ldr	r2, [pc, #120]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070b0:	4b1a      	ldr	r3, [pc, #104]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	4a19      	ldr	r2, [pc, #100]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80070ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070bc:	e00f      	b.n	80070de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d106      	bne.n	80070d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070c4:	4b15      	ldr	r3, [pc, #84]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c8:	4a14      	ldr	r2, [pc, #80]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070d0:	e005      	b.n	80070de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070d2:	4b12      	ldr	r3, [pc, #72]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d6:	4a11      	ldr	r2, [pc, #68]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070de:	4b0f      	ldr	r3, [pc, #60]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a0e      	ldr	r2, [pc, #56]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 80070e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ea:	f7fa fb35 	bl	8001758 <HAL_GetTick>
 80070ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070f0:	e008      	b.n	8007104 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070f2:	f7fa fb31 	bl	8001758 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e006      	b.n	8007112 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007104:	4b05      	ldr	r3, [pc, #20]	@ (800711c <RCCEx_PLL3_Config+0x15c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0f0      	beq.n	80070f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007110:	7bfb      	ldrb	r3, [r7, #15]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	58024400 	.word	0x58024400
 8007120:	ffff0007 	.word	0xffff0007

08007124 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e02b      	b.n	8007190 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7f9 fabd 	bl	80006cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f000 f921 	bl	80073ac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	461a      	mov	r2, r3
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	f000 f975 	bl	8007464 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800717a:	4b07      	ldr	r3, [pc, #28]	@ (8007198 <HAL_SDRAM_Init+0x74>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a06      	ldr	r2, [pc, #24]	@ (8007198 <HAL_SDRAM_Init+0x74>)
 8007180:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007184:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	52004000 	.word	0x52004000

0800719c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071ae:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d101      	bne.n	80071ba <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
 80071b8:	e021      	b.n	80071fe <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d002      	beq.n	80071c6 <HAL_SDRAM_SendCommand+0x2a>
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	d118      	bne.n	80071f8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	68b9      	ldr	r1, [r7, #8]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f9ae 	bl	8007538 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d104      	bne.n	80071ee <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2205      	movs	r2, #5
 80071e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071ec:	e006      	b.n	80071fc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071f6:	e001      	b.n	80071fc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e000      	b.n	80071fe <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e05e      	b.n	80072d8 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7f9 ffe8 	bl	8001204 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0203 	bic.w	r2, r2, #3
 800724a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4b22      	ldr	r3, [pc, #136]	@ (80072e0 <HAL_SPDIFRX_Init+0xd8>)
 8007258:	4013      	ands	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007264:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800726a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007270:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8007276:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800727c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007282:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007288:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800728e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8007294:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d103      	bne.n	80072ae <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ac:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d103      	bne.n	80072c0 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072be:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	ffc88407 	.word	0xffc88407

080072e4 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <FMC_NAND_Init+0x50>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	6851      	ldr	r1, [r2, #4]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	6892      	ldr	r2, [r2, #8]
 80072fe:	4311      	orrs	r1, r2
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	68d2      	ldr	r2, [r2, #12]
 8007304:	4311      	orrs	r1, r2
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	6912      	ldr	r2, [r2, #16]
 800730a:	4311      	orrs	r1, r2
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	6952      	ldr	r2, [r2, #20]
 8007310:	0252      	lsls	r2, r2, #9
 8007312:	4311      	orrs	r1, r2
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	6992      	ldr	r2, [r2, #24]
 8007318:	0352      	lsls	r2, r2, #13
 800731a:	430a      	orrs	r2, r1
 800731c:	4313      	orrs	r3, r2
 800731e:	f043 0208 	orr.w	r2, r3, #8
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	fff00189 	.word	0xfff00189

08007338 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800734e:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8007356:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800735e:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 8007388:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8007390:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8007398:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d121      	bne.n	8007402 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b27      	ldr	r3, [pc, #156]	@ (8007460 <FMC_SDRAM_Init+0xb4>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	6851      	ldr	r1, [r2, #4]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	6892      	ldr	r2, [r2, #8]
 80073ce:	4311      	orrs	r1, r2
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	68d2      	ldr	r2, [r2, #12]
 80073d4:	4311      	orrs	r1, r2
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	6912      	ldr	r2, [r2, #16]
 80073da:	4311      	orrs	r1, r2
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	6952      	ldr	r2, [r2, #20]
 80073e0:	4311      	orrs	r1, r2
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	6992      	ldr	r2, [r2, #24]
 80073e6:	4311      	orrs	r1, r2
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	69d2      	ldr	r2, [r2, #28]
 80073ec:	4311      	orrs	r1, r2
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	6a12      	ldr	r2, [r2, #32]
 80073f2:	4311      	orrs	r1, r2
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073f8:	430a      	orrs	r2, r1
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e026      	b.n	8007450 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	69d9      	ldr	r1, [r3, #28]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	4319      	orrs	r1, r3
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007418:	430b      	orrs	r3, r1
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	4b0e      	ldr	r3, [pc, #56]	@ (8007460 <FMC_SDRAM_Init+0xb4>)
 8007426:	4013      	ands	r3, r2
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	6851      	ldr	r1, [r2, #4]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	6892      	ldr	r2, [r2, #8]
 8007430:	4311      	orrs	r1, r2
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	68d2      	ldr	r2, [r2, #12]
 8007436:	4311      	orrs	r1, r2
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	6912      	ldr	r2, [r2, #16]
 800743c:	4311      	orrs	r1, r2
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	6952      	ldr	r2, [r2, #20]
 8007442:	4311      	orrs	r1, r2
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	6992      	ldr	r2, [r2, #24]
 8007448:	430a      	orrs	r2, r1
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	ffff8000 	.word	0xffff8000

08007464 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d128      	bne.n	80074c8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	1e59      	subs	r1, r3, #1
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	3b01      	subs	r3, #1
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	4319      	orrs	r1, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	3b01      	subs	r3, #1
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	4319      	orrs	r1, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	3b01      	subs	r3, #1
 800749e:	031b      	lsls	r3, r3, #12
 80074a0:	4319      	orrs	r1, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	4319      	orrs	r1, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	051b      	lsls	r3, r3, #20
 80074b4:	4319      	orrs	r1, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	430b      	orrs	r3, r1
 80074c0:	431a      	orrs	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	609a      	str	r2, [r3, #8]
 80074c6:	e02d      	b.n	8007524 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	4b19      	ldr	r3, [pc, #100]	@ (8007534 <FMC_SDRAM_Timing_Init+0xd0>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	68d2      	ldr	r2, [r2, #12]
 80074d4:	3a01      	subs	r2, #1
 80074d6:	0311      	lsls	r1, r2, #12
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	6952      	ldr	r2, [r2, #20]
 80074dc:	3a01      	subs	r2, #1
 80074de:	0512      	lsls	r2, r2, #20
 80074e0:	430a      	orrs	r2, r1
 80074e2:	431a      	orrs	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	1e59      	subs	r1, r3, #1
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	4319      	orrs	r1, r3
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	3b01      	subs	r3, #1
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	4319      	orrs	r1, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	3b01      	subs	r3, #1
 8007510:	041b      	lsls	r3, r3, #16
 8007512:	4319      	orrs	r1, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	3b01      	subs	r3, #1
 800751a:	061b      	lsls	r3, r3, #24
 800751c:	430b      	orrs	r3, r1
 800751e:	431a      	orrs	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	ff0f0fff 	.word	0xff0f0fff

08007538 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	4b0c      	ldr	r3, [pc, #48]	@ (800757c <FMC_SDRAM_SendCommand+0x44>)
 800754a:	4013      	ands	r3, r2
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	6811      	ldr	r1, [r2, #0]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	6852      	ldr	r2, [r2, #4]
 8007554:	4311      	orrs	r1, r2
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	6892      	ldr	r2, [r2, #8]
 800755a:	3a01      	subs	r2, #1
 800755c:	0152      	lsls	r2, r2, #5
 800755e:	4311      	orrs	r1, r2
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	68d2      	ldr	r2, [r2, #12]
 8007564:	0252      	lsls	r2, r2, #9
 8007566:	430a      	orrs	r2, r1
 8007568:	431a      	orrs	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	ffc00000 	.word	0xffc00000

08007580 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007580:	b084      	sub	sp, #16
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	f107 001c 	add.w	r0, r7, #28
 800758e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007592:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007596:	2b01      	cmp	r3, #1
 8007598:	d121      	bne.n	80075de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	4b2c      	ldr	r3, [pc, #176]	@ (800765c <USB_CoreInit+0xdc>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d105      	bne.n	80075d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 fafa 	bl	8008bcc <USB_CoreReset>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
 80075dc:	e01b      	b.n	8007616 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 faee 	bl	8008bcc <USB_CoreReset>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	639a      	str	r2, [r3, #56]	@ 0x38
 8007608:	e005      	b.n	8007616 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007616:	7fbb      	ldrb	r3, [r7, #30]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d116      	bne.n	800764a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <USB_CoreInit+0xe0>)
 800762c:	4313      	orrs	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f043 0206 	orr.w	r2, r3, #6
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f043 0220 	orr.w	r2, r3, #32
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007656:	b004      	add	sp, #16
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	ffbdffbf 	.word	0xffbdffbf
 8007660:	03ee0000 	.word	0x03ee0000

08007664 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d165      	bne.n	8007744 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4a41      	ldr	r2, [pc, #260]	@ (8007780 <USB_SetTurnaroundTime+0x11c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d906      	bls.n	800768e <USB_SetTurnaroundTime+0x2a>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4a40      	ldr	r2, [pc, #256]	@ (8007784 <USB_SetTurnaroundTime+0x120>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d202      	bcs.n	800768e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007688:	230f      	movs	r3, #15
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e062      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4a3c      	ldr	r2, [pc, #240]	@ (8007784 <USB_SetTurnaroundTime+0x120>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d306      	bcc.n	80076a4 <USB_SetTurnaroundTime+0x40>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4a3b      	ldr	r2, [pc, #236]	@ (8007788 <USB_SetTurnaroundTime+0x124>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d202      	bcs.n	80076a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800769e:	230e      	movs	r3, #14
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	e057      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4a38      	ldr	r2, [pc, #224]	@ (8007788 <USB_SetTurnaroundTime+0x124>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d306      	bcc.n	80076ba <USB_SetTurnaroundTime+0x56>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4a37      	ldr	r2, [pc, #220]	@ (800778c <USB_SetTurnaroundTime+0x128>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d202      	bcs.n	80076ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80076b4:	230d      	movs	r3, #13
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	e04c      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	4a33      	ldr	r2, [pc, #204]	@ (800778c <USB_SetTurnaroundTime+0x128>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d306      	bcc.n	80076d0 <USB_SetTurnaroundTime+0x6c>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4a32      	ldr	r2, [pc, #200]	@ (8007790 <USB_SetTurnaroundTime+0x12c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d802      	bhi.n	80076d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80076ca:	230c      	movs	r3, #12
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	e041      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007790 <USB_SetTurnaroundTime+0x12c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d906      	bls.n	80076e6 <USB_SetTurnaroundTime+0x82>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4a2e      	ldr	r2, [pc, #184]	@ (8007794 <USB_SetTurnaroundTime+0x130>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d802      	bhi.n	80076e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80076e0:	230b      	movs	r3, #11
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	e036      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007794 <USB_SetTurnaroundTime+0x130>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d906      	bls.n	80076fc <USB_SetTurnaroundTime+0x98>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4a29      	ldr	r2, [pc, #164]	@ (8007798 <USB_SetTurnaroundTime+0x134>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d802      	bhi.n	80076fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80076f6:	230a      	movs	r3, #10
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	e02b      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4a26      	ldr	r2, [pc, #152]	@ (8007798 <USB_SetTurnaroundTime+0x134>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d906      	bls.n	8007712 <USB_SetTurnaroundTime+0xae>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4a25      	ldr	r2, [pc, #148]	@ (800779c <USB_SetTurnaroundTime+0x138>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d202      	bcs.n	8007712 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800770c:	2309      	movs	r3, #9
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	e020      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4a21      	ldr	r2, [pc, #132]	@ (800779c <USB_SetTurnaroundTime+0x138>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d306      	bcc.n	8007728 <USB_SetTurnaroundTime+0xc4>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4a20      	ldr	r2, [pc, #128]	@ (80077a0 <USB_SetTurnaroundTime+0x13c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d802      	bhi.n	8007728 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007722:	2308      	movs	r3, #8
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	e015      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4a1d      	ldr	r2, [pc, #116]	@ (80077a0 <USB_SetTurnaroundTime+0x13c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d906      	bls.n	800773e <USB_SetTurnaroundTime+0xda>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4a1c      	ldr	r2, [pc, #112]	@ (80077a4 <USB_SetTurnaroundTime+0x140>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d202      	bcs.n	800773e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007738:	2307      	movs	r3, #7
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e00a      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800773e:	2306      	movs	r3, #6
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e007      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800774a:	2309      	movs	r3, #9
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	e001      	b.n	8007754 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007750:	2309      	movs	r3, #9
 8007752:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	029b      	lsls	r3, r3, #10
 8007768:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800776c:	431a      	orrs	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	00d8acbf 	.word	0x00d8acbf
 8007784:	00e4e1c0 	.word	0x00e4e1c0
 8007788:	00f42400 	.word	0x00f42400
 800778c:	01067380 	.word	0x01067380
 8007790:	011a499f 	.word	0x011a499f
 8007794:	01312cff 	.word	0x01312cff
 8007798:	014ca43f 	.word	0x014ca43f
 800779c:	016e3600 	.word	0x016e3600
 80077a0:	01a6ab1f 	.word	0x01a6ab1f
 80077a4:	01e84800 	.word	0x01e84800

080077a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f043 0201 	orr.w	r2, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d115      	bne.n	800783a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800781a:	200a      	movs	r0, #10
 800781c:	f7f9 ffa8 	bl	8001770 <HAL_Delay>
      ms += 10U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	330a      	adds	r3, #10
 8007824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 f93f 	bl	8008aaa <USB_GetMode>
 800782c:	4603      	mov	r3, r0
 800782e:	2b01      	cmp	r3, #1
 8007830:	d01e      	beq.n	8007870 <USB_SetCurrentMode+0x84>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2bc7      	cmp	r3, #199	@ 0xc7
 8007836:	d9f0      	bls.n	800781a <USB_SetCurrentMode+0x2e>
 8007838:	e01a      	b.n	8007870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d115      	bne.n	800786c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800784c:	200a      	movs	r0, #10
 800784e:	f7f9 ff8f 	bl	8001770 <HAL_Delay>
      ms += 10U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	330a      	adds	r3, #10
 8007856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f926 	bl	8008aaa <USB_GetMode>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <USB_SetCurrentMode+0x84>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2bc7      	cmp	r3, #199	@ 0xc7
 8007868:	d9f0      	bls.n	800784c <USB_SetCurrentMode+0x60>
 800786a:	e001      	b.n	8007870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e005      	b.n	800787c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2bc8      	cmp	r3, #200	@ 0xc8
 8007874:	d101      	bne.n	800787a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007884:	b084      	sub	sp, #16
 8007886:	b580      	push	{r7, lr}
 8007888:	b086      	sub	sp, #24
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800789e:	2300      	movs	r3, #0
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	e009      	b.n	80078b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3340      	adds	r3, #64	@ 0x40
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	2200      	movs	r2, #0
 80078b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3301      	adds	r3, #1
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2b0e      	cmp	r3, #14
 80078bc:	d9f2      	bls.n	80078a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d11c      	bne.n	8007900 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078d4:	f043 0302 	orr.w	r3, r3, #2
 80078d8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078de:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e005      	b.n	800790c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007904:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007912:	461a      	mov	r2, r3
 8007914:	2300      	movs	r3, #0
 8007916:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007918:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800791c:	2b01      	cmp	r3, #1
 800791e:	d10d      	bne.n	800793c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007928:	2100      	movs	r1, #0
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f968 	bl	8007c00 <USB_SetDevSpeed>
 8007930:	e008      	b.n	8007944 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007932:	2101      	movs	r1, #1
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f963 	bl	8007c00 <USB_SetDevSpeed>
 800793a:	e003      	b.n	8007944 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800793c:	2103      	movs	r1, #3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f95e 	bl	8007c00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007944:	2110      	movs	r1, #16
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8fa 	bl	8007b40 <USB_FlushTxFifo>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f924 	bl	8007ba4 <USB_FlushRxFifo>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800796c:	461a      	mov	r2, r3
 800796e:	2300      	movs	r3, #0
 8007970:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007978:	461a      	mov	r2, r3
 800797a:	2300      	movs	r3, #0
 800797c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007984:	461a      	mov	r2, r3
 8007986:	2300      	movs	r3, #0
 8007988:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800798a:	2300      	movs	r3, #0
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	e043      	b.n	8007a18 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079a6:	d118      	bne.n	80079da <USB_DevInit+0x156>
    {
      if (i == 0U)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ba:	461a      	mov	r2, r3
 80079bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	e013      	b.n	80079ec <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d0:	461a      	mov	r2, r3
 80079d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	e008      	b.n	80079ec <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e6:	461a      	mov	r2, r3
 80079e8:	2300      	movs	r3, #0
 80079ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	3301      	adds	r3, #1
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d3b5      	bcc.n	8007990 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	e043      	b.n	8007ab2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a40:	d118      	bne.n	8007a74 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a54:	461a      	mov	r2, r3
 8007a56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	e013      	b.n	8007a86 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e008      	b.n	8007a86 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a80:	461a      	mov	r2, r3
 8007a82:	2300      	movs	r3, #0
 8007a84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a92:	461a      	mov	r2, r3
 8007a94:	2300      	movs	r3, #0
 8007a96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007aaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d3b5      	bcc.n	8007a2a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ad0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007ade:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d105      	bne.n	8007af4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f043 0210 	orr.w	r2, r3, #16
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	4b0f      	ldr	r3, [pc, #60]	@ (8007b38 <USB_DevInit+0x2b4>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	f043 0208 	orr.w	r2, r3, #8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d105      	bne.n	8007b28 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <USB_DevInit+0x2b8>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b34:	b004      	add	sp, #16
 8007b36:	4770      	bx	lr
 8007b38:	803c3800 	.word	0x803c3800
 8007b3c:	40000004 	.word	0x40000004

08007b40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b5a:	d901      	bls.n	8007b60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e01b      	b.n	8007b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	daf2      	bge.n	8007b4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	019b      	lsls	r3, r3, #6
 8007b70:	f043 0220 	orr.w	r2, r3, #32
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b84:	d901      	bls.n	8007b8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e006      	b.n	8007b98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b20      	cmp	r3, #32
 8007b94:	d0f0      	beq.n	8007b78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bbc:	d901      	bls.n	8007bc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e018      	b.n	8007bf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	daf2      	bge.n	8007bb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2210      	movs	r2, #16
 8007bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007be0:	d901      	bls.n	8007be6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e006      	b.n	8007bf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d0f0      	beq.n	8007bd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c20:	4313      	orrs	r3, r2
 8007c22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b087      	sub	sp, #28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 0306 	and.w	r3, r3, #6
 8007c4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c52:	2300      	movs	r3, #0
 8007c54:	75fb      	strb	r3, [r7, #23]
 8007c56:	e00a      	b.n	8007c6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d002      	beq.n	8007c64 <USB_GetDevSpeed+0x32>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b06      	cmp	r3, #6
 8007c62:	d102      	bne.n	8007c6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c64:	2302      	movs	r3, #2
 8007c66:	75fb      	strb	r3, [r7, #23]
 8007c68:	e001      	b.n	8007c6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c6a:	230f      	movs	r3, #15
 8007c6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d139      	bne.n	8007d0c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	f003 030f 	and.w	r3, r3, #15
 8007ca8:	2101      	movs	r1, #1
 8007caa:	fa01 f303 	lsl.w	r3, r1, r3
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	68f9      	ldr	r1, [r7, #12]
 8007cb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d153      	bne.n	8007d78 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	791b      	ldrb	r3, [r3, #4]
 8007cea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	059b      	lsls	r3, r3, #22
 8007cf2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	0159      	lsls	r1, r3, #5
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	440b      	add	r3, r1
 8007cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d02:	4619      	mov	r1, r3
 8007d04:	4b20      	ldr	r3, [pc, #128]	@ (8007d88 <USB_ActivateEndpoint+0x10c>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	600b      	str	r3, [r1, #0]
 8007d0a:	e035      	b.n	8007d78 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d22:	041b      	lsls	r3, r3, #16
 8007d24:	68f9      	ldr	r1, [r7, #12]
 8007d26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d119      	bne.n	8007d78 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d60:	430b      	orrs	r3, r1
 8007d62:	431a      	orrs	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	0159      	lsls	r1, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	440b      	add	r3, r1
 8007d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d70:	4619      	mov	r1, r3
 8007d72:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <USB_ActivateEndpoint+0x10c>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	10008000 	.word	0x10008000

08007d8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	785b      	ldrb	r3, [r3, #1]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d161      	bne.n	8007e6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dbe:	d11f      	bne.n	8007e00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	0151      	lsls	r1, r2, #5
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	440a      	add	r2, r1
 8007dd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007dde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	0151      	lsls	r1, r2, #5
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	440a      	add	r2, r1
 8007df6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	2101      	movs	r1, #1
 8007e12:	fa01 f303 	lsl.w	r3, r1, r3
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	68f9      	ldr	r1, [r7, #12]
 8007e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e20:	4013      	ands	r3, r2
 8007e22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	2101      	movs	r1, #1
 8007e36:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e44:	4013      	ands	r3, r2
 8007e46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	0159      	lsls	r1, r3, #5
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	440b      	add	r3, r1
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e62:	4619      	mov	r1, r3
 8007e64:	4b35      	ldr	r3, [pc, #212]	@ (8007f3c <USB_DeactivateEndpoint+0x1b0>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	600b      	str	r3, [r1, #0]
 8007e6a:	e060      	b.n	8007f2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e82:	d11f      	bne.n	8007ec4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ea2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	0151      	lsls	r1, r2, #5
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	440a      	add	r2, r1
 8007eba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eda:	041b      	lsls	r3, r3, #16
 8007edc:	43db      	mvns	r3, r3
 8007ede:	68f9      	ldr	r1, [r7, #12]
 8007ee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	2101      	movs	r1, #1
 8007efa:	fa01 f303 	lsl.w	r3, r1, r3
 8007efe:	041b      	lsls	r3, r3, #16
 8007f00:	43db      	mvns	r3, r3
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f08:	4013      	ands	r3, r2
 8007f0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	0159      	lsls	r1, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	440b      	add	r3, r1
 8007f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f26:	4619      	mov	r1, r3
 8007f28:	4b05      	ldr	r3, [pc, #20]	@ (8007f40 <USB_DeactivateEndpoint+0x1b4>)
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	ec337800 	.word	0xec337800
 8007f40:	eff37800 	.word	0xeff37800

08007f44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08a      	sub	sp, #40	@ 0x28
 8007f48:	af02      	add	r7, sp, #8
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	f040 8185 	bne.w	8008270 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d132      	bne.n	8007fd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	0159      	lsls	r1, r3, #5
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	440b      	add	r3, r1
 8007f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4ba7      	ldr	r3, [pc, #668]	@ (8008228 <USB_EPStartXfer+0x2e4>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007faa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	0159      	lsls	r1, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	440b      	add	r3, r1
 8007fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4b97      	ldr	r3, [pc, #604]	@ (800822c <USB_EPStartXfer+0x2e8>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	610b      	str	r3, [r1, #16]
 8007fd2:	e097      	b.n	8008104 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	0159      	lsls	r1, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	440b      	add	r3, r1
 8007fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800822c <USB_EPStartXfer+0x2e8>)
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	0159      	lsls	r1, r3, #5
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	440b      	add	r3, r1
 800800c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008010:	4619      	mov	r1, r3
 8008012:	4b85      	ldr	r3, [pc, #532]	@ (8008228 <USB_EPStartXfer+0x2e4>)
 8008014:	4013      	ands	r3, r2
 8008016:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d11a      	bne.n	8008054 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	691a      	ldr	r2, [r3, #16]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	429a      	cmp	r2, r3
 8008028:	d903      	bls.n	8008032 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800804c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008050:	6113      	str	r3, [r2, #16]
 8008052:	e044      	b.n	80080de <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	4413      	add	r3, r2
 800805e:	1e5a      	subs	r2, r3, #1
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	fbb2 f3f3 	udiv	r3, r2, r3
 8008068:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	8afb      	ldrh	r3, [r7, #22]
 800807a:	04d9      	lsls	r1, r3, #19
 800807c:	4b6c      	ldr	r3, [pc, #432]	@ (8008230 <USB_EPStartXfer+0x2ec>)
 800807e:	400b      	ands	r3, r1
 8008080:	69b9      	ldr	r1, [r7, #24]
 8008082:	0148      	lsls	r0, r1, #5
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	4401      	add	r1, r0
 8008088:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800808c:	4313      	orrs	r3, r2
 800808e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	791b      	ldrb	r3, [r3, #4]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d122      	bne.n	80080de <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080b2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80080b6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	8afb      	ldrh	r3, [r7, #22]
 80080c8:	075b      	lsls	r3, r3, #29
 80080ca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80080ce:	69b9      	ldr	r1, [r7, #24]
 80080d0:	0148      	lsls	r0, r1, #5
 80080d2:	69f9      	ldr	r1, [r7, #28]
 80080d4:	4401      	add	r1, r0
 80080d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080da:	4313      	orrs	r3, r2
 80080dc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080f4:	69b9      	ldr	r1, [r7, #24]
 80080f6:	0148      	lsls	r0, r1, #5
 80080f8:	69f9      	ldr	r1, [r7, #28]
 80080fa:	4401      	add	r1, r0
 80080fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008100:	4313      	orrs	r3, r2
 8008102:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d14b      	bne.n	80081a2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d009      	beq.n	8008126 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	4413      	add	r3, r2
 800811a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800811e:	461a      	mov	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	791b      	ldrb	r3, [r3, #4]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d128      	bne.n	8008180 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800813a:	2b00      	cmp	r3, #0
 800813c:	d110      	bne.n	8008160 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	440a      	add	r2, r1
 8008154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008158:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	e00f      	b.n	8008180 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	440a      	add	r2, r1
 8008176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800817a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800817e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800819a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	e169      	b.n	8008476 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	0151      	lsls	r1, r2, #5
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	440a      	add	r2, r1
 80081b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	791b      	ldrb	r3, [r3, #4]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d015      	beq.n	80081f6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 8151 	beq.w	8008476 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	f003 030f 	and.w	r3, r3, #15
 80081e4:	2101      	movs	r1, #1
 80081e6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ea:	69f9      	ldr	r1, [r7, #28]
 80081ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081f0:	4313      	orrs	r3, r2
 80081f2:	634b      	str	r3, [r1, #52]	@ 0x34
 80081f4:	e13f      	b.n	8008476 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d116      	bne.n	8008234 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	440a      	add	r2, r1
 800821c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	e015      	b.n	8008254 <USB_EPStartXfer+0x310>
 8008228:	e007ffff 	.word	0xe007ffff
 800822c:	fff80000 	.word	0xfff80000
 8008230:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	440a      	add	r2, r1
 800824a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800824e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008252:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	68d9      	ldr	r1, [r3, #12]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	b298      	uxth	r0, r3
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	4603      	mov	r3, r0
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f9b9 	bl	80085e0 <USB_WritePacket>
 800826e:	e102      	b.n	8008476 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	0159      	lsls	r1, r3, #5
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	440b      	add	r3, r1
 8008286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800828a:	4619      	mov	r1, r3
 800828c:	4b7c      	ldr	r3, [pc, #496]	@ (8008480 <USB_EPStartXfer+0x53c>)
 800828e:	4013      	ands	r3, r2
 8008290:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	0159      	lsls	r1, r3, #5
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	440b      	add	r3, r1
 80082a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ac:	4619      	mov	r1, r3
 80082ae:	4b75      	ldr	r3, [pc, #468]	@ (8008484 <USB_EPStartXfer+0x540>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d12f      	bne.n	800831a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082de:	691a      	ldr	r2, [r3, #16]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082e8:	69b9      	ldr	r1, [r7, #24]
 80082ea:	0148      	lsls	r0, r1, #5
 80082ec:	69f9      	ldr	r1, [r7, #28]
 80082ee:	4401      	add	r1, r0
 80082f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082f4:	4313      	orrs	r3, r2
 80082f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008316:	6113      	str	r3, [r2, #16]
 8008318:	e05f      	b.n	80083da <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d123      	bne.n	800836a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832e:	691a      	ldr	r2, [r3, #16]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008338:	69b9      	ldr	r1, [r7, #24]
 800833a:	0148      	lsls	r0, r1, #5
 800833c:	69f9      	ldr	r1, [r7, #28]
 800833e:	4401      	add	r1, r0
 8008340:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008344:	4313      	orrs	r3, r2
 8008346:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	440a      	add	r2, r1
 800835e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008362:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008366:	6113      	str	r3, [r2, #16]
 8008368:	e037      	b.n	80083da <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	4413      	add	r3, r2
 8008374:	1e5a      	subs	r2, r3, #1
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	fbb2 f3f3 	udiv	r3, r2, r3
 800837e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	8afa      	ldrh	r2, [r7, #22]
 8008386:	fb03 f202 	mul.w	r2, r3, r2
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	8afb      	ldrh	r3, [r7, #22]
 800839e:	04d9      	lsls	r1, r3, #19
 80083a0:	4b39      	ldr	r3, [pc, #228]	@ (8008488 <USB_EPStartXfer+0x544>)
 80083a2:	400b      	ands	r3, r1
 80083a4:	69b9      	ldr	r1, [r7, #24]
 80083a6:	0148      	lsls	r0, r1, #5
 80083a8:	69f9      	ldr	r1, [r7, #28]
 80083aa:	4401      	add	r1, r0
 80083ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083b0:	4313      	orrs	r3, r2
 80083b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083ca:	69b9      	ldr	r1, [r7, #24]
 80083cc:	0148      	lsls	r0, r1, #5
 80083ce:	69f9      	ldr	r1, [r7, #28]
 80083d0:	4401      	add	r1, r0
 80083d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083d6:	4313      	orrs	r3, r2
 80083d8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d10d      	bne.n	80083fc <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	68d9      	ldr	r1, [r3, #12]
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f8:	460a      	mov	r2, r1
 80083fa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	791b      	ldrb	r3, [r3, #4]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d128      	bne.n	8008456 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008410:	2b00      	cmp	r3, #0
 8008412:	d110      	bne.n	8008436 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800842e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	e00f      	b.n	8008456 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	0151      	lsls	r1, r2, #5
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	440a      	add	r2, r1
 800844c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008454:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	440a      	add	r2, r1
 800846c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008470:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008474:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3720      	adds	r7, #32
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	fff80000 	.word	0xfff80000
 8008484:	e007ffff 	.word	0xe007ffff
 8008488:	1ff80000 	.word	0x1ff80000

0800848c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d14a      	bne.n	8008540 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084c2:	f040 8086 	bne.w	80085d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	7812      	ldrb	r2, [r2, #0]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	440a      	add	r2, r1
 8008504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008508:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800850c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f242 7210 	movw	r2, #10000	@ 0x2710
 800851a:	4293      	cmp	r3, r2
 800851c:	d902      	bls.n	8008524 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	75fb      	strb	r3, [r7, #23]
          break;
 8008522:	e056      	b.n	80085d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800853c:	d0e7      	beq.n	800850e <USB_EPStopXfer+0x82>
 800853e:	e048      	b.n	80085d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008558:	d13b      	bne.n	80085d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	7812      	ldrb	r2, [r2, #0]
 800856e:	0151      	lsls	r1, r2, #5
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	440a      	add	r2, r1
 8008574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008578:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800857c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	440a      	add	r2, r1
 8008598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800859c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3301      	adds	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d902      	bls.n	80085b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	75fb      	strb	r3, [r7, #23]
          break;
 80085b6:	e00c      	b.n	80085d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085d0:	d0e7      	beq.n	80085a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b089      	sub	sp, #36	@ 0x24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	4611      	mov	r1, r2
 80085ec:	461a      	mov	r2, r3
 80085ee:	460b      	mov	r3, r1
 80085f0:	71fb      	strb	r3, [r7, #7]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d123      	bne.n	800864e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008606:	88bb      	ldrh	r3, [r7, #4]
 8008608:	3303      	adds	r3, #3
 800860a:	089b      	lsrs	r3, r3, #2
 800860c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800860e:	2300      	movs	r3, #0
 8008610:	61bb      	str	r3, [r7, #24]
 8008612:	e018      	b.n	8008646 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	031a      	lsls	r2, r3, #12
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	4413      	add	r3, r2
 800861c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008620:	461a      	mov	r2, r3
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	3301      	adds	r3, #1
 800862c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	3301      	adds	r3, #1
 8008632:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	3301      	adds	r3, #1
 8008638:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	3301      	adds	r3, #1
 800863e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	3301      	adds	r3, #1
 8008644:	61bb      	str	r3, [r7, #24]
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	429a      	cmp	r2, r3
 800864c:	d3e2      	bcc.n	8008614 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3724      	adds	r7, #36	@ 0x24
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800865c:	b480      	push	{r7}
 800865e:	b08b      	sub	sp, #44	@ 0x2c
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	089b      	lsrs	r3, r3, #2
 8008676:	b29b      	uxth	r3, r3
 8008678:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008682:	2300      	movs	r3, #0
 8008684:	623b      	str	r3, [r7, #32]
 8008686:	e014      	b.n	80086b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	601a      	str	r2, [r3, #0]
    pDest++;
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	3301      	adds	r3, #1
 8008698:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	3301      	adds	r3, #1
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	3301      	adds	r3, #1
 80086a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a8:	3301      	adds	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	3301      	adds	r3, #1
 80086b0:	623b      	str	r3, [r7, #32]
 80086b2:	6a3a      	ldr	r2, [r7, #32]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d3e6      	bcc.n	8008688 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086ba:	8bfb      	ldrh	r3, [r7, #30]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01e      	beq.n	80086fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086ca:	461a      	mov	r2, r3
 80086cc:	f107 0310 	add.w	r3, r7, #16
 80086d0:	6812      	ldr	r2, [r2, #0]
 80086d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	fa22 f303 	lsr.w	r3, r2, r3
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	701a      	strb	r2, [r3, #0]
      i++;
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	3301      	adds	r3, #1
 80086ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ee:	3301      	adds	r3, #1
 80086f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80086f2:	8bfb      	ldrh	r3, [r7, #30]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086f8:	8bfb      	ldrh	r3, [r7, #30]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1ea      	bne.n	80086d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008700:	4618      	mov	r0, r3
 8008702:	372c      	adds	r7, #44	@ 0x2c
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	785b      	ldrb	r3, [r3, #1]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d12c      	bne.n	8008782 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	db12      	blt.n	8008760 <USB_EPSetStall+0x54>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00f      	beq.n	8008760 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	440a      	add	r2, r1
 8008756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800875a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800875e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	0151      	lsls	r1, r2, #5
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	440a      	add	r2, r1
 8008776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800877a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	e02b      	b.n	80087da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	db12      	blt.n	80087ba <USB_EPSetStall+0xae>
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00f      	beq.n	80087ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d128      	bne.n	8008856 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	440a      	add	r2, r1
 800881a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800881e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008822:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	791b      	ldrb	r3, [r3, #4]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d003      	beq.n	8008834 <USB_EPClearStall+0x4c>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	791b      	ldrb	r3, [r3, #4]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d138      	bne.n	80088a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	440a      	add	r2, r1
 800884a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800884e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	e027      	b.n	80088a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	0151      	lsls	r1, r2, #5
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	440a      	add	r2, r1
 800886c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008870:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008874:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	791b      	ldrb	r3, [r3, #4]
 800887a:	2b03      	cmp	r3, #3
 800887c:	d003      	beq.n	8008886 <USB_EPClearStall+0x9e>
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	791b      	ldrb	r3, [r3, #4]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d10f      	bne.n	80088a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	440a      	add	r2, r1
 800889c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80088d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80088e8:	68f9      	ldr	r1, [r7, #12]
 80088ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088ee:	4313      	orrs	r3, r2
 80088f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800892e:	f023 0302 	bic.w	r3, r3, #2
 8008932:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008942:	b480      	push	{r7}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800895c:	f023 0303 	bic.w	r3, r3, #3
 8008960:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008970:	f043 0302 	orr.w	r3, r3, #2
 8008974:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4013      	ands	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800899c:	68fb      	ldr	r3, [r7, #12]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	4013      	ands	r3, r2
 80089cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	0c1b      	lsrs	r3, r3, #16
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	4013      	ands	r3, r2
 8008a00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	b29b      	uxth	r3, r3
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a40:	68bb      	ldr	r3, [r7, #8]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b087      	sub	sp, #28
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a72:	78fb      	ldrb	r3, [r7, #3]
 8008a74:	f003 030f 	and.w	r3, r3, #15
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7e:	01db      	lsls	r3, r3, #7
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
	...

08008ac8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4b09      	ldr	r3, [pc, #36]	@ (8008b0c <USB_ActivateSetup+0x44>)
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008afc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	fffff800 	.word	0xfffff800

08008b10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	333c      	adds	r3, #60	@ 0x3c
 8008b26:	3304      	adds	r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	4a26      	ldr	r2, [pc, #152]	@ (8008bc8 <USB_EP0_OutStart+0xb8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d90a      	bls.n	8008b4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b44:	d101      	bne.n	8008b4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	e037      	b.n	8008bba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b50:	461a      	mov	r2, r3
 8008b52:	2300      	movs	r3, #0
 8008b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b78:	f043 0318 	orr.w	r3, r3, #24
 8008b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008b90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b92:	7afb      	ldrb	r3, [r7, #11]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d10f      	bne.n	8008bb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bb2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008bb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	4f54300a 	.word	0x4f54300a

08008bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008be4:	d901      	bls.n	8008bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e01b      	b.n	8008c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	daf2      	bge.n	8008bd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f043 0201 	orr.w	r2, r3, #1
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3301      	adds	r3, #1
 8008c06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c0e:	d901      	bls.n	8008c14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e006      	b.n	8008c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d0f0      	beq.n	8008c02 <USB_CoreReset+0x36>

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
	...

08008c30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c3c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c40:	f002 fd3e 	bl	800b6c0 <USBD_static_malloc>
 8008c44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d109      	bne.n	8008c60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	32b0      	adds	r2, #176	@ 0xb0
 8008c56:	2100      	movs	r1, #0
 8008c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e0d4      	b.n	8008e0a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008c60:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008c64:	2100      	movs	r1, #0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f002 fe8d 	bl	800b986 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	32b0      	adds	r2, #176	@ 0xb0
 8008c76:	68f9      	ldr	r1, [r7, #12]
 8008c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	32b0      	adds	r2, #176	@ 0xb0
 8008c86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7c1b      	ldrb	r3, [r3, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d138      	bne.n	8008d0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c98:	4b5e      	ldr	r3, [pc, #376]	@ (8008e14 <USBD_CDC_Init+0x1e4>)
 8008c9a:	7819      	ldrb	r1, [r3, #0]
 8008c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f002 fbe9 	bl	800b47a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e14 <USBD_CDC_Init+0x1e4>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 020f 	and.w	r2, r3, #15
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	3324      	adds	r3, #36	@ 0x24
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008cc2:	4b55      	ldr	r3, [pc, #340]	@ (8008e18 <USBD_CDC_Init+0x1e8>)
 8008cc4:	7819      	ldrb	r1, [r3, #0]
 8008cc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cca:	2202      	movs	r2, #2
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f002 fbd4 	bl	800b47a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008cd2:	4b51      	ldr	r3, [pc, #324]	@ (8008e18 <USBD_CDC_Init+0x1e8>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	f003 020f 	and.w	r2, r3, #15
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008cea:	2201      	movs	r2, #1
 8008cec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008cee:	4b4b      	ldr	r3, [pc, #300]	@ (8008e1c <USBD_CDC_Init+0x1ec>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f003 020f 	and.w	r2, r3, #15
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	3326      	adds	r3, #38	@ 0x26
 8008d04:	2210      	movs	r2, #16
 8008d06:	801a      	strh	r2, [r3, #0]
 8008d08:	e035      	b.n	8008d76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d0a:	4b42      	ldr	r3, [pc, #264]	@ (8008e14 <USBD_CDC_Init+0x1e4>)
 8008d0c:	7819      	ldrb	r1, [r3, #0]
 8008d0e:	2340      	movs	r3, #64	@ 0x40
 8008d10:	2202      	movs	r2, #2
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f002 fbb1 	bl	800b47a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d18:	4b3e      	ldr	r3, [pc, #248]	@ (8008e14 <USBD_CDC_Init+0x1e4>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 020f 	and.w	r2, r3, #15
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	3324      	adds	r3, #36	@ 0x24
 8008d2e:	2201      	movs	r2, #1
 8008d30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d32:	4b39      	ldr	r3, [pc, #228]	@ (8008e18 <USBD_CDC_Init+0x1e8>)
 8008d34:	7819      	ldrb	r1, [r3, #0]
 8008d36:	2340      	movs	r3, #64	@ 0x40
 8008d38:	2202      	movs	r2, #2
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f002 fb9d 	bl	800b47a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d40:	4b35      	ldr	r3, [pc, #212]	@ (8008e18 <USBD_CDC_Init+0x1e8>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 020f 	and.w	r2, r3, #15
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d58:	2201      	movs	r2, #1
 8008d5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8008e1c <USBD_CDC_Init+0x1ec>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f003 020f 	and.w	r2, r3, #15
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	440b      	add	r3, r1
 8008d70:	3326      	adds	r3, #38	@ 0x26
 8008d72:	2210      	movs	r2, #16
 8008d74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d76:	4b29      	ldr	r3, [pc, #164]	@ (8008e1c <USBD_CDC_Init+0x1ec>)
 8008d78:	7819      	ldrb	r1, [r3, #0]
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f002 fb7b 	bl	800b47a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008d84:	4b25      	ldr	r3, [pc, #148]	@ (8008e1c <USBD_CDC_Init+0x1ec>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	3324      	adds	r3, #36	@ 0x24
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	33b0      	adds	r3, #176	@ 0xb0
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e018      	b.n	8008e0a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7c1b      	ldrb	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008de0:	4b0d      	ldr	r3, [pc, #52]	@ (8008e18 <USBD_CDC_Init+0x1e8>)
 8008de2:	7819      	ldrb	r1, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f002 fc32 	bl	800b658 <USBD_LL_PrepareReceive>
 8008df4:	e008      	b.n	8008e08 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008df6:	4b08      	ldr	r3, [pc, #32]	@ (8008e18 <USBD_CDC_Init+0x1e8>)
 8008df8:	7819      	ldrb	r1, [r3, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e00:	2340      	movs	r3, #64	@ 0x40
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f002 fc28 	bl	800b658 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	24000097 	.word	0x24000097
 8008e18:	24000098 	.word	0x24000098
 8008e1c:	24000099 	.word	0x24000099

08008e20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8008f18 <USBD_CDC_DeInit+0xf8>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f002 fb47 	bl	800b4c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008e38:	4b37      	ldr	r3, [pc, #220]	@ (8008f18 <USBD_CDC_DeInit+0xf8>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3324      	adds	r3, #36	@ 0x24
 8008e4e:	2200      	movs	r2, #0
 8008e50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008e52:	4b32      	ldr	r3, [pc, #200]	@ (8008f1c <USBD_CDC_DeInit+0xfc>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f002 fb34 	bl	800b4c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8008f1c <USBD_CDC_DeInit+0xfc>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 020f 	and.w	r2, r3, #15
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e76:	2200      	movs	r2, #0
 8008e78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008e7a:	4b29      	ldr	r3, [pc, #164]	@ (8008f20 <USBD_CDC_DeInit+0x100>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f002 fb20 	bl	800b4c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008e86:	4b26      	ldr	r3, [pc, #152]	@ (8008f20 <USBD_CDC_DeInit+0x100>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	f003 020f 	and.w	r2, r3, #15
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	3324      	adds	r3, #36	@ 0x24
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8008f20 <USBD_CDC_DeInit+0x100>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	f003 020f 	and.w	r2, r3, #15
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	3326      	adds	r3, #38	@ 0x26
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	32b0      	adds	r2, #176	@ 0xb0
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01f      	beq.n	8008f0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	33b0      	adds	r3, #176	@ 0xb0
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	32b0      	adds	r2, #176	@ 0xb0
 8008eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f002 fbf4 	bl	800b6dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32b0      	adds	r2, #176	@ 0xb0
 8008efe:	2100      	movs	r1, #0
 8008f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	24000097 	.word	0x24000097
 8008f1c:	24000098 	.word	0x24000098
 8008f20:	24000099 	.word	0x24000099

08008f24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	32b0      	adds	r2, #176	@ 0xb0
 8008f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e0bf      	b.n	80090d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d050      	beq.n	8009002 <USBD_CDC_Setup+0xde>
 8008f60:	2b20      	cmp	r3, #32
 8008f62:	f040 80af 	bne.w	80090c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	88db      	ldrh	r3, [r3, #6]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d03a      	beq.n	8008fe4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b25b      	sxtb	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da1b      	bge.n	8008fb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	33b0      	adds	r3, #176	@ 0xb0
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008f8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	88d2      	ldrh	r2, [r2, #6]
 8008f94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	88db      	ldrh	r3, [r3, #6]
 8008f9a:	2b07      	cmp	r3, #7
 8008f9c:	bf28      	it	cs
 8008f9e:	2307      	movcs	r3, #7
 8008fa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	89fa      	ldrh	r2, [r7, #14]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 fdd9 	bl	800ab60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008fae:	e090      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	785a      	ldrb	r2, [r3, #1]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	88db      	ldrh	r3, [r3, #6]
 8008fbe:	2b3f      	cmp	r3, #63	@ 0x3f
 8008fc0:	d803      	bhi.n	8008fca <USBD_CDC_Setup+0xa6>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	88db      	ldrh	r3, [r3, #6]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	e000      	b.n	8008fcc <USBD_CDC_Setup+0xa8>
 8008fca:	2240      	movs	r2, #64	@ 0x40
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008fd2:	6939      	ldr	r1, [r7, #16]
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008fda:	461a      	mov	r2, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 fdeb 	bl	800abb8 <USBD_CtlPrepareRx>
      break;
 8008fe2:	e076      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	33b0      	adds	r3, #176	@ 0xb0
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	7850      	ldrb	r0, [r2, #1]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	4798      	blx	r3
      break;
 8009000:	e067      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	2b0b      	cmp	r3, #11
 8009008:	d851      	bhi.n	80090ae <USBD_CDC_Setup+0x18a>
 800900a:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <USBD_CDC_Setup+0xec>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009041 	.word	0x08009041
 8009014:	080090bd 	.word	0x080090bd
 8009018:	080090af 	.word	0x080090af
 800901c:	080090af 	.word	0x080090af
 8009020:	080090af 	.word	0x080090af
 8009024:	080090af 	.word	0x080090af
 8009028:	080090af 	.word	0x080090af
 800902c:	080090af 	.word	0x080090af
 8009030:	080090af 	.word	0x080090af
 8009034:	080090af 	.word	0x080090af
 8009038:	0800906b 	.word	0x0800906b
 800903c:	08009095 	.word	0x08009095
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b03      	cmp	r3, #3
 800904a:	d107      	bne.n	800905c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800904c:	f107 030a 	add.w	r3, r7, #10
 8009050:	2202      	movs	r2, #2
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 fd83 	bl	800ab60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800905a:	e032      	b.n	80090c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fd01 	bl	800aa66 <USBD_CtlError>
            ret = USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	75fb      	strb	r3, [r7, #23]
          break;
 8009068:	e02b      	b.n	80090c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b03      	cmp	r3, #3
 8009074:	d107      	bne.n	8009086 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009076:	f107 030d 	add.w	r3, r7, #13
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fd6e 	bl	800ab60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009084:	e01d      	b.n	80090c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 fcec 	bl	800aa66 <USBD_CtlError>
            ret = USBD_FAIL;
 800908e:	2303      	movs	r3, #3
 8009090:	75fb      	strb	r3, [r7, #23]
          break;
 8009092:	e016      	b.n	80090c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b03      	cmp	r3, #3
 800909e:	d00f      	beq.n	80090c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 fcdf 	bl	800aa66 <USBD_CtlError>
            ret = USBD_FAIL;
 80090a8:	2303      	movs	r3, #3
 80090aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090ac:	e008      	b.n	80090c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fcd8 	bl	800aa66 <USBD_CtlError>
          ret = USBD_FAIL;
 80090b6:	2303      	movs	r3, #3
 80090b8:	75fb      	strb	r3, [r7, #23]
          break;
 80090ba:	e002      	b.n	80090c2 <USBD_CDC_Setup+0x19e>
          break;
 80090bc:	bf00      	nop
 80090be:	e008      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>
          break;
 80090c0:	bf00      	nop
      }
      break;
 80090c2:	e006      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fccd 	bl	800aa66 <USBD_CtlError>
      ret = USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	75fb      	strb	r3, [r7, #23]
      break;
 80090d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32b0      	adds	r2, #176	@ 0xb0
 80090fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009102:	2303      	movs	r3, #3
 8009104:	e065      	b.n	80091d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	32b0      	adds	r2, #176	@ 0xb0
 8009110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009114:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	f003 020f 	and.w	r2, r3, #15
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	440b      	add	r3, r1
 8009128:	3318      	adds	r3, #24
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d02f      	beq.n	8009190 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	f003 020f 	and.w	r2, r3, #15
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	440b      	add	r3, r1
 8009142:	3318      	adds	r3, #24
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	f003 010f 	and.w	r1, r3, #15
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	460b      	mov	r3, r1
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	440b      	add	r3, r1
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4403      	add	r3, r0
 8009158:	331c      	adds	r3, #28
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009160:	fb01 f303 	mul.w	r3, r1, r3
 8009164:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009166:	2b00      	cmp	r3, #0
 8009168:	d112      	bne.n	8009190 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	3318      	adds	r3, #24
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009182:	78f9      	ldrb	r1, [r7, #3]
 8009184:	2300      	movs	r3, #0
 8009186:	2200      	movs	r2, #0
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f002 fa44 	bl	800b616 <USBD_LL_Transmit>
 800918e:	e01f      	b.n	80091d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	33b0      	adds	r3, #176	@ 0xb0
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d010      	beq.n	80091d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	33b0      	adds	r3, #176	@ 0xb0
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	460b      	mov	r3, r1
 80091e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	32b0      	adds	r2, #176	@ 0xb0
 80091f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	32b0      	adds	r2, #176	@ 0xb0
 8009200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	e01a      	b.n	8009242 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f002 fa42 	bl	800b69a <USBD_LL_GetRxDataSize>
 8009216:	4602      	mov	r2, r0
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	33b0      	adds	r3, #176	@ 0xb0
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800923c:	4611      	mov	r1, r2
 800923e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	32b0      	adds	r2, #176	@ 0xb0
 800925c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009260:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	e024      	b.n	80092b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	33b0      	adds	r3, #176	@ 0xb0
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d019      	beq.n	80092b4 <USBD_CDC_EP0_RxReady+0x6a>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009286:	2bff      	cmp	r3, #255	@ 0xff
 8009288:	d014      	beq.n	80092b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	33b0      	adds	r3, #176	@ 0xb0
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80092a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80092aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	22ff      	movs	r2, #255	@ 0xff
 80092b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092c8:	2182      	movs	r1, #130	@ 0x82
 80092ca:	4818      	ldr	r0, [pc, #96]	@ (800932c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092cc:	f000 fd6b 	bl	8009da6 <USBD_GetEpDesc>
 80092d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092d2:	2101      	movs	r1, #1
 80092d4:	4815      	ldr	r0, [pc, #84]	@ (800932c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092d6:	f000 fd66 	bl	8009da6 <USBD_GetEpDesc>
 80092da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092dc:	2181      	movs	r1, #129	@ 0x81
 80092de:	4813      	ldr	r0, [pc, #76]	@ (800932c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092e0:	f000 fd61 	bl	8009da6 <USBD_GetEpDesc>
 80092e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2210      	movs	r2, #16
 80092f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d006      	beq.n	8009306 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009300:	711a      	strb	r2, [r3, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009314:	711a      	strb	r2, [r3, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2243      	movs	r2, #67	@ 0x43
 800931e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009320:	4b02      	ldr	r3, [pc, #8]	@ (800932c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	24000054 	.word	0x24000054

08009330 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009338:	2182      	movs	r1, #130	@ 0x82
 800933a:	4818      	ldr	r0, [pc, #96]	@ (800939c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800933c:	f000 fd33 	bl	8009da6 <USBD_GetEpDesc>
 8009340:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009342:	2101      	movs	r1, #1
 8009344:	4815      	ldr	r0, [pc, #84]	@ (800939c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009346:	f000 fd2e 	bl	8009da6 <USBD_GetEpDesc>
 800934a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800934c:	2181      	movs	r1, #129	@ 0x81
 800934e:	4813      	ldr	r0, [pc, #76]	@ (800939c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009350:	f000 fd29 	bl	8009da6 <USBD_GetEpDesc>
 8009354:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	2210      	movs	r2, #16
 8009360:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d006      	beq.n	8009376 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2200      	movs	r2, #0
 800936c:	711a      	strb	r2, [r3, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f042 0202 	orr.w	r2, r2, #2
 8009374:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d006      	beq.n	800938a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	711a      	strb	r2, [r3, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f042 0202 	orr.w	r2, r2, #2
 8009388:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2243      	movs	r2, #67	@ 0x43
 800938e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009390:	4b02      	ldr	r3, [pc, #8]	@ (800939c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	24000054 	.word	0x24000054

080093a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093a8:	2182      	movs	r1, #130	@ 0x82
 80093aa:	4818      	ldr	r0, [pc, #96]	@ (800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093ac:	f000 fcfb 	bl	8009da6 <USBD_GetEpDesc>
 80093b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093b2:	2101      	movs	r1, #1
 80093b4:	4815      	ldr	r0, [pc, #84]	@ (800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093b6:	f000 fcf6 	bl	8009da6 <USBD_GetEpDesc>
 80093ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093bc:	2181      	movs	r1, #129	@ 0x81
 80093be:	4813      	ldr	r0, [pc, #76]	@ (800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093c0:	f000 fcf1 	bl	8009da6 <USBD_GetEpDesc>
 80093c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2210      	movs	r2, #16
 80093d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d006      	beq.n	80093e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	2200      	movs	r2, #0
 80093dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093e0:	711a      	strb	r2, [r3, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d006      	beq.n	80093fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093f4:	711a      	strb	r2, [r3, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2243      	movs	r2, #67	@ 0x43
 80093fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009400:	4b02      	ldr	r3, [pc, #8]	@ (800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	24000054 	.word	0x24000054

08009410 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	220a      	movs	r2, #10
 800941c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800941e:	4b03      	ldr	r3, [pc, #12]	@ (800942c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	24000010 	.word	0x24000010

08009430 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	e009      	b.n	8009458 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	33b0      	adds	r3, #176	@ 0xb0
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	32b0      	adds	r2, #176	@ 0xb0
 800947a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009486:	2303      	movs	r3, #3
 8009488:	e008      	b.n	800949c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	32b0      	adds	r2, #176	@ 0xb0
 80094bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e004      	b.n	80094d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	32b0      	adds	r2, #176	@ 0xb0
 80094f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009506:	2303      	movs	r3, #3
 8009508:	e025      	b.n	8009556 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009510:	2b00      	cmp	r3, #0
 8009512:	d11f      	bne.n	8009554 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2201      	movs	r2, #1
 8009518:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800951c:	4b10      	ldr	r3, [pc, #64]	@ (8009560 <USBD_CDC_TransmitPacket+0x7c>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	f003 020f 	and.w	r2, r3, #15
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4403      	add	r3, r0
 8009536:	3318      	adds	r3, #24
 8009538:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800953a:	4b09      	ldr	r3, [pc, #36]	@ (8009560 <USBD_CDC_TransmitPacket+0x7c>)
 800953c:	7819      	ldrb	r1, [r3, #0]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f002 f863 	bl	800b616 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	24000097 	.word	0x24000097

08009564 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	32b0      	adds	r2, #176	@ 0xb0
 8009576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	32b0      	adds	r2, #176	@ 0xb0
 8009586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800958e:	2303      	movs	r3, #3
 8009590:	e018      	b.n	80095c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	7c1b      	ldrb	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10a      	bne.n	80095b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800959a:	4b0c      	ldr	r3, [pc, #48]	@ (80095cc <USBD_CDC_ReceivePacket+0x68>)
 800959c:	7819      	ldrb	r1, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f002 f855 	bl	800b658 <USBD_LL_PrepareReceive>
 80095ae:	e008      	b.n	80095c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095b0:	4b06      	ldr	r3, [pc, #24]	@ (80095cc <USBD_CDC_ReceivePacket+0x68>)
 80095b2:	7819      	ldrb	r1, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095ba:	2340      	movs	r3, #64	@ 0x40
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f002 f84b 	bl	800b658 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	24000098 	.word	0x24000098

080095d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80095e4:	4817      	ldr	r0, [pc, #92]	@ (8009644 <USBD_Init+0x74>)
 80095e6:	f002 f971 	bl	800b8cc <iprintf>
 80095ea:	4817      	ldr	r0, [pc, #92]	@ (8009648 <USBD_Init+0x78>)
 80095ec:	f002 f96e 	bl	800b8cc <iprintf>
 80095f0:	200a      	movs	r0, #10
 80095f2:	f002 f97d 	bl	800b8f0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e01f      	b.n	800963a <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	79fa      	ldrb	r2, [r7, #7]
 800962c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f001 feb6 	bl	800b3a0 <USBD_LL_Init>
 8009634:	4603      	mov	r3, r0
 8009636:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009638:	7dfb      	ldrb	r3, [r7, #23]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	0800c684 	.word	0x0800c684
 8009648:	0800c68c 	.word	0x0800c68c

0800964c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8009660:	481a      	ldr	r0, [pc, #104]	@ (80096cc <USBD_RegisterClass+0x80>)
 8009662:	f002 f933 	bl	800b8cc <iprintf>
 8009666:	481a      	ldr	r0, [pc, #104]	@ (80096d0 <USBD_RegisterClass+0x84>)
 8009668:	f002 f930 	bl	800b8cc <iprintf>
 800966c:	200a      	movs	r0, #10
 800966e:	f002 f93f 	bl	800b8f0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009672:	2303      	movs	r3, #3
 8009674:	e025      	b.n	80096c2 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	32ae      	adds	r2, #174	@ 0xae
 8009688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00f      	beq.n	80096b2 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	32ae      	adds	r2, #174	@ 0xae
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a2:	f107 020e 	add.w	r2, r7, #14
 80096a6:	4610      	mov	r0, r2
 80096a8:	4798      	blx	r3
 80096aa:	4602      	mov	r2, r0
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	0800c684 	.word	0x0800c684
 80096d0:	0800c6a4 	.word	0x0800c6a4

080096d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 feb1 	bl	800b444 <USBD_LL_Start>
 80096e2:	4603      	mov	r3, r0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	460b      	mov	r3, r1
 800970c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009718:	2b00      	cmp	r3, #0
 800971a:	d009      	beq.n	8009730 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	4611      	mov	r1, r2
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	78fa      	ldrb	r2, [r7, #3]
 8009754:	4611      	mov	r1, r2
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009760:	2303      	movs	r3, #3
 8009762:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	4618      	mov	r0, r3
 8009782:	f001 f936 	bl	800a9f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009794:	461a      	mov	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d01a      	beq.n	80097e0 <USBD_LL_SetupStage+0x72>
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d822      	bhi.n	80097f4 <USBD_LL_SetupStage+0x86>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <USBD_LL_SetupStage+0x4a>
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d00a      	beq.n	80097cc <USBD_LL_SetupStage+0x5e>
 80097b6:	e01d      	b.n	80097f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fb63 	bl	8009e8c <USBD_StdDevReq>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]
      break;
 80097ca:	e020      	b.n	800980e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fbcb 	bl	8009f70 <USBD_StdItfReq>
 80097da:	4603      	mov	r3, r0
 80097dc:	73fb      	strb	r3, [r7, #15]
      break;
 80097de:	e016      	b.n	800980e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fc2d 	bl	800a048 <USBD_StdEPReq>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]
      break;
 80097f2:	e00c      	b.n	800980e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 fe7e 	bl	800b504 <USBD_LL_StallEP>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]
      break;
 800980c:	bf00      	nop
  }

  return ret;
 800980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	460b      	mov	r3, r1
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d16e      	bne.n	800990e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009836:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800983e:	2b03      	cmp	r3, #3
 8009840:	f040 8098 	bne.w	8009974 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	429a      	cmp	r2, r3
 800984e:	d913      	bls.n	8009878 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	1ad2      	subs	r2, r2, r3
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	4293      	cmp	r3, r2
 8009868:	bf28      	it	cs
 800986a:	4613      	movcs	r3, r2
 800986c:	461a      	mov	r2, r3
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f001 f9be 	bl	800abf2 <USBD_CtlContinueRx>
 8009876:	e07d      	b.n	8009974 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800987e:	f003 031f 	and.w	r3, r3, #31
 8009882:	2b02      	cmp	r3, #2
 8009884:	d014      	beq.n	80098b0 <USBD_LL_DataOutStage+0x98>
 8009886:	2b02      	cmp	r3, #2
 8009888:	d81d      	bhi.n	80098c6 <USBD_LL_DataOutStage+0xae>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d002      	beq.n	8009894 <USBD_LL_DataOutStage+0x7c>
 800988e:	2b01      	cmp	r3, #1
 8009890:	d003      	beq.n	800989a <USBD_LL_DataOutStage+0x82>
 8009892:	e018      	b.n	80098c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	75bb      	strb	r3, [r7, #22]
            break;
 8009898:	e018      	b.n	80098cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	4619      	mov	r1, r3
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 fa64 	bl	8009d72 <USBD_CoreFindIF>
 80098aa:	4603      	mov	r3, r0
 80098ac:	75bb      	strb	r3, [r7, #22]
            break;
 80098ae:	e00d      	b.n	80098cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	4619      	mov	r1, r3
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fa66 	bl	8009d8c <USBD_CoreFindEP>
 80098c0:	4603      	mov	r3, r0
 80098c2:	75bb      	strb	r3, [r7, #22]
            break;
 80098c4:	e002      	b.n	80098cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	75bb      	strb	r3, [r7, #22]
            break;
 80098ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80098cc:	7dbb      	ldrb	r3, [r7, #22]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d119      	bne.n	8009906 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d113      	bne.n	8009906 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80098de:	7dba      	ldrb	r2, [r7, #22]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	32ae      	adds	r2, #174	@ 0xae
 80098e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00b      	beq.n	8009906 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80098ee:	7dba      	ldrb	r2, [r7, #22]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80098f6:	7dba      	ldrb	r2, [r7, #22]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	32ae      	adds	r2, #174	@ 0xae
 80098fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f001 f984 	bl	800ac14 <USBD_CtlSendStatus>
 800990c:	e032      	b.n	8009974 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800990e:	7afb      	ldrb	r3, [r7, #11]
 8009910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009914:	b2db      	uxtb	r3, r3
 8009916:	4619      	mov	r1, r3
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 fa37 	bl	8009d8c <USBD_CoreFindEP>
 800991e:	4603      	mov	r3, r0
 8009920:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009922:	7dbb      	ldrb	r3, [r7, #22]
 8009924:	2bff      	cmp	r3, #255	@ 0xff
 8009926:	d025      	beq.n	8009974 <USBD_LL_DataOutStage+0x15c>
 8009928:	7dbb      	ldrb	r3, [r7, #22]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d122      	bne.n	8009974 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b03      	cmp	r3, #3
 8009938:	d117      	bne.n	800996a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800993a:	7dba      	ldrb	r2, [r7, #22]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	32ae      	adds	r2, #174	@ 0xae
 8009940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00f      	beq.n	800996a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800994a:	7dba      	ldrb	r2, [r7, #22]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009952:	7dba      	ldrb	r2, [r7, #22]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	32ae      	adds	r2, #174	@ 0xae
 8009958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	7afa      	ldrb	r2, [r7, #11]
 8009960:	4611      	mov	r1, r2
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	4798      	blx	r3
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	e000      	b.n	8009976 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b086      	sub	sp, #24
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	460b      	mov	r3, r1
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800998c:	7afb      	ldrb	r3, [r7, #11]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d16f      	bne.n	8009a72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3314      	adds	r3, #20
 8009996:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d15a      	bne.n	8009a58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	689a      	ldr	r2, [r3, #8]
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d914      	bls.n	80099d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	689a      	ldr	r2, [r3, #8]
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	461a      	mov	r2, r3
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f001 f8e6 	bl	800ab96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099ca:	2300      	movs	r3, #0
 80099cc:	2200      	movs	r2, #0
 80099ce:	2100      	movs	r1, #0
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f001 fe41 	bl	800b658 <USBD_LL_PrepareReceive>
 80099d6:	e03f      	b.n	8009a58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d11c      	bne.n	8009a1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d316      	bcc.n	8009a1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d20f      	bcs.n	8009a1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099fe:	2200      	movs	r2, #0
 8009a00:	2100      	movs	r1, #0
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f001 f8c7 	bl	800ab96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a10:	2300      	movs	r3, #0
 8009a12:	2200      	movs	r2, #0
 8009a14:	2100      	movs	r1, #0
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f001 fe1e 	bl	800b658 <USBD_LL_PrepareReceive>
 8009a1c:	e01c      	b.n	8009a58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	d10f      	bne.n	8009a4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d009      	beq.n	8009a4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a4a:	2180      	movs	r1, #128	@ 0x80
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f001 fd59 	bl	800b504 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f001 f8f1 	bl	800ac3a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d03a      	beq.n	8009ad8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f7ff fe42 	bl	80096ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a70:	e032      	b.n	8009ad8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009a72:	7afb      	ldrb	r3, [r7, #11]
 8009a74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 f985 	bl	8009d8c <USBD_CoreFindEP>
 8009a82:	4603      	mov	r3, r0
 8009a84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	2bff      	cmp	r3, #255	@ 0xff
 8009a8a:	d025      	beq.n	8009ad8 <USBD_LL_DataInStage+0x15a>
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d122      	bne.n	8009ad8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d11c      	bne.n	8009ad8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009a9e:	7dfa      	ldrb	r2, [r7, #23]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	32ae      	adds	r2, #174	@ 0xae
 8009aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d014      	beq.n	8009ad8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009aae:	7dfa      	ldrb	r2, [r7, #23]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009ab6:	7dfa      	ldrb	r2, [r7, #23]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	32ae      	adds	r2, #174	@ 0xae
 8009abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	7afa      	ldrb	r2, [r7, #11]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009ace:	7dbb      	ldrb	r3, [r7, #22]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009ad4:	7dbb      	ldrb	r3, [r7, #22]
 8009ad6:	e000      	b.n	8009ada <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d014      	beq.n	8009b48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00e      	beq.n	8009b48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	6852      	ldr	r2, [r2, #4]
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	4611      	mov	r1, r2
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009b44:	2303      	movs	r3, #3
 8009b46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b48:	2340      	movs	r3, #64	@ 0x40
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 fc93 	bl	800b47a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2240      	movs	r2, #64	@ 0x40
 8009b60:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b64:	2340      	movs	r3, #64	@ 0x40
 8009b66:	2200      	movs	r2, #0
 8009b68:	2180      	movs	r1, #128	@ 0x80
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 fc85 	bl	800b47a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2240      	movs	r2, #64	@ 0x40
 8009b7a:	621a      	str	r2, [r3, #32]

  return ret;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	d006      	beq.n	8009bc8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2204      	movs	r2, #4
 8009bcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	d106      	bne.n	8009c00 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d110      	bne.n	8009c44 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00b      	beq.n	8009c44 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	460b      	mov	r3, r1
 8009c58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	32ae      	adds	r2, #174	@ 0xae
 8009c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e01c      	b.n	8009caa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b03      	cmp	r3, #3
 8009c7a:	d115      	bne.n	8009ca8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	32ae      	adds	r2, #174	@ 0xae
 8009c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	32ae      	adds	r2, #174	@ 0xae
 8009c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	78fa      	ldrb	r2, [r7, #3]
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	32ae      	adds	r2, #174	@ 0xae
 8009cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e01c      	b.n	8009d0e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	d115      	bne.n	8009d0c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	32ae      	adds	r2, #174	@ 0xae
 8009cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00b      	beq.n	8009d0c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	32ae      	adds	r2, #174	@ 0xae
 8009cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d04:	78fa      	ldrb	r2, [r7, #3]
 8009d06:	4611      	mov	r1, r2
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00e      	beq.n	8009d68 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6852      	ldr	r2, [r2, #4]
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	4611      	mov	r1, r2
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	4798      	blx	r3
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009d64:	2303      	movs	r3, #3
 8009d66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d7e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	885b      	ldrh	r3, [r3, #2]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	7812      	ldrb	r2, [r2, #0]
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d91f      	bls.n	8009e0c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009dd2:	e013      	b.n	8009dfc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009dd4:	f107 030a 	add.w	r3, r7, #10
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6978      	ldr	r0, [r7, #20]
 8009ddc:	f000 f81b 	bl	8009e16 <USBD_GetNextDesc>
 8009de0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d108      	bne.n	8009dfc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	789b      	ldrb	r3, [r3, #2]
 8009df2:	78fa      	ldrb	r2, [r7, #3]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d008      	beq.n	8009e0a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	885b      	ldrh	r3, [r3, #2]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	897b      	ldrh	r3, [r7, #10]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d8e5      	bhi.n	8009dd4 <USBD_GetEpDesc+0x2e>
 8009e08:	e000      	b.n	8009e0c <USBD_GetEpDesc+0x66>
          break;
 8009e0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e0c:	693b      	ldr	r3, [r7, #16]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	881b      	ldrh	r3, [r3, #0]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	7812      	ldrb	r2, [r2, #0]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e40:	68fb      	ldr	r3, [r7, #12]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b087      	sub	sp, #28
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	3301      	adds	r3, #1
 8009e64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009e6c:	8a3b      	ldrh	r3, [r7, #16]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	b21a      	sxth	r2, r3
 8009e72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	b21b      	sxth	r3, r3
 8009e7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
	...

08009e8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ea2:	2b40      	cmp	r3, #64	@ 0x40
 8009ea4:	d005      	beq.n	8009eb2 <USBD_StdDevReq+0x26>
 8009ea6:	2b40      	cmp	r3, #64	@ 0x40
 8009ea8:	d857      	bhi.n	8009f5a <USBD_StdDevReq+0xce>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00f      	beq.n	8009ece <USBD_StdDevReq+0x42>
 8009eae:	2b20      	cmp	r3, #32
 8009eb0:	d153      	bne.n	8009f5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	32ae      	adds	r2, #174	@ 0xae
 8009ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	4798      	blx	r3
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]
      break;
 8009ecc:	e04a      	b.n	8009f64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	785b      	ldrb	r3, [r3, #1]
 8009ed2:	2b09      	cmp	r3, #9
 8009ed4:	d83b      	bhi.n	8009f4e <USBD_StdDevReq+0xc2>
 8009ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8009edc <USBD_StdDevReq+0x50>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009f31 	.word	0x08009f31
 8009ee0:	08009f45 	.word	0x08009f45
 8009ee4:	08009f4f 	.word	0x08009f4f
 8009ee8:	08009f3b 	.word	0x08009f3b
 8009eec:	08009f4f 	.word	0x08009f4f
 8009ef0:	08009f0f 	.word	0x08009f0f
 8009ef4:	08009f05 	.word	0x08009f05
 8009ef8:	08009f4f 	.word	0x08009f4f
 8009efc:	08009f27 	.word	0x08009f27
 8009f00:	08009f19 	.word	0x08009f19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa3c 	bl	800a384 <USBD_GetDescriptor>
          break;
 8009f0c:	e024      	b.n	8009f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fbcb 	bl	800a6ac <USBD_SetAddress>
          break;
 8009f16:	e01f      	b.n	8009f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fc0a 	bl	800a734 <USBD_SetConfig>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73fb      	strb	r3, [r7, #15]
          break;
 8009f24:	e018      	b.n	8009f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fcad 	bl	800a888 <USBD_GetConfig>
          break;
 8009f2e:	e013      	b.n	8009f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fcde 	bl	800a8f4 <USBD_GetStatus>
          break;
 8009f38:	e00e      	b.n	8009f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fd0d 	bl	800a95c <USBD_SetFeature>
          break;
 8009f42:	e009      	b.n	8009f58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fd31 	bl	800a9ae <USBD_ClrFeature>
          break;
 8009f4c:	e004      	b.n	8009f58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fd88 	bl	800aa66 <USBD_CtlError>
          break;
 8009f56:	bf00      	nop
      }
      break;
 8009f58:	e004      	b.n	8009f64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fd82 	bl	800aa66 <USBD_CtlError>
      break;
 8009f62:	bf00      	nop
  }

  return ret;
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop

08009f70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f86:	2b40      	cmp	r3, #64	@ 0x40
 8009f88:	d005      	beq.n	8009f96 <USBD_StdItfReq+0x26>
 8009f8a:	2b40      	cmp	r3, #64	@ 0x40
 8009f8c:	d852      	bhi.n	800a034 <USBD_StdItfReq+0xc4>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <USBD_StdItfReq+0x26>
 8009f92:	2b20      	cmp	r3, #32
 8009f94:	d14e      	bne.n	800a034 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d840      	bhi.n	800a026 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	889b      	ldrh	r3, [r3, #4]
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d836      	bhi.n	800a01c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	889b      	ldrh	r3, [r3, #4]
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff fedb 	bl	8009d72 <USBD_CoreFindIF>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fc0:	7bbb      	ldrb	r3, [r7, #14]
 8009fc2:	2bff      	cmp	r3, #255	@ 0xff
 8009fc4:	d01d      	beq.n	800a002 <USBD_StdItfReq+0x92>
 8009fc6:	7bbb      	ldrb	r3, [r7, #14]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d11a      	bne.n	800a002 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009fcc:	7bba      	ldrb	r2, [r7, #14]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	32ae      	adds	r2, #174	@ 0xae
 8009fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00f      	beq.n	8009ffc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009fdc:	7bba      	ldrb	r2, [r7, #14]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009fe4:	7bba      	ldrb	r2, [r7, #14]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	32ae      	adds	r2, #174	@ 0xae
 8009fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ffa:	e004      	b.n	800a006 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a000:	e001      	b.n	800a006 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a002:	2303      	movs	r3, #3
 800a004:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	88db      	ldrh	r3, [r3, #6]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d110      	bne.n	800a030 <USBD_StdItfReq+0xc0>
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10d      	bne.n	800a030 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fdfd 	bl	800ac14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a01a:	e009      	b.n	800a030 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fd21 	bl	800aa66 <USBD_CtlError>
          break;
 800a024:	e004      	b.n	800a030 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fd1c 	bl	800aa66 <USBD_CtlError>
          break;
 800a02e:	e000      	b.n	800a032 <USBD_StdItfReq+0xc2>
          break;
 800a030:	bf00      	nop
      }
      break;
 800a032:	e004      	b.n	800a03e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fd15 	bl	800aa66 <USBD_CtlError>
      break;
 800a03c:	bf00      	nop
  }

  return ret;
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	889b      	ldrh	r3, [r3, #4]
 800a05a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a064:	2b40      	cmp	r3, #64	@ 0x40
 800a066:	d007      	beq.n	800a078 <USBD_StdEPReq+0x30>
 800a068:	2b40      	cmp	r3, #64	@ 0x40
 800a06a:	f200 817f 	bhi.w	800a36c <USBD_StdEPReq+0x324>
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d02a      	beq.n	800a0c8 <USBD_StdEPReq+0x80>
 800a072:	2b20      	cmp	r3, #32
 800a074:	f040 817a 	bne.w	800a36c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7ff fe85 	bl	8009d8c <USBD_CoreFindEP>
 800a082:	4603      	mov	r3, r0
 800a084:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a086:	7b7b      	ldrb	r3, [r7, #13]
 800a088:	2bff      	cmp	r3, #255	@ 0xff
 800a08a:	f000 8174 	beq.w	800a376 <USBD_StdEPReq+0x32e>
 800a08e:	7b7b      	ldrb	r3, [r7, #13]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f040 8170 	bne.w	800a376 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a096:	7b7a      	ldrb	r2, [r7, #13]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a09e:	7b7a      	ldrb	r2, [r7, #13]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	32ae      	adds	r2, #174	@ 0xae
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 8163 	beq.w	800a376 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a0b0:	7b7a      	ldrb	r2, [r7, #13]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	32ae      	adds	r2, #174	@ 0xae
 800a0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	4798      	blx	r3
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a0c6:	e156      	b.n	800a376 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	785b      	ldrb	r3, [r3, #1]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d008      	beq.n	800a0e2 <USBD_StdEPReq+0x9a>
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	f300 8145 	bgt.w	800a360 <USBD_StdEPReq+0x318>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 809b 	beq.w	800a212 <USBD_StdEPReq+0x1ca>
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d03c      	beq.n	800a15a <USBD_StdEPReq+0x112>
 800a0e0:	e13e      	b.n	800a360 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d002      	beq.n	800a0f4 <USBD_StdEPReq+0xac>
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d016      	beq.n	800a120 <USBD_StdEPReq+0xd8>
 800a0f2:	e02c      	b.n	800a14e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00d      	beq.n	800a116 <USBD_StdEPReq+0xce>
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2b80      	cmp	r3, #128	@ 0x80
 800a0fe:	d00a      	beq.n	800a116 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a100:	7bbb      	ldrb	r3, [r7, #14]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 f9fd 	bl	800b504 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a10a:	2180      	movs	r1, #128	@ 0x80
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 f9f9 	bl	800b504 <USBD_LL_StallEP>
 800a112:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a114:	e020      	b.n	800a158 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fca4 	bl	800aa66 <USBD_CtlError>
              break;
 800a11e:	e01b      	b.n	800a158 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	885b      	ldrh	r3, [r3, #2]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10e      	bne.n	800a146 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <USBD_StdEPReq+0xfe>
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	2b80      	cmp	r3, #128	@ 0x80
 800a132:	d008      	beq.n	800a146 <USBD_StdEPReq+0xfe>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	88db      	ldrh	r3, [r3, #6]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d104      	bne.n	800a146 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f001 f9df 	bl	800b504 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fd64 	bl	800ac14 <USBD_CtlSendStatus>

              break;
 800a14c:	e004      	b.n	800a158 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fc88 	bl	800aa66 <USBD_CtlError>
              break;
 800a156:	bf00      	nop
          }
          break;
 800a158:	e107      	b.n	800a36a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d002      	beq.n	800a16c <USBD_StdEPReq+0x124>
 800a166:	2b03      	cmp	r3, #3
 800a168:	d016      	beq.n	800a198 <USBD_StdEPReq+0x150>
 800a16a:	e04b      	b.n	800a204 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00d      	beq.n	800a18e <USBD_StdEPReq+0x146>
 800a172:	7bbb      	ldrb	r3, [r7, #14]
 800a174:	2b80      	cmp	r3, #128	@ 0x80
 800a176:	d00a      	beq.n	800a18e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 f9c1 	bl	800b504 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a182:	2180      	movs	r1, #128	@ 0x80
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f001 f9bd 	bl	800b504 <USBD_LL_StallEP>
 800a18a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a18c:	e040      	b.n	800a210 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fc68 	bl	800aa66 <USBD_CtlError>
              break;
 800a196:	e03b      	b.n	800a210 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	885b      	ldrh	r3, [r3, #2]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d136      	bne.n	800a20e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d004      	beq.n	800a1b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 f9c7 	bl	800b542 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fd2d 	bl	800ac14 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a1ba:	7bbb      	ldrb	r3, [r7, #14]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7ff fde4 	bl	8009d8c <USBD_CoreFindEP>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1c8:	7b7b      	ldrb	r3, [r7, #13]
 800a1ca:	2bff      	cmp	r3, #255	@ 0xff
 800a1cc:	d01f      	beq.n	800a20e <USBD_StdEPReq+0x1c6>
 800a1ce:	7b7b      	ldrb	r3, [r7, #13]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d11c      	bne.n	800a20e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a1d4:	7b7a      	ldrb	r2, [r7, #13]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a1dc:	7b7a      	ldrb	r2, [r7, #13]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	32ae      	adds	r2, #174	@ 0xae
 800a1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d010      	beq.n	800a20e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a1ec:	7b7a      	ldrb	r2, [r7, #13]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	32ae      	adds	r2, #174	@ 0xae
 800a1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	4798      	blx	r3
 800a1fe:	4603      	mov	r3, r0
 800a200:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a202:	e004      	b.n	800a20e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fc2d 	bl	800aa66 <USBD_CtlError>
              break;
 800a20c:	e000      	b.n	800a210 <USBD_StdEPReq+0x1c8>
              break;
 800a20e:	bf00      	nop
          }
          break;
 800a210:	e0ab      	b.n	800a36a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d002      	beq.n	800a224 <USBD_StdEPReq+0x1dc>
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d032      	beq.n	800a288 <USBD_StdEPReq+0x240>
 800a222:	e097      	b.n	800a354 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <USBD_StdEPReq+0x1f2>
 800a22a:	7bbb      	ldrb	r3, [r7, #14]
 800a22c:	2b80      	cmp	r3, #128	@ 0x80
 800a22e:	d004      	beq.n	800a23a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fc17 	bl	800aa66 <USBD_CtlError>
                break;
 800a238:	e091      	b.n	800a35e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a23a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	da0b      	bge.n	800a25a <USBD_StdEPReq+0x212>
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a248:	4613      	mov	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	3310      	adds	r3, #16
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	4413      	add	r3, r2
 800a256:	3304      	adds	r3, #4
 800a258:	e00b      	b.n	800a272 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
 800a25c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a260:	4613      	mov	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4413      	add	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	4413      	add	r3, r2
 800a270:	3304      	adds	r3, #4
 800a272:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2202      	movs	r2, #2
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fc6d 	bl	800ab60 <USBD_CtlSendData>
              break;
 800a286:	e06a      	b.n	800a35e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da11      	bge.n	800a2b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	f003 020f 	and.w	r2, r3, #15
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	440b      	add	r3, r1
 800a2a2:	3324      	adds	r3, #36	@ 0x24
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d117      	bne.n	800a2da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fbda 	bl	800aa66 <USBD_CtlError>
                  break;
 800a2b2:	e054      	b.n	800a35e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	f003 020f 	and.w	r2, r3, #15
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d104      	bne.n	800a2da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fbc7 	bl	800aa66 <USBD_CtlError>
                  break;
 800a2d8:	e041      	b.n	800a35e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	da0b      	bge.n	800a2fa <USBD_StdEPReq+0x2b2>
 800a2e2:	7bbb      	ldrb	r3, [r7, #14]
 800a2e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	3310      	adds	r3, #16
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	e00b      	b.n	800a312 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
 800a2fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a300:	4613      	mov	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	4413      	add	r3, r2
 800a310:	3304      	adds	r3, #4
 800a312:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <USBD_StdEPReq+0x2d8>
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b80      	cmp	r3, #128	@ 0x80
 800a31e:	d103      	bne.n	800a328 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	e00e      	b.n	800a346 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 f927 	bl	800b580 <USBD_LL_IsStallEP>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d003      	beq.n	800a340 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2201      	movs	r2, #1
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	e002      	b.n	800a346 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2202      	movs	r2, #2
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fc07 	bl	800ab60 <USBD_CtlSendData>
              break;
 800a352:	e004      	b.n	800a35e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fb85 	bl	800aa66 <USBD_CtlError>
              break;
 800a35c:	bf00      	nop
          }
          break;
 800a35e:	e004      	b.n	800a36a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fb7f 	bl	800aa66 <USBD_CtlError>
          break;
 800a368:	bf00      	nop
      }
      break;
 800a36a:	e005      	b.n	800a378 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fb79 	bl	800aa66 <USBD_CtlError>
      break;
 800a374:	e000      	b.n	800a378 <USBD_StdEPReq+0x330>
      break;
 800a376:	bf00      	nop
  }

  return ret;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	885b      	ldrh	r3, [r3, #2]
 800a39e:	0a1b      	lsrs	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	2b0e      	cmp	r3, #14
 800a3a6:	f200 8152 	bhi.w	800a64e <USBD_GetDescriptor+0x2ca>
 800a3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b0 <USBD_GetDescriptor+0x2c>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a421 	.word	0x0800a421
 800a3b4:	0800a439 	.word	0x0800a439
 800a3b8:	0800a479 	.word	0x0800a479
 800a3bc:	0800a64f 	.word	0x0800a64f
 800a3c0:	0800a64f 	.word	0x0800a64f
 800a3c4:	0800a5ef 	.word	0x0800a5ef
 800a3c8:	0800a61b 	.word	0x0800a61b
 800a3cc:	0800a64f 	.word	0x0800a64f
 800a3d0:	0800a64f 	.word	0x0800a64f
 800a3d4:	0800a64f 	.word	0x0800a64f
 800a3d8:	0800a64f 	.word	0x0800a64f
 800a3dc:	0800a64f 	.word	0x0800a64f
 800a3e0:	0800a64f 	.word	0x0800a64f
 800a3e4:	0800a64f 	.word	0x0800a64f
 800a3e8:	0800a3ed 	.word	0x0800a3ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00b      	beq.n	800a410 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	7c12      	ldrb	r2, [r2, #16]
 800a404:	f107 0108 	add.w	r1, r7, #8
 800a408:	4610      	mov	r0, r2
 800a40a:	4798      	blx	r3
 800a40c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a40e:	e126      	b.n	800a65e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fb27 	bl	800aa66 <USBD_CtlError>
        err++;
 800a418:	7afb      	ldrb	r3, [r7, #11]
 800a41a:	3301      	adds	r3, #1
 800a41c:	72fb      	strb	r3, [r7, #11]
      break;
 800a41e:	e11e      	b.n	800a65e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	7c12      	ldrb	r2, [r2, #16]
 800a42c:	f107 0108 	add.w	r1, r7, #8
 800a430:	4610      	mov	r0, r2
 800a432:	4798      	blx	r3
 800a434:	60f8      	str	r0, [r7, #12]
      break;
 800a436:	e112      	b.n	800a65e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	7c1b      	ldrb	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10d      	bne.n	800a45c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a448:	f107 0208 	add.w	r2, r7, #8
 800a44c:	4610      	mov	r0, r2
 800a44e:	4798      	blx	r3
 800a450:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3301      	adds	r3, #1
 800a456:	2202      	movs	r2, #2
 800a458:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a45a:	e100      	b.n	800a65e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a464:	f107 0208 	add.w	r2, r7, #8
 800a468:	4610      	mov	r0, r2
 800a46a:	4798      	blx	r3
 800a46c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	2202      	movs	r2, #2
 800a474:	701a      	strb	r2, [r3, #0]
      break;
 800a476:	e0f2      	b.n	800a65e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	885b      	ldrh	r3, [r3, #2]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b05      	cmp	r3, #5
 800a480:	f200 80ac 	bhi.w	800a5dc <USBD_GetDescriptor+0x258>
 800a484:	a201      	add	r2, pc, #4	@ (adr r2, 800a48c <USBD_GetDescriptor+0x108>)
 800a486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48a:	bf00      	nop
 800a48c:	0800a4a5 	.word	0x0800a4a5
 800a490:	0800a4d9 	.word	0x0800a4d9
 800a494:	0800a50d 	.word	0x0800a50d
 800a498:	0800a541 	.word	0x0800a541
 800a49c:	0800a575 	.word	0x0800a575
 800a4a0:	0800a5a9 	.word	0x0800a5a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	7c12      	ldrb	r2, [r2, #16]
 800a4bc:	f107 0108 	add.w	r1, r7, #8
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	4798      	blx	r3
 800a4c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4c6:	e091      	b.n	800a5ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 facb 	bl	800aa66 <USBD_CtlError>
            err++;
 800a4d0:	7afb      	ldrb	r3, [r7, #11]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4d6:	e089      	b.n	800a5ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00b      	beq.n	800a4fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	7c12      	ldrb	r2, [r2, #16]
 800a4f0:	f107 0108 	add.w	r1, r7, #8
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	4798      	blx	r3
 800a4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4fa:	e077      	b.n	800a5ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fab1 	bl	800aa66 <USBD_CtlError>
            err++;
 800a504:	7afb      	ldrb	r3, [r7, #11]
 800a506:	3301      	adds	r3, #1
 800a508:	72fb      	strb	r3, [r7, #11]
          break;
 800a50a:	e06f      	b.n	800a5ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00b      	beq.n	800a530 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	7c12      	ldrb	r2, [r2, #16]
 800a524:	f107 0108 	add.w	r1, r7, #8
 800a528:	4610      	mov	r0, r2
 800a52a:	4798      	blx	r3
 800a52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a52e:	e05d      	b.n	800a5ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fa97 	bl	800aa66 <USBD_CtlError>
            err++;
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	3301      	adds	r3, #1
 800a53c:	72fb      	strb	r3, [r7, #11]
          break;
 800a53e:	e055      	b.n	800a5ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00b      	beq.n	800a564 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	7c12      	ldrb	r2, [r2, #16]
 800a558:	f107 0108 	add.w	r1, r7, #8
 800a55c:	4610      	mov	r0, r2
 800a55e:	4798      	blx	r3
 800a560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a562:	e043      	b.n	800a5ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fa7d 	bl	800aa66 <USBD_CtlError>
            err++;
 800a56c:	7afb      	ldrb	r3, [r7, #11]
 800a56e:	3301      	adds	r3, #1
 800a570:	72fb      	strb	r3, [r7, #11]
          break;
 800a572:	e03b      	b.n	800a5ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00b      	beq.n	800a598 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	7c12      	ldrb	r2, [r2, #16]
 800a58c:	f107 0108 	add.w	r1, r7, #8
 800a590:	4610      	mov	r0, r2
 800a592:	4798      	blx	r3
 800a594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a596:	e029      	b.n	800a5ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa63 	bl	800aa66 <USBD_CtlError>
            err++;
 800a5a0:	7afb      	ldrb	r3, [r7, #11]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5a6:	e021      	b.n	800a5ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	7c12      	ldrb	r2, [r2, #16]
 800a5c0:	f107 0108 	add.w	r1, r7, #8
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	4798      	blx	r3
 800a5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ca:	e00f      	b.n	800a5ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa49 	bl	800aa66 <USBD_CtlError>
            err++;
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a5da:	e007      	b.n	800a5ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fa41 	bl	800aa66 <USBD_CtlError>
          err++;
 800a5e4:	7afb      	ldrb	r3, [r7, #11]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a5ea:	bf00      	nop
      }
      break;
 800a5ec:	e037      	b.n	800a65e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	7c1b      	ldrb	r3, [r3, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d109      	bne.n	800a60a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fe:	f107 0208 	add.w	r2, r7, #8
 800a602:	4610      	mov	r0, r2
 800a604:	4798      	blx	r3
 800a606:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a608:	e029      	b.n	800a65e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fa2a 	bl	800aa66 <USBD_CtlError>
        err++;
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	3301      	adds	r3, #1
 800a616:	72fb      	strb	r3, [r7, #11]
      break;
 800a618:	e021      	b.n	800a65e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	7c1b      	ldrb	r3, [r3, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10d      	bne.n	800a63e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a62a:	f107 0208 	add.w	r2, r7, #8
 800a62e:	4610      	mov	r0, r2
 800a630:	4798      	blx	r3
 800a632:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3301      	adds	r3, #1
 800a638:	2207      	movs	r2, #7
 800a63a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a63c:	e00f      	b.n	800a65e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fa10 	bl	800aa66 <USBD_CtlError>
        err++;
 800a646:	7afb      	ldrb	r3, [r7, #11]
 800a648:	3301      	adds	r3, #1
 800a64a:	72fb      	strb	r3, [r7, #11]
      break;
 800a64c:	e007      	b.n	800a65e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fa08 	bl	800aa66 <USBD_CtlError>
      err++;
 800a656:	7afb      	ldrb	r3, [r7, #11]
 800a658:	3301      	adds	r3, #1
 800a65a:	72fb      	strb	r3, [r7, #11]
      break;
 800a65c:	bf00      	nop
  }

  if (err != 0U)
 800a65e:	7afb      	ldrb	r3, [r7, #11]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d11e      	bne.n	800a6a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	88db      	ldrh	r3, [r3, #6]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d016      	beq.n	800a69a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a66c:	893b      	ldrh	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00e      	beq.n	800a690 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	88da      	ldrh	r2, [r3, #6]
 800a676:	893b      	ldrh	r3, [r7, #8]
 800a678:	4293      	cmp	r3, r2
 800a67a:	bf28      	it	cs
 800a67c:	4613      	movcs	r3, r2
 800a67e:	b29b      	uxth	r3, r3
 800a680:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a682:	893b      	ldrh	r3, [r7, #8]
 800a684:	461a      	mov	r2, r3
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fa69 	bl	800ab60 <USBD_CtlSendData>
 800a68e:	e009      	b.n	800a6a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f9e7 	bl	800aa66 <USBD_CtlError>
 800a698:	e004      	b.n	800a6a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 faba 	bl	800ac14 <USBD_CtlSendStatus>
 800a6a0:	e000      	b.n	800a6a4 <USBD_GetDescriptor+0x320>
    return;
 800a6a2:	bf00      	nop
  }
}
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop

0800a6ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	889b      	ldrh	r3, [r3, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d131      	bne.n	800a722 <USBD_SetAddress+0x76>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	88db      	ldrh	r3, [r3, #6]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d12d      	bne.n	800a722 <USBD_SetAddress+0x76>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	885b      	ldrh	r3, [r3, #2]
 800a6ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6cc:	d829      	bhi.n	800a722 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	885b      	ldrh	r3, [r3, #2]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d104      	bne.n	800a6f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f9bc 	bl	800aa66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ee:	e01d      	b.n	800a72c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7bfa      	ldrb	r2, [r7, #15]
 800a6f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 ff6b 	bl	800b5d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fa86 	bl	800ac14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d004      	beq.n	800a718 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2202      	movs	r2, #2
 800a712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a716:	e009      	b.n	800a72c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a720:	e004      	b.n	800a72c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f99e 	bl	800aa66 <USBD_CtlError>
  }
}
 800a72a:	bf00      	nop
 800a72c:	bf00      	nop
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	885b      	ldrh	r3, [r3, #2]
 800a746:	b2da      	uxtb	r2, r3
 800a748:	4b4e      	ldr	r3, [pc, #312]	@ (800a884 <USBD_SetConfig+0x150>)
 800a74a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a74c:	4b4d      	ldr	r3, [pc, #308]	@ (800a884 <USBD_SetConfig+0x150>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d905      	bls.n	800a760 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f985 	bl	800aa66 <USBD_CtlError>
    return USBD_FAIL;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e08c      	b.n	800a87a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a766:	b2db      	uxtb	r3, r3
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d002      	beq.n	800a772 <USBD_SetConfig+0x3e>
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d029      	beq.n	800a7c4 <USBD_SetConfig+0x90>
 800a770:	e075      	b.n	800a85e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a772:	4b44      	ldr	r3, [pc, #272]	@ (800a884 <USBD_SetConfig+0x150>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d020      	beq.n	800a7bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a77a:	4b42      	ldr	r3, [pc, #264]	@ (800a884 <USBD_SetConfig+0x150>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a784:	4b3f      	ldr	r3, [pc, #252]	@ (800a884 <USBD_SetConfig+0x150>)
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7fe ffb9 	bl	8009702 <USBD_SetClassConfig>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a794:	7bfb      	ldrb	r3, [r7, #15]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d008      	beq.n	800a7ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f962 	bl	800aa66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2202      	movs	r2, #2
 800a7a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7aa:	e065      	b.n	800a878 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fa31 	bl	800ac14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a7ba:	e05d      	b.n	800a878 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fa29 	bl	800ac14 <USBD_CtlSendStatus>
      break;
 800a7c2:	e059      	b.n	800a878 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a7c4:	4b2f      	ldr	r3, [pc, #188]	@ (800a884 <USBD_SetConfig+0x150>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d112      	bne.n	800a7f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a7d4:	4b2b      	ldr	r3, [pc, #172]	@ (800a884 <USBD_SetConfig+0x150>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7de:	4b29      	ldr	r3, [pc, #164]	@ (800a884 <USBD_SetConfig+0x150>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7fe ffa8 	bl	800973a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa12 	bl	800ac14 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7f0:	e042      	b.n	800a878 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a7f2:	4b24      	ldr	r3, [pc, #144]	@ (800a884 <USBD_SetConfig+0x150>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d02a      	beq.n	800a856 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7fe ff96 	bl	800973a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a80e:	4b1d      	ldr	r3, [pc, #116]	@ (800a884 <USBD_SetConfig+0x150>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a818:	4b1a      	ldr	r3, [pc, #104]	@ (800a884 <USBD_SetConfig+0x150>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7fe ff6f 	bl	8009702 <USBD_SetClassConfig>
 800a824:	4603      	mov	r3, r0
 800a826:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00f      	beq.n	800a84e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f918 	bl	800aa66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7fe ff7b 	bl	800973a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a84c:	e014      	b.n	800a878 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f9e0 	bl	800ac14 <USBD_CtlSendStatus>
      break;
 800a854:	e010      	b.n	800a878 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f9dc 	bl	800ac14 <USBD_CtlSendStatus>
      break;
 800a85c:	e00c      	b.n	800a878 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f900 	bl	800aa66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a866:	4b07      	ldr	r3, [pc, #28]	@ (800a884 <USBD_SetConfig+0x150>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7fe ff64 	bl	800973a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a872:	2303      	movs	r3, #3
 800a874:	73fb      	strb	r3, [r7, #15]
      break;
 800a876:	bf00      	nop
  }

  return ret;
 800a878:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	240003ac 	.word	0x240003ac

0800a888 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	88db      	ldrh	r3, [r3, #6]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d004      	beq.n	800a8a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f8e2 	bl	800aa66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8a2:	e023      	b.n	800a8ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	dc02      	bgt.n	800a8b6 <USBD_GetConfig+0x2e>
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dc03      	bgt.n	800a8bc <USBD_GetConfig+0x34>
 800a8b4:	e015      	b.n	800a8e2 <USBD_GetConfig+0x5a>
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d00b      	beq.n	800a8d2 <USBD_GetConfig+0x4a>
 800a8ba:	e012      	b.n	800a8e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f948 	bl	800ab60 <USBD_CtlSendData>
        break;
 800a8d0:	e00c      	b.n	800a8ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f940 	bl	800ab60 <USBD_CtlSendData>
        break;
 800a8e0:	e004      	b.n	800a8ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f8be 	bl	800aa66 <USBD_CtlError>
        break;
 800a8ea:	bf00      	nop
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a904:	b2db      	uxtb	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d81e      	bhi.n	800a94a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	88db      	ldrh	r3, [r3, #6]
 800a910:	2b02      	cmp	r3, #2
 800a912:	d004      	beq.n	800a91e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f8a5 	bl	800aa66 <USBD_CtlError>
        break;
 800a91c:	e01a      	b.n	800a954 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d005      	beq.n	800a93a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	f043 0202 	orr.w	r2, r3, #2
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	330c      	adds	r3, #12
 800a93e:	2202      	movs	r2, #2
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 f90c 	bl	800ab60 <USBD_CtlSendData>
      break;
 800a948:	e004      	b.n	800a954 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f88a 	bl	800aa66 <USBD_CtlError>
      break;
 800a952:	bf00      	nop
  }
}
 800a954:	bf00      	nop
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	885b      	ldrh	r3, [r3, #2]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d107      	bne.n	800a97e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f94c 	bl	800ac14 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a97c:	e013      	b.n	800a9a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	885b      	ldrh	r3, [r3, #2]
 800a982:	2b02      	cmp	r3, #2
 800a984:	d10b      	bne.n	800a99e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	889b      	ldrh	r3, [r3, #4]
 800a98a:	0a1b      	lsrs	r3, r3, #8
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f93c 	bl	800ac14 <USBD_CtlSendStatus>
}
 800a99c:	e003      	b.n	800a9a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f860 	bl	800aa66 <USBD_CtlError>
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d80b      	bhi.n	800a9de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	885b      	ldrh	r3, [r3, #2]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d10c      	bne.n	800a9e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f91c 	bl	800ac14 <USBD_CtlSendStatus>
      }
      break;
 800a9dc:	e004      	b.n	800a9e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f840 	bl	800aa66 <USBD_CtlError>
      break;
 800a9e6:	e000      	b.n	800a9ea <USBD_ClrFeature+0x3c>
      break;
 800a9e8:	bf00      	nop
  }
}
 800a9ea:	bf00      	nop
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	781a      	ldrb	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	781a      	ldrb	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7ff fa16 	bl	8009e4e <SWAPBYTE>
 800aa22:	4603      	mov	r3, r0
 800aa24:	461a      	mov	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3301      	adds	r3, #1
 800aa34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7ff fa09 	bl	8009e4e <SWAPBYTE>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	461a      	mov	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff f9fc 	bl	8009e4e <SWAPBYTE>
 800aa56:	4603      	mov	r3, r0
 800aa58:	461a      	mov	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	80da      	strh	r2, [r3, #6]
}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa70:	2180      	movs	r1, #128	@ 0x80
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fd46 	bl	800b504 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa78:	2100      	movs	r1, #0
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fd42 	bl	800b504 <USBD_LL_StallEP>
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d042      	beq.n	800ab24 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800aaa2:	6938      	ldr	r0, [r7, #16]
 800aaa4:	f000 f842 	bl	800ab2c <USBD_GetLen>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	3301      	adds	r3, #1
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aab2:	d808      	bhi.n	800aac6 <USBD_GetString+0x3e>
 800aab4:	6938      	ldr	r0, [r7, #16]
 800aab6:	f000 f839 	bl	800ab2c <USBD_GetLen>
 800aaba:	4603      	mov	r3, r0
 800aabc:	3301      	adds	r3, #1
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	005b      	lsls	r3, r3, #1
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	e001      	b.n	800aaca <USBD_GetString+0x42>
 800aac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	4413      	add	r3, r2
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	7812      	ldrb	r2, [r2, #0]
 800aad8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	3301      	adds	r3, #1
 800aade:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	4413      	add	r3, r2
 800aae6:	2203      	movs	r2, #3
 800aae8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	3301      	adds	r3, #1
 800aaee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aaf0:	e013      	b.n	800ab1a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	7812      	ldrb	r2, [r2, #0]
 800aafc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	3301      	adds	r3, #1
 800ab02:	613b      	str	r3, [r7, #16]
    idx++;
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
 800ab06:	3301      	adds	r3, #1
 800ab08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	4413      	add	r3, r2
 800ab10:	2200      	movs	r2, #0
 800ab12:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
 800ab16:	3301      	adds	r3, #1
 800ab18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e7      	bne.n	800aaf2 <USBD_GetString+0x6a>
 800ab22:	e000      	b.n	800ab26 <USBD_GetString+0x9e>
    return;
 800ab24:	bf00      	nop
  }
}
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab3c:	e005      	b.n	800ab4a <USBD_GetLen+0x1e>
  {
    len++;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	3301      	adds	r3, #1
 800ab42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3301      	adds	r3, #1
 800ab48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1f5      	bne.n	800ab3e <USBD_GetLen+0x12>
  }

  return len;
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	2100      	movs	r1, #0
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 fd45 	bl	800b616 <USBD_LL_Transmit>

  return USBD_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	2100      	movs	r1, #0
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 fd34 	bl	800b616 <USBD_LL_Transmit>

  return USBD_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2203      	movs	r2, #3
 800abc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	2100      	movs	r1, #0
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 fd38 	bl	800b658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	2100      	movs	r1, #0
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 fd27 	bl	800b658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2204      	movs	r2, #4
 800ac20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac24:	2300      	movs	r3, #0
 800ac26:	2200      	movs	r2, #0
 800ac28:	2100      	movs	r1, #0
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fcf3 	bl	800b616 <USBD_LL_Transmit>

  return USBD_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2205      	movs	r2, #5
 800ac46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2100      	movs	r1, #0
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fd01 	bl	800b658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800ac64:	2201      	movs	r2, #1
 800ac66:	4913      	ldr	r1, [pc, #76]	@ (800acb4 <MX_USB_DEVICE_Init+0x54>)
 800ac68:	4813      	ldr	r0, [pc, #76]	@ (800acb8 <MX_USB_DEVICE_Init+0x58>)
 800ac6a:	f7fe fcb1 	bl	80095d0 <USBD_Init>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac74:	f7f6 fa1c 	bl	80010b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ac78:	4910      	ldr	r1, [pc, #64]	@ (800acbc <MX_USB_DEVICE_Init+0x5c>)
 800ac7a:	480f      	ldr	r0, [pc, #60]	@ (800acb8 <MX_USB_DEVICE_Init+0x58>)
 800ac7c:	f7fe fce6 	bl	800964c <USBD_RegisterClass>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac86:	f7f6 fa13 	bl	80010b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800ac8a:	490d      	ldr	r1, [pc, #52]	@ (800acc0 <MX_USB_DEVICE_Init+0x60>)
 800ac8c:	480a      	ldr	r0, [pc, #40]	@ (800acb8 <MX_USB_DEVICE_Init+0x58>)
 800ac8e:	f7fe fbcf 	bl	8009430 <USBD_CDC_RegisterInterface>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d001      	beq.n	800ac9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ac98:	f7f6 fa0a 	bl	80010b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ac9c:	4806      	ldr	r0, [pc, #24]	@ (800acb8 <MX_USB_DEVICE_Init+0x58>)
 800ac9e:	f7fe fd19 	bl	80096d4 <USBD_Start>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aca8:	f7f6 fa02 	bl	80010b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800acac:	f7f8 fe78 	bl	80039a0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800acb0:	bf00      	nop
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	240000b0 	.word	0x240000b0
 800acb8:	240003b0 	.word	0x240003b0
 800acbc:	2400001c 	.word	0x2400001c
 800acc0:	2400009c 	.word	0x2400009c

0800acc4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800acc8:	2200      	movs	r2, #0
 800acca:	4905      	ldr	r1, [pc, #20]	@ (800ace0 <CDC_Init_HS+0x1c>)
 800accc:	4805      	ldr	r0, [pc, #20]	@ (800ace4 <CDC_Init_HS+0x20>)
 800acce:	f7fe fbc9 	bl	8009464 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800acd2:	4905      	ldr	r1, [pc, #20]	@ (800ace8 <CDC_Init_HS+0x24>)
 800acd4:	4803      	ldr	r0, [pc, #12]	@ (800ace4 <CDC_Init_HS+0x20>)
 800acd6:	f7fe fbe7 	bl	80094a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800acda:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800acdc:	4618      	mov	r0, r3
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	24000e8c 	.word	0x24000e8c
 800ace4:	240003b0 	.word	0x240003b0
 800ace8:	2400068c 	.word	0x2400068c

0800acec <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800acec:	b480      	push	{r7}
 800acee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800acf0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	6039      	str	r1, [r7, #0]
 800ad06:	71fb      	strb	r3, [r7, #7]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	2b23      	cmp	r3, #35	@ 0x23
 800ad10:	d84a      	bhi.n	800ada8 <CDC_Control_HS+0xac>
 800ad12:	a201      	add	r2, pc, #4	@ (adr r2, 800ad18 <CDC_Control_HS+0x1c>)
 800ad14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad18:	0800ada9 	.word	0x0800ada9
 800ad1c:	0800ada9 	.word	0x0800ada9
 800ad20:	0800ada9 	.word	0x0800ada9
 800ad24:	0800ada9 	.word	0x0800ada9
 800ad28:	0800ada9 	.word	0x0800ada9
 800ad2c:	0800ada9 	.word	0x0800ada9
 800ad30:	0800ada9 	.word	0x0800ada9
 800ad34:	0800ada9 	.word	0x0800ada9
 800ad38:	0800ada9 	.word	0x0800ada9
 800ad3c:	0800ada9 	.word	0x0800ada9
 800ad40:	0800ada9 	.word	0x0800ada9
 800ad44:	0800ada9 	.word	0x0800ada9
 800ad48:	0800ada9 	.word	0x0800ada9
 800ad4c:	0800ada9 	.word	0x0800ada9
 800ad50:	0800ada9 	.word	0x0800ada9
 800ad54:	0800ada9 	.word	0x0800ada9
 800ad58:	0800ada9 	.word	0x0800ada9
 800ad5c:	0800ada9 	.word	0x0800ada9
 800ad60:	0800ada9 	.word	0x0800ada9
 800ad64:	0800ada9 	.word	0x0800ada9
 800ad68:	0800ada9 	.word	0x0800ada9
 800ad6c:	0800ada9 	.word	0x0800ada9
 800ad70:	0800ada9 	.word	0x0800ada9
 800ad74:	0800ada9 	.word	0x0800ada9
 800ad78:	0800ada9 	.word	0x0800ada9
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	0800ada9 	.word	0x0800ada9
 800ad84:	0800ada9 	.word	0x0800ada9
 800ad88:	0800ada9 	.word	0x0800ada9
 800ad8c:	0800ada9 	.word	0x0800ada9
 800ad90:	0800ada9 	.word	0x0800ada9
 800ad94:	0800ada9 	.word	0x0800ada9
 800ad98:	0800ada9 	.word	0x0800ada9
 800ad9c:	0800ada9 	.word	0x0800ada9
 800ada0:	0800ada9 	.word	0x0800ada9
 800ada4:	0800ada9 	.word	0x0800ada9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ada8:	bf00      	nop
  }

  return (USBD_OK);
 800adaa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800adac:	4618      	mov	r0, r3
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	4805      	ldr	r0, [pc, #20]	@ (800addc <CDC_Receive_HS+0x24>)
 800adc6:	f7fe fb6f 	bl	80094a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800adca:	4804      	ldr	r0, [pc, #16]	@ (800addc <CDC_Receive_HS+0x24>)
 800adcc:	f7fe fbca 	bl	8009564 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800add0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	240003b0 	.word	0x240003b0

0800ade0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800adf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ae28 <CDC_Transmit_HS+0x48>)
 800adf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800adf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e00b      	b.n	800ae1e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800ae06:	887b      	ldrh	r3, [r7, #2]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	6879      	ldr	r1, [r7, #4]
 800ae0c:	4806      	ldr	r0, [pc, #24]	@ (800ae28 <CDC_Transmit_HS+0x48>)
 800ae0e:	f7fe fb29 	bl	8009464 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800ae12:	4805      	ldr	r0, [pc, #20]	@ (800ae28 <CDC_Transmit_HS+0x48>)
 800ae14:	f7fe fb66 	bl	80094e4 <USBD_CDC_TransmitPacket>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	240003b0 	.word	0x240003b0

0800ae2c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ae3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
	...

0800ae50 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	6039      	str	r1, [r7, #0]
 800ae5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2212      	movs	r2, #18
 800ae60:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ae62:	4b03      	ldr	r3, [pc, #12]	@ (800ae70 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	240000d0 	.word	0x240000d0

0800ae74 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	6039      	str	r1, [r7, #0]
 800ae7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2204      	movs	r2, #4
 800ae84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae86:	4b03      	ldr	r3, [pc, #12]	@ (800ae94 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	240000e4 	.word	0x240000e4

0800ae98 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d105      	bne.n	800aeb6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4907      	ldr	r1, [pc, #28]	@ (800aecc <USBD_HS_ProductStrDescriptor+0x34>)
 800aeae:	4808      	ldr	r0, [pc, #32]	@ (800aed0 <USBD_HS_ProductStrDescriptor+0x38>)
 800aeb0:	f7ff fdea 	bl	800aa88 <USBD_GetString>
 800aeb4:	e004      	b.n	800aec0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	4904      	ldr	r1, [pc, #16]	@ (800aecc <USBD_HS_ProductStrDescriptor+0x34>)
 800aeba:	4805      	ldr	r0, [pc, #20]	@ (800aed0 <USBD_HS_ProductStrDescriptor+0x38>)
 800aebc:	f7ff fde4 	bl	800aa88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aec0:	4b02      	ldr	r3, [pc, #8]	@ (800aecc <USBD_HS_ProductStrDescriptor+0x34>)
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	2400168c 	.word	0x2400168c
 800aed0:	0800c6bc 	.word	0x0800c6bc

0800aed4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	6039      	str	r1, [r7, #0]
 800aede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aee0:	683a      	ldr	r2, [r7, #0]
 800aee2:	4904      	ldr	r1, [pc, #16]	@ (800aef4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800aee4:	4804      	ldr	r0, [pc, #16]	@ (800aef8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800aee6:	f7ff fdcf 	bl	800aa88 <USBD_GetString>
  return USBD_StrDesc;
 800aeea:	4b02      	ldr	r3, [pc, #8]	@ (800aef4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	2400168c 	.word	0x2400168c
 800aef8:	0800c6d4 	.word	0x0800c6d4

0800aefc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	6039      	str	r1, [r7, #0]
 800af06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	221a      	movs	r2, #26
 800af0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af0e:	f000 f843 	bl	800af98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800af12:	4b02      	ldr	r3, [pc, #8]	@ (800af1c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	240000e8 	.word	0x240000e8

0800af20 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	4603      	mov	r3, r0
 800af28:	6039      	str	r1, [r7, #0]
 800af2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d105      	bne.n	800af3e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	4907      	ldr	r1, [pc, #28]	@ (800af54 <USBD_HS_ConfigStrDescriptor+0x34>)
 800af36:	4808      	ldr	r0, [pc, #32]	@ (800af58 <USBD_HS_ConfigStrDescriptor+0x38>)
 800af38:	f7ff fda6 	bl	800aa88 <USBD_GetString>
 800af3c:	e004      	b.n	800af48 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	4904      	ldr	r1, [pc, #16]	@ (800af54 <USBD_HS_ConfigStrDescriptor+0x34>)
 800af42:	4805      	ldr	r0, [pc, #20]	@ (800af58 <USBD_HS_ConfigStrDescriptor+0x38>)
 800af44:	f7ff fda0 	bl	800aa88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af48:	4b02      	ldr	r3, [pc, #8]	@ (800af54 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	2400168c 	.word	0x2400168c
 800af58:	0800c6e8 	.word	0x0800c6e8

0800af5c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	4603      	mov	r3, r0
 800af64:	6039      	str	r1, [r7, #0]
 800af66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d105      	bne.n	800af7a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	4907      	ldr	r1, [pc, #28]	@ (800af90 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800af72:	4808      	ldr	r0, [pc, #32]	@ (800af94 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800af74:	f7ff fd88 	bl	800aa88 <USBD_GetString>
 800af78:	e004      	b.n	800af84 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	4904      	ldr	r1, [pc, #16]	@ (800af90 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800af7e:	4805      	ldr	r0, [pc, #20]	@ (800af94 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800af80:	f7ff fd82 	bl	800aa88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af84:	4b02      	ldr	r3, [pc, #8]	@ (800af90 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800af86:	4618      	mov	r0, r3
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	2400168c 	.word	0x2400168c
 800af94:	0800c6f4 	.word	0x0800c6f4

0800af98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af9e:	4b0f      	ldr	r3, [pc, #60]	@ (800afdc <Get_SerialNum+0x44>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800afa4:	4b0e      	ldr	r3, [pc, #56]	@ (800afe0 <Get_SerialNum+0x48>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800afaa:	4b0e      	ldr	r3, [pc, #56]	@ (800afe4 <Get_SerialNum+0x4c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4413      	add	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d009      	beq.n	800afd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800afbe:	2208      	movs	r2, #8
 800afc0:	4909      	ldr	r1, [pc, #36]	@ (800afe8 <Get_SerialNum+0x50>)
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f814 	bl	800aff0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800afc8:	2204      	movs	r2, #4
 800afca:	4908      	ldr	r1, [pc, #32]	@ (800afec <Get_SerialNum+0x54>)
 800afcc:	68b8      	ldr	r0, [r7, #8]
 800afce:	f000 f80f 	bl	800aff0 <IntToUnicode>
  }
}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	08fff800 	.word	0x08fff800
 800afe0:	08fff804 	.word	0x08fff804
 800afe4:	08fff808 	.word	0x08fff808
 800afe8:	240000ea 	.word	0x240000ea
 800afec:	240000fa 	.word	0x240000fa

0800aff0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b002:	2300      	movs	r3, #0
 800b004:	75fb      	strb	r3, [r7, #23]
 800b006:	e027      	b.n	800b058 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	0f1b      	lsrs	r3, r3, #28
 800b00c:	2b09      	cmp	r3, #9
 800b00e:	d80b      	bhi.n	800b028 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	0f1b      	lsrs	r3, r3, #28
 800b014:	b2da      	uxtb	r2, r3
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	4619      	mov	r1, r3
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	440b      	add	r3, r1
 800b020:	3230      	adds	r2, #48	@ 0x30
 800b022:	b2d2      	uxtb	r2, r2
 800b024:	701a      	strb	r2, [r3, #0]
 800b026:	e00a      	b.n	800b03e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	0f1b      	lsrs	r3, r3, #28
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	4619      	mov	r1, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	440b      	add	r3, r1
 800b038:	3237      	adds	r2, #55	@ 0x37
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	3301      	adds	r3, #1
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	4413      	add	r3, r2
 800b04e:	2200      	movs	r2, #0
 800b050:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b052:	7dfb      	ldrb	r3, [r7, #23]
 800b054:	3301      	adds	r3, #1
 800b056:	75fb      	strb	r3, [r7, #23]
 800b058:	7dfa      	ldrb	r2, [r7, #23]
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d3d3      	bcc.n	800b008 <IntToUnicode+0x18>
  }
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
	...

0800b070 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b0ba      	sub	sp, #232	@ 0xe8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b078:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b07c:	2200      	movs	r2, #0
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	605a      	str	r2, [r3, #4]
 800b082:	609a      	str	r2, [r3, #8]
 800b084:	60da      	str	r2, [r3, #12]
 800b086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b088:	f107 0310 	add.w	r3, r7, #16
 800b08c:	22c0      	movs	r2, #192	@ 0xc0
 800b08e:	2100      	movs	r1, #0
 800b090:	4618      	mov	r0, r3
 800b092:	f000 fc78 	bl	800b986 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a45      	ldr	r2, [pc, #276]	@ (800b1b0 <HAL_PCD_MspInit+0x140>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	f040 8082 	bne.w	800b1a6 <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b0a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b0a6:	f04f 0300 	mov.w	r3, #0
 800b0aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b0ae:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800b0b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b0b6:	f107 0310 	add.w	r3, r7, #16
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7f9 fc28 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800b0c6:	f7f5 fff3 	bl	80010b0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800b0ca:	f7f8 fc69 	bl	80039a0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0ce:	4b39      	ldr	r3, [pc, #228]	@ (800b1b4 <HAL_PCD_MspInit+0x144>)
 800b0d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b0d4:	4a37      	ldr	r2, [pc, #220]	@ (800b1b4 <HAL_PCD_MspInit+0x144>)
 800b0d6:	f043 0301 	orr.w	r3, r3, #1
 800b0da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b0de:	4b35      	ldr	r3, [pc, #212]	@ (800b1b4 <HAL_PCD_MspInit+0x144>)
 800b0e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b0ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b100:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b104:	4619      	mov	r1, r3
 800b106:	482c      	ldr	r0, [pc, #176]	@ (800b1b8 <HAL_PCD_MspInit+0x148>)
 800b108:	f7f6 fcde 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b10c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b110:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b114:	2302      	movs	r3, #2
 800b116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b120:	2300      	movs	r3, #0
 800b122:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b126:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b12a:	4619      	mov	r1, r3
 800b12c:	4822      	ldr	r0, [pc, #136]	@ (800b1b8 <HAL_PCD_MspInit+0x148>)
 800b12e:	f7f6 fccb 	bl	8001ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800b132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b13a:	2302      	movs	r3, #2
 800b13c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b140:	2301      	movs	r3, #1
 800b142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b146:	2300      	movs	r3, #0
 800b148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b14c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b150:	4619      	mov	r1, r3
 800b152:	4819      	ldr	r0, [pc, #100]	@ (800b1b8 <HAL_PCD_MspInit+0x148>)
 800b154:	f7f6 fcb8 	bl	8001ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b158:	4b16      	ldr	r3, [pc, #88]	@ (800b1b4 <HAL_PCD_MspInit+0x144>)
 800b15a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b15e:	4a15      	ldr	r2, [pc, #84]	@ (800b1b4 <HAL_PCD_MspInit+0x144>)
 800b160:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b164:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800b168:	4b12      	ldr	r3, [pc, #72]	@ (800b1b4 <HAL_PCD_MspInit+0x144>)
 800b16a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b16e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b172:	60bb      	str	r3, [r7, #8]
 800b174:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800b176:	2200      	movs	r2, #0
 800b178:	2100      	movs	r1, #0
 800b17a:	204a      	movs	r0, #74	@ 0x4a
 800b17c:	f7f6 fbf7 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800b180:	204a      	movs	r0, #74	@ 0x4a
 800b182:	f7f6 fc0e 	bl	80019a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800b186:	2200      	movs	r2, #0
 800b188:	2100      	movs	r1, #0
 800b18a:	204b      	movs	r0, #75	@ 0x4b
 800b18c:	f7f6 fbef 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800b190:	204b      	movs	r0, #75	@ 0x4b
 800b192:	f7f6 fc06 	bl	80019a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b196:	2200      	movs	r2, #0
 800b198:	2100      	movs	r1, #0
 800b19a:	204d      	movs	r0, #77	@ 0x4d
 800b19c:	f7f6 fbe7 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b1a0:	204d      	movs	r0, #77	@ 0x4d
 800b1a2:	f7f6 fbfe 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	37e8      	adds	r7, #232	@ 0xe8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	40040000 	.word	0x40040000
 800b1b4:	58024400 	.word	0x58024400
 800b1b8:	58020000 	.word	0x58020000

0800b1bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4610      	mov	r0, r2
 800b1d4:	f7fe facb 	bl	800976e <USBD_LL_SetupStage>
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b1f2:	78fa      	ldrb	r2, [r7, #3]
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	00db      	lsls	r3, r3, #3
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	440b      	add	r3, r1
 800b200:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	78fb      	ldrb	r3, [r7, #3]
 800b208:	4619      	mov	r1, r3
 800b20a:	f7fe fb05 	bl	8009818 <USBD_LL_DataOutStage>
}
 800b20e:	bf00      	nop
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	460b      	mov	r3, r1
 800b220:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b228:	78fa      	ldrb	r2, [r7, #3]
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	4613      	mov	r3, r2
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	440b      	add	r3, r1
 800b236:	3320      	adds	r3, #32
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	78fb      	ldrb	r3, [r7, #3]
 800b23c:	4619      	mov	r1, r3
 800b23e:	f7fe fb9e 	bl	800997e <USBD_LL_DataInStage>
}
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b082      	sub	sp, #8
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fe fcd8 	bl	8009c0e <USBD_LL_SOF>
}
 800b25e:	bf00      	nop
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b26e:	2301      	movs	r3, #1
 800b270:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	79db      	ldrb	r3, [r3, #7]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b27a:	2300      	movs	r3, #0
 800b27c:	73fb      	strb	r3, [r7, #15]
 800b27e:	e008      	b.n	800b292 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	79db      	ldrb	r3, [r3, #7]
 800b284:	2b02      	cmp	r3, #2
 800b286:	d102      	bne.n	800b28e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b288:	2301      	movs	r3, #1
 800b28a:	73fb      	strb	r3, [r7, #15]
 800b28c:	e001      	b.n	800b292 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b28e:	f7f5 ff0f 	bl	80010b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b298:	7bfa      	ldrb	r2, [r7, #15]
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe fc72 	bl	8009b86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe fc1a 	bl	8009ae2 <USBD_LL_Reset>
}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fe fc6d 	bl	8009ba6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	6812      	ldr	r2, [r2, #0]
 800b2da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b2de:	f043 0301 	orr.w	r3, r3, #1
 800b2e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7adb      	ldrb	r3, [r3, #11]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d005      	beq.n	800b2f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2ec:	4b04      	ldr	r3, [pc, #16]	@ (800b300 <HAL_PCD_SuspendCallback+0x48>)
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	4a03      	ldr	r2, [pc, #12]	@ (800b300 <HAL_PCD_SuspendCallback+0x48>)
 800b2f2:	f043 0306 	orr.w	r3, r3, #6
 800b2f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	e000ed00 	.word	0xe000ed00

0800b304 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fc63 	bl	8009bde <USBD_LL_Resume>
}
 800b318:	bf00      	nop
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	460b      	mov	r3, r1
 800b32a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b332:	78fa      	ldrb	r2, [r7, #3]
 800b334:	4611      	mov	r1, r2
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe fcbb 	bl	8009cb2 <USBD_LL_IsoOUTIncomplete>
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fc77 	bl	8009c4e <USBD_LL_IsoINIncomplete>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe fccd 	bl	8009d16 <USBD_LL_DevConnected>
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fcca 	bl	8009d2c <USBD_LL_DevDisconnected>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d140      	bne.n	800b432 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b3b0:	4a22      	ldr	r2, [pc, #136]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a20      	ldr	r2, [pc, #128]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b3c0:	4b1e      	ldr	r3, [pc, #120]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3c2:	4a1f      	ldr	r2, [pc, #124]	@ (800b440 <USBD_LL_Init+0xa0>)
 800b3c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800b3c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3c8:	2209      	movs	r2, #9
 800b3ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b3cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b3d2:	4b1a      	ldr	r3, [pc, #104]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b3d8:	4b18      	ldr	r3, [pc, #96]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3da:	2202      	movs	r2, #2
 800b3dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b3de:	4b17      	ldr	r3, [pc, #92]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b3e4:	4b15      	ldr	r3, [pc, #84]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b3ea:	4b14      	ldr	r3, [pc, #80]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800b3f0:	4b12      	ldr	r3, [pc, #72]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b3f6:	4b11      	ldr	r3, [pc, #68]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b402:	480e      	ldr	r0, [pc, #56]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b404:	f7f6 fff2 	bl	80023ec <HAL_PCD_Init>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b40e:	f7f5 fe4f 	bl	80010b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b412:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b416:	4809      	ldr	r0, [pc, #36]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b418:	f7f8 fa47 	bl	80038aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b41c:	2280      	movs	r2, #128	@ 0x80
 800b41e:	2100      	movs	r1, #0
 800b420:	4806      	ldr	r0, [pc, #24]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b422:	f7f8 f9fb 	bl	800381c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b426:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b42a:	2101      	movs	r1, #1
 800b42c:	4803      	ldr	r0, [pc, #12]	@ (800b43c <USBD_LL_Init+0x9c>)
 800b42e:	f7f8 f9f5 	bl	800381c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	2400188c 	.word	0x2400188c
 800b440:	40040000 	.word	0x40040000

0800b444 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7f7 f8d2 	bl	8002604 <HAL_PCD_Start>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f942 	bl	800b6f0 <USBD_Get_USB_Status>
 800b46c:	4603      	mov	r3, r0
 800b46e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b470:	7bbb      	ldrb	r3, [r7, #14]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	4608      	mov	r0, r1
 800b484:	4611      	mov	r1, r2
 800b486:	461a      	mov	r2, r3
 800b488:	4603      	mov	r3, r0
 800b48a:	70fb      	strb	r3, [r7, #3]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70bb      	strb	r3, [r7, #2]
 800b490:	4613      	mov	r3, r2
 800b492:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b4a2:	78bb      	ldrb	r3, [r7, #2]
 800b4a4:	883a      	ldrh	r2, [r7, #0]
 800b4a6:	78f9      	ldrb	r1, [r7, #3]
 800b4a8:	f7f7 fdd3 	bl	8003052 <HAL_PCD_EP_Open>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 f91c 	bl	800b6f0 <USBD_Get_USB_Status>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4e0:	78fa      	ldrb	r2, [r7, #3]
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7f7 fe1e 	bl	8003126 <HAL_PCD_EP_Close>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 f8fd 	bl	800b6f0 <USBD_Get_USB_Status>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b51e:	78fa      	ldrb	r2, [r7, #3]
 800b520:	4611      	mov	r1, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f7f7 fed6 	bl	80032d4 <HAL_PCD_EP_SetStall>
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 f8de 	bl	800b6f0 <USBD_Get_USB_Status>
 800b534:	4603      	mov	r3, r0
 800b536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b538:	7bbb      	ldrb	r3, [r7, #14]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b084      	sub	sp, #16
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b55c:	78fa      	ldrb	r2, [r7, #3]
 800b55e:	4611      	mov	r1, r2
 800b560:	4618      	mov	r0, r3
 800b562:	f7f7 ff1a 	bl	800339a <HAL_PCD_EP_ClrStall>
 800b566:	4603      	mov	r3, r0
 800b568:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 f8bf 	bl	800b6f0 <USBD_Get_USB_Status>
 800b572:	4603      	mov	r3, r0
 800b574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b576:	7bbb      	ldrb	r3, [r7, #14]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b592:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	da0b      	bge.n	800b5b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b59c:	78fb      	ldrb	r3, [r7, #3]
 800b59e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5a2:	68f9      	ldr	r1, [r7, #12]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	440b      	add	r3, r1
 800b5ae:	3316      	adds	r3, #22
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	e00b      	b.n	800b5cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5b4:	78fb      	ldrb	r3, [r7, #3]
 800b5b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5ba:	68f9      	ldr	r1, [r7, #12]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	440b      	add	r3, r1
 800b5c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b5ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5f2:	78fa      	ldrb	r2, [r7, #3]
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7f7 fd07 	bl	800300a <HAL_PCD_SetAddress>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	4618      	mov	r0, r3
 800b604:	f000 f874 	bl	800b6f0 <USBD_Get_USB_Status>
 800b608:	4603      	mov	r3, r0
 800b60a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b086      	sub	sp, #24
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	460b      	mov	r3, r1
 800b624:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b634:	7af9      	ldrb	r1, [r7, #11]
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	f7f7 fe11 	bl	8003260 <HAL_PCD_EP_Transmit>
 800b63e:	4603      	mov	r3, r0
 800b640:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	4618      	mov	r0, r3
 800b646:	f000 f853 	bl	800b6f0 <USBD_Get_USB_Status>
 800b64a:	4603      	mov	r3, r0
 800b64c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b64e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	607a      	str	r2, [r7, #4]
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	460b      	mov	r3, r1
 800b666:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b676:	7af9      	ldrb	r1, [r7, #11]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	f7f7 fd9d 	bl	80031ba <HAL_PCD_EP_Receive>
 800b680:	4603      	mov	r3, r0
 800b682:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b684:	7dfb      	ldrb	r3, [r7, #23]
 800b686:	4618      	mov	r0, r3
 800b688:	f000 f832 	bl	800b6f0 <USBD_Get_USB_Status>
 800b68c:	4603      	mov	r3, r0
 800b68e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b690:	7dbb      	ldrb	r3, [r7, #22]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6ac:	78fa      	ldrb	r2, [r7, #3]
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f7 fdbd 	bl	8003230 <HAL_PCD_EP_GetRxCount>
 800b6b6:	4603      	mov	r3, r0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6c8:	4b03      	ldr	r3, [pc, #12]	@ (800b6d8 <USBD_static_malloc+0x18>)
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	370c      	adds	r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	24001d70 	.word	0x24001d70

0800b6dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	2b03      	cmp	r3, #3
 800b702:	d817      	bhi.n	800b734 <USBD_Get_USB_Status+0x44>
 800b704:	a201      	add	r2, pc, #4	@ (adr r2, 800b70c <USBD_Get_USB_Status+0x1c>)
 800b706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70a:	bf00      	nop
 800b70c:	0800b71d 	.word	0x0800b71d
 800b710:	0800b723 	.word	0x0800b723
 800b714:	0800b729 	.word	0x0800b729
 800b718:	0800b72f 	.word	0x0800b72f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]
    break;
 800b720:	e00b      	b.n	800b73a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b722:	2303      	movs	r3, #3
 800b724:	73fb      	strb	r3, [r7, #15]
    break;
 800b726:	e008      	b.n	800b73a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b728:	2301      	movs	r3, #1
 800b72a:	73fb      	strb	r3, [r7, #15]
    break;
 800b72c:	e005      	b.n	800b73a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b72e:	2303      	movs	r3, #3
 800b730:	73fb      	strb	r3, [r7, #15]
    break;
 800b732:	e002      	b.n	800b73a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	73fb      	strb	r3, [r7, #15]
    break;
 800b738:	bf00      	nop
  }
  return usb_status;
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <std>:
 800b748:	2300      	movs	r3, #0
 800b74a:	b510      	push	{r4, lr}
 800b74c:	4604      	mov	r4, r0
 800b74e:	e9c0 3300 	strd	r3, r3, [r0]
 800b752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b756:	6083      	str	r3, [r0, #8]
 800b758:	8181      	strh	r1, [r0, #12]
 800b75a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b75c:	81c2      	strh	r2, [r0, #14]
 800b75e:	6183      	str	r3, [r0, #24]
 800b760:	4619      	mov	r1, r3
 800b762:	2208      	movs	r2, #8
 800b764:	305c      	adds	r0, #92	@ 0x5c
 800b766:	f000 f90e 	bl	800b986 <memset>
 800b76a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a0 <std+0x58>)
 800b76c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b76e:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a4 <std+0x5c>)
 800b770:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b772:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a8 <std+0x60>)
 800b774:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b776:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ac <std+0x64>)
 800b778:	6323      	str	r3, [r4, #48]	@ 0x30
 800b77a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b0 <std+0x68>)
 800b77c:	6224      	str	r4, [r4, #32]
 800b77e:	429c      	cmp	r4, r3
 800b780:	d006      	beq.n	800b790 <std+0x48>
 800b782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b786:	4294      	cmp	r4, r2
 800b788:	d002      	beq.n	800b790 <std+0x48>
 800b78a:	33d0      	adds	r3, #208	@ 0xd0
 800b78c:	429c      	cmp	r4, r3
 800b78e:	d105      	bne.n	800b79c <std+0x54>
 800b790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b798:	f000 b96e 	b.w	800ba78 <__retarget_lock_init_recursive>
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	bf00      	nop
 800b7a0:	0800b901 	.word	0x0800b901
 800b7a4:	0800b923 	.word	0x0800b923
 800b7a8:	0800b95b 	.word	0x0800b95b
 800b7ac:	0800b97f 	.word	0x0800b97f
 800b7b0:	24001f90 	.word	0x24001f90

0800b7b4 <stdio_exit_handler>:
 800b7b4:	4a02      	ldr	r2, [pc, #8]	@ (800b7c0 <stdio_exit_handler+0xc>)
 800b7b6:	4903      	ldr	r1, [pc, #12]	@ (800b7c4 <stdio_exit_handler+0x10>)
 800b7b8:	4803      	ldr	r0, [pc, #12]	@ (800b7c8 <stdio_exit_handler+0x14>)
 800b7ba:	f000 b869 	b.w	800b890 <_fwalk_sglue>
 800b7be:	bf00      	nop
 800b7c0:	24000104 	.word	0x24000104
 800b7c4:	0800c319 	.word	0x0800c319
 800b7c8:	24000114 	.word	0x24000114

0800b7cc <cleanup_stdio>:
 800b7cc:	6841      	ldr	r1, [r0, #4]
 800b7ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b800 <cleanup_stdio+0x34>)
 800b7d0:	4299      	cmp	r1, r3
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	d001      	beq.n	800b7dc <cleanup_stdio+0x10>
 800b7d8:	f000 fd9e 	bl	800c318 <_fflush_r>
 800b7dc:	68a1      	ldr	r1, [r4, #8]
 800b7de:	4b09      	ldr	r3, [pc, #36]	@ (800b804 <cleanup_stdio+0x38>)
 800b7e0:	4299      	cmp	r1, r3
 800b7e2:	d002      	beq.n	800b7ea <cleanup_stdio+0x1e>
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f000 fd97 	bl	800c318 <_fflush_r>
 800b7ea:	68e1      	ldr	r1, [r4, #12]
 800b7ec:	4b06      	ldr	r3, [pc, #24]	@ (800b808 <cleanup_stdio+0x3c>)
 800b7ee:	4299      	cmp	r1, r3
 800b7f0:	d004      	beq.n	800b7fc <cleanup_stdio+0x30>
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f8:	f000 bd8e 	b.w	800c318 <_fflush_r>
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	bf00      	nop
 800b800:	24001f90 	.word	0x24001f90
 800b804:	24001ff8 	.word	0x24001ff8
 800b808:	24002060 	.word	0x24002060

0800b80c <global_stdio_init.part.0>:
 800b80c:	b510      	push	{r4, lr}
 800b80e:	4b0b      	ldr	r3, [pc, #44]	@ (800b83c <global_stdio_init.part.0+0x30>)
 800b810:	4c0b      	ldr	r4, [pc, #44]	@ (800b840 <global_stdio_init.part.0+0x34>)
 800b812:	4a0c      	ldr	r2, [pc, #48]	@ (800b844 <global_stdio_init.part.0+0x38>)
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	4620      	mov	r0, r4
 800b818:	2200      	movs	r2, #0
 800b81a:	2104      	movs	r1, #4
 800b81c:	f7ff ff94 	bl	800b748 <std>
 800b820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b824:	2201      	movs	r2, #1
 800b826:	2109      	movs	r1, #9
 800b828:	f7ff ff8e 	bl	800b748 <std>
 800b82c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b830:	2202      	movs	r2, #2
 800b832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b836:	2112      	movs	r1, #18
 800b838:	f7ff bf86 	b.w	800b748 <std>
 800b83c:	240020c8 	.word	0x240020c8
 800b840:	24001f90 	.word	0x24001f90
 800b844:	0800b7b5 	.word	0x0800b7b5

0800b848 <__sfp_lock_acquire>:
 800b848:	4801      	ldr	r0, [pc, #4]	@ (800b850 <__sfp_lock_acquire+0x8>)
 800b84a:	f000 b916 	b.w	800ba7a <__retarget_lock_acquire_recursive>
 800b84e:	bf00      	nop
 800b850:	240020d1 	.word	0x240020d1

0800b854 <__sfp_lock_release>:
 800b854:	4801      	ldr	r0, [pc, #4]	@ (800b85c <__sfp_lock_release+0x8>)
 800b856:	f000 b911 	b.w	800ba7c <__retarget_lock_release_recursive>
 800b85a:	bf00      	nop
 800b85c:	240020d1 	.word	0x240020d1

0800b860 <__sinit>:
 800b860:	b510      	push	{r4, lr}
 800b862:	4604      	mov	r4, r0
 800b864:	f7ff fff0 	bl	800b848 <__sfp_lock_acquire>
 800b868:	6a23      	ldr	r3, [r4, #32]
 800b86a:	b11b      	cbz	r3, 800b874 <__sinit+0x14>
 800b86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b870:	f7ff bff0 	b.w	800b854 <__sfp_lock_release>
 800b874:	4b04      	ldr	r3, [pc, #16]	@ (800b888 <__sinit+0x28>)
 800b876:	6223      	str	r3, [r4, #32]
 800b878:	4b04      	ldr	r3, [pc, #16]	@ (800b88c <__sinit+0x2c>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1f5      	bne.n	800b86c <__sinit+0xc>
 800b880:	f7ff ffc4 	bl	800b80c <global_stdio_init.part.0>
 800b884:	e7f2      	b.n	800b86c <__sinit+0xc>
 800b886:	bf00      	nop
 800b888:	0800b7cd 	.word	0x0800b7cd
 800b88c:	240020c8 	.word	0x240020c8

0800b890 <_fwalk_sglue>:
 800b890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b894:	4607      	mov	r7, r0
 800b896:	4688      	mov	r8, r1
 800b898:	4614      	mov	r4, r2
 800b89a:	2600      	movs	r6, #0
 800b89c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8a0:	f1b9 0901 	subs.w	r9, r9, #1
 800b8a4:	d505      	bpl.n	800b8b2 <_fwalk_sglue+0x22>
 800b8a6:	6824      	ldr	r4, [r4, #0]
 800b8a8:	2c00      	cmp	r4, #0
 800b8aa:	d1f7      	bne.n	800b89c <_fwalk_sglue+0xc>
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d907      	bls.n	800b8c8 <_fwalk_sglue+0x38>
 800b8b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	d003      	beq.n	800b8c8 <_fwalk_sglue+0x38>
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	47c0      	blx	r8
 800b8c6:	4306      	orrs	r6, r0
 800b8c8:	3568      	adds	r5, #104	@ 0x68
 800b8ca:	e7e9      	b.n	800b8a0 <_fwalk_sglue+0x10>

0800b8cc <iprintf>:
 800b8cc:	b40f      	push	{r0, r1, r2, r3}
 800b8ce:	b507      	push	{r0, r1, r2, lr}
 800b8d0:	4906      	ldr	r1, [pc, #24]	@ (800b8ec <iprintf+0x20>)
 800b8d2:	ab04      	add	r3, sp, #16
 800b8d4:	6808      	ldr	r0, [r1, #0]
 800b8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8da:	6881      	ldr	r1, [r0, #8]
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	f000 f9f1 	bl	800bcc4 <_vfiprintf_r>
 800b8e2:	b003      	add	sp, #12
 800b8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8e8:	b004      	add	sp, #16
 800b8ea:	4770      	bx	lr
 800b8ec:	24000110 	.word	0x24000110

0800b8f0 <putchar>:
 800b8f0:	4b02      	ldr	r3, [pc, #8]	@ (800b8fc <putchar+0xc>)
 800b8f2:	4601      	mov	r1, r0
 800b8f4:	6818      	ldr	r0, [r3, #0]
 800b8f6:	6882      	ldr	r2, [r0, #8]
 800b8f8:	f000 bd36 	b.w	800c368 <_putc_r>
 800b8fc:	24000110 	.word	0x24000110

0800b900 <__sread>:
 800b900:	b510      	push	{r4, lr}
 800b902:	460c      	mov	r4, r1
 800b904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b908:	f000 f868 	bl	800b9dc <_read_r>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	bfab      	itete	ge
 800b910:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b912:	89a3      	ldrhlt	r3, [r4, #12]
 800b914:	181b      	addge	r3, r3, r0
 800b916:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b91a:	bfac      	ite	ge
 800b91c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b91e:	81a3      	strhlt	r3, [r4, #12]
 800b920:	bd10      	pop	{r4, pc}

0800b922 <__swrite>:
 800b922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	461f      	mov	r7, r3
 800b928:	898b      	ldrh	r3, [r1, #12]
 800b92a:	05db      	lsls	r3, r3, #23
 800b92c:	4605      	mov	r5, r0
 800b92e:	460c      	mov	r4, r1
 800b930:	4616      	mov	r6, r2
 800b932:	d505      	bpl.n	800b940 <__swrite+0x1e>
 800b934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b938:	2302      	movs	r3, #2
 800b93a:	2200      	movs	r2, #0
 800b93c:	f000 f83c 	bl	800b9b8 <_lseek_r>
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b94a:	81a3      	strh	r3, [r4, #12]
 800b94c:	4632      	mov	r2, r6
 800b94e:	463b      	mov	r3, r7
 800b950:	4628      	mov	r0, r5
 800b952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b956:	f000 b853 	b.w	800ba00 <_write_r>

0800b95a <__sseek>:
 800b95a:	b510      	push	{r4, lr}
 800b95c:	460c      	mov	r4, r1
 800b95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b962:	f000 f829 	bl	800b9b8 <_lseek_r>
 800b966:	1c43      	adds	r3, r0, #1
 800b968:	89a3      	ldrh	r3, [r4, #12]
 800b96a:	bf15      	itete	ne
 800b96c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b96e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b972:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b976:	81a3      	strheq	r3, [r4, #12]
 800b978:	bf18      	it	ne
 800b97a:	81a3      	strhne	r3, [r4, #12]
 800b97c:	bd10      	pop	{r4, pc}

0800b97e <__sclose>:
 800b97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b982:	f000 b809 	b.w	800b998 <_close_r>

0800b986 <memset>:
 800b986:	4402      	add	r2, r0
 800b988:	4603      	mov	r3, r0
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d100      	bne.n	800b990 <memset+0xa>
 800b98e:	4770      	bx	lr
 800b990:	f803 1b01 	strb.w	r1, [r3], #1
 800b994:	e7f9      	b.n	800b98a <memset+0x4>
	...

0800b998 <_close_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4d06      	ldr	r5, [pc, #24]	@ (800b9b4 <_close_r+0x1c>)
 800b99c:	2300      	movs	r3, #0
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	602b      	str	r3, [r5, #0]
 800b9a4:	f7f5 fd45 	bl	8001432 <_close>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_close_r+0x1a>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_close_r+0x1a>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	240020cc 	.word	0x240020cc

0800b9b8 <_lseek_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d07      	ldr	r5, [pc, #28]	@ (800b9d8 <_lseek_r+0x20>)
 800b9bc:	4604      	mov	r4, r0
 800b9be:	4608      	mov	r0, r1
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	602a      	str	r2, [r5, #0]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f7f5 fd5a 	bl	8001480 <_lseek>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d102      	bne.n	800b9d6 <_lseek_r+0x1e>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	b103      	cbz	r3, 800b9d6 <_lseek_r+0x1e>
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	240020cc 	.word	0x240020cc

0800b9dc <_read_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d07      	ldr	r5, [pc, #28]	@ (800b9fc <_read_r+0x20>)
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	602a      	str	r2, [r5, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f7f5 fce8 	bl	80013c0 <_read>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_read_r+0x1e>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_read_r+0x1e>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	240020cc 	.word	0x240020cc

0800ba00 <_write_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	@ (800ba20 <_write_r+0x20>)
 800ba04:	4604      	mov	r4, r0
 800ba06:	4608      	mov	r0, r1
 800ba08:	4611      	mov	r1, r2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	602a      	str	r2, [r5, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7f5 fcf3 	bl	80013fa <_write>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_write_r+0x1e>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_write_r+0x1e>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	240020cc 	.word	0x240020cc

0800ba24 <__errno>:
 800ba24:	4b01      	ldr	r3, [pc, #4]	@ (800ba2c <__errno+0x8>)
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	24000110 	.word	0x24000110

0800ba30 <__libc_init_array>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	4d0d      	ldr	r5, [pc, #52]	@ (800ba68 <__libc_init_array+0x38>)
 800ba34:	4c0d      	ldr	r4, [pc, #52]	@ (800ba6c <__libc_init_array+0x3c>)
 800ba36:	1b64      	subs	r4, r4, r5
 800ba38:	10a4      	asrs	r4, r4, #2
 800ba3a:	2600      	movs	r6, #0
 800ba3c:	42a6      	cmp	r6, r4
 800ba3e:	d109      	bne.n	800ba54 <__libc_init_array+0x24>
 800ba40:	4d0b      	ldr	r5, [pc, #44]	@ (800ba70 <__libc_init_array+0x40>)
 800ba42:	4c0c      	ldr	r4, [pc, #48]	@ (800ba74 <__libc_init_array+0x44>)
 800ba44:	f000 fdec 	bl	800c620 <_init>
 800ba48:	1b64      	subs	r4, r4, r5
 800ba4a:	10a4      	asrs	r4, r4, #2
 800ba4c:	2600      	movs	r6, #0
 800ba4e:	42a6      	cmp	r6, r4
 800ba50:	d105      	bne.n	800ba5e <__libc_init_array+0x2e>
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba58:	4798      	blx	r3
 800ba5a:	3601      	adds	r6, #1
 800ba5c:	e7ee      	b.n	800ba3c <__libc_init_array+0xc>
 800ba5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba62:	4798      	blx	r3
 800ba64:	3601      	adds	r6, #1
 800ba66:	e7f2      	b.n	800ba4e <__libc_init_array+0x1e>
 800ba68:	0800c750 	.word	0x0800c750
 800ba6c:	0800c750 	.word	0x0800c750
 800ba70:	0800c750 	.word	0x0800c750
 800ba74:	0800c754 	.word	0x0800c754

0800ba78 <__retarget_lock_init_recursive>:
 800ba78:	4770      	bx	lr

0800ba7a <__retarget_lock_acquire_recursive>:
 800ba7a:	4770      	bx	lr

0800ba7c <__retarget_lock_release_recursive>:
 800ba7c:	4770      	bx	lr
	...

0800ba80 <_free_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4605      	mov	r5, r0
 800ba84:	2900      	cmp	r1, #0
 800ba86:	d041      	beq.n	800bb0c <_free_r+0x8c>
 800ba88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba8c:	1f0c      	subs	r4, r1, #4
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	bfb8      	it	lt
 800ba92:	18e4      	addlt	r4, r4, r3
 800ba94:	f000 f8e0 	bl	800bc58 <__malloc_lock>
 800ba98:	4a1d      	ldr	r2, [pc, #116]	@ (800bb10 <_free_r+0x90>)
 800ba9a:	6813      	ldr	r3, [r2, #0]
 800ba9c:	b933      	cbnz	r3, 800baac <_free_r+0x2c>
 800ba9e:	6063      	str	r3, [r4, #4]
 800baa0:	6014      	str	r4, [r2, #0]
 800baa2:	4628      	mov	r0, r5
 800baa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa8:	f000 b8dc 	b.w	800bc64 <__malloc_unlock>
 800baac:	42a3      	cmp	r3, r4
 800baae:	d908      	bls.n	800bac2 <_free_r+0x42>
 800bab0:	6820      	ldr	r0, [r4, #0]
 800bab2:	1821      	adds	r1, r4, r0
 800bab4:	428b      	cmp	r3, r1
 800bab6:	bf01      	itttt	eq
 800bab8:	6819      	ldreq	r1, [r3, #0]
 800baba:	685b      	ldreq	r3, [r3, #4]
 800babc:	1809      	addeq	r1, r1, r0
 800babe:	6021      	streq	r1, [r4, #0]
 800bac0:	e7ed      	b.n	800ba9e <_free_r+0x1e>
 800bac2:	461a      	mov	r2, r3
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	b10b      	cbz	r3, 800bacc <_free_r+0x4c>
 800bac8:	42a3      	cmp	r3, r4
 800baca:	d9fa      	bls.n	800bac2 <_free_r+0x42>
 800bacc:	6811      	ldr	r1, [r2, #0]
 800bace:	1850      	adds	r0, r2, r1
 800bad0:	42a0      	cmp	r0, r4
 800bad2:	d10b      	bne.n	800baec <_free_r+0x6c>
 800bad4:	6820      	ldr	r0, [r4, #0]
 800bad6:	4401      	add	r1, r0
 800bad8:	1850      	adds	r0, r2, r1
 800bada:	4283      	cmp	r3, r0
 800badc:	6011      	str	r1, [r2, #0]
 800bade:	d1e0      	bne.n	800baa2 <_free_r+0x22>
 800bae0:	6818      	ldr	r0, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	6053      	str	r3, [r2, #4]
 800bae6:	4408      	add	r0, r1
 800bae8:	6010      	str	r0, [r2, #0]
 800baea:	e7da      	b.n	800baa2 <_free_r+0x22>
 800baec:	d902      	bls.n	800baf4 <_free_r+0x74>
 800baee:	230c      	movs	r3, #12
 800baf0:	602b      	str	r3, [r5, #0]
 800baf2:	e7d6      	b.n	800baa2 <_free_r+0x22>
 800baf4:	6820      	ldr	r0, [r4, #0]
 800baf6:	1821      	adds	r1, r4, r0
 800baf8:	428b      	cmp	r3, r1
 800bafa:	bf04      	itt	eq
 800bafc:	6819      	ldreq	r1, [r3, #0]
 800bafe:	685b      	ldreq	r3, [r3, #4]
 800bb00:	6063      	str	r3, [r4, #4]
 800bb02:	bf04      	itt	eq
 800bb04:	1809      	addeq	r1, r1, r0
 800bb06:	6021      	streq	r1, [r4, #0]
 800bb08:	6054      	str	r4, [r2, #4]
 800bb0a:	e7ca      	b.n	800baa2 <_free_r+0x22>
 800bb0c:	bd38      	pop	{r3, r4, r5, pc}
 800bb0e:	bf00      	nop
 800bb10:	240020d8 	.word	0x240020d8

0800bb14 <sbrk_aligned>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	4e0f      	ldr	r6, [pc, #60]	@ (800bb54 <sbrk_aligned+0x40>)
 800bb18:	460c      	mov	r4, r1
 800bb1a:	6831      	ldr	r1, [r6, #0]
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	b911      	cbnz	r1, 800bb26 <sbrk_aligned+0x12>
 800bb20:	f000 fcea 	bl	800c4f8 <_sbrk_r>
 800bb24:	6030      	str	r0, [r6, #0]
 800bb26:	4621      	mov	r1, r4
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f000 fce5 	bl	800c4f8 <_sbrk_r>
 800bb2e:	1c43      	adds	r3, r0, #1
 800bb30:	d103      	bne.n	800bb3a <sbrk_aligned+0x26>
 800bb32:	f04f 34ff 	mov.w	r4, #4294967295
 800bb36:	4620      	mov	r0, r4
 800bb38:	bd70      	pop	{r4, r5, r6, pc}
 800bb3a:	1cc4      	adds	r4, r0, #3
 800bb3c:	f024 0403 	bic.w	r4, r4, #3
 800bb40:	42a0      	cmp	r0, r4
 800bb42:	d0f8      	beq.n	800bb36 <sbrk_aligned+0x22>
 800bb44:	1a21      	subs	r1, r4, r0
 800bb46:	4628      	mov	r0, r5
 800bb48:	f000 fcd6 	bl	800c4f8 <_sbrk_r>
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	d1f2      	bne.n	800bb36 <sbrk_aligned+0x22>
 800bb50:	e7ef      	b.n	800bb32 <sbrk_aligned+0x1e>
 800bb52:	bf00      	nop
 800bb54:	240020d4 	.word	0x240020d4

0800bb58 <_malloc_r>:
 800bb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb5c:	1ccd      	adds	r5, r1, #3
 800bb5e:	f025 0503 	bic.w	r5, r5, #3
 800bb62:	3508      	adds	r5, #8
 800bb64:	2d0c      	cmp	r5, #12
 800bb66:	bf38      	it	cc
 800bb68:	250c      	movcc	r5, #12
 800bb6a:	2d00      	cmp	r5, #0
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	db01      	blt.n	800bb74 <_malloc_r+0x1c>
 800bb70:	42a9      	cmp	r1, r5
 800bb72:	d904      	bls.n	800bb7e <_malloc_r+0x26>
 800bb74:	230c      	movs	r3, #12
 800bb76:	6033      	str	r3, [r6, #0]
 800bb78:	2000      	movs	r0, #0
 800bb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc54 <_malloc_r+0xfc>
 800bb82:	f000 f869 	bl	800bc58 <__malloc_lock>
 800bb86:	f8d8 3000 	ldr.w	r3, [r8]
 800bb8a:	461c      	mov	r4, r3
 800bb8c:	bb44      	cbnz	r4, 800bbe0 <_malloc_r+0x88>
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4630      	mov	r0, r6
 800bb92:	f7ff ffbf 	bl	800bb14 <sbrk_aligned>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	4604      	mov	r4, r0
 800bb9a:	d158      	bne.n	800bc4e <_malloc_r+0xf6>
 800bb9c:	f8d8 4000 	ldr.w	r4, [r8]
 800bba0:	4627      	mov	r7, r4
 800bba2:	2f00      	cmp	r7, #0
 800bba4:	d143      	bne.n	800bc2e <_malloc_r+0xd6>
 800bba6:	2c00      	cmp	r4, #0
 800bba8:	d04b      	beq.n	800bc42 <_malloc_r+0xea>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	4639      	mov	r1, r7
 800bbae:	4630      	mov	r0, r6
 800bbb0:	eb04 0903 	add.w	r9, r4, r3
 800bbb4:	f000 fca0 	bl	800c4f8 <_sbrk_r>
 800bbb8:	4581      	cmp	r9, r0
 800bbba:	d142      	bne.n	800bc42 <_malloc_r+0xea>
 800bbbc:	6821      	ldr	r1, [r4, #0]
 800bbbe:	1a6d      	subs	r5, r5, r1
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f7ff ffa6 	bl	800bb14 <sbrk_aligned>
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d03a      	beq.n	800bc42 <_malloc_r+0xea>
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	442b      	add	r3, r5
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	f8d8 3000 	ldr.w	r3, [r8]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	bb62      	cbnz	r2, 800bc34 <_malloc_r+0xdc>
 800bbda:	f8c8 7000 	str.w	r7, [r8]
 800bbde:	e00f      	b.n	800bc00 <_malloc_r+0xa8>
 800bbe0:	6822      	ldr	r2, [r4, #0]
 800bbe2:	1b52      	subs	r2, r2, r5
 800bbe4:	d420      	bmi.n	800bc28 <_malloc_r+0xd0>
 800bbe6:	2a0b      	cmp	r2, #11
 800bbe8:	d917      	bls.n	800bc1a <_malloc_r+0xc2>
 800bbea:	1961      	adds	r1, r4, r5
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	6025      	str	r5, [r4, #0]
 800bbf0:	bf18      	it	ne
 800bbf2:	6059      	strne	r1, [r3, #4]
 800bbf4:	6863      	ldr	r3, [r4, #4]
 800bbf6:	bf08      	it	eq
 800bbf8:	f8c8 1000 	streq.w	r1, [r8]
 800bbfc:	5162      	str	r2, [r4, r5]
 800bbfe:	604b      	str	r3, [r1, #4]
 800bc00:	4630      	mov	r0, r6
 800bc02:	f000 f82f 	bl	800bc64 <__malloc_unlock>
 800bc06:	f104 000b 	add.w	r0, r4, #11
 800bc0a:	1d23      	adds	r3, r4, #4
 800bc0c:	f020 0007 	bic.w	r0, r0, #7
 800bc10:	1ac2      	subs	r2, r0, r3
 800bc12:	bf1c      	itt	ne
 800bc14:	1a1b      	subne	r3, r3, r0
 800bc16:	50a3      	strne	r3, [r4, r2]
 800bc18:	e7af      	b.n	800bb7a <_malloc_r+0x22>
 800bc1a:	6862      	ldr	r2, [r4, #4]
 800bc1c:	42a3      	cmp	r3, r4
 800bc1e:	bf0c      	ite	eq
 800bc20:	f8c8 2000 	streq.w	r2, [r8]
 800bc24:	605a      	strne	r2, [r3, #4]
 800bc26:	e7eb      	b.n	800bc00 <_malloc_r+0xa8>
 800bc28:	4623      	mov	r3, r4
 800bc2a:	6864      	ldr	r4, [r4, #4]
 800bc2c:	e7ae      	b.n	800bb8c <_malloc_r+0x34>
 800bc2e:	463c      	mov	r4, r7
 800bc30:	687f      	ldr	r7, [r7, #4]
 800bc32:	e7b6      	b.n	800bba2 <_malloc_r+0x4a>
 800bc34:	461a      	mov	r2, r3
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	42a3      	cmp	r3, r4
 800bc3a:	d1fb      	bne.n	800bc34 <_malloc_r+0xdc>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6053      	str	r3, [r2, #4]
 800bc40:	e7de      	b.n	800bc00 <_malloc_r+0xa8>
 800bc42:	230c      	movs	r3, #12
 800bc44:	6033      	str	r3, [r6, #0]
 800bc46:	4630      	mov	r0, r6
 800bc48:	f000 f80c 	bl	800bc64 <__malloc_unlock>
 800bc4c:	e794      	b.n	800bb78 <_malloc_r+0x20>
 800bc4e:	6005      	str	r5, [r0, #0]
 800bc50:	e7d6      	b.n	800bc00 <_malloc_r+0xa8>
 800bc52:	bf00      	nop
 800bc54:	240020d8 	.word	0x240020d8

0800bc58 <__malloc_lock>:
 800bc58:	4801      	ldr	r0, [pc, #4]	@ (800bc60 <__malloc_lock+0x8>)
 800bc5a:	f7ff bf0e 	b.w	800ba7a <__retarget_lock_acquire_recursive>
 800bc5e:	bf00      	nop
 800bc60:	240020d0 	.word	0x240020d0

0800bc64 <__malloc_unlock>:
 800bc64:	4801      	ldr	r0, [pc, #4]	@ (800bc6c <__malloc_unlock+0x8>)
 800bc66:	f7ff bf09 	b.w	800ba7c <__retarget_lock_release_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	240020d0 	.word	0x240020d0

0800bc70 <__sfputc_r>:
 800bc70:	6893      	ldr	r3, [r2, #8]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	b410      	push	{r4}
 800bc78:	6093      	str	r3, [r2, #8]
 800bc7a:	da08      	bge.n	800bc8e <__sfputc_r+0x1e>
 800bc7c:	6994      	ldr	r4, [r2, #24]
 800bc7e:	42a3      	cmp	r3, r4
 800bc80:	db01      	blt.n	800bc86 <__sfputc_r+0x16>
 800bc82:	290a      	cmp	r1, #10
 800bc84:	d103      	bne.n	800bc8e <__sfputc_r+0x1e>
 800bc86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc8a:	f000 bba1 	b.w	800c3d0 <__swbuf_r>
 800bc8e:	6813      	ldr	r3, [r2, #0]
 800bc90:	1c58      	adds	r0, r3, #1
 800bc92:	6010      	str	r0, [r2, #0]
 800bc94:	7019      	strb	r1, [r3, #0]
 800bc96:	4608      	mov	r0, r1
 800bc98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <__sfputs_r>:
 800bc9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca0:	4606      	mov	r6, r0
 800bca2:	460f      	mov	r7, r1
 800bca4:	4614      	mov	r4, r2
 800bca6:	18d5      	adds	r5, r2, r3
 800bca8:	42ac      	cmp	r4, r5
 800bcaa:	d101      	bne.n	800bcb0 <__sfputs_r+0x12>
 800bcac:	2000      	movs	r0, #0
 800bcae:	e007      	b.n	800bcc0 <__sfputs_r+0x22>
 800bcb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcb4:	463a      	mov	r2, r7
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7ff ffda 	bl	800bc70 <__sfputc_r>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d1f3      	bne.n	800bca8 <__sfputs_r+0xa>
 800bcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcc4 <_vfiprintf_r>:
 800bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc8:	460d      	mov	r5, r1
 800bcca:	b09d      	sub	sp, #116	@ 0x74
 800bccc:	4614      	mov	r4, r2
 800bcce:	4698      	mov	r8, r3
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	b118      	cbz	r0, 800bcdc <_vfiprintf_r+0x18>
 800bcd4:	6a03      	ldr	r3, [r0, #32]
 800bcd6:	b90b      	cbnz	r3, 800bcdc <_vfiprintf_r+0x18>
 800bcd8:	f7ff fdc2 	bl	800b860 <__sinit>
 800bcdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcde:	07d9      	lsls	r1, r3, #31
 800bce0:	d405      	bmi.n	800bcee <_vfiprintf_r+0x2a>
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	059a      	lsls	r2, r3, #22
 800bce6:	d402      	bmi.n	800bcee <_vfiprintf_r+0x2a>
 800bce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcea:	f7ff fec6 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	071b      	lsls	r3, r3, #28
 800bcf2:	d501      	bpl.n	800bcf8 <_vfiprintf_r+0x34>
 800bcf4:	692b      	ldr	r3, [r5, #16]
 800bcf6:	b99b      	cbnz	r3, 800bd20 <_vfiprintf_r+0x5c>
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f000 fba6 	bl	800c44c <__swsetup_r>
 800bd00:	b170      	cbz	r0, 800bd20 <_vfiprintf_r+0x5c>
 800bd02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd04:	07dc      	lsls	r4, r3, #31
 800bd06:	d504      	bpl.n	800bd12 <_vfiprintf_r+0x4e>
 800bd08:	f04f 30ff 	mov.w	r0, #4294967295
 800bd0c:	b01d      	add	sp, #116	@ 0x74
 800bd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	0598      	lsls	r0, r3, #22
 800bd16:	d4f7      	bmi.n	800bd08 <_vfiprintf_r+0x44>
 800bd18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd1a:	f7ff feaf 	bl	800ba7c <__retarget_lock_release_recursive>
 800bd1e:	e7f3      	b.n	800bd08 <_vfiprintf_r+0x44>
 800bd20:	2300      	movs	r3, #0
 800bd22:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd24:	2320      	movs	r3, #32
 800bd26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd2e:	2330      	movs	r3, #48	@ 0x30
 800bd30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bee0 <_vfiprintf_r+0x21c>
 800bd34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd38:	f04f 0901 	mov.w	r9, #1
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	469a      	mov	sl, r3
 800bd40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd44:	b10a      	cbz	r2, 800bd4a <_vfiprintf_r+0x86>
 800bd46:	2a25      	cmp	r2, #37	@ 0x25
 800bd48:	d1f9      	bne.n	800bd3e <_vfiprintf_r+0x7a>
 800bd4a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd4e:	d00b      	beq.n	800bd68 <_vfiprintf_r+0xa4>
 800bd50:	465b      	mov	r3, fp
 800bd52:	4622      	mov	r2, r4
 800bd54:	4629      	mov	r1, r5
 800bd56:	4630      	mov	r0, r6
 800bd58:	f7ff ffa1 	bl	800bc9e <__sfputs_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f000 80a7 	beq.w	800beb0 <_vfiprintf_r+0x1ec>
 800bd62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd64:	445a      	add	r2, fp
 800bd66:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd68:	f89a 3000 	ldrb.w	r3, [sl]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 809f 	beq.w	800beb0 <_vfiprintf_r+0x1ec>
 800bd72:	2300      	movs	r3, #0
 800bd74:	f04f 32ff 	mov.w	r2, #4294967295
 800bd78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd7c:	f10a 0a01 	add.w	sl, sl, #1
 800bd80:	9304      	str	r3, [sp, #16]
 800bd82:	9307      	str	r3, [sp, #28]
 800bd84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd88:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd8a:	4654      	mov	r4, sl
 800bd8c:	2205      	movs	r2, #5
 800bd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd92:	4853      	ldr	r0, [pc, #332]	@ (800bee0 <_vfiprintf_r+0x21c>)
 800bd94:	f7f4 faac 	bl	80002f0 <memchr>
 800bd98:	9a04      	ldr	r2, [sp, #16]
 800bd9a:	b9d8      	cbnz	r0, 800bdd4 <_vfiprintf_r+0x110>
 800bd9c:	06d1      	lsls	r1, r2, #27
 800bd9e:	bf44      	itt	mi
 800bda0:	2320      	movmi	r3, #32
 800bda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bda6:	0713      	lsls	r3, r2, #28
 800bda8:	bf44      	itt	mi
 800bdaa:	232b      	movmi	r3, #43	@ 0x2b
 800bdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdb6:	d015      	beq.n	800bde4 <_vfiprintf_r+0x120>
 800bdb8:	9a07      	ldr	r2, [sp, #28]
 800bdba:	4654      	mov	r4, sl
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f04f 0c0a 	mov.w	ip, #10
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdc8:	3b30      	subs	r3, #48	@ 0x30
 800bdca:	2b09      	cmp	r3, #9
 800bdcc:	d94b      	bls.n	800be66 <_vfiprintf_r+0x1a2>
 800bdce:	b1b0      	cbz	r0, 800bdfe <_vfiprintf_r+0x13a>
 800bdd0:	9207      	str	r2, [sp, #28]
 800bdd2:	e014      	b.n	800bdfe <_vfiprintf_r+0x13a>
 800bdd4:	eba0 0308 	sub.w	r3, r0, r8
 800bdd8:	fa09 f303 	lsl.w	r3, r9, r3
 800bddc:	4313      	orrs	r3, r2
 800bdde:	9304      	str	r3, [sp, #16]
 800bde0:	46a2      	mov	sl, r4
 800bde2:	e7d2      	b.n	800bd8a <_vfiprintf_r+0xc6>
 800bde4:	9b03      	ldr	r3, [sp, #12]
 800bde6:	1d19      	adds	r1, r3, #4
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	9103      	str	r1, [sp, #12]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	bfbb      	ittet	lt
 800bdf0:	425b      	neglt	r3, r3
 800bdf2:	f042 0202 	orrlt.w	r2, r2, #2
 800bdf6:	9307      	strge	r3, [sp, #28]
 800bdf8:	9307      	strlt	r3, [sp, #28]
 800bdfa:	bfb8      	it	lt
 800bdfc:	9204      	strlt	r2, [sp, #16]
 800bdfe:	7823      	ldrb	r3, [r4, #0]
 800be00:	2b2e      	cmp	r3, #46	@ 0x2e
 800be02:	d10a      	bne.n	800be1a <_vfiprintf_r+0x156>
 800be04:	7863      	ldrb	r3, [r4, #1]
 800be06:	2b2a      	cmp	r3, #42	@ 0x2a
 800be08:	d132      	bne.n	800be70 <_vfiprintf_r+0x1ac>
 800be0a:	9b03      	ldr	r3, [sp, #12]
 800be0c:	1d1a      	adds	r2, r3, #4
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	9203      	str	r2, [sp, #12]
 800be12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be16:	3402      	adds	r4, #2
 800be18:	9305      	str	r3, [sp, #20]
 800be1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bef0 <_vfiprintf_r+0x22c>
 800be1e:	7821      	ldrb	r1, [r4, #0]
 800be20:	2203      	movs	r2, #3
 800be22:	4650      	mov	r0, sl
 800be24:	f7f4 fa64 	bl	80002f0 <memchr>
 800be28:	b138      	cbz	r0, 800be3a <_vfiprintf_r+0x176>
 800be2a:	9b04      	ldr	r3, [sp, #16]
 800be2c:	eba0 000a 	sub.w	r0, r0, sl
 800be30:	2240      	movs	r2, #64	@ 0x40
 800be32:	4082      	lsls	r2, r0
 800be34:	4313      	orrs	r3, r2
 800be36:	3401      	adds	r4, #1
 800be38:	9304      	str	r3, [sp, #16]
 800be3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be3e:	4829      	ldr	r0, [pc, #164]	@ (800bee4 <_vfiprintf_r+0x220>)
 800be40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be44:	2206      	movs	r2, #6
 800be46:	f7f4 fa53 	bl	80002f0 <memchr>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	d03f      	beq.n	800bece <_vfiprintf_r+0x20a>
 800be4e:	4b26      	ldr	r3, [pc, #152]	@ (800bee8 <_vfiprintf_r+0x224>)
 800be50:	bb1b      	cbnz	r3, 800be9a <_vfiprintf_r+0x1d6>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	3307      	adds	r3, #7
 800be56:	f023 0307 	bic.w	r3, r3, #7
 800be5a:	3308      	adds	r3, #8
 800be5c:	9303      	str	r3, [sp, #12]
 800be5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be60:	443b      	add	r3, r7
 800be62:	9309      	str	r3, [sp, #36]	@ 0x24
 800be64:	e76a      	b.n	800bd3c <_vfiprintf_r+0x78>
 800be66:	fb0c 3202 	mla	r2, ip, r2, r3
 800be6a:	460c      	mov	r4, r1
 800be6c:	2001      	movs	r0, #1
 800be6e:	e7a8      	b.n	800bdc2 <_vfiprintf_r+0xfe>
 800be70:	2300      	movs	r3, #0
 800be72:	3401      	adds	r4, #1
 800be74:	9305      	str	r3, [sp, #20]
 800be76:	4619      	mov	r1, r3
 800be78:	f04f 0c0a 	mov.w	ip, #10
 800be7c:	4620      	mov	r0, r4
 800be7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be82:	3a30      	subs	r2, #48	@ 0x30
 800be84:	2a09      	cmp	r2, #9
 800be86:	d903      	bls.n	800be90 <_vfiprintf_r+0x1cc>
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d0c6      	beq.n	800be1a <_vfiprintf_r+0x156>
 800be8c:	9105      	str	r1, [sp, #20]
 800be8e:	e7c4      	b.n	800be1a <_vfiprintf_r+0x156>
 800be90:	fb0c 2101 	mla	r1, ip, r1, r2
 800be94:	4604      	mov	r4, r0
 800be96:	2301      	movs	r3, #1
 800be98:	e7f0      	b.n	800be7c <_vfiprintf_r+0x1b8>
 800be9a:	ab03      	add	r3, sp, #12
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	462a      	mov	r2, r5
 800bea0:	4b12      	ldr	r3, [pc, #72]	@ (800beec <_vfiprintf_r+0x228>)
 800bea2:	a904      	add	r1, sp, #16
 800bea4:	4630      	mov	r0, r6
 800bea6:	f3af 8000 	nop.w
 800beaa:	4607      	mov	r7, r0
 800beac:	1c78      	adds	r0, r7, #1
 800beae:	d1d6      	bne.n	800be5e <_vfiprintf_r+0x19a>
 800beb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beb2:	07d9      	lsls	r1, r3, #31
 800beb4:	d405      	bmi.n	800bec2 <_vfiprintf_r+0x1fe>
 800beb6:	89ab      	ldrh	r3, [r5, #12]
 800beb8:	059a      	lsls	r2, r3, #22
 800beba:	d402      	bmi.n	800bec2 <_vfiprintf_r+0x1fe>
 800bebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bebe:	f7ff fddd 	bl	800ba7c <__retarget_lock_release_recursive>
 800bec2:	89ab      	ldrh	r3, [r5, #12]
 800bec4:	065b      	lsls	r3, r3, #25
 800bec6:	f53f af1f 	bmi.w	800bd08 <_vfiprintf_r+0x44>
 800beca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800becc:	e71e      	b.n	800bd0c <_vfiprintf_r+0x48>
 800bece:	ab03      	add	r3, sp, #12
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	462a      	mov	r2, r5
 800bed4:	4b05      	ldr	r3, [pc, #20]	@ (800beec <_vfiprintf_r+0x228>)
 800bed6:	a904      	add	r1, sp, #16
 800bed8:	4630      	mov	r0, r6
 800beda:	f000 f879 	bl	800bfd0 <_printf_i>
 800bede:	e7e4      	b.n	800beaa <_vfiprintf_r+0x1e6>
 800bee0:	0800c714 	.word	0x0800c714
 800bee4:	0800c71e 	.word	0x0800c71e
 800bee8:	00000000 	.word	0x00000000
 800beec:	0800bc9f 	.word	0x0800bc9f
 800bef0:	0800c71a 	.word	0x0800c71a

0800bef4 <_printf_common>:
 800bef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef8:	4616      	mov	r6, r2
 800befa:	4698      	mov	r8, r3
 800befc:	688a      	ldr	r2, [r1, #8]
 800befe:	690b      	ldr	r3, [r1, #16]
 800bf00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf04:	4293      	cmp	r3, r2
 800bf06:	bfb8      	it	lt
 800bf08:	4613      	movlt	r3, r2
 800bf0a:	6033      	str	r3, [r6, #0]
 800bf0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf10:	4607      	mov	r7, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	b10a      	cbz	r2, 800bf1a <_printf_common+0x26>
 800bf16:	3301      	adds	r3, #1
 800bf18:	6033      	str	r3, [r6, #0]
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	0699      	lsls	r1, r3, #26
 800bf1e:	bf42      	ittt	mi
 800bf20:	6833      	ldrmi	r3, [r6, #0]
 800bf22:	3302      	addmi	r3, #2
 800bf24:	6033      	strmi	r3, [r6, #0]
 800bf26:	6825      	ldr	r5, [r4, #0]
 800bf28:	f015 0506 	ands.w	r5, r5, #6
 800bf2c:	d106      	bne.n	800bf3c <_printf_common+0x48>
 800bf2e:	f104 0a19 	add.w	sl, r4, #25
 800bf32:	68e3      	ldr	r3, [r4, #12]
 800bf34:	6832      	ldr	r2, [r6, #0]
 800bf36:	1a9b      	subs	r3, r3, r2
 800bf38:	42ab      	cmp	r3, r5
 800bf3a:	dc26      	bgt.n	800bf8a <_printf_common+0x96>
 800bf3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf40:	6822      	ldr	r2, [r4, #0]
 800bf42:	3b00      	subs	r3, #0
 800bf44:	bf18      	it	ne
 800bf46:	2301      	movne	r3, #1
 800bf48:	0692      	lsls	r2, r2, #26
 800bf4a:	d42b      	bmi.n	800bfa4 <_printf_common+0xb0>
 800bf4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf50:	4641      	mov	r1, r8
 800bf52:	4638      	mov	r0, r7
 800bf54:	47c8      	blx	r9
 800bf56:	3001      	adds	r0, #1
 800bf58:	d01e      	beq.n	800bf98 <_printf_common+0xa4>
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	6922      	ldr	r2, [r4, #16]
 800bf5e:	f003 0306 	and.w	r3, r3, #6
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	bf02      	ittt	eq
 800bf66:	68e5      	ldreq	r5, [r4, #12]
 800bf68:	6833      	ldreq	r3, [r6, #0]
 800bf6a:	1aed      	subeq	r5, r5, r3
 800bf6c:	68a3      	ldr	r3, [r4, #8]
 800bf6e:	bf0c      	ite	eq
 800bf70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf74:	2500      	movne	r5, #0
 800bf76:	4293      	cmp	r3, r2
 800bf78:	bfc4      	itt	gt
 800bf7a:	1a9b      	subgt	r3, r3, r2
 800bf7c:	18ed      	addgt	r5, r5, r3
 800bf7e:	2600      	movs	r6, #0
 800bf80:	341a      	adds	r4, #26
 800bf82:	42b5      	cmp	r5, r6
 800bf84:	d11a      	bne.n	800bfbc <_printf_common+0xc8>
 800bf86:	2000      	movs	r0, #0
 800bf88:	e008      	b.n	800bf9c <_printf_common+0xa8>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	4652      	mov	r2, sl
 800bf8e:	4641      	mov	r1, r8
 800bf90:	4638      	mov	r0, r7
 800bf92:	47c8      	blx	r9
 800bf94:	3001      	adds	r0, #1
 800bf96:	d103      	bne.n	800bfa0 <_printf_common+0xac>
 800bf98:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa0:	3501      	adds	r5, #1
 800bfa2:	e7c6      	b.n	800bf32 <_printf_common+0x3e>
 800bfa4:	18e1      	adds	r1, r4, r3
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	2030      	movs	r0, #48	@ 0x30
 800bfaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfae:	4422      	add	r2, r4
 800bfb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfb8:	3302      	adds	r3, #2
 800bfba:	e7c7      	b.n	800bf4c <_printf_common+0x58>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	4641      	mov	r1, r8
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	47c8      	blx	r9
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	d0e6      	beq.n	800bf98 <_printf_common+0xa4>
 800bfca:	3601      	adds	r6, #1
 800bfcc:	e7d9      	b.n	800bf82 <_printf_common+0x8e>
	...

0800bfd0 <_printf_i>:
 800bfd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd4:	7e0f      	ldrb	r7, [r1, #24]
 800bfd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfd8:	2f78      	cmp	r7, #120	@ 0x78
 800bfda:	4691      	mov	r9, r2
 800bfdc:	4680      	mov	r8, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	469a      	mov	sl, r3
 800bfe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfe6:	d807      	bhi.n	800bff8 <_printf_i+0x28>
 800bfe8:	2f62      	cmp	r7, #98	@ 0x62
 800bfea:	d80a      	bhi.n	800c002 <_printf_i+0x32>
 800bfec:	2f00      	cmp	r7, #0
 800bfee:	f000 80d2 	beq.w	800c196 <_printf_i+0x1c6>
 800bff2:	2f58      	cmp	r7, #88	@ 0x58
 800bff4:	f000 80b9 	beq.w	800c16a <_printf_i+0x19a>
 800bff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c000:	e03a      	b.n	800c078 <_printf_i+0xa8>
 800c002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c006:	2b15      	cmp	r3, #21
 800c008:	d8f6      	bhi.n	800bff8 <_printf_i+0x28>
 800c00a:	a101      	add	r1, pc, #4	@ (adr r1, 800c010 <_printf_i+0x40>)
 800c00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c010:	0800c069 	.word	0x0800c069
 800c014:	0800c07d 	.word	0x0800c07d
 800c018:	0800bff9 	.word	0x0800bff9
 800c01c:	0800bff9 	.word	0x0800bff9
 800c020:	0800bff9 	.word	0x0800bff9
 800c024:	0800bff9 	.word	0x0800bff9
 800c028:	0800c07d 	.word	0x0800c07d
 800c02c:	0800bff9 	.word	0x0800bff9
 800c030:	0800bff9 	.word	0x0800bff9
 800c034:	0800bff9 	.word	0x0800bff9
 800c038:	0800bff9 	.word	0x0800bff9
 800c03c:	0800c17d 	.word	0x0800c17d
 800c040:	0800c0a7 	.word	0x0800c0a7
 800c044:	0800c137 	.word	0x0800c137
 800c048:	0800bff9 	.word	0x0800bff9
 800c04c:	0800bff9 	.word	0x0800bff9
 800c050:	0800c19f 	.word	0x0800c19f
 800c054:	0800bff9 	.word	0x0800bff9
 800c058:	0800c0a7 	.word	0x0800c0a7
 800c05c:	0800bff9 	.word	0x0800bff9
 800c060:	0800bff9 	.word	0x0800bff9
 800c064:	0800c13f 	.word	0x0800c13f
 800c068:	6833      	ldr	r3, [r6, #0]
 800c06a:	1d1a      	adds	r2, r3, #4
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6032      	str	r2, [r6, #0]
 800c070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c078:	2301      	movs	r3, #1
 800c07a:	e09d      	b.n	800c1b8 <_printf_i+0x1e8>
 800c07c:	6833      	ldr	r3, [r6, #0]
 800c07e:	6820      	ldr	r0, [r4, #0]
 800c080:	1d19      	adds	r1, r3, #4
 800c082:	6031      	str	r1, [r6, #0]
 800c084:	0606      	lsls	r6, r0, #24
 800c086:	d501      	bpl.n	800c08c <_printf_i+0xbc>
 800c088:	681d      	ldr	r5, [r3, #0]
 800c08a:	e003      	b.n	800c094 <_printf_i+0xc4>
 800c08c:	0645      	lsls	r5, r0, #25
 800c08e:	d5fb      	bpl.n	800c088 <_printf_i+0xb8>
 800c090:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c094:	2d00      	cmp	r5, #0
 800c096:	da03      	bge.n	800c0a0 <_printf_i+0xd0>
 800c098:	232d      	movs	r3, #45	@ 0x2d
 800c09a:	426d      	negs	r5, r5
 800c09c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0a0:	4859      	ldr	r0, [pc, #356]	@ (800c208 <_printf_i+0x238>)
 800c0a2:	230a      	movs	r3, #10
 800c0a4:	e011      	b.n	800c0ca <_printf_i+0xfa>
 800c0a6:	6821      	ldr	r1, [r4, #0]
 800c0a8:	6833      	ldr	r3, [r6, #0]
 800c0aa:	0608      	lsls	r0, r1, #24
 800c0ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0b0:	d402      	bmi.n	800c0b8 <_printf_i+0xe8>
 800c0b2:	0649      	lsls	r1, r1, #25
 800c0b4:	bf48      	it	mi
 800c0b6:	b2ad      	uxthmi	r5, r5
 800c0b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0ba:	4853      	ldr	r0, [pc, #332]	@ (800c208 <_printf_i+0x238>)
 800c0bc:	6033      	str	r3, [r6, #0]
 800c0be:	bf14      	ite	ne
 800c0c0:	230a      	movne	r3, #10
 800c0c2:	2308      	moveq	r3, #8
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0ca:	6866      	ldr	r6, [r4, #4]
 800c0cc:	60a6      	str	r6, [r4, #8]
 800c0ce:	2e00      	cmp	r6, #0
 800c0d0:	bfa2      	ittt	ge
 800c0d2:	6821      	ldrge	r1, [r4, #0]
 800c0d4:	f021 0104 	bicge.w	r1, r1, #4
 800c0d8:	6021      	strge	r1, [r4, #0]
 800c0da:	b90d      	cbnz	r5, 800c0e0 <_printf_i+0x110>
 800c0dc:	2e00      	cmp	r6, #0
 800c0de:	d04b      	beq.n	800c178 <_printf_i+0x1a8>
 800c0e0:	4616      	mov	r6, r2
 800c0e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0e6:	fb03 5711 	mls	r7, r3, r1, r5
 800c0ea:	5dc7      	ldrb	r7, [r0, r7]
 800c0ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0f0:	462f      	mov	r7, r5
 800c0f2:	42bb      	cmp	r3, r7
 800c0f4:	460d      	mov	r5, r1
 800c0f6:	d9f4      	bls.n	800c0e2 <_printf_i+0x112>
 800c0f8:	2b08      	cmp	r3, #8
 800c0fa:	d10b      	bne.n	800c114 <_printf_i+0x144>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	07df      	lsls	r7, r3, #31
 800c100:	d508      	bpl.n	800c114 <_printf_i+0x144>
 800c102:	6923      	ldr	r3, [r4, #16]
 800c104:	6861      	ldr	r1, [r4, #4]
 800c106:	4299      	cmp	r1, r3
 800c108:	bfde      	ittt	le
 800c10a:	2330      	movle	r3, #48	@ 0x30
 800c10c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c110:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c114:	1b92      	subs	r2, r2, r6
 800c116:	6122      	str	r2, [r4, #16]
 800c118:	f8cd a000 	str.w	sl, [sp]
 800c11c:	464b      	mov	r3, r9
 800c11e:	aa03      	add	r2, sp, #12
 800c120:	4621      	mov	r1, r4
 800c122:	4640      	mov	r0, r8
 800c124:	f7ff fee6 	bl	800bef4 <_printf_common>
 800c128:	3001      	adds	r0, #1
 800c12a:	d14a      	bne.n	800c1c2 <_printf_i+0x1f2>
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295
 800c130:	b004      	add	sp, #16
 800c132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	f043 0320 	orr.w	r3, r3, #32
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	4833      	ldr	r0, [pc, #204]	@ (800c20c <_printf_i+0x23c>)
 800c140:	2778      	movs	r7, #120	@ 0x78
 800c142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	6831      	ldr	r1, [r6, #0]
 800c14a:	061f      	lsls	r7, r3, #24
 800c14c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c150:	d402      	bmi.n	800c158 <_printf_i+0x188>
 800c152:	065f      	lsls	r7, r3, #25
 800c154:	bf48      	it	mi
 800c156:	b2ad      	uxthmi	r5, r5
 800c158:	6031      	str	r1, [r6, #0]
 800c15a:	07d9      	lsls	r1, r3, #31
 800c15c:	bf44      	itt	mi
 800c15e:	f043 0320 	orrmi.w	r3, r3, #32
 800c162:	6023      	strmi	r3, [r4, #0]
 800c164:	b11d      	cbz	r5, 800c16e <_printf_i+0x19e>
 800c166:	2310      	movs	r3, #16
 800c168:	e7ac      	b.n	800c0c4 <_printf_i+0xf4>
 800c16a:	4827      	ldr	r0, [pc, #156]	@ (800c208 <_printf_i+0x238>)
 800c16c:	e7e9      	b.n	800c142 <_printf_i+0x172>
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	f023 0320 	bic.w	r3, r3, #32
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	e7f6      	b.n	800c166 <_printf_i+0x196>
 800c178:	4616      	mov	r6, r2
 800c17a:	e7bd      	b.n	800c0f8 <_printf_i+0x128>
 800c17c:	6833      	ldr	r3, [r6, #0]
 800c17e:	6825      	ldr	r5, [r4, #0]
 800c180:	6961      	ldr	r1, [r4, #20]
 800c182:	1d18      	adds	r0, r3, #4
 800c184:	6030      	str	r0, [r6, #0]
 800c186:	062e      	lsls	r6, r5, #24
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	d501      	bpl.n	800c190 <_printf_i+0x1c0>
 800c18c:	6019      	str	r1, [r3, #0]
 800c18e:	e002      	b.n	800c196 <_printf_i+0x1c6>
 800c190:	0668      	lsls	r0, r5, #25
 800c192:	d5fb      	bpl.n	800c18c <_printf_i+0x1bc>
 800c194:	8019      	strh	r1, [r3, #0]
 800c196:	2300      	movs	r3, #0
 800c198:	6123      	str	r3, [r4, #16]
 800c19a:	4616      	mov	r6, r2
 800c19c:	e7bc      	b.n	800c118 <_printf_i+0x148>
 800c19e:	6833      	ldr	r3, [r6, #0]
 800c1a0:	1d1a      	adds	r2, r3, #4
 800c1a2:	6032      	str	r2, [r6, #0]
 800c1a4:	681e      	ldr	r6, [r3, #0]
 800c1a6:	6862      	ldr	r2, [r4, #4]
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7f4 f8a0 	bl	80002f0 <memchr>
 800c1b0:	b108      	cbz	r0, 800c1b6 <_printf_i+0x1e6>
 800c1b2:	1b80      	subs	r0, r0, r6
 800c1b4:	6060      	str	r0, [r4, #4]
 800c1b6:	6863      	ldr	r3, [r4, #4]
 800c1b8:	6123      	str	r3, [r4, #16]
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1c0:	e7aa      	b.n	800c118 <_printf_i+0x148>
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	4632      	mov	r2, r6
 800c1c6:	4649      	mov	r1, r9
 800c1c8:	4640      	mov	r0, r8
 800c1ca:	47d0      	blx	sl
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	d0ad      	beq.n	800c12c <_printf_i+0x15c>
 800c1d0:	6823      	ldr	r3, [r4, #0]
 800c1d2:	079b      	lsls	r3, r3, #30
 800c1d4:	d413      	bmi.n	800c1fe <_printf_i+0x22e>
 800c1d6:	68e0      	ldr	r0, [r4, #12]
 800c1d8:	9b03      	ldr	r3, [sp, #12]
 800c1da:	4298      	cmp	r0, r3
 800c1dc:	bfb8      	it	lt
 800c1de:	4618      	movlt	r0, r3
 800c1e0:	e7a6      	b.n	800c130 <_printf_i+0x160>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	4632      	mov	r2, r6
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	4640      	mov	r0, r8
 800c1ea:	47d0      	blx	sl
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	d09d      	beq.n	800c12c <_printf_i+0x15c>
 800c1f0:	3501      	adds	r5, #1
 800c1f2:	68e3      	ldr	r3, [r4, #12]
 800c1f4:	9903      	ldr	r1, [sp, #12]
 800c1f6:	1a5b      	subs	r3, r3, r1
 800c1f8:	42ab      	cmp	r3, r5
 800c1fa:	dcf2      	bgt.n	800c1e2 <_printf_i+0x212>
 800c1fc:	e7eb      	b.n	800c1d6 <_printf_i+0x206>
 800c1fe:	2500      	movs	r5, #0
 800c200:	f104 0619 	add.w	r6, r4, #25
 800c204:	e7f5      	b.n	800c1f2 <_printf_i+0x222>
 800c206:	bf00      	nop
 800c208:	0800c725 	.word	0x0800c725
 800c20c:	0800c736 	.word	0x0800c736

0800c210 <__sflush_r>:
 800c210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c218:	0716      	lsls	r6, r2, #28
 800c21a:	4605      	mov	r5, r0
 800c21c:	460c      	mov	r4, r1
 800c21e:	d454      	bmi.n	800c2ca <__sflush_r+0xba>
 800c220:	684b      	ldr	r3, [r1, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	dc02      	bgt.n	800c22c <__sflush_r+0x1c>
 800c226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c228:	2b00      	cmp	r3, #0
 800c22a:	dd48      	ble.n	800c2be <__sflush_r+0xae>
 800c22c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c22e:	2e00      	cmp	r6, #0
 800c230:	d045      	beq.n	800c2be <__sflush_r+0xae>
 800c232:	2300      	movs	r3, #0
 800c234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c238:	682f      	ldr	r7, [r5, #0]
 800c23a:	6a21      	ldr	r1, [r4, #32]
 800c23c:	602b      	str	r3, [r5, #0]
 800c23e:	d030      	beq.n	800c2a2 <__sflush_r+0x92>
 800c240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	0759      	lsls	r1, r3, #29
 800c246:	d505      	bpl.n	800c254 <__sflush_r+0x44>
 800c248:	6863      	ldr	r3, [r4, #4]
 800c24a:	1ad2      	subs	r2, r2, r3
 800c24c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c24e:	b10b      	cbz	r3, 800c254 <__sflush_r+0x44>
 800c250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c252:	1ad2      	subs	r2, r2, r3
 800c254:	2300      	movs	r3, #0
 800c256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c258:	6a21      	ldr	r1, [r4, #32]
 800c25a:	4628      	mov	r0, r5
 800c25c:	47b0      	blx	r6
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	d106      	bne.n	800c272 <__sflush_r+0x62>
 800c264:	6829      	ldr	r1, [r5, #0]
 800c266:	291d      	cmp	r1, #29
 800c268:	d82b      	bhi.n	800c2c2 <__sflush_r+0xb2>
 800c26a:	4a2a      	ldr	r2, [pc, #168]	@ (800c314 <__sflush_r+0x104>)
 800c26c:	410a      	asrs	r2, r1
 800c26e:	07d6      	lsls	r6, r2, #31
 800c270:	d427      	bmi.n	800c2c2 <__sflush_r+0xb2>
 800c272:	2200      	movs	r2, #0
 800c274:	6062      	str	r2, [r4, #4]
 800c276:	04d9      	lsls	r1, r3, #19
 800c278:	6922      	ldr	r2, [r4, #16]
 800c27a:	6022      	str	r2, [r4, #0]
 800c27c:	d504      	bpl.n	800c288 <__sflush_r+0x78>
 800c27e:	1c42      	adds	r2, r0, #1
 800c280:	d101      	bne.n	800c286 <__sflush_r+0x76>
 800c282:	682b      	ldr	r3, [r5, #0]
 800c284:	b903      	cbnz	r3, 800c288 <__sflush_r+0x78>
 800c286:	6560      	str	r0, [r4, #84]	@ 0x54
 800c288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c28a:	602f      	str	r7, [r5, #0]
 800c28c:	b1b9      	cbz	r1, 800c2be <__sflush_r+0xae>
 800c28e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c292:	4299      	cmp	r1, r3
 800c294:	d002      	beq.n	800c29c <__sflush_r+0x8c>
 800c296:	4628      	mov	r0, r5
 800c298:	f7ff fbf2 	bl	800ba80 <_free_r>
 800c29c:	2300      	movs	r3, #0
 800c29e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2a0:	e00d      	b.n	800c2be <__sflush_r+0xae>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	47b0      	blx	r6
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	1c50      	adds	r0, r2, #1
 800c2ac:	d1c9      	bne.n	800c242 <__sflush_r+0x32>
 800c2ae:	682b      	ldr	r3, [r5, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d0c6      	beq.n	800c242 <__sflush_r+0x32>
 800c2b4:	2b1d      	cmp	r3, #29
 800c2b6:	d001      	beq.n	800c2bc <__sflush_r+0xac>
 800c2b8:	2b16      	cmp	r3, #22
 800c2ba:	d11e      	bne.n	800c2fa <__sflush_r+0xea>
 800c2bc:	602f      	str	r7, [r5, #0]
 800c2be:	2000      	movs	r0, #0
 800c2c0:	e022      	b.n	800c308 <__sflush_r+0xf8>
 800c2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c6:	b21b      	sxth	r3, r3
 800c2c8:	e01b      	b.n	800c302 <__sflush_r+0xf2>
 800c2ca:	690f      	ldr	r7, [r1, #16]
 800c2cc:	2f00      	cmp	r7, #0
 800c2ce:	d0f6      	beq.n	800c2be <__sflush_r+0xae>
 800c2d0:	0793      	lsls	r3, r2, #30
 800c2d2:	680e      	ldr	r6, [r1, #0]
 800c2d4:	bf08      	it	eq
 800c2d6:	694b      	ldreq	r3, [r1, #20]
 800c2d8:	600f      	str	r7, [r1, #0]
 800c2da:	bf18      	it	ne
 800c2dc:	2300      	movne	r3, #0
 800c2de:	eba6 0807 	sub.w	r8, r6, r7
 800c2e2:	608b      	str	r3, [r1, #8]
 800c2e4:	f1b8 0f00 	cmp.w	r8, #0
 800c2e8:	dde9      	ble.n	800c2be <__sflush_r+0xae>
 800c2ea:	6a21      	ldr	r1, [r4, #32]
 800c2ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c2ee:	4643      	mov	r3, r8
 800c2f0:	463a      	mov	r2, r7
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	47b0      	blx	r6
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	dc08      	bgt.n	800c30c <__sflush_r+0xfc>
 800c2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c302:	81a3      	strh	r3, [r4, #12]
 800c304:	f04f 30ff 	mov.w	r0, #4294967295
 800c308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c30c:	4407      	add	r7, r0
 800c30e:	eba8 0800 	sub.w	r8, r8, r0
 800c312:	e7e7      	b.n	800c2e4 <__sflush_r+0xd4>
 800c314:	dfbffffe 	.word	0xdfbffffe

0800c318 <_fflush_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	690b      	ldr	r3, [r1, #16]
 800c31c:	4605      	mov	r5, r0
 800c31e:	460c      	mov	r4, r1
 800c320:	b913      	cbnz	r3, 800c328 <_fflush_r+0x10>
 800c322:	2500      	movs	r5, #0
 800c324:	4628      	mov	r0, r5
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	b118      	cbz	r0, 800c332 <_fflush_r+0x1a>
 800c32a:	6a03      	ldr	r3, [r0, #32]
 800c32c:	b90b      	cbnz	r3, 800c332 <_fflush_r+0x1a>
 800c32e:	f7ff fa97 	bl	800b860 <__sinit>
 800c332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d0f3      	beq.n	800c322 <_fflush_r+0xa>
 800c33a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c33c:	07d0      	lsls	r0, r2, #31
 800c33e:	d404      	bmi.n	800c34a <_fflush_r+0x32>
 800c340:	0599      	lsls	r1, r3, #22
 800c342:	d402      	bmi.n	800c34a <_fflush_r+0x32>
 800c344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c346:	f7ff fb98 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800c34a:	4628      	mov	r0, r5
 800c34c:	4621      	mov	r1, r4
 800c34e:	f7ff ff5f 	bl	800c210 <__sflush_r>
 800c352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c354:	07da      	lsls	r2, r3, #31
 800c356:	4605      	mov	r5, r0
 800c358:	d4e4      	bmi.n	800c324 <_fflush_r+0xc>
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	059b      	lsls	r3, r3, #22
 800c35e:	d4e1      	bmi.n	800c324 <_fflush_r+0xc>
 800c360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c362:	f7ff fb8b 	bl	800ba7c <__retarget_lock_release_recursive>
 800c366:	e7dd      	b.n	800c324 <_fflush_r+0xc>

0800c368 <_putc_r>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	460d      	mov	r5, r1
 800c36c:	4614      	mov	r4, r2
 800c36e:	4606      	mov	r6, r0
 800c370:	b118      	cbz	r0, 800c37a <_putc_r+0x12>
 800c372:	6a03      	ldr	r3, [r0, #32]
 800c374:	b90b      	cbnz	r3, 800c37a <_putc_r+0x12>
 800c376:	f7ff fa73 	bl	800b860 <__sinit>
 800c37a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c37c:	07d8      	lsls	r0, r3, #31
 800c37e:	d405      	bmi.n	800c38c <_putc_r+0x24>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	0599      	lsls	r1, r3, #22
 800c384:	d402      	bmi.n	800c38c <_putc_r+0x24>
 800c386:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c388:	f7ff fb77 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800c38c:	68a3      	ldr	r3, [r4, #8]
 800c38e:	3b01      	subs	r3, #1
 800c390:	2b00      	cmp	r3, #0
 800c392:	60a3      	str	r3, [r4, #8]
 800c394:	da05      	bge.n	800c3a2 <_putc_r+0x3a>
 800c396:	69a2      	ldr	r2, [r4, #24]
 800c398:	4293      	cmp	r3, r2
 800c39a:	db12      	blt.n	800c3c2 <_putc_r+0x5a>
 800c39c:	b2eb      	uxtb	r3, r5
 800c39e:	2b0a      	cmp	r3, #10
 800c3a0:	d00f      	beq.n	800c3c2 <_putc_r+0x5a>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	1c5a      	adds	r2, r3, #1
 800c3a6:	6022      	str	r2, [r4, #0]
 800c3a8:	701d      	strb	r5, [r3, #0]
 800c3aa:	b2ed      	uxtb	r5, r5
 800c3ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3ae:	07da      	lsls	r2, r3, #31
 800c3b0:	d405      	bmi.n	800c3be <_putc_r+0x56>
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	059b      	lsls	r3, r3, #22
 800c3b6:	d402      	bmi.n	800c3be <_putc_r+0x56>
 800c3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3ba:	f7ff fb5f 	bl	800ba7c <__retarget_lock_release_recursive>
 800c3be:	4628      	mov	r0, r5
 800c3c0:	bd70      	pop	{r4, r5, r6, pc}
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	4622      	mov	r2, r4
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	f000 f802 	bl	800c3d0 <__swbuf_r>
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	e7ed      	b.n	800c3ac <_putc_r+0x44>

0800c3d0 <__swbuf_r>:
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d2:	460e      	mov	r6, r1
 800c3d4:	4614      	mov	r4, r2
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	b118      	cbz	r0, 800c3e2 <__swbuf_r+0x12>
 800c3da:	6a03      	ldr	r3, [r0, #32]
 800c3dc:	b90b      	cbnz	r3, 800c3e2 <__swbuf_r+0x12>
 800c3de:	f7ff fa3f 	bl	800b860 <__sinit>
 800c3e2:	69a3      	ldr	r3, [r4, #24]
 800c3e4:	60a3      	str	r3, [r4, #8]
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	071a      	lsls	r2, r3, #28
 800c3ea:	d501      	bpl.n	800c3f0 <__swbuf_r+0x20>
 800c3ec:	6923      	ldr	r3, [r4, #16]
 800c3ee:	b943      	cbnz	r3, 800c402 <__swbuf_r+0x32>
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 f82a 	bl	800c44c <__swsetup_r>
 800c3f8:	b118      	cbz	r0, 800c402 <__swbuf_r+0x32>
 800c3fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c3fe:	4638      	mov	r0, r7
 800c400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	6922      	ldr	r2, [r4, #16]
 800c406:	1a98      	subs	r0, r3, r2
 800c408:	6963      	ldr	r3, [r4, #20]
 800c40a:	b2f6      	uxtb	r6, r6
 800c40c:	4283      	cmp	r3, r0
 800c40e:	4637      	mov	r7, r6
 800c410:	dc05      	bgt.n	800c41e <__swbuf_r+0x4e>
 800c412:	4621      	mov	r1, r4
 800c414:	4628      	mov	r0, r5
 800c416:	f7ff ff7f 	bl	800c318 <_fflush_r>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d1ed      	bne.n	800c3fa <__swbuf_r+0x2a>
 800c41e:	68a3      	ldr	r3, [r4, #8]
 800c420:	3b01      	subs	r3, #1
 800c422:	60a3      	str	r3, [r4, #8]
 800c424:	6823      	ldr	r3, [r4, #0]
 800c426:	1c5a      	adds	r2, r3, #1
 800c428:	6022      	str	r2, [r4, #0]
 800c42a:	701e      	strb	r6, [r3, #0]
 800c42c:	6962      	ldr	r2, [r4, #20]
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	429a      	cmp	r2, r3
 800c432:	d004      	beq.n	800c43e <__swbuf_r+0x6e>
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	07db      	lsls	r3, r3, #31
 800c438:	d5e1      	bpl.n	800c3fe <__swbuf_r+0x2e>
 800c43a:	2e0a      	cmp	r6, #10
 800c43c:	d1df      	bne.n	800c3fe <__swbuf_r+0x2e>
 800c43e:	4621      	mov	r1, r4
 800c440:	4628      	mov	r0, r5
 800c442:	f7ff ff69 	bl	800c318 <_fflush_r>
 800c446:	2800      	cmp	r0, #0
 800c448:	d0d9      	beq.n	800c3fe <__swbuf_r+0x2e>
 800c44a:	e7d6      	b.n	800c3fa <__swbuf_r+0x2a>

0800c44c <__swsetup_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4b29      	ldr	r3, [pc, #164]	@ (800c4f4 <__swsetup_r+0xa8>)
 800c450:	4605      	mov	r5, r0
 800c452:	6818      	ldr	r0, [r3, #0]
 800c454:	460c      	mov	r4, r1
 800c456:	b118      	cbz	r0, 800c460 <__swsetup_r+0x14>
 800c458:	6a03      	ldr	r3, [r0, #32]
 800c45a:	b90b      	cbnz	r3, 800c460 <__swsetup_r+0x14>
 800c45c:	f7ff fa00 	bl	800b860 <__sinit>
 800c460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c464:	0719      	lsls	r1, r3, #28
 800c466:	d422      	bmi.n	800c4ae <__swsetup_r+0x62>
 800c468:	06da      	lsls	r2, r3, #27
 800c46a:	d407      	bmi.n	800c47c <__swsetup_r+0x30>
 800c46c:	2209      	movs	r2, #9
 800c46e:	602a      	str	r2, [r5, #0]
 800c470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	f04f 30ff 	mov.w	r0, #4294967295
 800c47a:	e033      	b.n	800c4e4 <__swsetup_r+0x98>
 800c47c:	0758      	lsls	r0, r3, #29
 800c47e:	d512      	bpl.n	800c4a6 <__swsetup_r+0x5a>
 800c480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c482:	b141      	cbz	r1, 800c496 <__swsetup_r+0x4a>
 800c484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c488:	4299      	cmp	r1, r3
 800c48a:	d002      	beq.n	800c492 <__swsetup_r+0x46>
 800c48c:	4628      	mov	r0, r5
 800c48e:	f7ff faf7 	bl	800ba80 <_free_r>
 800c492:	2300      	movs	r3, #0
 800c494:	6363      	str	r3, [r4, #52]	@ 0x34
 800c496:	89a3      	ldrh	r3, [r4, #12]
 800c498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c49c:	81a3      	strh	r3, [r4, #12]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	6063      	str	r3, [r4, #4]
 800c4a2:	6923      	ldr	r3, [r4, #16]
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	89a3      	ldrh	r3, [r4, #12]
 800c4a8:	f043 0308 	orr.w	r3, r3, #8
 800c4ac:	81a3      	strh	r3, [r4, #12]
 800c4ae:	6923      	ldr	r3, [r4, #16]
 800c4b0:	b94b      	cbnz	r3, 800c4c6 <__swsetup_r+0x7a>
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4bc:	d003      	beq.n	800c4c6 <__swsetup_r+0x7a>
 800c4be:	4621      	mov	r1, r4
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f000 f84f 	bl	800c564 <__smakebuf_r>
 800c4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ca:	f013 0201 	ands.w	r2, r3, #1
 800c4ce:	d00a      	beq.n	800c4e6 <__swsetup_r+0x9a>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	60a2      	str	r2, [r4, #8]
 800c4d4:	6962      	ldr	r2, [r4, #20]
 800c4d6:	4252      	negs	r2, r2
 800c4d8:	61a2      	str	r2, [r4, #24]
 800c4da:	6922      	ldr	r2, [r4, #16]
 800c4dc:	b942      	cbnz	r2, 800c4f0 <__swsetup_r+0xa4>
 800c4de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4e2:	d1c5      	bne.n	800c470 <__swsetup_r+0x24>
 800c4e4:	bd38      	pop	{r3, r4, r5, pc}
 800c4e6:	0799      	lsls	r1, r3, #30
 800c4e8:	bf58      	it	pl
 800c4ea:	6962      	ldrpl	r2, [r4, #20]
 800c4ec:	60a2      	str	r2, [r4, #8]
 800c4ee:	e7f4      	b.n	800c4da <__swsetup_r+0x8e>
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e7f7      	b.n	800c4e4 <__swsetup_r+0x98>
 800c4f4:	24000110 	.word	0x24000110

0800c4f8 <_sbrk_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d06      	ldr	r5, [pc, #24]	@ (800c514 <_sbrk_r+0x1c>)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4604      	mov	r4, r0
 800c500:	4608      	mov	r0, r1
 800c502:	602b      	str	r3, [r5, #0]
 800c504:	f7f4 ffca 	bl	800149c <_sbrk>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d102      	bne.n	800c512 <_sbrk_r+0x1a>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	b103      	cbz	r3, 800c512 <_sbrk_r+0x1a>
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	240020cc 	.word	0x240020cc

0800c518 <__swhatbuf_r>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	460c      	mov	r4, r1
 800c51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c520:	2900      	cmp	r1, #0
 800c522:	b096      	sub	sp, #88	@ 0x58
 800c524:	4615      	mov	r5, r2
 800c526:	461e      	mov	r6, r3
 800c528:	da0d      	bge.n	800c546 <__swhatbuf_r+0x2e>
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c530:	f04f 0100 	mov.w	r1, #0
 800c534:	bf14      	ite	ne
 800c536:	2340      	movne	r3, #64	@ 0x40
 800c538:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c53c:	2000      	movs	r0, #0
 800c53e:	6031      	str	r1, [r6, #0]
 800c540:	602b      	str	r3, [r5, #0]
 800c542:	b016      	add	sp, #88	@ 0x58
 800c544:	bd70      	pop	{r4, r5, r6, pc}
 800c546:	466a      	mov	r2, sp
 800c548:	f000 f848 	bl	800c5dc <_fstat_r>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	dbec      	blt.n	800c52a <__swhatbuf_r+0x12>
 800c550:	9901      	ldr	r1, [sp, #4]
 800c552:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c556:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c55a:	4259      	negs	r1, r3
 800c55c:	4159      	adcs	r1, r3
 800c55e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c562:	e7eb      	b.n	800c53c <__swhatbuf_r+0x24>

0800c564 <__smakebuf_r>:
 800c564:	898b      	ldrh	r3, [r1, #12]
 800c566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c568:	079d      	lsls	r5, r3, #30
 800c56a:	4606      	mov	r6, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	d507      	bpl.n	800c580 <__smakebuf_r+0x1c>
 800c570:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	6123      	str	r3, [r4, #16]
 800c578:	2301      	movs	r3, #1
 800c57a:	6163      	str	r3, [r4, #20]
 800c57c:	b003      	add	sp, #12
 800c57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c580:	ab01      	add	r3, sp, #4
 800c582:	466a      	mov	r2, sp
 800c584:	f7ff ffc8 	bl	800c518 <__swhatbuf_r>
 800c588:	9f00      	ldr	r7, [sp, #0]
 800c58a:	4605      	mov	r5, r0
 800c58c:	4639      	mov	r1, r7
 800c58e:	4630      	mov	r0, r6
 800c590:	f7ff fae2 	bl	800bb58 <_malloc_r>
 800c594:	b948      	cbnz	r0, 800c5aa <__smakebuf_r+0x46>
 800c596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c59a:	059a      	lsls	r2, r3, #22
 800c59c:	d4ee      	bmi.n	800c57c <__smakebuf_r+0x18>
 800c59e:	f023 0303 	bic.w	r3, r3, #3
 800c5a2:	f043 0302 	orr.w	r3, r3, #2
 800c5a6:	81a3      	strh	r3, [r4, #12]
 800c5a8:	e7e2      	b.n	800c570 <__smakebuf_r+0xc>
 800c5aa:	89a3      	ldrh	r3, [r4, #12]
 800c5ac:	6020      	str	r0, [r4, #0]
 800c5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5b2:	81a3      	strh	r3, [r4, #12]
 800c5b4:	9b01      	ldr	r3, [sp, #4]
 800c5b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5ba:	b15b      	cbz	r3, 800c5d4 <__smakebuf_r+0x70>
 800c5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f000 f81d 	bl	800c600 <_isatty_r>
 800c5c6:	b128      	cbz	r0, 800c5d4 <__smakebuf_r+0x70>
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	f023 0303 	bic.w	r3, r3, #3
 800c5ce:	f043 0301 	orr.w	r3, r3, #1
 800c5d2:	81a3      	strh	r3, [r4, #12]
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	431d      	orrs	r5, r3
 800c5d8:	81a5      	strh	r5, [r4, #12]
 800c5da:	e7cf      	b.n	800c57c <__smakebuf_r+0x18>

0800c5dc <_fstat_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d07      	ldr	r5, [pc, #28]	@ (800c5fc <_fstat_r+0x20>)
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	4608      	mov	r0, r1
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	602b      	str	r3, [r5, #0]
 800c5ea:	f7f4 ff2e 	bl	800144a <_fstat>
 800c5ee:	1c43      	adds	r3, r0, #1
 800c5f0:	d102      	bne.n	800c5f8 <_fstat_r+0x1c>
 800c5f2:	682b      	ldr	r3, [r5, #0]
 800c5f4:	b103      	cbz	r3, 800c5f8 <_fstat_r+0x1c>
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	bd38      	pop	{r3, r4, r5, pc}
 800c5fa:	bf00      	nop
 800c5fc:	240020cc 	.word	0x240020cc

0800c600 <_isatty_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	@ (800c61c <_isatty_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f4 ff2d 	bl	800146a <_isatty>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_isatty_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_isatty_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	240020cc 	.word	0x240020cc

0800c620 <_init>:
 800c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c622:	bf00      	nop
 800c624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c626:	bc08      	pop	{r3}
 800c628:	469e      	mov	lr, r3
 800c62a:	4770      	bx	lr

0800c62c <_fini>:
 800c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62e:	bf00      	nop
 800c630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c632:	bc08      	pop	{r3}
 800c634:	469e      	mov	lr, r3
 800c636:	4770      	bx	lr
