
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c27c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800c52c  0800c52c  0000d52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c618  0800c618  0000d618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c620  0800c620  0000d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c624  0800c624  0000d624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800c628  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f7c  24000160  0800c788  0000e160  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240020dc  0800c788  0000f0dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY
 10 .debug_info   000208a0  00000000  00000000  0000e18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ee7  00000000  00000000  0002ea2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001870  00000000  00000000  00033918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001268  00000000  00000000  00035188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035a43  00000000  00000000  000363f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025065  00000000  00000000  0006be33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b3fa  00000000  00000000  00090e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc292  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006bb4  00000000  00000000  001cc2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001d2e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c514 	.word	0x0800c514

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800c514 	.word	0x0800c514

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	@ 0x40
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8000396:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
 80003c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003c4:	4b48      	ldr	r3, [pc, #288]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003c6:	4a49      	ldr	r2, [pc, #292]	@ (80004ec <MX_FMC_Init+0x15c>)
 80003c8:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003ca:	4b47      	ldr	r3, [pc, #284]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003d0:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003d2:	4b45      	ldr	r3, [pc, #276]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003d8:	4b43      	ldr	r3, [pc, #268]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 80003de:	4b42      	ldr	r3, [pc, #264]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003e4:	4b40      	ldr	r3, [pc, #256]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 80003ea:	4b3f      	ldr	r3, [pc, #252]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 80003f0:	4b3d      	ldr	r3, [pc, #244]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 80003f6:	4b3c      	ldr	r3, [pc, #240]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003f8:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 80003fe:	4b3a      	ldr	r3, [pc, #232]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000400:	2240      	movs	r2, #64	@ 0x40
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 8000404:	4b38      	ldr	r3, [pc, #224]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000406:	2240      	movs	r2, #64	@ 0x40
 8000408:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 800040a:	4b37      	ldr	r3, [pc, #220]	@ (80004e8 <MX_FMC_Init+0x158>)
 800040c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000410:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 0;
 8000412:	4b35      	ldr	r3, [pc, #212]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000418:	4b33      	ldr	r3, [pc, #204]	@ (80004e8 <MX_FMC_Init+0x158>)
 800041a:	2200      	movs	r2, #0
 800041c:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 800041e:	4b32      	ldr	r3, [pc, #200]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000420:	2201      	movs	r2, #1
 8000422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000426:	23fc      	movs	r3, #252	@ 0xfc
 8000428:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 800042a:	23fc      	movs	r3, #252	@ 0xfc
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 800042e:	23fc      	movs	r3, #252	@ 0xfc
 8000430:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 8000432:	23fc      	movs	r3, #252	@ 0xfc
 8000434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000436:	23fc      	movs	r3, #252	@ 0xfc
 8000438:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 800043a:	23fc      	movs	r3, #252	@ 0xfc
 800043c:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000446:	f107 0220 	add.w	r2, r7, #32
 800044a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800044e:	4619      	mov	r1, r3
 8000450:	4825      	ldr	r0, [pc, #148]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000452:	f001 fefb 	bl	800224c <HAL_NAND_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 800045c:	f000 fdb0 	bl	8000fc0 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000460:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000462:	4a24      	ldr	r2, [pc, #144]	@ (80004f4 <MX_FMC_Init+0x164>)
 8000464:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800046c:	4b20      	ldr	r3, [pc, #128]	@ (80004f0 <MX_FMC_Init+0x160>)
 800046e:	2201      	movs	r2, #1
 8000470:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000472:	4b1f      	ldr	r3, [pc, #124]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000474:	2204      	movs	r2, #4
 8000476:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000478:	4b1d      	ldr	r3, [pc, #116]	@ (80004f0 <MX_FMC_Init+0x160>)
 800047a:	2210      	movs	r2, #16
 800047c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800047e:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000480:	2240      	movs	r2, #64	@ 0x40
 8000482:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000484:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000486:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800048a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <MX_FMC_Init+0x160>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000498:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_FMC_Init+0x160>)
 800049c:	2200      	movs	r2, #0
 800049e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004a0:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004a6:	2302      	movs	r3, #2
 80004a8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004aa:	2309      	movs	r3, #9
 80004ac:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004ae:	2306      	movs	r3, #6
 80004b0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004b2:	2309      	movs	r3, #9
 80004b4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004b6:	2303      	movs	r3, #3
 80004b8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004ba:	2303      	movs	r3, #3
 80004bc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004be:	2303      	movs	r3, #3
 80004c0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	480a      	ldr	r0, [pc, #40]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004c8:	f006 fda6 	bl	8007018 <HAL_SDRAM_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80004d2:	f000 fd75 	bl	8000fc0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80004d6:	4908      	ldr	r1, [pc, #32]	@ (80004f8 <MX_FMC_Init+0x168>)
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004da:	f000 fd77 	bl	8000fcc <SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 80004de:	bf00      	nop
 80004e0:	3740      	adds	r7, #64	@ 0x40
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2400018c 	.word	0x2400018c
 80004ec:	52004080 	.word	0x52004080
 80004f0:	240001cc 	.word	0x240001cc
 80004f4:	52004140 	.word	0x52004140
 80004f8:	2400017c 	.word	0x2400017c

080004fc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b0b8      	sub	sp, #224	@ 0xe0
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000512:	4b5c      	ldr	r3, [pc, #368]	@ (8000684 <HAL_FMC_MspInit+0x188>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	f040 80af 	bne.w	800067a <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 800051c:	4b59      	ldr	r3, [pc, #356]	@ (8000684 <HAL_FMC_MspInit+0x188>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	22c0      	movs	r2, #192	@ 0xc0
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f00b f9a5 	bl	800b87a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000534:	f04f 0300 	mov.w	r3, #0
 8000538:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800053c:	2300      	movs	r3, #0
 800053e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	4618      	mov	r0, r3
 8000546:	f004 f95d 	bl	8004804 <HAL_RCCEx_PeriphCLKConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000550:	f000 fd36 	bl	8000fc0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000554:	4b4c      	ldr	r3, [pc, #304]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 8000556:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800055a:	4a4b      	ldr	r2, [pc, #300]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 800055c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000560:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000564:	4b48      	ldr	r3, [pc, #288]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 8000566:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800056a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000572:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000576:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058c:	230c      	movs	r3, #12
 800058e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000592:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000596:	4619      	mov	r1, r3
 8000598:	483c      	ldr	r0, [pc, #240]	@ (800068c <HAL_FMC_MspInit+0x190>)
 800059a:	f001 fa0f 	bl	80019bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800059e:	230d      	movs	r3, #13
 80005a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005b6:	230c      	movs	r3, #12
 80005b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005c0:	4619      	mov	r1, r3
 80005c2:	4833      	ldr	r0, [pc, #204]	@ (8000690 <HAL_FMC_MspInit+0x194>)
 80005c4:	f001 f9fa 	bl	80019bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005c8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005e2:	230c      	movs	r3, #12
 80005e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005ec:	4619      	mov	r1, r3
 80005ee:	4829      	ldr	r0, [pc, #164]	@ (8000694 <HAL_FMC_MspInit+0x198>)
 80005f0:	f001 f9e4 	bl	80019bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005f4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80005f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800060e:	230c      	movs	r3, #12
 8000610:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000614:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000618:	4619      	mov	r1, r3
 800061a:	481f      	ldr	r0, [pc, #124]	@ (8000698 <HAL_FMC_MspInit+0x19c>)
 800061c:	f001 f9ce 	bl	80019bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000620:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 8000624:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800063a:	230c      	movs	r3, #12
 800063c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000640:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000644:	4619      	mov	r1, r3
 8000646:	4815      	ldr	r0, [pc, #84]	@ (800069c <HAL_FMC_MspInit+0x1a0>)
 8000648:	f001 f9b8 	bl	80019bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800064c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000666:	2309      	movs	r3, #9
 8000668:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000670:	4619      	mov	r1, r3
 8000672:	4807      	ldr	r0, [pc, #28]	@ (8000690 <HAL_FMC_MspInit+0x194>)
 8000674:	f001 f9a2 	bl	80019bc <HAL_GPIO_Init>
 8000678:	e000      	b.n	800067c <HAL_FMC_MspInit+0x180>
    return;
 800067a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800067c:	37e0      	adds	r7, #224	@ 0xe0
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000200 	.word	0x24000200
 8000688:	58024400 	.word	0x58024400
 800068c:	58021400 	.word	0x58021400
 8000690:	58020800 	.word	0x58020800
 8000694:	58021800 	.word	0x58021800
 8000698:	58021000 	.word	0x58021000
 800069c:	58020c00 	.word	0x58020c00

080006a0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80006a8:	f7ff ff28 	bl	80004fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006bc:	f7ff ff1e 	bl	80004fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	@ 0x30
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006de:	4b60      	ldr	r3, [pc, #384]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006e4:	4a5e      	ldr	r2, [pc, #376]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000702:	4a57      	ldr	r2, [pc, #348]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800070c:	4b54      	ldr	r3, [pc, #336]	@ (8000860 <MX_GPIO_Init+0x198>)
 800070e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	4b51      	ldr	r3, [pc, #324]	@ (8000860 <MX_GPIO_Init+0x198>)
 800071c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000720:	4a4f      	ldr	r2, [pc, #316]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800072a:	4b4d      	ldr	r3, [pc, #308]	@ (8000860 <MX_GPIO_Init+0x198>)
 800072c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000730:	f003 0320 	and.w	r3, r3, #32
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b49      	ldr	r3, [pc, #292]	@ (8000860 <MX_GPIO_Init+0x198>)
 800073a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800073e:	4a48      	ldr	r2, [pc, #288]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000748:	4b45      	ldr	r3, [pc, #276]	@ (8000860 <MX_GPIO_Init+0x198>)
 800074a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	4b42      	ldr	r3, [pc, #264]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000758:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800075c:	4a40      	ldr	r2, [pc, #256]	@ (8000860 <MX_GPIO_Init+0x198>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000762:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000766:	4b3e      	ldr	r3, [pc, #248]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000768:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800076c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b3a      	ldr	r3, [pc, #232]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000776:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800077a:	4a39      	ldr	r2, [pc, #228]	@ (8000860 <MX_GPIO_Init+0x198>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000786:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000794:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000798:	4a31      	ldr	r2, [pc, #196]	@ (8000860 <MX_GPIO_Init+0x198>)
 800079a:	f043 0308 	orr.w	r3, r3, #8
 800079e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <MX_GPIO_Init+0x198>)
 80007a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2150      	movs	r1, #80	@ 0x50
 80007b4:	482b      	ldr	r0, [pc, #172]	@ (8000864 <MX_GPIO_Init+0x19c>)
 80007b6:	f001 fab1 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c0:	4829      	ldr	r0, [pc, #164]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 80007c2:	f001 faab 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	21c0      	movs	r1, #192	@ 0xc0
 80007ca:	4828      	ldr	r0, [pc, #160]	@ (800086c <MX_GPIO_Init+0x1a4>)
 80007cc:	f001 faa6 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007d0:	232c      	movs	r3, #44	@ 0x2c
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4820      	ldr	r0, [pc, #128]	@ (8000864 <MX_GPIO_Init+0x19c>)
 80007e4:	f001 f8ea 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007e8:	2350      	movs	r3, #80	@ 0x50
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4819      	ldr	r0, [pc, #100]	@ (8000864 <MX_GPIO_Init+0x19c>)
 8000800:	f001 f8dc 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 800081e:	f001 f8cd 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000822:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 8000838:	f001 f8c0 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083c:	23c0      	movs	r3, #192	@ 0xc0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <MX_GPIO_Init+0x1a4>)
 8000854:	f001 f8b2 	bl	80019bc <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3730      	adds	r7, #48	@ 0x30
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58024400 	.word	0x58024400
 8000864:	58021000 	.word	0x58021000
 8000868:	58020800 	.word	0x58020800
 800086c:	58021400 	.word	0x58021400

08000870 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	f001 fa6a 	bl	8001d84 <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 fb83 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008be:	f001 fafd 	bl	8001ebc <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f000 fb7a 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008d0:	f001 fb3f 	bl	8001f52 <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 fb71 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000204 	.word	0x24000204
 80008e8:	40005400 	.word	0x40005400
 80008ec:	20b0ccff 	.word	0x20b0ccff

080008f0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_I2C2_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <MX_I2C2_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_I2C2_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <MX_I2C2_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <MX_I2C2_Init+0x74>)
 800092c:	f001 fa2a 	bl	8001d84 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fb43 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <MX_I2C2_Init+0x74>)
 800093e:	f001 fabd 	bl	8001ebc <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fb3a 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000950:	f001 faff 	bl	8001f52 <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fb31 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	24000258 	.word	0x24000258
 8000968:	40005800 	.word	0x40005800
 800096c:	20b0ccff 	.word	0x20b0ccff

08000970 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0bc      	sub	sp, #240	@ 0xf0
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	22c0      	movs	r2, #192	@ 0xc0
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f00a ff72 	bl	800b87a <memset>
  if(i2cHandle->Instance==I2C1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a4d      	ldr	r2, [pc, #308]	@ (8000ad0 <HAL_I2C_MspInit+0x160>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d146      	bne.n	8000a2e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009a0:	f04f 0208 	mov.w	r2, #8
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 ff24 	bl	8004804 <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009c2:	f000 fafd 	bl	8000fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b43      	ldr	r3, [pc, #268]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009cc:	4a41      	ldr	r2, [pc, #260]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009d6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e4:	23c0      	movs	r3, #192	@ 0xc0
 80009e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a06:	4619      	mov	r1, r3
 8000a08:	4833      	ldr	r0, [pc, #204]	@ (8000ad8 <HAL_I2C_MspInit+0x168>)
 8000a0a:	f000 ffd7 	bl	80019bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a10:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a14:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a20:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a2c:	e04b      	b.n	8000ac6 <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2a      	ldr	r2, [pc, #168]	@ (8000adc <HAL_I2C_MspInit+0x16c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d146      	bne.n	8000ac6 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a38:	f04f 0208 	mov.w	r2, #8
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4a:	f107 0318 	add.w	r3, r7, #24
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fed8 	bl	8004804 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a5a:	f000 fab1 	bl	8000fc0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a64:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a84:	2312      	movs	r3, #18
 8000a86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a96:	2304      	movs	r3, #4
 8000a98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <HAL_I2C_MspInit+0x168>)
 8000aa4:	f000 ff8a 	bl	80019bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000aaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000aae:	4a09      	ldr	r2, [pc, #36]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000ab0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000aba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
}
 8000ac6:	bf00      	nop
 8000ac8:	37f0      	adds	r7, #240	@ 0xf0
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	58020400 	.word	0x58020400
 8000adc:	40005800 	.word	0x40005800

08000ae0 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <MX_I2S1_Init+0x64>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000aec:	2206      	movs	r2, #6
 8000aee:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000af8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afc:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b04:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b08:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b2e:	f001 fa5d 	bl	8001fec <HAL_I2S_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 fa42 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	240002ac 	.word	0x240002ac
 8000b44:	40013000 	.word	0x40013000

08000b48 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <MX_I2S2_Init+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b6e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b72:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b94:	f001 fa2a 	bl	8001fec <HAL_I2S_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000b9e:	f000 fa0f 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	24000300 	.word	0x24000300
 8000bac:	40003800 	.word	0x40003800

08000bb0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0be      	sub	sp, #248	@ 0xf8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	22c0      	movs	r2, #192	@ 0xc0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00a fe52 	bl	800b87a <memset>
  if(i2sHandle->Instance==SPI1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a71      	ldr	r2, [pc, #452]	@ (8000da0 <HAL_I2S_MspInit+0x1f0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d16b      	bne.n	8000cb8 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000be0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fe04 	bl	8004804 <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000c02:	f000 f9dd 	bl	8000fc0 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	4b67      	ldr	r3, [pc, #412]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c08:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c0c:	4a65      	ldr	r2, [pc, #404]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c12:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c16:	4b63      	ldr	r3, [pc, #396]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c18:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b5f      	ldr	r3, [pc, #380]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c34:	4b5b      	ldr	r3, [pc, #364]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b58      	ldr	r3, [pc, #352]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c48:	4a56      	ldr	r2, [pc, #344]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c52:	4b54      	ldr	r3, [pc, #336]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c60:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4848      	ldr	r0, [pc, #288]	@ (8000da8 <HAL_I2S_MspInit+0x1f8>)
 8000c88:	f000 fe98 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	483e      	ldr	r0, [pc, #248]	@ (8000dac <HAL_I2S_MspInit+0x1fc>)
 8000cb2:	f000 fe83 	bl	80019bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cb6:	e06f      	b.n	8000d98 <HAL_I2S_MspInit+0x1e8>
  else if(i2sHandle->Instance==SPI2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8000db0 <HAL_I2S_MspInit+0x200>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d16a      	bne.n	8000d98 <HAL_I2S_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fd93 	bl	8004804 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_I2S_MspInit+0x138>
      Error_Handler();
 8000ce4:	f000 f96c 	bl	8000fc0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cee:	4a2d      	ldr	r2, [pc, #180]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cfa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d0c:	4a25      	ldr	r2, [pc, #148]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d16:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d42:	2342      	movs	r3, #66	@ 0x42
 8000d44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4811      	ldr	r0, [pc, #68]	@ (8000dac <HAL_I2S_MspInit+0x1fc>)
 8000d68:	f000 fe28 	bl	80019bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d86:	2305      	movs	r3, #5
 8000d88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <HAL_I2S_MspInit+0x204>)
 8000d94:	f000 fe12 	bl	80019bc <HAL_GPIO_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	37f8      	adds	r7, #248	@ 0xf8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013000 	.word	0x40013000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020000 	.word	0x58020000
 8000dac:	58020800 	.word	0x58020800
 8000db0:	40003800 	.word	0x40003800
 8000db4:	58020400 	.word	0x58020400

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b08e      	sub	sp, #56	@ 0x38
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int buffer = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dc2:	f000 f8d1 	bl	8000f68 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fbbb 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f855 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f7ff fc7b 	bl	80006c8 <MX_GPIO_Init>
  MX_FMC_Init();
 8000dd2:	f7ff fadd 	bl	8000390 <MX_FMC_Init>
  MX_I2S1_Init();
 8000dd6:	f7ff fe83 	bl	8000ae0 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000dda:	f7ff feb5 	bl	8000b48 <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000dde:	f000 f95b 	bl	8001098 <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000de2:	f7ff fd45 	bl	8000870 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000de6:	f7ff fd83 	bl	80008f0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000dea:	f009 feb3 	bl	800ab54 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Write to starting address
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df2:	481e      	ldr	r0, [pc, #120]	@ (8000e6c <main+0xb4>)
 8000df4:	f000 ffab 	bl	8001d4e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000df8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dfc:	f000 fc32 	bl	8001664 <HAL_Delay>
	  *(__IO uint32_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = 42;
 8000e00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e04:	222a      	movs	r2, #42	@ 0x2a
 8000e06:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < 4; i++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e0c:	e002      	b.n	8000e14 <main+0x5c>
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e10:	3301      	adds	r3, #1
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	ddf9      	ble.n	8000e0e <main+0x56>
		 // *(__IO uint32_t*) (0xC4000000 + 4*i) = 42+i;
	  }
	  for (int i = 0; i < 4; i++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e1e:	e002      	b.n	8000e26 <main+0x6e>
 8000e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e22:	3301      	adds	r3, #1
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	ddf9      	ble.n	8000e20 <main+0x68>
	  	 // buffer = *(__IO uint32_t*) (0xC4000000 + 4*i);
	  }


	   if (buffer == 42) {
 8000e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e30:	d10e      	bne.n	8000e50 <main+0x98>
		   uint8_t str[] = "Memory Success\r\n";
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <main+0xb8>)
 8000e34:	f107 0418 	add.w	r4, r7, #24
 8000e38:	461d      	mov	r5, r3
 8000e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3e:	682b      	ldr	r3, [r5, #0]
 8000e40:	7023      	strb	r3, [r4, #0]
		   CDC_Transmit_HS(str, sizeof(str));
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2111      	movs	r1, #17
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f009 ff43 	bl	800acd4 <CDC_Transmit_HS>
 8000e4e:	e7ce      	b.n	8000dee <main+0x36>
	   } else {
		   uint8_t str[] = "Memory Failure\r\n";
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <main+0xbc>)
 8000e52:	1d3c      	adds	r4, r7, #4
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	682b      	ldr	r3, [r5, #0]
 8000e5c:	7023      	strb	r3, [r4, #0]
		   CDC_Transmit_HS(str, sizeof(str));
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2111      	movs	r1, #17
 8000e62:	4618      	mov	r0, r3
 8000e64:	f009 ff36 	bl	800acd4 <CDC_Transmit_HS>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e68:	e7c1      	b.n	8000dee <main+0x36>
 8000e6a:	bf00      	nop
 8000e6c:	58020800 	.word	0x58020800
 8000e70:	0800c52c 	.word	0x0800c52c
 8000e74:	0800c540 	.word	0x0800c540

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09c      	sub	sp, #112	@ 0x70
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e82:	224c      	movs	r2, #76	@ 0x4c
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f00a fcf7 	bl	800b87a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2220      	movs	r2, #32
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f00a fcf1 	bl	800b87a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e98:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <SystemClock_Config+0xe8>)
 8000e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f002 fcbc 	bl	8003820 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <SystemClock_Config+0xec>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8000f64 <SystemClock_Config+0xec>)
 8000eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <SystemClock_Config+0xec>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ec4:	bf00      	nop
 8000ec6:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <SystemClock_Config+0xec>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ed2:	d1f8      	bne.n	8000ec6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000ed4:	2322      	movs	r3, #34	@ 0x22
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000edc:	2340      	movs	r3, #64	@ 0x40
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000ef0:	2323      	movs	r3, #35	@ 0x23
 8000ef2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f00:	230c      	movs	r3, #12
 8000f02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fccf 	bl	80038b4 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000f1c:	f000 f850 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	233f      	movs	r3, #63	@ 0x3f
 8000f22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2303      	movs	r3, #3
 8000f26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f30:	2340      	movs	r3, #64	@ 0x40
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f34:	2340      	movs	r3, #64	@ 0x40
 8000f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f3e:	2340      	movs	r3, #64	@ 0x40
 8000f40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2106      	movs	r1, #6
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 f8e6 	bl	8004118 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000f52:	f000 f835 	bl	8000fc0 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3770      	adds	r7, #112	@ 0x70
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	58024400 	.word	0x58024400
 8000f64:	58024800 	.word	0x58024800

08000f68 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f7a:	f000 fca7 	bl	80018cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f8a:	231f      	movs	r3, #31
 8000f8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f8e:	2387      	movs	r3, #135	@ 0x87
 8000f90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f96:	2300      	movs	r3, #0
 8000f98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000faa:	463b      	mov	r3, r7
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fcc5 	bl	800193c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f000 fca2 	bl	80018fc <HAL_MPU_Enable>

}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <Error_Handler+0x8>

08000fcc <SDRAM_Initialization_Sequence>:
 * 6 Min of 2 auto-refresh cycles
 *
 */
#include "sdram_init.h"

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	 __IO uint32_t tmpmrd =0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
	/* Step 2:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000ff2:	22ff      	movs	r2, #255	@ 0xff
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f006 f84a 	bl	8007090 <HAL_SDRAM_SendCommand>

	  /* Step 3: Insert 200 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fb31 	bl	8001664 <HAL_Delay>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2202      	movs	r2, #2
 8001006:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2210      	movs	r2, #16
 800100c:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800101a:	22ff      	movs	r2, #255	@ 0xff
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f006 f836 	bl	8007090 <HAL_SDRAM_SendCommand>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2210      	movs	r2, #16
 800102e:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2201      	movs	r2, #1
 8001034:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800103c:	22ff      	movs	r2, #255	@ 0xff
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f006 f825 	bl	8007090 <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001046:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800104a:	60fb      	str	r3, [r7, #12]
	                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_3           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2204      	movs	r2, #4
 8001050:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2210      	movs	r2, #16
 8001056:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001064:	22ff      	movs	r2, #255	@ 0xff
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f006 f811 	bl	8007090 <HAL_SDRAM_SendCommand>

	  /* Step 6 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2203      	movs	r2, #3
 8001072:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2210      	movs	r2, #16
 8001078:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 2;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2202      	movs	r2, #2
 800107e:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]

	  /* Send the command twice*/
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001086:	22ff      	movs	r2, #255	@ 0xff
 8001088:	6839      	ldr	r1, [r7, #0]
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f006 f800 	bl	8007090 <HAL_SDRAM_SendCommand>
	  //HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);

}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 800109e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80010a2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_SPDIFRX_Init+0x6c>)
 80010f2:	f006 f803 	bl	80070fc <HAL_SPDIFRX_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 80010fc:	f7ff ff60 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	24000354 	.word	0x24000354

08001108 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0ba      	sub	sp, #232	@ 0xe8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	22c0      	movs	r2, #192	@ 0xc0
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00a fba6 	bl	800b87a <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8001136:	d141      	bne.n	80011bc <HAL_SPDIFRX_MspInit+0xb4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001138:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8001144:	2300      	movs	r3, #0
 8001146:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4618      	mov	r0, r3
 800114e:	f003 fb59 	bl	8004804 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8001158:	f7ff ff32 	bl	8000fc0 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_SPDIFRX_MspInit+0xbc>)
 800115e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001162:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <HAL_SPDIFRX_MspInit+0xbc>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001168:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HAL_SPDIFRX_MspInit+0xbc>)
 800116e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_SPDIFRX_MspInit+0xbc>)
 800117c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001180:	4a10      	ldr	r2, [pc, #64]	@ (80011c4 <HAL_SPDIFRX_MspInit+0xbc>)
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_SPDIFRX_MspInit+0xbc>)
 800118c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <HAL_SPDIFRX_MspInit+0xc0>)
 80011b8:	f000 fc00 	bl	80019bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	37e8      	adds	r7, #232	@ 0xe8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58020c00 	.word	0x58020c00

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_MspInit+0x30>)
 80011d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011d8:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <HAL_MspInit+0x30>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_MspInit+0x30>)
 80011e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	58024400 	.word	0x58024400

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800120c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <HardFault_Handler+0x1c>)
 8001212:	f000 fd9c 	bl	8001d4e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001216:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800121a:	f000 fa23 	bl	8001664 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800121e:	bf00      	nop
 8001220:	e7f4      	b.n	800120c <HardFault_Handler+0x4>
 8001222:	bf00      	nop
 8001224:	58020800 	.word	0x58020800

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <MemManage_Handler+0x4>

08001230 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <UsageFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126e:	f000 f9d9 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800127e:	f001 f970 	bl	8002562 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2400188c 	.word	0x2400188c

0800128c <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001292:	f001 f966 	bl	8002562 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2400188c 	.word	0x2400188c

080012a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <OTG_HS_IRQHandler+0x10>)
 80012a6:	f001 f95c 	bl	8002562 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2400188c 	.word	0x2400188c

080012b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e00a      	b.n	80012dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c6:	f3af 8000 	nop.w
 80012ca:	4601      	mov	r1, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf0      	blt.n	80012c6 <_read+0x12>
  }

  return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e009      	b.n	8001314 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	dbf1      	blt.n	8001300 <_write+0x12>
  }
  return len;
 800131c:	687b      	ldr	r3, [r7, #4]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_close>:

int _close(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800134e:	605a      	str	r2, [r3, #4]
  return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_isatty>:

int _isatty(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f00a faaa 	bl	800b918 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	24100000 	.word	0x24100000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	240003a4 	.word	0x240003a4
 80013f8:	240020e0 	.word	0x240020e0

080013fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001400:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <SystemInit+0xd0>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001406:	4a31      	ldr	r2, [pc, #196]	@ (80014cc <SystemInit+0xd0>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001410:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <SystemInit+0xd4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	2b02      	cmp	r3, #2
 800141a:	d807      	bhi.n	800142c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800141c:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <SystemInit+0xd4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 030f 	bic.w	r3, r3, #15
 8001424:	4a2a      	ldr	r2, [pc, #168]	@ (80014d0 <SystemInit+0xd4>)
 8001426:	f043 0303 	orr.w	r3, r3, #3
 800142a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800142c:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <SystemInit+0xd8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a28      	ldr	r2, [pc, #160]	@ (80014d4 <SystemInit+0xd8>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <SystemInit+0xd8>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <SystemInit+0xd8>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4924      	ldr	r1, [pc, #144]	@ (80014d4 <SystemInit+0xd8>)
 8001444:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <SystemInit+0xdc>)
 8001446:	4013      	ands	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <SystemInit+0xd4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <SystemInit+0xd4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 030f 	bic.w	r3, r3, #15
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <SystemInit+0xd4>)
 8001460:	f043 0303 	orr.w	r3, r3, #3
 8001464:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <SystemInit+0xd8>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <SystemInit+0xd8>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <SystemInit+0xd8>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <SystemInit+0xd8>)
 800147a:	4a18      	ldr	r2, [pc, #96]	@ (80014dc <SystemInit+0xe0>)
 800147c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <SystemInit+0xd8>)
 8001480:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <SystemInit+0xe4>)
 8001482:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <SystemInit+0xd8>)
 8001486:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <SystemInit+0xe8>)
 8001488:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <SystemInit+0xd8>)
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <SystemInit+0xd8>)
 8001492:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <SystemInit+0xe8>)
 8001494:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <SystemInit+0xd8>)
 8001498:	2200      	movs	r2, #0
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800149c:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <SystemInit+0xd8>)
 800149e:	4a11      	ldr	r2, [pc, #68]	@ (80014e4 <SystemInit+0xe8>)
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <SystemInit+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <SystemInit+0xd8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a09      	ldr	r2, [pc, #36]	@ (80014d4 <SystemInit+0xd8>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <SystemInit+0xd8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <SystemInit+0xec>)
 80014bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	52002000 	.word	0x52002000
 80014d4:	58024400 	.word	0x58024400
 80014d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80014dc:	02020200 	.word	0x02020200
 80014e0:	01ff0000 	.word	0x01ff0000
 80014e4:	01010280 	.word	0x01010280
 80014e8:	52004000 	.word	0x52004000

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f0:	f7ff ff84 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	@ (800152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	@ (8001538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151a:	f00a fa03 	bl	800b924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff fc4b 	bl	8000db8 <main>
  bx  lr
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001528:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800152c:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8001530:	0800c628 	.word	0x0800c628
  ldr r2, =_sbss
 8001534:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8001538:	240020dc 	.word	0x240020dc

0800153c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f980 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800154c:	f002 ff9a 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8001550:	4602      	mov	r2, r0
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	4913      	ldr	r1, [pc, #76]	@ (80015ac <HAL_Init+0x6c>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_Init+0x68>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	4a0e      	ldr	r2, [pc, #56]	@ (80015ac <HAL_Init+0x6c>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	4a0b      	ldr	r2, [pc, #44]	@ (80015b0 <HAL_Init+0x70>)
 8001582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_Init+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f814 	bl	80015b8 <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e002      	b.n	80015a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159a:	f7ff fe17 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024400 	.word	0x58024400
 80015ac:	0800c5d4 	.word	0x0800c5d4
 80015b0:	24000004 	.word	0x24000004
 80015b4:	24000000 	.word	0x24000000

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_InitTick+0x60>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e021      	b.n	8001610 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <HAL_InitTick+0x64>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_InitTick+0x60>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f965 	bl	80018b2 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 f92f 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	@ (8001620 <HAL_InitTick+0x68>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2400000c 	.word	0x2400000c
 800161c:	24000000 	.word	0x24000000
 8001620:	24000008 	.word	0x24000008

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2400000c 	.word	0x2400000c
 8001648:	240003a8 	.word	0x240003a8

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	240003a8 	.word	0x240003a8

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2400000c 	.word	0x2400000c

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <__NVIC_SetPriorityGrouping+0x40>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x40>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	05fa0000 	.word	0x05fa0000

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	@ (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff29 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff40 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff90 	bl	80017a0 <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5f 	bl	800174c <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff33 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa4 	bl	8001808 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018d0:	f3bf 8f5f 	dmb	sy
}
 80018d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_MPU_Disable+0x28>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	4a06      	ldr	r2, [pc, #24]	@ (80018f4 <HAL_MPU_Disable+0x28>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_MPU_Disable+0x2c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00
 80018f8:	e000ed90 	.word	0xe000ed90

080018fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001904:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_MPU_Enable+0x38>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_MPU_Enable+0x3c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_MPU_Enable+0x3c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001918:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800191a:	f3bf 8f4f 	dsb	sy
}
 800191e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001920:	f3bf 8f6f 	isb	sy
}
 8001924:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed90 	.word	0xe000ed90
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	785a      	ldrb	r2, [r3, #1]
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
 800194a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001958:	4a17      	ldr	r2, [pc, #92]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7b1b      	ldrb	r3, [r3, #12]
 8001964:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7adb      	ldrb	r3, [r3, #11]
 800196a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800196c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7a9b      	ldrb	r3, [r3, #10]
 8001972:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001974:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b5b      	ldrb	r3, [r3, #13]
 800197a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800197c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7b9b      	ldrb	r3, [r3, #14]
 8001982:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001984:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7bdb      	ldrb	r3, [r3, #15]
 800198a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800198c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7a5b      	ldrb	r3, [r3, #9]
 8001992:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001994:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7a1b      	ldrb	r3, [r3, #8]
 800199a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800199c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a8:	6113      	str	r3, [r2, #16]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed90 	.word	0xe000ed90

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	@ 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019ca:	4b89      	ldr	r3, [pc, #548]	@ (8001bf0 <HAL_GPIO_Init+0x234>)
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ce:	e194      	b.n	8001cfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8186 	beq.w	8001cf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x44>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d017      	beq.n	8001a9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d123      	bne.n	8001af2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	69b9      	ldr	r1, [r7, #24]
 8001aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0203 	and.w	r2, r3, #3
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80e0 	beq.w	8001cf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b34:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <HAL_GPIO_Init+0x238>)
 8001b36:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf4 <HAL_GPIO_Init+0x238>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001b44:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <HAL_GPIO_Init+0x238>)
 8001b46:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a29      	ldr	r2, [pc, #164]	@ (8001bf8 <HAL_GPIO_Init+0x23c>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <HAL_GPIO_Init+0x240>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d052      	beq.n	8001c24 <HAL_GPIO_Init+0x268>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <HAL_GPIO_Init+0x244>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d031      	beq.n	8001bea <HAL_GPIO_Init+0x22e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1e      	ldr	r2, [pc, #120]	@ (8001c04 <HAL_GPIO_Init+0x248>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d02b      	beq.n	8001be6 <HAL_GPIO_Init+0x22a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	@ (8001c08 <HAL_GPIO_Init+0x24c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d025      	beq.n	8001be2 <HAL_GPIO_Init+0x226>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a1c      	ldr	r2, [pc, #112]	@ (8001c0c <HAL_GPIO_Init+0x250>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01f      	beq.n	8001bde <HAL_GPIO_Init+0x222>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c10 <HAL_GPIO_Init+0x254>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x21e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c14 <HAL_GPIO_Init+0x258>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	@ (8001c18 <HAL_GPIO_Init+0x25c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x216>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a18      	ldr	r2, [pc, #96]	@ (8001c1c <HAL_GPIO_Init+0x260>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x212>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <HAL_GPIO_Init+0x264>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x20e>
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	e02d      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001bca:	230a      	movs	r3, #10
 8001bcc:	e02b      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001bce:	2308      	movs	r3, #8
 8001bd0:	e029      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e027      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e025      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001bda:	2305      	movs	r3, #5
 8001bdc:	e023      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001bde:	2304      	movs	r3, #4
 8001be0:	e021      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e01f      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e01d      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e01b      	b.n	8001c26 <HAL_GPIO_Init+0x26a>
 8001bee:	bf00      	nop
 8001bf0:	58000080 	.word	0x58000080
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	58000400 	.word	0x58000400
 8001bfc:	58020000 	.word	0x58020000
 8001c00:	58020400 	.word	0x58020400
 8001c04:	58020800 	.word	0x58020800
 8001c08:	58020c00 	.word	0x58020c00
 8001c0c:	58021000 	.word	0x58021000
 8001c10:	58021400 	.word	0x58021400
 8001c14:	58021800 	.word	0x58021800
 8001c18:	58021c00 	.word	0x58021c00
 8001c1c:	58022000 	.word	0x58022000
 8001c20:	58022400 	.word	0x58022400
 8001c24:	2300      	movs	r3, #0
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c36:	4938      	ldr	r1, [pc, #224]	@ (8001d18 <HAL_GPIO_Init+0x35c>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f ae63 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3724      	adds	r7, #36	@ 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	58000400 	.word	0x58000400

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d38:	e003      	b.n	8001d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d60:	887a      	ldrh	r2, [r7, #2]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	041a      	lsls	r2, r3, #16
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	400b      	ands	r3, r1
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e08b      	b.n	8001eae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fde0 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	@ 0x24
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001de4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e006      	b.n	8001e0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d108      	bne.n	8001e26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	e007      	b.n	8001e36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <HAL_I2C_Init+0x134>)
 8001e42:	430b      	orrs	r3, r1
 8001e44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69d9      	ldr	r1, [r3, #28]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	02008000 	.word	0x02008000

08001ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d138      	bne.n	8001f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e032      	b.n	8001f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	@ 0x24
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d139      	bne.n	8001fdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e033      	b.n	8001fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2224      	movs	r2, #36	@ 0x24
 8001f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e11a      	b.n	8002234 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fdcc 	bl	8000bb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d008      	beq.n	8002060 <HAL_I2S_Init+0x74>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d004      	beq.n	8002060 <HAL_I2S_Init+0x74>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b0a      	cmp	r3, #10
 800205c:	f040 8094 	bne.w	8002188 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d067      	beq.n	8002138 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8002070:	2302      	movs	r3, #2
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e001      	b.n	800207a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002076:	2301      	movs	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b30      	cmp	r3, #48	@ 0x30
 8002080:	d003      	beq.n	800208a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002086:	2bb0      	cmp	r3, #176	@ 0xb0
 8002088:	d102      	bne.n	8002090 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800208a:	2301      	movs	r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	e001      	b.n	8002094 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a68      	ldr	r2, [pc, #416]	@ (800223c <HAL_I2S_Init+0x250>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d107      	bne.n	80020ae <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 800209e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	f003 fd6b 	bl	8005b80 <HAL_RCCEx_GetPeriphCLKFreq>
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	e006      	b.n	80020bc <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80020ae:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	f003 fd63 	bl	8005b80 <HAL_RCCEx_GetPeriphCLKFreq>
 80020ba:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020c4:	d113      	bne.n	80020ee <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80020c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	461a      	mov	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	3305      	adds	r3, #5
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e014      	b.n	8002118 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80020ee:	2220      	movs	r2, #32
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	3305      	adds	r3, #5
 8002116:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4a49      	ldr	r2, [pc, #292]	@ (8002240 <HAL_I2S_Init+0x254>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e003      	b.n	8002140 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8002138:	2302      	movs	r3, #2
 800213a:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_I2S_Init+0x160>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d002      	beq.n	8002152 <HAL_I2S_Init+0x166>
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2bff      	cmp	r3, #255	@ 0xff
 8002150:	d907      	bls.n	8002162 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002156:	f043 0210 	orr.w	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e068      	b.n	8002234 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8002168:	2301      	movs	r3, #1
 800216a:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002172:	4b34      	ldr	r3, [pc, #208]	@ (8002244 <HAL_I2S_Init+0x258>)
 8002174:	4013      	ands	r3, r2
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	0411      	lsls	r1, r2, #16
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	0612      	lsls	r2, r2, #24
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <HAL_I2S_Init+0x25c>)
 8002190:	4013      	ands	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6851      	ldr	r1, [r2, #4]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6892      	ldr	r2, [r2, #8]
 800219a:	4311      	orrs	r1, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68d2      	ldr	r2, [r2, #12]
 80021a0:	4311      	orrs	r1, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6992      	ldr	r2, [r2, #24]
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6a12      	ldr	r2, [r2, #32]
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6912      	ldr	r2, [r2, #16]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80021ce:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021de:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d007      	beq.n	800220e <HAL_I2S_Init+0x222>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b06      	cmp	r3, #6
 8002204:	d003      	beq.n	800220e <HAL_I2S_Init+0x222>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b0a      	cmp	r3, #10
 800220c:	d10a      	bne.n	8002224 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	58001400 	.word	0x58001400
 8002240:	cccccccd 	.word	0xcccccccd
 8002244:	fe00ffff 	.word	0xfe00ffff
 8002248:	fdff9040 	.word	0xfdff9040

0800224c <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e037      	b.n	80022d2 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7fe fa12 	bl	80006a0 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3304      	adds	r3, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f004 ffa6 	bl	80071d8 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	461a      	mov	r2, r3
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	f004 ffc8 	bl	800722c <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	461a      	mov	r2, r3
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f004 ffdd 	bl	8007266 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0204 	orr.w	r2, r2, #4
 80022ba:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80022bc:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <HAL_NAND_Init+0x90>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a06      	ldr	r2, [pc, #24]	@ (80022dc <HAL_NAND_Init+0x90>)
 80022c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022c6:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	52004000 	.word	0x52004000

080022e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0fe      	b.n	80024f0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f008 fe2c 	bl	800af64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2203      	movs	r2, #3
 8002310:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f005 f9d0 	bl	80076be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7c1a      	ldrb	r2, [r3, #16]
 8002326:	f88d 2000 	strb.w	r2, [sp]
 800232a:	3304      	adds	r3, #4
 800232c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800232e:	f005 f8a1 	bl	8007474 <USB_CoreInit>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0d5      	b.n	80024f0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f005 f9c8 	bl	80076e0 <USB_SetCurrentMode>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2202      	movs	r2, #2
 800235a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0c6      	b.n	80024f0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e04a      	b.n	80023fe <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3315      	adds	r3, #21
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3314      	adds	r3, #20
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	b298      	uxth	r0, r3
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	332e      	adds	r3, #46	@ 0x2e
 80023a4:	4602      	mov	r2, r0
 80023a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3318      	adds	r3, #24
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	331c      	adds	r3, #28
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3320      	adds	r3, #32
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	3324      	adds	r3, #36	@ 0x24
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	3301      	adds	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	791b      	ldrb	r3, [r3, #4]
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	429a      	cmp	r2, r3
 8002406:	d3af      	bcc.n	8002368 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	e044      	b.n	8002498 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	3301      	adds	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	791b      	ldrb	r3, [r3, #4]
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d3b5      	bcc.n	800240e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7c1a      	ldrb	r2, [r3, #16]
 80024aa:	f88d 2000 	strb.w	r2, [sp]
 80024ae:	3304      	adds	r3, #4
 80024b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b2:	f005 f961 	bl	8007778 <USB_DevInit>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e013      	b.n	80024f0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7b1b      	ldrb	r3, [r3, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f001 f96e 	bl	80037c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f006 f9a4 	bl	8008836 <USB_DevDisconnect>

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_PCD_Start+0x1c>
 8002510:	2302      	movs	r3, #2
 8002512:	e022      	b.n	800255a <HAL_PCD_Start+0x62>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002534:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f005 f8ab 	bl	800769c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f006 f952 	bl	80087f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002562:	b590      	push	{r4, r7, lr}
 8002564:	b08d      	sub	sp, #52	@ 0x34
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f006 fa10 	bl	800899e <USB_GetMode>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	f040 84b9 	bne.w	8002ef8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f006 f974 	bl	8008878 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 84af 	beq.w	8002ef6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f006 f961 	bl	8008878 <USB_ReadInterrupts>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d107      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f002 0202 	and.w	r2, r2, #2
 80025ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f006 f94f 	bl	8008878 <USB_ReadInterrupts>
 80025da:	4603      	mov	r3, r0
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d161      	bne.n	80026a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0210 	bic.w	r2, r2, #16
 80025f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f003 020f 	and.w	r2, r3, #15
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	0c5b      	lsrs	r3, r3, #17
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	2b02      	cmp	r3, #2
 800261e:	d124      	bne.n	800266a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d035      	beq.n	8002698 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263a:	b29b      	uxth	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	6a38      	ldr	r0, [r7, #32]
 8002640:	f005 ff86 	bl	8008550 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002650:	441a      	add	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002662:	441a      	add	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	615a      	str	r2, [r3, #20]
 8002668:	e016      	b.n	8002698 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	0c5b      	lsrs	r3, r3, #17
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	2b06      	cmp	r3, #6
 8002674:	d110      	bne.n	8002698 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800267c:	2208      	movs	r2, #8
 800267e:	4619      	mov	r1, r3
 8002680:	6a38      	ldr	r0, [r7, #32]
 8002682:	f005 ff65 	bl	8008550 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002692:	441a      	add	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0210 	orr.w	r2, r2, #16
 80026a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f006 f8e3 	bl	8008878 <USB_ReadInterrupts>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026bc:	f040 80a7 	bne.w	800280e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f006 f8e8 	bl	800889e <USB_ReadDevAllOutEpInterrupt>
 80026ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80026d0:	e099      	b.n	8002806 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 808e 	beq.w	80027fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f006 f90c 	bl	8008906 <USB_ReadDevOutEPInterrupt>
 80026ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	4413      	add	r3, r2
 8002702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002706:	461a      	mov	r2, r3
 8002708:	2301      	movs	r3, #1
 800270a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800270c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fed0 	bl	80034b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800272a:	461a      	mov	r2, r3
 800272c:	2308      	movs	r3, #8
 800272e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 ffa6 	bl	8003684 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800274e:	461a      	mov	r2, r3
 8002750:	2310      	movs	r3, #16
 8002752:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d030      	beq.n	80027c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002766:	2b80      	cmp	r3, #128	@ 0x80
 8002768:	d109      	bne.n	800277e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002778:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800277c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800277e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	78db      	ldrb	r3, [r3, #3]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d108      	bne.n	80027ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2200      	movs	r2, #0
 80027a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f008 fd33 	bl	800b214 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ba:	461a      	mov	r2, r3
 80027bc:	2302      	movs	r3, #2
 80027be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027d6:	461a      	mov	r2, r3
 80027d8:	2320      	movs	r3, #32
 80027da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027f2:	461a      	mov	r2, r3
 80027f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	3301      	adds	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	f47f af62 	bne.w	80026d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f006 f830 	bl	8008878 <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800281e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002822:	f040 80db 	bne.w	80029dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f006 f851 	bl	80088d2 <USB_ReadDevAllInEpInterrupt>
 8002830:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002836:	e0cd      	b.n	80029d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80c2 	beq.w	80029c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f006 f877 	bl	8008942 <USB_ReadDevInEPInterrupt>
 8002854:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d057      	beq.n	8002910 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	2201      	movs	r2, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	43db      	mvns	r3, r3
 800287a:	69f9      	ldr	r1, [r7, #28]
 800287c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002880:	4013      	ands	r3, r2
 8002882:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002890:	461a      	mov	r2, r3
 8002892:	2301      	movs	r3, #1
 8002894:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	799b      	ldrb	r3, [r3, #6]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d132      	bne.n	8002904 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	3320      	adds	r3, #32
 80028ae:	6819      	ldr	r1, [r3, #0]
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4403      	add	r3, r0
 80028be:	331c      	adds	r3, #28
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4419      	add	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	3320      	adds	r3, #32
 80028d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d113      	bne.n	8002904 <HAL_PCD_IRQHandler+0x3a2>
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3324      	adds	r3, #36	@ 0x24
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d108      	bne.n	8002904 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028fc:	461a      	mov	r2, r3
 80028fe:	2101      	movs	r1, #1
 8002900:	f006 f880 	bl	8008a04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f008 fbfd 	bl	800b10a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002926:	461a      	mov	r2, r3
 8002928:	2308      	movs	r3, #8
 800292a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002942:	461a      	mov	r2, r3
 8002944:	2310      	movs	r3, #16
 8002946:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800295e:	461a      	mov	r2, r3
 8002960:	2340      	movs	r3, #64	@ 0x40
 8002962:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d023      	beq.n	80029b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800296e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002970:	6a38      	ldr	r0, [r7, #32]
 8002972:	f005 f85f 	bl	8007a34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	3310      	adds	r3, #16
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	3304      	adds	r3, #4
 8002988:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f008 fc4a 	bl	800b238 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029b0:	461a      	mov	r2, r3
 80029b2:	2302      	movs	r3, #2
 80029b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fcea 	bl	800339c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	3301      	adds	r3, #1
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f47f af2e 	bne.w	8002838 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f005 ff49 	bl	8008878 <USB_ReadInterrupts>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029f0:	d122      	bne.n	8002a38 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a18:	2100      	movs	r1, #0
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fef4 	bl	8003808 <HAL_PCDEx_LPM_Callback>
 8002a20:	e002      	b.n	8002a28 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f008 fbe8 	bl	800b1f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f005 ff1b 	bl	8008878 <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a4c:	d112      	bne.n	8002a74 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f008 fba4 	bl	800b1ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 fefd 	bl	8008878 <USB_ReadInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a88:	d121      	bne.n	8002ace <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002a98:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	f003 020f 	and.w	r2, r3, #15
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002abe:	2101      	movs	r1, #1
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fea1 	bl	8003808 <HAL_PCDEx_LPM_Callback>
 8002ac6:	e002      	b.n	8002ace <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f008 fb6f 	bl	800b1ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f005 fed0 	bl	8008878 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae2:	f040 80b7 	bne.w	8002c54 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2110      	movs	r1, #16
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 ff97 	bl	8007a34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b0a:	e046      	b.n	8002b9a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b30:	0151      	lsls	r1, r2, #5
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	440a      	add	r2, r1
 8002b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b64:	0151      	lsls	r1, r2, #5
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	440a      	add	r2, r1
 8002b6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b84:	0151      	lsls	r1, r2, #5
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	440a      	add	r2, r1
 8002b8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b96:	3301      	adds	r3, #1
 8002b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	791b      	ldrb	r3, [r3, #4]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d3b2      	bcc.n	8002b0c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bb4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002bb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7bdb      	ldrb	r3, [r3, #15]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd2:	f043 030b 	orr.w	r3, r3, #11
 8002bd6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002be8:	f043 030b 	orr.w	r3, r3, #11
 8002bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bee:	e015      	b.n	8002c1c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002c04:	4313      	orrs	r3, r2
 8002c06:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c16:	f043 030b 	orr.w	r3, r3, #11
 8002c1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f005 fee0 	bl	8008a04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f005 fe0d 	bl	8008878 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c68:	d123      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f005 fea4 	bl	80089bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 ff54 	bl	8007b26 <USB_GetDevSpeed>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681c      	ldr	r4, [r3, #0]
 8002c8a:	f001 fd75 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8002c8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c94:	461a      	mov	r2, r3
 8002c96:	4620      	mov	r0, r4
 8002c98:	f004 fc5e 	bl	8007558 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f008 fa5c 	bl	800b15a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f005 fdde 	bl	8008878 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d10a      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f008 fa39 	bl	800b13e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f002 0208 	and.w	r2, r2, #8
 8002cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f005 fdc9 	bl	8008878 <USB_ReadInterrupts>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b80      	cmp	r3, #128	@ 0x80
 8002cee:	d123      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d00:	e014      	b.n	8002d2c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fb0a 	bl	800333a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	3301      	adds	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	791b      	ldrb	r3, [r3, #4]
 8002d30:	461a      	mov	r2, r3
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d3e4      	bcc.n	8002d02 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f005 fd9b 	bl	8008878 <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d4c:	d13c      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d4e:	2301      	movs	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d52:	e02b      	b.n	8002dac <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3318      	adds	r3, #24
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d115      	bne.n	8002da6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da12      	bge.n	8002da6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3317      	adds	r3, #23
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 faca 	bl	800333a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	3301      	adds	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	791b      	ldrb	r3, [r3, #4]
 8002db0:	461a      	mov	r2, r3
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d3cd      	bcc.n	8002d54 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f005 fd53 	bl	8008878 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ddc:	d156      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dde:	2301      	movs	r3, #1
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de2:	e045      	b.n	8002e70 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d12e      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	da2b      	bge.n	8002e6a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	0c1a      	lsrs	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e1c:	4053      	eors	r3, r2
 8002e1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d121      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e66:	6053      	str	r3, [r2, #4]
            break;
 8002e68:	e008      	b.n	8002e7c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	791b      	ldrb	r3, [r3, #4]
 8002e74:	461a      	mov	r2, r3
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d3b3      	bcc.n	8002de4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f005 fcf1 	bl	8008878 <USB_ReadInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f008 f9da 	bl	800b25c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f005 fcdb 	bl	8008878 <USB_ReadInterrupts>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d115      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f008 f9ca 	bl	800b278 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	e000      	b.n	8002ef8 <HAL_PCD_IRQHandler+0x996>
      return;
 8002ef6:	bf00      	nop
    }
  }
}
 8002ef8:	3734      	adds	r7, #52	@ 0x34
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}

08002efe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_PCD_SetAddress+0x1a>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e012      	b.n	8002f3e <HAL_PCD_SetAddress+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 fc3a 	bl	80087a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	4608      	mov	r0, r1
 8002f50:	4611      	mov	r1, r2
 8002f52:	461a      	mov	r2, r3
 8002f54:	4603      	mov	r3, r0
 8002f56:	70fb      	strb	r3, [r7, #3]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	803b      	strh	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da0f      	bge.n	8002f8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 020f 	and.w	r2, r3, #15
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	3310      	adds	r3, #16
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	705a      	strb	r2, [r3, #1]
 8002f8a:	e00f      	b.n	8002fac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f003 020f 	and.w	r2, r3, #15
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002fb8:	883b      	ldrh	r3, [r7, #0]
 8002fba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	78ba      	ldrb	r2, [r7, #2]
 8002fc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	785b      	ldrb	r3, [r3, #1]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fda:	78bb      	ldrb	r3, [r7, #2]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d102      	bne.n	8002fe6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_PCD_EP_Open+0xae>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e00e      	b.n	8003012 <HAL_PCD_EP_Open+0xcc>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	4618      	mov	r0, r3
 8003004:	f004 fdb4 	bl	8007b70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003010:	7afb      	ldrb	r3, [r7, #11]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da0f      	bge.n	800304e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	f003 020f 	and.w	r2, r3, #15
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	3310      	adds	r3, #16
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	705a      	strb	r2, [r3, #1]
 800304c:	e00f      	b.n	800306e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_PCD_EP_Close+0x6e>
 8003084:	2302      	movs	r3, #2
 8003086:	e00e      	b.n	80030a6 <HAL_PCD_EP_Close+0x8c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68f9      	ldr	r1, [r7, #12]
 8003096:	4618      	mov	r0, r3
 8003098:	f004 fdf2 	bl	8007c80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	460b      	mov	r3, r1
 80030bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030be:	7afb      	ldrb	r3, [r7, #11]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2200      	movs	r2, #0
 80030e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f0:	7afb      	ldrb	r3, [r7, #11]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	799b      	ldrb	r3, [r3, #6]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d102      	bne.n	800310a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	799b      	ldrb	r3, [r3, #6]
 8003112:	461a      	mov	r2, r3
 8003114:	6979      	ldr	r1, [r7, #20]
 8003116:	f004 fe8f 	bl	8007e38 <USB_EPStartXfer>

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 020f 	and.w	r2, r3, #15
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	460b      	mov	r3, r1
 8003162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003164:	7afb      	ldrb	r3, [r7, #11]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3310      	adds	r3, #16
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	3304      	adds	r3, #4
 800317a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2201      	movs	r2, #1
 8003192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003194:	7afb      	ldrb	r3, [r7, #11]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	b2da      	uxtb	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	799b      	ldrb	r3, [r3, #6]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d102      	bne.n	80031ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	799b      	ldrb	r3, [r3, #6]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6979      	ldr	r1, [r7, #20]
 80031ba:	f004 fe3d 	bl	8007e38 <USB_EPStartXfer>

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	7912      	ldrb	r2, [r2, #4]
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e04f      	b.n	8003286 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da0f      	bge.n	800320e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	3310      	adds	r3, #16
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	705a      	strb	r2, [r3, #1]
 800320c:	e00d      	b.n	800322a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_PCD_EP_SetStall+0x82>
 8003246:	2302      	movs	r3, #2
 8003248:	e01d      	b.n	8003286 <HAL_PCD_EP_SetStall+0xbe>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	4618      	mov	r0, r3
 800325a:	f005 f9d1 	bl	8008600 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7999      	ldrb	r1, [r3, #6]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003276:	461a      	mov	r2, r3
 8003278:	f005 fbc4 	bl	8008a04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	7912      	ldrb	r2, [r2, #4]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e042      	b.n	8003332 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da0f      	bge.n	80032d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	3310      	adds	r3, #16
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	705a      	strb	r2, [r3, #1]
 80032d2:	e00f      	b.n	80032f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 020f 	and.w	r2, r3, #15
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_PCD_EP_ClrStall+0x86>
 8003310:	2302      	movs	r3, #2
 8003312:	e00e      	b.n	8003332 <HAL_PCD_EP_ClrStall+0xa4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	4618      	mov	r0, r3
 8003324:	f005 f9da 	bl	80086dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800334a:	2b00      	cmp	r3, #0
 800334c:	da0c      	bge.n	8003368 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	f003 020f 	and.w	r2, r3, #15
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	3310      	adds	r3, #16
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	3304      	adds	r3, #4
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e00c      	b.n	8003382 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 020f 	and.w	r2, r3, #15
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	3304      	adds	r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	4618      	mov	r0, r3
 800338a:	f004 fff9 	bl	8008380 <USB_EPStopXfer>
 800338e:	4603      	mov	r3, r0
 8003390:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003392:	7afb      	ldrb	r3, [r7, #11]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	@ 0x28
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	3310      	adds	r3, #16
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4413      	add	r3, r2
 80033c0:	3304      	adds	r3, #4
 80033c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d901      	bls.n	80033d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e06b      	b.n	80034ac <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d902      	bls.n	80033f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3303      	adds	r3, #3
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f8:	e02a      	b.n	8003450 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	429a      	cmp	r2, r3
 800340e:	d902      	bls.n	8003416 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3303      	adds	r3, #3
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68d9      	ldr	r1, [r3, #12]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	4603      	mov	r3, r0
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f005 f84e 	bl	80084d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	441a      	add	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	429a      	cmp	r2, r3
 8003464:	d809      	bhi.n	800347a <PCD_WriteEmptyTxFifo+0xde>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800346e:	429a      	cmp	r2, r3
 8003470:	d203      	bcs.n	800347a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1bf      	bne.n	80033fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	429a      	cmp	r2, r3
 8003484:	d811      	bhi.n	80034aa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	2201      	movs	r2, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	43db      	mvns	r3, r3
 80034a0:	6939      	ldr	r1, [r7, #16]
 80034a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034a6:	4013      	ands	r3, r2
 80034a8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	333c      	adds	r3, #60	@ 0x3c
 80034cc:	3304      	adds	r3, #4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	799b      	ldrb	r3, [r3, #6]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d17b      	bne.n	80035e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d015      	beq.n	8003520 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4a61      	ldr	r2, [pc, #388]	@ (800367c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	f240 80b9 	bls.w	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80b3 	beq.w	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003516:	461a      	mov	r2, r3
 8003518:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800351c:	6093      	str	r3, [r2, #8]
 800351e:	e0a7      	b.n	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003536:	461a      	mov	r2, r3
 8003538:	2320      	movs	r3, #32
 800353a:	6093      	str	r3, [r2, #8]
 800353c:	e098      	b.n	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8093 	bne.w	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	4a4b      	ldr	r2, [pc, #300]	@ (800367c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d90f      	bls.n	8003572 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003568:	461a      	mov	r2, r3
 800356a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356e:	6093      	str	r3, [r2, #8]
 8003570:	e07e      	b.n	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	0159      	lsls	r1, r3, #5
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	440b      	add	r3, r1
 8003594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d114      	bne.n	80035d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035bc:	461a      	mov	r2, r3
 80035be:	2101      	movs	r1, #1
 80035c0:	f005 fa20 	bl	8008a04 <USB_EP0_OutStart>
 80035c4:	e006      	b.n	80035d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	441a      	add	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f007 fd7a 	bl	800b0d4 <HAL_PCD_DataOutStageCallback>
 80035e0:	e046      	b.n	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4a26      	ldr	r2, [pc, #152]	@ (8003680 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d124      	bne.n	8003634 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003600:	461a      	mov	r2, r3
 8003602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003606:	6093      	str	r3, [r2, #8]
 8003608:	e032      	b.n	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003620:	461a      	mov	r2, r3
 8003622:	2320      	movs	r3, #32
 8003624:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f007 fd51 	bl	800b0d4 <HAL_PCD_DataOutStageCallback>
 8003632:	e01d      	b.n	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d114      	bne.n	8003664 <PCD_EP_OutXfrComplete_int+0x1b0>
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800365c:	461a      	mov	r2, r3
 800365e:	2100      	movs	r1, #0
 8003660:	f005 f9d0 	bl	8008a04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f007 fd32 	bl	800b0d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	4f54300a 	.word	0x4f54300a
 8003680:	4f54310a 	.word	0x4f54310a

08003684 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	333c      	adds	r3, #60	@ 0x3c
 800369c:	3304      	adds	r3, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a15      	ldr	r2, [pc, #84]	@ (800370c <PCD_EP_OutSetupPacket_int+0x88>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d90e      	bls.n	80036d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d0:	461a      	mov	r2, r3
 80036d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f007 fce9 	bl	800b0b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	@ (800370c <PCD_EP_OutSetupPacket_int+0x88>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d90c      	bls.n	8003700 <PCD_EP_OutSetupPacket_int+0x7c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	799b      	ldrb	r3, [r3, #6]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036f8:	461a      	mov	r2, r3
 80036fa:	2101      	movs	r1, #1
 80036fc:	f005 f982 	bl	8008a04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	4f54300a 	.word	0x4f54300a

08003710 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
 800371c:	4613      	mov	r3, r2
 800371e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800372e:	883b      	ldrh	r3, [r7, #0]
 8003730:	0419      	lsls	r1, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	430a      	orrs	r2, r1
 800373a:	629a      	str	r2, [r3, #40]	@ 0x28
 800373c:	e028      	b.n	8003790 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	4413      	add	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	e00d      	b.n	800376e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	3340      	adds	r3, #64	@ 0x40
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	4413      	add	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	3301      	adds	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	3b01      	subs	r3, #1
 8003774:	429a      	cmp	r2, r3
 8003776:	d3ec      	bcc.n	8003752 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003778:	883b      	ldrh	r3, [r7, #0]
 800377a:	0418      	lsls	r0, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	3b01      	subs	r3, #1
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	4302      	orrs	r2, r0
 8003788:	3340      	adds	r3, #64	@ 0x40
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037ee:	4b05      	ldr	r3, [pc, #20]	@ (8003804 <HAL_PCDEx_ActivateLPM+0x44>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	10000003 	.word	0x10000003

08003808 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003828:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_PWREx_ConfigSupply+0x70>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00a      	beq.n	800384a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003834:	4b16      	ldr	r3, [pc, #88]	@ (8003890 <HAL_PWREx_ConfigSupply+0x70>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e01f      	b.n	8003886 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e01d      	b.n	8003886 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800384a:	4b11      	ldr	r3, [pc, #68]	@ (8003890 <HAL_PWREx_ConfigSupply+0x70>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 0207 	bic.w	r2, r3, #7
 8003852:	490f      	ldr	r1, [pc, #60]	@ (8003890 <HAL_PWREx_ConfigSupply+0x70>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4313      	orrs	r3, r2
 8003858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800385a:	f7fd fef7 	bl	800164c <HAL_GetTick>
 800385e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003860:	e009      	b.n	8003876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003862:	f7fd fef3 	bl	800164c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003870:	d901      	bls.n	8003876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e007      	b.n	8003886 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003876:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_PWREx_ConfigSupply+0x70>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800387e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003882:	d1ee      	bne.n	8003862 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	58024800 	.word	0x58024800

08003894 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003898:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a04      	ldr	r2, [pc, #16]	@ (80038b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	60d3      	str	r3, [r2, #12]
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	58024800 	.word	0x58024800

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08c      	sub	sp, #48	@ 0x30
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f000 bc1f 	b.w	8004106 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80b3 	beq.w	8003a3c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d6:	4b95      	ldr	r3, [pc, #596]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038e0:	4b92      	ldr	r3, [pc, #584]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d007      	beq.n	80038fc <HAL_RCC_OscConfig+0x48>
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	2b18      	cmp	r3, #24
 80038f0:	d112      	bne.n	8003918 <HAL_RCC_OscConfig+0x64>
 80038f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d10d      	bne.n	8003918 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fc:	4b8b      	ldr	r3, [pc, #556]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8098 	beq.w	8003a3a <HAL_RCC_OscConfig+0x186>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f040 8093 	bne.w	8003a3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e3f6      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x7c>
 8003922:	4b82      	ldr	r3, [pc, #520]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a81      	ldr	r2, [pc, #516]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e058      	b.n	80039e2 <HAL_RCC_OscConfig+0x12e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d112      	bne.n	800395e <HAL_RCC_OscConfig+0xaa>
 8003938:	4b7c      	ldr	r3, [pc, #496]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7b      	ldr	r2, [pc, #492]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 800393e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b79      	ldr	r3, [pc, #484]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a78      	ldr	r2, [pc, #480]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 800394a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a75      	ldr	r2, [pc, #468]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e041      	b.n	80039e2 <HAL_RCC_OscConfig+0x12e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003966:	d112      	bne.n	800398e <HAL_RCC_OscConfig+0xda>
 8003968:	4b70      	ldr	r3, [pc, #448]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a6f      	ldr	r2, [pc, #444]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 800396e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b6d      	ldr	r3, [pc, #436]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6c      	ldr	r2, [pc, #432]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 800397a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b6a      	ldr	r3, [pc, #424]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a69      	ldr	r2, [pc, #420]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e029      	b.n	80039e2 <HAL_RCC_OscConfig+0x12e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003996:	d112      	bne.n	80039be <HAL_RCC_OscConfig+0x10a>
 8003998:	4b64      	ldr	r3, [pc, #400]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a63      	ldr	r2, [pc, #396]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 800399e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b61      	ldr	r3, [pc, #388]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a60      	ldr	r2, [pc, #384]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b5e      	ldr	r3, [pc, #376]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	e011      	b.n	80039e2 <HAL_RCC_OscConfig+0x12e>
 80039be:	4b5b      	ldr	r3, [pc, #364]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a5a      	ldr	r2, [pc, #360]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b58      	ldr	r3, [pc, #352]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a57      	ldr	r2, [pc, #348]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b55      	ldr	r3, [pc, #340]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a54      	ldr	r2, [pc, #336]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d013      	beq.n	8003a12 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fd fe2f 	bl	800164c <HAL_GetTick>
 80039ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f2:	f7fd fe2b 	bl	800164c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b64      	cmp	r3, #100	@ 0x64
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e380      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a04:	4b49      	ldr	r3, [pc, #292]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x13e>
 8003a10:	e014      	b.n	8003a3c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a12:	f7fd fe1b 	bl	800164c <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1a:	f7fd fe17 	bl	800164c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	@ 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e36c      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCC_OscConfig+0x166>
 8003a38:	e000      	b.n	8003a3c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 808c 	beq.w	8003b62 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4a:	4b38      	ldr	r3, [pc, #224]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a52:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a54:	4b35      	ldr	r3, [pc, #212]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_RCC_OscConfig+0x1bc>
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	2b18      	cmp	r3, #24
 8003a64:	d137      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x222>
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d132      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a70:	4b2e      	ldr	r3, [pc, #184]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_OscConfig+0x1d4>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e33e      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a88:	4b28      	ldr	r3, [pc, #160]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 0219 	bic.w	r2, r3, #25
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4925      	ldr	r1, [pc, #148]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fd fdd7 	bl	800164c <HAL_GetTick>
 8003a9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa2:	f7fd fdd3 	bl	800164c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e328      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	4917      	ldr	r1, [pc, #92]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad4:	e045      	b.n	8003b62 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d028      	beq.n	8003b30 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ade:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0219 	bic.w	r2, r3, #25
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4910      	ldr	r1, [pc, #64]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fd fdac 	bl	800164c <HAL_GetTick>
 8003af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af8:	f7fd fda8 	bl	800164c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e2fd      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b0a:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b16:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	4901      	ldr	r1, [pc, #4]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
 8003b2a:	e01a      	b.n	8003b62 <HAL_RCC_OscConfig+0x2ae>
 8003b2c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b30:	4b97      	ldr	r3, [pc, #604]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a96      	ldr	r2, [pc, #600]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fd86 	bl	800164c <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b44:	f7fd fd82 	bl	800164c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e2d7      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b56:	4b8e      	ldr	r3, [pc, #568]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d06a      	beq.n	8003c44 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b6e:	4b88      	ldr	r3, [pc, #544]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b78:	4b85      	ldr	r3, [pc, #532]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d007      	beq.n	8003b94 <HAL_RCC_OscConfig+0x2e0>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b18      	cmp	r3, #24
 8003b88:	d11b      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x30e>
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d116      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b94:	4b7e      	ldr	r3, [pc, #504]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_OscConfig+0x2f8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2b80      	cmp	r3, #128	@ 0x80
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e2ac      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bac:	4b78      	ldr	r3, [pc, #480]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	4975      	ldr	r1, [pc, #468]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc0:	e040      	b.n	8003c44 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d023      	beq.n	8003c12 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bca:	4b71      	ldr	r3, [pc, #452]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a70      	ldr	r2, [pc, #448]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fd fd39 	bl	800164c <HAL_GetTick>
 8003bda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bde:	f7fd fd35 	bl	800164c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e28a      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bf0:	4b67      	ldr	r3, [pc, #412]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bfc:	4b64      	ldr	r3, [pc, #400]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	4961      	ldr	r1, [pc, #388]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60cb      	str	r3, [r1, #12]
 8003c10:	e018      	b.n	8003c44 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c12:	4b5f      	ldr	r3, [pc, #380]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5e      	ldr	r2, [pc, #376]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fd fd15 	bl	800164c <HAL_GetTick>
 8003c22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c26:	f7fd fd11 	bl	800164c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e266      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c38:	4b55      	ldr	r3, [pc, #340]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d036      	beq.n	8003cbe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d019      	beq.n	8003c8c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c58:	4b4d      	ldr	r3, [pc, #308]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fd fcf2 	bl	800164c <HAL_GetTick>
 8003c68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6c:	f7fd fcee 	bl	800164c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e243      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c7e:	4b44      	ldr	r3, [pc, #272]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x3b8>
 8003c8a:	e018      	b.n	8003cbe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8c:	4b40      	ldr	r3, [pc, #256]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c90:	4a3f      	ldr	r2, [pc, #252]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fd fcd8 	bl	800164c <HAL_GetTick>
 8003c9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fcd4 	bl	800164c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e229      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cb2:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d036      	beq.n	8003d38 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d019      	beq.n	8003d06 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2e      	ldr	r2, [pc, #184]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003cd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cde:	f7fd fcb5 	bl	800164c <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce6:	f7fd fcb1 	bl	800164c <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e206      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cf8:	4b25      	ldr	r3, [pc, #148]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x432>
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d06:	4b22      	ldr	r3, [pc, #136]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a21      	ldr	r2, [pc, #132]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d12:	f7fd fc9b 	bl	800164c <HAL_GetTick>
 8003d16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d1a:	f7fd fc97 	bl	800164c <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1ec      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d2c:	4b18      	ldr	r3, [pc, #96]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80af 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d46:	4b13      	ldr	r3, [pc, #76]	@ (8003d94 <HAL_RCC_OscConfig+0x4e0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a12      	ldr	r2, [pc, #72]	@ (8003d94 <HAL_RCC_OscConfig+0x4e0>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d52:	f7fd fc7b 	bl	800164c <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fd fc77 	bl	800164c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b64      	cmp	r3, #100	@ 0x64
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1cc      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d6c:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <HAL_RCC_OscConfig+0x4e0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10b      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4e4>
 8003d80:	4b03      	ldr	r3, [pc, #12]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	4a02      	ldr	r2, [pc, #8]	@ (8003d90 <HAL_RCC_OscConfig+0x4dc>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8c:	e05b      	b.n	8003e46 <HAL_RCC_OscConfig+0x592>
 8003d8e:	bf00      	nop
 8003d90:	58024400 	.word	0x58024400
 8003d94:	58024800 	.word	0x58024800
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d112      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x512>
 8003da0:	4b9d      	ldr	r3, [pc, #628]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da4:	4a9c      	ldr	r2, [pc, #624]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dac:	4b9a      	ldr	r3, [pc, #616]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db0:	4a99      	ldr	r2, [pc, #612]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003db2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db8:	4b97      	ldr	r3, [pc, #604]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbc:	4a96      	ldr	r2, [pc, #600]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003dbe:	f023 0304 	bic.w	r3, r3, #4
 8003dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc4:	e03f      	b.n	8003e46 <HAL_RCC_OscConfig+0x592>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d112      	bne.n	8003df4 <HAL_RCC_OscConfig+0x540>
 8003dce:	4b92      	ldr	r3, [pc, #584]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	4a91      	ldr	r2, [pc, #580]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003dd4:	f043 0304 	orr.w	r3, r3, #4
 8003dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dda:	4b8f      	ldr	r3, [pc, #572]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	4a8e      	ldr	r2, [pc, #568]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de6:	4b8c      	ldr	r3, [pc, #560]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a8b      	ldr	r2, [pc, #556]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df2:	e028      	b.n	8003e46 <HAL_RCC_OscConfig+0x592>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b85      	cmp	r3, #133	@ 0x85
 8003dfa:	d112      	bne.n	8003e22 <HAL_RCC_OscConfig+0x56e>
 8003dfc:	4b86      	ldr	r3, [pc, #536]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e00:	4a85      	ldr	r2, [pc, #532]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e08:	4b83      	ldr	r3, [pc, #524]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0c:	4a82      	ldr	r2, [pc, #520]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e14:	4b80      	ldr	r3, [pc, #512]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a7f      	ldr	r2, [pc, #508]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e20:	e011      	b.n	8003e46 <HAL_RCC_OscConfig+0x592>
 8003e22:	4b7d      	ldr	r3, [pc, #500]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	4a7c      	ldr	r2, [pc, #496]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e32:	4a79      	ldr	r2, [pc, #484]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3a:	4b77      	ldr	r3, [pc, #476]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	4a76      	ldr	r2, [pc, #472]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e44:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d015      	beq.n	8003e7a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fd fbfd 	bl	800164c <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd fbf9 	bl	800164c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e14c      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCC_OscConfig+0x5a2>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fd fbe7 	bl	800164c <HAL_GetTick>
 8003e7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd fbe3 	bl	800164c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e136      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e98:	4b5f      	ldr	r3, [pc, #380]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 812b 	beq.w	8004104 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003eae:	4b5a      	ldr	r3, [pc, #360]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eb6:	2b18      	cmp	r3, #24
 8003eb8:	f000 80bb 	beq.w	8004032 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	f040 8095 	bne.w	8003ff0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec6:	4b54      	ldr	r3, [pc, #336]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a53      	ldr	r2, [pc, #332]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003ecc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7fd fbbb 	bl	800164c <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd fbb7 	bl	800164c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e10c      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eec:	4b4a      	ldr	r3, [pc, #296]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef8:	4b47      	ldr	r3, [pc, #284]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003efc:	4b47      	ldr	r3, [pc, #284]	@ (800401c <HAL_RCC_OscConfig+0x768>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f08:	0112      	lsls	r2, r2, #4
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	4942      	ldr	r1, [pc, #264]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	3b01      	subs	r3, #1
 8003f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f20:	3b01      	subs	r3, #1
 8003f22:	025b      	lsls	r3, r3, #9
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f42:	4935      	ldr	r1, [pc, #212]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f48:	4b33      	ldr	r3, [pc, #204]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	4a32      	ldr	r2, [pc, #200]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f54:	4b30      	ldr	r3, [pc, #192]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f58:	4b31      	ldr	r3, [pc, #196]	@ (8004020 <HAL_RCC_OscConfig+0x76c>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f60:	00d2      	lsls	r2, r2, #3
 8003f62:	492d      	ldr	r1, [pc, #180]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f68:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	f023 020c 	bic.w	r2, r3, #12
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	4928      	ldr	r1, [pc, #160]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f7a:	4b27      	ldr	r3, [pc, #156]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	f023 0202 	bic.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	4924      	ldr	r1, [pc, #144]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f8c:	4b22      	ldr	r3, [pc, #136]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003faa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fb0:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	4a18      	ldr	r2, [pc, #96]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a15      	ldr	r2, [pc, #84]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fb40 	bl	800164c <HAL_GetTick>
 8003fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fb3c 	bl	800164c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e091      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x71c>
 8003fee:	e089      	b.n	8004104 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <HAL_RCC_OscConfig+0x764>)
 8003ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fb26 	bl	800164c <HAL_GetTick>
 8004000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004002:	e00f      	b.n	8004024 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd fb22 	bl	800164c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d908      	bls.n	8004024 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e077      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
 8004016:	bf00      	nop
 8004018:	58024400 	.word	0x58024400
 800401c:	fffffc0c 	.word	0xfffffc0c
 8004020:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004024:	4b3a      	ldr	r3, [pc, #232]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e9      	bne.n	8004004 <HAL_RCC_OscConfig+0x750>
 8004030:	e068      	b.n	8004104 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004032:	4b37      	ldr	r3, [pc, #220]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004038:	4b35      	ldr	r3, [pc, #212]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	2b01      	cmp	r3, #1
 8004044:	d031      	beq.n	80040aa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f003 0203 	and.w	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d12a      	bne.n	80040aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d122      	bne.n	80040aa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d11a      	bne.n	80040aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0a5b      	lsrs	r3, r3, #9
 8004078:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d111      	bne.n	80040aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d108      	bne.n	80040aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	0e1b      	lsrs	r3, r3, #24
 800409c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e02b      	b.n	8004106 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040ae:	4b18      	ldr	r3, [pc, #96]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 80040b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b2:	08db      	lsrs	r3, r3, #3
 80040b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040b8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d01f      	beq.n	8004104 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040c4:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c8:	4a11      	ldr	r2, [pc, #68]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040d0:	f7fd fabc 	bl	800164c <HAL_GetTick>
 80040d4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040d6:	bf00      	nop
 80040d8:	f7fd fab8 	bl	800164c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d0f9      	beq.n	80040d8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 80040e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_RCC_OscConfig+0x860>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040f0:	00d2      	lsls	r2, r2, #3
 80040f2:	4907      	ldr	r1, [pc, #28]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <HAL_RCC_OscConfig+0x85c>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3730      	adds	r7, #48	@ 0x30
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	58024400 	.word	0x58024400
 8004114:	ffff0007 	.word	0xffff0007

08004118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e19c      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b8a      	ldr	r3, [pc, #552]	@ (8004358 <HAL_RCC_ClockConfig+0x240>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b87      	ldr	r3, [pc, #540]	@ (8004358 <HAL_RCC_ClockConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 020f 	bic.w	r2, r3, #15
 8004142:	4985      	ldr	r1, [pc, #532]	@ (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b83      	ldr	r3, [pc, #524]	@ (8004358 <HAL_RCC_ClockConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e184      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	4b7b      	ldr	r3, [pc, #492]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004174:	429a      	cmp	r2, r3
 8004176:	d908      	bls.n	800418a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004178:	4b78      	ldr	r3, [pc, #480]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4975      	ldr	r1, [pc, #468]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004186:	4313      	orrs	r3, r2
 8004188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d010      	beq.n	80041b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	4b70      	ldr	r3, [pc, #448]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d908      	bls.n	80041b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a6:	4b6d      	ldr	r3, [pc, #436]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	496a      	ldr	r1, [pc, #424]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d010      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	4b64      	ldr	r3, [pc, #400]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d908      	bls.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041d4:	4b61      	ldr	r3, [pc, #388]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	495e      	ldr	r1, [pc, #376]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d010      	beq.n	8004214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	4b59      	ldr	r3, [pc, #356]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041fe:	429a      	cmp	r2, r3
 8004200:	d908      	bls.n	8004214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004202:	4b56      	ldr	r3, [pc, #344]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4953      	ldr	r1, [pc, #332]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004210:	4313      	orrs	r3, r2
 8004212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	4b4d      	ldr	r3, [pc, #308]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	429a      	cmp	r2, r3
 800422e:	d908      	bls.n	8004242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f023 020f 	bic.w	r2, r3, #15
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4947      	ldr	r1, [pc, #284]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 800423e:	4313      	orrs	r3, r2
 8004240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d055      	beq.n	80042fa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800424e:	4b43      	ldr	r3, [pc, #268]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4940      	ldr	r1, [pc, #256]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 800425c:	4313      	orrs	r3, r2
 800425e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d107      	bne.n	8004278 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004268:	4b3c      	ldr	r3, [pc, #240]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d121      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0f6      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004280:	4b36      	ldr	r3, [pc, #216]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d115      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0ea      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004298:	4b30      	ldr	r3, [pc, #192]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d109      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0de      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a8:	4b2c      	ldr	r3, [pc, #176]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0d6      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b8:	4b28      	ldr	r3, [pc, #160]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f023 0207 	bic.w	r2, r3, #7
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4925      	ldr	r1, [pc, #148]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ca:	f7fd f9bf 	bl	800164c <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d2:	f7fd f9bb 	bl	800164c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0be      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e8:	4b1c      	ldr	r3, [pc, #112]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d1eb      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	4b14      	ldr	r3, [pc, #80]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	429a      	cmp	r2, r3
 8004314:	d208      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004316:	4b11      	ldr	r3, [pc, #68]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f023 020f 	bic.w	r2, r3, #15
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	490e      	ldr	r1, [pc, #56]	@ (800435c <HAL_RCC_ClockConfig+0x244>)
 8004324:	4313      	orrs	r3, r2
 8004326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_RCC_ClockConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d214      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 020f 	bic.w	r2, r3, #15
 800433e:	4906      	ldr	r1, [pc, #24]	@ (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e086      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
 8004358:	52002000 	.word	0x52002000
 800435c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d010      	beq.n	800438e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	4b3f      	ldr	r3, [pc, #252]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004378:	429a      	cmp	r2, r3
 800437a:	d208      	bcs.n	800438e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800437c:	4b3c      	ldr	r3, [pc, #240]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	4939      	ldr	r1, [pc, #228]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 800438a:	4313      	orrs	r3, r2
 800438c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d010      	beq.n	80043bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	4b34      	ldr	r3, [pc, #208]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d208      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043aa:	4b31      	ldr	r3, [pc, #196]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	492e      	ldr	r1, [pc, #184]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	4b28      	ldr	r3, [pc, #160]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d208      	bcs.n	80043ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043d8:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4922      	ldr	r1, [pc, #136]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d010      	beq.n	8004418 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004402:	429a      	cmp	r2, r3
 8004404:	d208      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004406:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4917      	ldr	r1, [pc, #92]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004414:	4313      	orrs	r3, r2
 8004416:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004418:	f000 f834 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b14      	ldr	r3, [pc, #80]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	4912      	ldr	r1, [pc, #72]	@ (8004474 <HAL_RCC_ClockConfig+0x35c>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004436:	4b0e      	ldr	r3, [pc, #56]	@ (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	4a0d      	ldr	r2, [pc, #52]	@ (8004474 <HAL_RCC_ClockConfig+0x35c>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	4a0a      	ldr	r2, [pc, #40]	@ (8004478 <HAL_RCC_ClockConfig+0x360>)
 800444e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004450:	4a0a      	ldr	r2, [pc, #40]	@ (800447c <HAL_RCC_ClockConfig+0x364>)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <HAL_RCC_ClockConfig+0x368>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd f8ac 	bl	80015b8 <HAL_InitTick>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	58024400 	.word	0x58024400
 8004474:	0800c5d4 	.word	0x0800c5d4
 8004478:	24000004 	.word	0x24000004
 800447c:	24000000 	.word	0x24000000
 8004480:	24000008 	.word	0x24000008

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	@ 0x24
 8004488:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800448a:	4bb3      	ldr	r3, [pc, #716]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004492:	2b18      	cmp	r3, #24
 8004494:	f200 8155 	bhi.w	8004742 <HAL_RCC_GetSysClockFreq+0x2be>
 8004498:	a201      	add	r2, pc, #4	@ (adr r2, 80044a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	08004505 	.word	0x08004505
 80044a4:	08004743 	.word	0x08004743
 80044a8:	08004743 	.word	0x08004743
 80044ac:	08004743 	.word	0x08004743
 80044b0:	08004743 	.word	0x08004743
 80044b4:	08004743 	.word	0x08004743
 80044b8:	08004743 	.word	0x08004743
 80044bc:	08004743 	.word	0x08004743
 80044c0:	0800452b 	.word	0x0800452b
 80044c4:	08004743 	.word	0x08004743
 80044c8:	08004743 	.word	0x08004743
 80044cc:	08004743 	.word	0x08004743
 80044d0:	08004743 	.word	0x08004743
 80044d4:	08004743 	.word	0x08004743
 80044d8:	08004743 	.word	0x08004743
 80044dc:	08004743 	.word	0x08004743
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004743 	.word	0x08004743
 80044e8:	08004743 	.word	0x08004743
 80044ec:	08004743 	.word	0x08004743
 80044f0:	08004743 	.word	0x08004743
 80044f4:	08004743 	.word	0x08004743
 80044f8:	08004743 	.word	0x08004743
 80044fc:	08004743 	.word	0x08004743
 8004500:	08004537 	.word	0x08004537
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	4b94      	ldr	r3, [pc, #592]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004510:	4b91      	ldr	r3, [pc, #580]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	4a90      	ldr	r2, [pc, #576]	@ (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004522:	e111      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004524:	4b8d      	ldr	r3, [pc, #564]	@ (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004526:	61bb      	str	r3, [r7, #24]
      break;
 8004528:	e10e      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800452a:	4b8d      	ldr	r3, [pc, #564]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800452c:	61bb      	str	r3, [r7, #24]
      break;
 800452e:	e10b      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004530:	4b8c      	ldr	r3, [pc, #560]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004532:	61bb      	str	r3, [r7, #24]
      break;
 8004534:	e108      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004536:	4b88      	ldr	r3, [pc, #544]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004540:	4b85      	ldr	r3, [pc, #532]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800454a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800454c:	4b82      	ldr	r3, [pc, #520]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004556:	4b80      	ldr	r3, [pc, #512]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455a:	08db      	lsrs	r3, r3, #3
 800455c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80e1 	beq.w	800473c <HAL_RCC_GetSysClockFreq+0x2b8>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b02      	cmp	r3, #2
 800457e:	f000 8083 	beq.w	8004688 <HAL_RCC_GetSysClockFreq+0x204>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b02      	cmp	r3, #2
 8004586:	f200 80a1 	bhi.w	80046cc <HAL_RCC_GetSysClockFreq+0x248>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCC_GetSysClockFreq+0x114>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d056      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004596:	e099      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004598:	4b6f      	ldr	r3, [pc, #444]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02d      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	08db      	lsrs	r3, r3, #3
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	4a6b      	ldr	r2, [pc, #428]	@ (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
 80045b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	ee07 3a90 	vmov	s15, r3
 80045bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b62      	ldr	r3, [pc, #392]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045fe:	e087      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800476c <HAL_RCC_GetSysClockFreq+0x2e8>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b51      	ldr	r3, [pc, #324]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a02 	vldr	s12, [r7, #8]
 8004626:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004642:	e065      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b40      	ldr	r3, [pc, #256]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a02 	vldr	s12, [r7, #8]
 800466a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004686:	e043      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004774 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469a:	4b2f      	ldr	r3, [pc, #188]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ca:	e021      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004770 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046de:	4b1e      	ldr	r3, [pc, #120]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80046f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800470e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004710:	4b11      	ldr	r3, [pc, #68]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	0a5b      	lsrs	r3, r3, #9
 8004716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800471a:	3301      	adds	r3, #1
 800471c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004728:	edd7 6a07 	vldr	s13, [r7, #28]
 800472c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004734:	ee17 3a90 	vmov	r3, s15
 8004738:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800473a:	e005      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
      break;
 8004740:	e002      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004742:	4b07      	ldr	r3, [pc, #28]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004744:	61bb      	str	r3, [r7, #24]
      break;
 8004746:	bf00      	nop
  }

  return sysclockfreq;
 8004748:	69bb      	ldr	r3, [r7, #24]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3724      	adds	r7, #36	@ 0x24
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400
 800475c:	03d09000 	.word	0x03d09000
 8004760:	003d0900 	.word	0x003d0900
 8004764:	016e3600 	.word	0x016e3600
 8004768:	46000000 	.word	0x46000000
 800476c:	4c742400 	.word	0x4c742400
 8004770:	4a742400 	.word	0x4a742400
 8004774:	4bb71b00 	.word	0x4bb71b00

08004778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800477e:	f7ff fe81 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004782:	4602      	mov	r2, r0
 8004784:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	490f      	ldr	r1, [pc, #60]	@ (80047cc <HAL_RCC_GetHCLKFreq+0x54>)
 8004790:	5ccb      	ldrb	r3, [r1, r3]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	4a09      	ldr	r2, [pc, #36]	@ (80047cc <HAL_RCC_GetHCLKFreq+0x54>)
 80047a6:	5cd3      	ldrb	r3, [r2, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	4a07      	ldr	r2, [pc, #28]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80047b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047b6:	4a07      	ldr	r2, [pc, #28]	@ (80047d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047bc:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	0800c5d4 	.word	0x0800c5d4
 80047d0:	24000004 	.word	0x24000004
 80047d4:	24000000 	.word	0x24000000

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80047dc:	f7ff ffcc 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4904      	ldr	r1, [pc, #16]	@ (8004800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58024400 	.word	0x58024400
 8004800:	0800c5d4 	.word	0x0800c5d4

08004804 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004808:	b0c8      	sub	sp, #288	@ 0x120
 800480a:	af00      	add	r7, sp, #0
 800480c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004810:	2300      	movs	r3, #0
 8004812:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004816:	2300      	movs	r3, #0
 8004818:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800481c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004828:	2500      	movs	r5, #0
 800482a:	ea54 0305 	orrs.w	r3, r4, r5
 800482e:	d049      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004836:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800483a:	d02f      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800483c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004840:	d828      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004846:	d01a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004848:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800484c:	d822      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004856:	d007      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004858:	e01c      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485a:	4ba7      	ldr	r3, [pc, #668]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	4aa6      	ldr	r2, [pc, #664]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004866:	e01a      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800486c:	3308      	adds	r3, #8
 800486e:	2102      	movs	r1, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f002 fa6d 	bl	8006d50 <RCCEx_PLL2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800487c:	e00f      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800487e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004882:	3328      	adds	r3, #40	@ 0x28
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f002 fb14 	bl	8006eb4 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004892:	e004      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800489a:	e000      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800489c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048a6:	4b94      	ldr	r3, [pc, #592]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b4:	4a90      	ldr	r2, [pc, #576]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048b6:	430b      	orrs	r3, r1
 80048b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80048ba:	e003      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80048d0:	f04f 0900 	mov.w	r9, #0
 80048d4:	ea58 0309 	orrs.w	r3, r8, r9
 80048d8:	d047      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80048da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d82a      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80048e4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004901 	.word	0x08004901
 80048f0:	0800490f 	.word	0x0800490f
 80048f4:	08004925 	.word	0x08004925
 80048f8:	08004943 	.word	0x08004943
 80048fc:	08004943 	.word	0x08004943
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	4b7d      	ldr	r3, [pc, #500]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004904:	4a7c      	ldr	r2, [pc, #496]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800490c:	e01a      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800490e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004912:	3308      	adds	r3, #8
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f002 fa1a 	bl	8006d50 <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004922:	e00f      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004928:	3328      	adds	r3, #40	@ 0x28
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f002 fac1 	bl	8006eb4 <RCCEx_PLL3_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004938:	e004      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004940:	e000      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004944:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800494c:	4b6a      	ldr	r3, [pc, #424]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004950:	f023 0107 	bic.w	r1, r3, #7
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495a:	4a67      	ldr	r2, [pc, #412]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800495c:	430b      	orrs	r3, r1
 800495e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004960:	e003      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004966:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004976:	f04f 0b00 	mov.w	fp, #0
 800497a:	ea5a 030b 	orrs.w	r3, sl, fp
 800497e:	d054      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004986:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800498a:	d036      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800498c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004990:	d82f      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004996:	d032      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800499c:	d829      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800499e:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a0:	d02f      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80049a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a4:	d825      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d018      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80049aa:	2b80      	cmp	r3, #128	@ 0x80
 80049ac:	d821      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d007      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80049b6:	e01c      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b8:	4b4f      	ldr	r3, [pc, #316]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	4a4e      	ldr	r2, [pc, #312]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80049c4:	e01e      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ca:	3308      	adds	r3, #8
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f002 f9be 	bl	8006d50 <RCCEx_PLL2_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80049da:	e013      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e0:	3328      	adds	r3, #40	@ 0x28
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f002 fa65 	bl	8006eb4 <RCCEx_PLL3_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80049f0:	e008      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049f8:	e004      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a10:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	4a37      	ldr	r2, [pc, #220]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a20:	e003      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a44:	460b      	mov	r3, r1
 8004a46:	4313      	orrs	r3, r2
 8004a48:	d05c      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a54:	d03b      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a56:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a5a:	d834      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a60:	d037      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a66:	d82e      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a6c:	d033      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004a6e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a72:	d828      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d01a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a7e:	d822      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a88:	d007      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004a8a:	e01c      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	4a19      	ldr	r2, [pc, #100]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004a98:	e01e      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f002 f954 	bl	8006d50 <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004aae:	e013      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab4:	3328      	adds	r3, #40	@ 0x28
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f002 f9fb 	bl	8006eb4 <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004acc:	e004      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10d      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aee:	4a02      	ldr	r2, [pc, #8]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004af4:	e006      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004af6:	bf00      	nop
 8004af8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b14:	2300      	movs	r3, #0
 8004b16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4313      	orrs	r3, r2
 8004b22:	d03a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2a:	2b30      	cmp	r3, #48	@ 0x30
 8004b2c:	d01f      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004b2e:	2b30      	cmp	r3, #48	@ 0x30
 8004b30:	d819      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d00c      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d815      	bhi.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d019      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d111      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b42:	4bae      	ldr	r3, [pc, #696]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	4aad      	ldr	r2, [pc, #692]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b4e:	e011      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b54:	3308      	adds	r3, #8
 8004b56:	2102      	movs	r1, #2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f002 f8f9 	bl	8006d50 <RCCEx_PLL2_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b64:	e006      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b6c:	e002      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004b6e:	bf00      	nop
 8004b70:	e000      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b7c:	4b9f      	ldr	r3, [pc, #636]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b80:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8a:	4a9c      	ldr	r2, [pc, #624]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b90:	e003      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004ba6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004baa:	2300      	movs	r3, #0
 8004bac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	d051      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bc4:	d035      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bca:	d82e      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004bcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bd0:	d031      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004bd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bd6:	d828      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bdc:	d01a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be2:	d822      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bec:	d007      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004bee:	e01c      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf0:	4b82      	ldr	r3, [pc, #520]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf4:	4a81      	ldr	r2, [pc, #516]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bfc:	e01c      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c02:	3308      	adds	r3, #8
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f002 f8a2 	bl	8006d50 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c12:	e011      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c18:	3328      	adds	r3, #40	@ 0x28
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f002 f949 	bl	8006eb4 <RCCEx_PLL3_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c30:	e002      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c40:	4b6e      	ldr	r3, [pc, #440]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c4e:	4a6b      	ldr	r2, [pc, #428]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c54:	e003      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c5a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	d053      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c88:	d033      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004c8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c8e:	d82c      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c94:	d02f      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004c96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c9a:	d826      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ca0:	d02b      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004ca2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ca6:	d820      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cac:	d012      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cb2:	d81a      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d022      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cbc:	d115      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f002 f842 	bl	8006d50 <RCCEx_PLL2_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cd2:	e015      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd8:	3328      	adds	r3, #40	@ 0x28
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f002 f8e9 	bl	8006eb4 <RCCEx_PLL3_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004cf0:	e006      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d08:	4b3c      	ldr	r3, [pc, #240]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d16:	4a39      	ldr	r2, [pc, #228]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d1c:	e003      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d36:	2300      	movs	r3, #0
 8004d38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d3c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d060      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d4e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004d52:	d039      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004d54:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004d58:	d832      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5e:	d035      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d64:	d82c      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6a:	d031      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d70:	d826      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d76:	d02d      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004d78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d7c:	d820      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d82:	d012      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d88:	d81a      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d024      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d92:	d115      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d98:	3308      	adds	r3, #8
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 ffd7 	bl	8006d50 <RCCEx_PLL2_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004da8:	e017      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dae:	3328      	adds	r3, #40	@ 0x28
 8004db0:	2101      	movs	r1, #1
 8004db2:	4618      	mov	r0, r3
 8004db4:	f002 f87e 	bl	8006eb4 <RCCEx_PLL3_Config>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dbe:	e00c      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dc6:	e008      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dc8:	bf00      	nop
 8004dca:	e006      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dcc:	bf00      	nop
 8004dce:	e004      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dd0:	bf00      	nop
 8004dd2:	e002      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dd4:	bf00      	nop
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10e      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004df2:	4a02      	ldr	r2, [pc, #8]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004df8:	e006      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d037      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e32:	d00e      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e38:	d816      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e42:	d111      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e44:	4bc4      	ldr	r3, [pc, #784]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	4ac3      	ldr	r2, [pc, #780]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e50:	e00f      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e56:	3308      	adds	r3, #8
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 ff78 	bl	8006d50 <RCCEx_PLL2_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e66:	e004      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e7a:	4bb7      	ldr	r3, [pc, #732]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e88:	4ab3      	ldr	r2, [pc, #716]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e8e:	e003      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004eae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	d039      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d81c      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004f05 	.word	0x08004f05
 8004ecc:	08004ed9 	.word	0x08004ed9
 8004ed0:	08004ee7 	.word	0x08004ee7
 8004ed4:	08004f05 	.word	0x08004f05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed8:	4b9f      	ldr	r3, [pc, #636]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	4a9e      	ldr	r2, [pc, #632]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ee4:	e00f      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eea:	3308      	adds	r3, #8
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 ff2e 	bl	8006d50 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004efa:	e004      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f02:	e000      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f0e:	4b92      	ldr	r3, [pc, #584]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f12:	f023 0103 	bic.w	r1, r3, #3
 8004f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1c:	4a8e      	ldr	r2, [pc, #568]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f000 8099 	beq.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f4e:	4b83      	ldr	r3, [pc, #524]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a82      	ldr	r2, [pc, #520]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f5a:	f7fc fb77 	bl	800164c <HAL_GetTick>
 8004f5e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f62:	e00b      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f64:	f7fc fb72 	bl	800164c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b64      	cmp	r3, #100	@ 0x64
 8004f72:	d903      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f7a:	e005      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f7c:	4b77      	ldr	r3, [pc, #476]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ed      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d173      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f90:	4b71      	ldr	r3, [pc, #452]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f9c:	4053      	eors	r3, r2
 8004f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d015      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa6:	4b6c      	ldr	r3, [pc, #432]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fb2:	4b69      	ldr	r3, [pc, #420]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb6:	4a68      	ldr	r2, [pc, #416]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fbc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fbe:	4b66      	ldr	r3, [pc, #408]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	4a65      	ldr	r2, [pc, #404]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fc8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fca:	4a63      	ldr	r2, [pc, #396]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fde:	d118      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fc fb34 	bl	800164c <HAL_GetTick>
 8004fe4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe8:	e00d      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fc fb2f 	bl	800164c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ff4:	1ad2      	subs	r2, r2, r3
 8004ff6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d903      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005004:	e005      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005006:	4b54      	ldr	r3, [pc, #336]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0eb      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005012:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d129      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800501a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800501e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800502a:	d10e      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800502c:	4b4a      	ldr	r3, [pc, #296]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800503c:	091a      	lsrs	r2, r3, #4
 800503e:	4b48      	ldr	r3, [pc, #288]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005040:	4013      	ands	r3, r2
 8005042:	4a45      	ldr	r2, [pc, #276]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005044:	430b      	orrs	r3, r1
 8005046:	6113      	str	r3, [r2, #16]
 8005048:	e005      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800504a:	4b43      	ldr	r3, [pc, #268]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	4a42      	ldr	r2, [pc, #264]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005050:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005054:	6113      	str	r3, [r2, #16]
 8005056:	4b40      	ldr	r3, [pc, #256]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005058:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800505a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800505e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005066:	4a3c      	ldr	r2, [pc, #240]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005068:	430b      	orrs	r3, r1
 800506a:	6713      	str	r3, [r2, #112]	@ 0x70
 800506c:	e008      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800506e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005072:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005076:	e003      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800507c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f002 0301 	and.w	r3, r2, #1
 800508c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005090:	2300      	movs	r3, #0
 8005092:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005096:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800509a:	460b      	mov	r3, r1
 800509c:	4313      	orrs	r3, r2
 800509e:	f000 8090 	beq.w	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050aa:	2b28      	cmp	r3, #40	@ 0x28
 80050ac:	d870      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80050ae:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	08005199 	.word	0x08005199
 80050b8:	08005191 	.word	0x08005191
 80050bc:	08005191 	.word	0x08005191
 80050c0:	08005191 	.word	0x08005191
 80050c4:	08005191 	.word	0x08005191
 80050c8:	08005191 	.word	0x08005191
 80050cc:	08005191 	.word	0x08005191
 80050d0:	08005191 	.word	0x08005191
 80050d4:	08005165 	.word	0x08005165
 80050d8:	08005191 	.word	0x08005191
 80050dc:	08005191 	.word	0x08005191
 80050e0:	08005191 	.word	0x08005191
 80050e4:	08005191 	.word	0x08005191
 80050e8:	08005191 	.word	0x08005191
 80050ec:	08005191 	.word	0x08005191
 80050f0:	08005191 	.word	0x08005191
 80050f4:	0800517b 	.word	0x0800517b
 80050f8:	08005191 	.word	0x08005191
 80050fc:	08005191 	.word	0x08005191
 8005100:	08005191 	.word	0x08005191
 8005104:	08005191 	.word	0x08005191
 8005108:	08005191 	.word	0x08005191
 800510c:	08005191 	.word	0x08005191
 8005110:	08005191 	.word	0x08005191
 8005114:	08005199 	.word	0x08005199
 8005118:	08005191 	.word	0x08005191
 800511c:	08005191 	.word	0x08005191
 8005120:	08005191 	.word	0x08005191
 8005124:	08005191 	.word	0x08005191
 8005128:	08005191 	.word	0x08005191
 800512c:	08005191 	.word	0x08005191
 8005130:	08005191 	.word	0x08005191
 8005134:	08005199 	.word	0x08005199
 8005138:	08005191 	.word	0x08005191
 800513c:	08005191 	.word	0x08005191
 8005140:	08005191 	.word	0x08005191
 8005144:	08005191 	.word	0x08005191
 8005148:	08005191 	.word	0x08005191
 800514c:	08005191 	.word	0x08005191
 8005150:	08005191 	.word	0x08005191
 8005154:	08005199 	.word	0x08005199
 8005158:	58024400 	.word	0x58024400
 800515c:	58024800 	.word	0x58024800
 8005160:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005168:	3308      	adds	r3, #8
 800516a:	2101      	movs	r1, #1
 800516c:	4618      	mov	r0, r3
 800516e:	f001 fdef 	bl	8006d50 <RCCEx_PLL2_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005178:	e00f      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800517a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800517e:	3328      	adds	r3, #40	@ 0x28
 8005180:	2101      	movs	r1, #1
 8005182:	4618      	mov	r0, r3
 8005184:	f001 fe96 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800518e:	e004      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005196:	e000      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051a2:	4bc0      	ldr	r3, [pc, #768]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b2:	4abc      	ldr	r2, [pc, #752]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80051b8:	e003      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f002 0302 	and.w	r3, r2, #2
 80051ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051d2:	2300      	movs	r3, #0
 80051d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051d8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80051dc:	460b      	mov	r3, r1
 80051de:	4313      	orrs	r3, r2
 80051e0:	d043      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d824      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005241 	.word	0x08005241
 80051f8:	0800520d 	.word	0x0800520d
 80051fc:	08005223 	.word	0x08005223
 8005200:	08005241 	.word	0x08005241
 8005204:	08005241 	.word	0x08005241
 8005208:	08005241 	.word	0x08005241
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800520c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005210:	3308      	adds	r3, #8
 8005212:	2101      	movs	r1, #1
 8005214:	4618      	mov	r0, r3
 8005216:	f001 fd9b 	bl	8006d50 <RCCEx_PLL2_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005220:	e00f      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005226:	3328      	adds	r3, #40	@ 0x28
 8005228:	2101      	movs	r1, #1
 800522a:	4618      	mov	r0, r3
 800522c:	f001 fe42 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005236:	e004      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005242:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800524a:	4b96      	ldr	r3, [pc, #600]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	f023 0107 	bic.w	r1, r3, #7
 8005252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800525a:	4a92      	ldr	r2, [pc, #584]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800525c:	430b      	orrs	r3, r1
 800525e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005260:	e003      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005266:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800526a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f002 0304 	and.w	r3, r2, #4
 8005276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800527a:	2300      	movs	r3, #0
 800527c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005280:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005284:	460b      	mov	r3, r1
 8005286:	4313      	orrs	r3, r2
 8005288:	d043      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800528a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005292:	2b05      	cmp	r3, #5
 8005294:	d824      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005296:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052e9 	.word	0x080052e9
 80052a0:	080052b5 	.word	0x080052b5
 80052a4:	080052cb 	.word	0x080052cb
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052e9 	.word	0x080052e9
 80052b0:	080052e9 	.word	0x080052e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052b8:	3308      	adds	r3, #8
 80052ba:	2101      	movs	r1, #1
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 fd47 	bl	8006d50 <RCCEx_PLL2_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052c8:	e00f      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ce:	3328      	adds	r3, #40	@ 0x28
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 fdee 	bl	8006eb4 <RCCEx_PLL3_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052de:	e004      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052e6:	e000      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80052e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052f2:	4b6c      	ldr	r3, [pc, #432]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f6:	f023 0107 	bic.w	r1, r3, #7
 80052fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005302:	4a68      	ldr	r2, [pc, #416]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005304:	430b      	orrs	r3, r1
 8005306:	6593      	str	r3, [r2, #88]	@ 0x58
 8005308:	e003      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800530e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f002 0320 	and.w	r3, r2, #32
 800531e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005322:	2300      	movs	r3, #0
 8005324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800532c:	460b      	mov	r3, r1
 800532e:	4313      	orrs	r3, r2
 8005330:	d055      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800533a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800533e:	d033      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005344:	d82c      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800534a:	d02f      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d826      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005356:	d02b      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800535c:	d820      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800535e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005362:	d012      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005368:	d81a      	bhi.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d022      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800536e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005372:	d115      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005378:	3308      	adds	r3, #8
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f001 fce7 	bl	8006d50 <RCCEx_PLL2_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005388:	e015      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800538a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800538e:	3328      	adds	r3, #40	@ 0x28
 8005390:	2102      	movs	r1, #2
 8005392:	4618      	mov	r0, r3
 8005394:	f001 fd8e 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800539e:	e00a      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053a6:	e006      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053a8:	bf00      	nop
 80053aa:	e004      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053ac:	bf00      	nop
 80053ae:	e002      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053be:	4b39      	ldr	r3, [pc, #228]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ce:	4a35      	ldr	r2, [pc, #212]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80053ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d058      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80053fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005402:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005406:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800540a:	d033      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800540c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005410:	d82c      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005416:	d02f      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800541c:	d826      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800541e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005422:	d02b      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005424:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005428:	d820      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800542a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800542e:	d012      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005434:	d81a      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d022      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543e:	d115      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005444:	3308      	adds	r3, #8
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fc81 	bl	8006d50 <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005454:	e015      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800545a:	3328      	adds	r3, #40	@ 0x28
 800545c:	2102      	movs	r1, #2
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fd28 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800546a:	e00a      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005472:	e006      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005474:	bf00      	nop
 8005476:	e004      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005478:	bf00      	nop
 800547a:	e002      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800547c:	bf00      	nop
 800547e:	e000      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10e      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800548a:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800549a:	4a02      	ldr	r2, [pc, #8]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800549c:	430b      	orrs	r3, r1
 800549e:	6593      	str	r3, [r2, #88]	@ 0x58
 80054a0:	e006      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80054a2:	bf00      	nop
 80054a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054ca:	460b      	mov	r3, r1
 80054cc:	4313      	orrs	r3, r2
 80054ce:	d055      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054dc:	d033      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80054de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054e2:	d82c      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80054e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e8:	d02f      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80054ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ee:	d826      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80054f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054f4:	d02b      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80054f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054fa:	d820      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80054fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005500:	d012      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005506:	d81a      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d022      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800550c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005510:	d115      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005516:	3308      	adds	r3, #8
 8005518:	2100      	movs	r1, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f001 fc18 	bl	8006d50 <RCCEx_PLL2_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005526:	e015      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800552c:	3328      	adds	r3, #40	@ 0x28
 800552e:	2102      	movs	r1, #2
 8005530:	4618      	mov	r0, r3
 8005532:	f001 fcbf 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800553c:	e00a      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005544:	e006      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005546:	bf00      	nop
 8005548:	e004      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005554:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800555c:	4ba1      	ldr	r3, [pc, #644]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800555e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005560:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005568:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800556c:	4a9d      	ldr	r2, [pc, #628]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800556e:	430b      	orrs	r3, r1
 8005570:	6593      	str	r3, [r2, #88]	@ 0x58
 8005572:	e003      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005578:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800557c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005584:	f002 0308 	and.w	r3, r2, #8
 8005588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800558c:	2300      	movs	r3, #0
 800558e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005592:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005596:	460b      	mov	r3, r1
 8005598:	4313      	orrs	r3, r2
 800559a:	d01e      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800559c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ae:	3328      	adds	r3, #40	@ 0x28
 80055b0:	2102      	movs	r1, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fc7e 	bl	8006eb4 <RCCEx_PLL3_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055c4:	4b87      	ldr	r3, [pc, #540]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d4:	4a83      	ldr	r2, [pc, #524]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055d6:	430b      	orrs	r3, r1
 80055d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f002 0310 	and.w	r3, r2, #16
 80055e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055f4:	460b      	mov	r3, r1
 80055f6:	4313      	orrs	r3, r2
 80055f8:	d01e      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80055fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005606:	d10c      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800560c:	3328      	adds	r3, #40	@ 0x28
 800560e:	2102      	movs	r1, #2
 8005610:	4618      	mov	r0, r3
 8005612:	f001 fc4f 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005622:	4b70      	ldr	r3, [pc, #448]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005626:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800562a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800562e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005632:	4a6c      	ldr	r2, [pc, #432]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005634:	430b      	orrs	r3, r1
 8005636:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005648:	2300      	movs	r3, #0
 800564a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800564e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005652:	460b      	mov	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	d03e      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800565c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005664:	d022      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800566a:	d81b      	bhi.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005674:	d00b      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005676:	e015      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800567c:	3308      	adds	r3, #8
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fb65 	bl	8006d50 <RCCEx_PLL2_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800568c:	e00f      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800568e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005692:	3328      	adds	r3, #40	@ 0x28
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f001 fc0c 	bl	8006eb4 <RCCEx_PLL3_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056aa:	e000      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80056ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b6:	4b4b      	ldr	r3, [pc, #300]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056c6:	4a47      	ldr	r2, [pc, #284]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80056e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056e4:	2300      	movs	r3, #0
 80056e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056ec:	460b      	mov	r3, r1
 80056ee:	4313      	orrs	r3, r2
 80056f0:	d03b      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056fe:	d01f      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005700:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005704:	d818      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570a:	d003      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800570c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005710:	d007      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005712:	e011      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005714:	4b33      	ldr	r3, [pc, #204]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	4a32      	ldr	r2, [pc, #200]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800571a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800571e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005720:	e00f      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005726:	3328      	adds	r3, #40	@ 0x28
 8005728:	2101      	movs	r1, #1
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fbc2 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005736:	e004      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800573e:	e000      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005742:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10b      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800574a:	4b26      	ldr	r3, [pc, #152]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800574c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575a:	4a22      	ldr	r2, [pc, #136]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800575c:	430b      	orrs	r3, r1
 800575e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005760:	e003      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005762:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005766:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800576a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005776:	673b      	str	r3, [r7, #112]	@ 0x70
 8005778:	2300      	movs	r3, #0
 800577a:	677b      	str	r3, [r7, #116]	@ 0x74
 800577c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005780:	460b      	mov	r3, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	d034      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005794:	d007      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005796:	e011      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005798:	4b12      	ldr	r3, [pc, #72]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a11      	ldr	r2, [pc, #68]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057a4:	e00e      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057aa:	3308      	adds	r3, #8
 80057ac:	2102      	movs	r1, #2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 face 	bl	8006d50 <RCCEx_PLL2_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057ba:	e003      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10d      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057cc:	4b05      	ldr	r3, [pc, #20]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057da:	4a02      	ldr	r2, [pc, #8]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80057e2:	bf00      	nop
 80057e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80057fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057fe:	2300      	movs	r3, #0
 8005800:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005802:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d00c      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005810:	3328      	adds	r3, #40	@ 0x28
 8005812:	2102      	movs	r1, #2
 8005814:	4618      	mov	r0, r3
 8005816:	f001 fb4d 	bl	8006eb4 <RCCEx_PLL3_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005832:	663b      	str	r3, [r7, #96]	@ 0x60
 8005834:	2300      	movs	r3, #0
 8005836:	667b      	str	r3, [r7, #100]	@ 0x64
 8005838:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800583c:	460b      	mov	r3, r1
 800583e:	4313      	orrs	r3, r2
 8005840:	d038      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584e:	d018      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005854:	d811      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800585a:	d014      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800585c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005860:	d80b      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d011      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586a:	d106      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586c:	4bc3      	ldr	r3, [pc, #780]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	4ac2      	ldr	r2, [pc, #776]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005878:	e008      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005880:	e004      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005882:	bf00      	nop
 8005884:	e002      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800588a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005894:	4bb9      	ldr	r3, [pc, #740]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005898:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800589c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	4ab5      	ldr	r2, [pc, #724]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80058aa:	e003      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058c2:	2300      	movs	r3, #0
 80058c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058ca:	460b      	mov	r3, r1
 80058cc:	4313      	orrs	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058d0:	4baa      	ldr	r3, [pc, #680]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058de:	4aa7      	ldr	r2, [pc, #668]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80058f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f2:	2300      	movs	r3, #0
 80058f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005900:	4b9e      	ldr	r3, [pc, #632]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005904:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800590c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590e:	4a9b      	ldr	r2, [pc, #620]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005910:	430b      	orrs	r3, r1
 8005912:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005922:	2300      	movs	r3, #0
 8005924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005926:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800592a:	460b      	mov	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005930:	4b92      	ldr	r3, [pc, #584]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005934:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800593c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800593e:	4a8f      	ldr	r2, [pc, #572]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005940:	430b      	orrs	r3, r1
 8005942:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005950:	643b      	str	r3, [r7, #64]	@ 0x40
 8005952:	2300      	movs	r3, #0
 8005954:	647b      	str	r3, [r7, #68]	@ 0x44
 8005956:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800595a:	460b      	mov	r3, r1
 800595c:	4313      	orrs	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005960:	4b86      	ldr	r3, [pc, #536]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	4a85      	ldr	r2, [pc, #532]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005966:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800596a:	6113      	str	r3, [r2, #16]
 800596c:	4b83      	ldr	r3, [pc, #524]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800596e:	6919      	ldr	r1, [r3, #16]
 8005970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005974:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005978:	4a80      	ldr	r2, [pc, #512]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800597a:	430b      	orrs	r3, r1
 800597c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800597e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800598a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800598c:	2300      	movs	r3, #0
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005990:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005994:	460b      	mov	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800599a:	4b78      	ldr	r3, [pc, #480]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800599c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a8:	4a74      	ldr	r2, [pc, #464]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059aa:	430b      	orrs	r3, r1
 80059ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80059bc:	2300      	movs	r3, #0
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059c4:	460b      	mov	r3, r1
 80059c6:	4313      	orrs	r3, r2
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059ca:	4b6c      	ldr	r3, [pc, #432]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059da:	4a68      	ldr	r2, [pc, #416]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059dc:	430b      	orrs	r3, r1
 80059de:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	2100      	movs	r1, #0
 80059ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d011      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a00:	3308      	adds	r3, #8
 8005a02:	2100      	movs	r1, #0
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 f9a3 	bl	8006d50 <RCCEx_PLL2_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6239      	str	r1, [r7, #32]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a36:	460b      	mov	r3, r1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	d011      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a40:	3308      	adds	r3, #8
 8005a42:	2101      	movs	r1, #1
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 f983 	bl	8006d50 <RCCEx_PLL2_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	2100      	movs	r1, #0
 8005a6a:	61b9      	str	r1, [r7, #24]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a76:	460b      	mov	r3, r1
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	d011      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a80:	3308      	adds	r3, #8
 8005a82:	2102      	movs	r1, #2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f963 	bl	8006d50 <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	6139      	str	r1, [r7, #16]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d011      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ac0:	3328      	adds	r3, #40	@ 0x28
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f001 f9f5 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005ad0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005adc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	2100      	movs	r1, #0
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005af6:	460b      	mov	r3, r1
 8005af8:	4313      	orrs	r3, r2
 8005afa:	d011      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b00:	3328      	adds	r3, #40	@ 0x28
 8005b02:	2101      	movs	r1, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 f9d5 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	6039      	str	r1, [r7, #0]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b36:	460b      	mov	r3, r1
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	d011      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b40:	3328      	adds	r3, #40	@ 0x28
 8005b42:	2102      	movs	r1, #2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 f9b5 	bl	8006eb4 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005b60:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e000      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005b74:	46bd      	mov	sp, r7
 8005b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7a:	bf00      	nop
 8005b7c:	58024400 	.word	0x58024400

08005b80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b090      	sub	sp, #64	@ 0x40
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b8e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005b92:	430b      	orrs	r3, r1
 8005b94:	f040 8094 	bne.w	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005b98:	4b97      	ldr	r3, [pc, #604]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	f200 8087 	bhi.w	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005baa:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb0:	08005bc5 	.word	0x08005bc5
 8005bb4:	08005bed 	.word	0x08005bed
 8005bb8:	08005c15 	.word	0x08005c15
 8005bbc:	08005cb1 	.word	0x08005cb1
 8005bc0:	08005c3d 	.word	0x08005c3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bc4:	4b8c      	ldr	r3, [pc, #560]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bd0:	d108      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 ff68 	bl	8006aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be0:	f000 bc97 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be8:	f000 bc93 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bec:	4b82      	ldr	r3, [pc, #520]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bf8:	d108      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bfa:	f107 0318 	add.w	r3, r7, #24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fcac 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c08:	f000 bc83 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c10:	f000 bc7f 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c14:	4b78      	ldr	r3, [pc, #480]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c20:	d108      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c22:	f107 030c 	add.w	r3, r7, #12
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fdec 	bl	8006804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c30:	f000 bc6f 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c38:	f000 bc6b 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c44:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c46:	4b6c      	ldr	r3, [pc, #432]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d10c      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c58:	4b67      	ldr	r3, [pc, #412]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	08db      	lsrs	r3, r3, #3
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	4a66      	ldr	r2, [pc, #408]	@ (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c6a:	e01f      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c6c:	4b62      	ldr	r3, [pc, #392]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c78:	d106      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c80:	d102      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c82:	4b5f      	ldr	r3, [pc, #380]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c86:	e011      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c88:	4b5b      	ldr	r3, [pc, #364]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c9c:	d102      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c9e:	4b59      	ldr	r3, [pc, #356]	@ (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ca2:	e003      	b.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ca8:	f000 bc33 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005cac:	f000 bc31 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cb0:	4b55      	ldr	r3, [pc, #340]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cb4:	f000 bc2d 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cbc:	f000 bc29 	b.w	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	f040 809f 	bne.w	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005cce:	4b4a      	ldr	r3, [pc, #296]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005cd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cde:	d04d      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce6:	f200 8084 	bhi.w	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cee:	d07d      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cf4:	d87d      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	2b80      	cmp	r3, #128	@ 0x80
 8005cfa:	d02d      	beq.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	2b80      	cmp	r3, #128	@ 0x80
 8005d00:	d877      	bhi.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	2b40      	cmp	r3, #64	@ 0x40
 8005d0c:	d012      	beq.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005d0e:	e070      	b.n	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d10:	4b39      	ldr	r3, [pc, #228]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fec2 	bl	8006aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d2c:	e3f1      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d32:	e3ee      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d34:	4b30      	ldr	r3, [pc, #192]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d40:	d107      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d42:	f107 0318 	add.w	r3, r7, #24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fc08 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d50:	e3df      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d56:	e3dc      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d58:	4b27      	ldr	r3, [pc, #156]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d64:	d107      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fd4a 	bl	8006804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d74:	e3cd      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d7a:	e3ca      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d84:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d86:	4b1c      	ldr	r3, [pc, #112]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d10c      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d98:	4b17      	ldr	r3, [pc, #92]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	08db      	lsrs	r3, r3, #3
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	4a16      	ldr	r2, [pc, #88]	@ (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
 8005da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005daa:	e01e      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dac:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db8:	d106      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc0:	d102      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dc6:	e010      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dd4:	d106      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ddc:	d102      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005dde:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005de2:	e002      	b.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005de8:	e393      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005dea:	e392      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005dec:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df0:	e38f      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df6:	e38c      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	03d09000 	.word	0x03d09000
 8005e00:	003d0900 	.word	0x003d0900
 8005e04:	016e3600 	.word	0x016e3600
 8005e08:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e10:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005e14:	430b      	orrs	r3, r1
 8005e16:	f040 809c 	bne.w	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005e1a:	4b9e      	ldr	r3, [pc, #632]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005e22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e2a:	d054      	beq.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e32:	f200 808b 	bhi.w	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e3c:	f000 8083 	beq.w	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e46:	f200 8081 	bhi.w	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e50:	d02f      	beq.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e58:	d878      	bhi.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e66:	d012      	beq.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005e68:	e070      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e6a:	4b8a      	ldr	r3, [pc, #552]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e76:	d107      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fe15 	bl	8006aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e86:	e344      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e8c:	e341      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e8e:	4b81      	ldr	r3, [pc, #516]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e9a:	d107      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9c:	f107 0318 	add.w	r3, r7, #24
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fb5b 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eaa:	e332      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb0:	e32f      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005eb2:	4b78      	ldr	r3, [pc, #480]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec0:	f107 030c 	add.w	r3, r7, #12
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fc9d 	bl	8006804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ece:	e320      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed4:	e31d      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ede:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d10c      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d109      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ef2:	4b68      	ldr	r3, [pc, #416]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	08db      	lsrs	r3, r3, #3
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	4a66      	ldr	r2, [pc, #408]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005efe:	fa22 f303 	lsr.w	r3, r2, r3
 8005f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f04:	e01e      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f06:	4b63      	ldr	r3, [pc, #396]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f12:	d106      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f1a:	d102      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f20:	e010      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f22:	4b5c      	ldr	r3, [pc, #368]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f36:	d102      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f38:	4b59      	ldr	r3, [pc, #356]	@ (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3c:	e002      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8005f42:	e2e6      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005f44:	e2e5      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f46:	4b57      	ldr	r3, [pc, #348]	@ (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4a:	e2e2      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f50:	e2df      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f56:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	f040 80a7 	bne.w	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f60:	4b4c      	ldr	r3, [pc, #304]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f64:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005f68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f70:	d055      	beq.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f78:	f200 8096 	bhi.w	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f82:	f000 8084 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f8c:	f200 808c 	bhi.w	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f96:	d030      	beq.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f9e:	f200 8083 	bhi.w	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fae:	d012      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005fb0:	e07a      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fb2:	4b38      	ldr	r3, [pc, #224]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fd71 	bl	8006aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fce:	e2a0      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd4:	e29d      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe4:	f107 0318 	add.w	r3, r7, #24
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fab7 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff2:	e28e      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff8:	e28b      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ffa:	4b26      	ldr	r3, [pc, #152]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006006:	d107      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006008:	f107 030c 	add.w	r3, r7, #12
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fbf9 	bl	8006804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006016:	e27c      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800601c:	e279      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800601e:	4b1d      	ldr	r3, [pc, #116]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006022:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006026:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006028:	4b1a      	ldr	r3, [pc, #104]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b04      	cmp	r3, #4
 8006032:	d10c      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800603a:	4b16      	ldr	r3, [pc, #88]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	08db      	lsrs	r3, r3, #3
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	4a14      	ldr	r2, [pc, #80]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006046:	fa22 f303 	lsr.w	r3, r2, r3
 800604a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800604c:	e01e      	b.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800604e:	4b11      	ldr	r3, [pc, #68]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800605a:	d106      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800605c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006062:	d102      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006064:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006068:	e010      	b.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800606a:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006076:	d106      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800607e:	d102      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006080:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006084:	e002      	b.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800608a:	e242      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800608c:	e241      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800608e:	4b05      	ldr	r3, [pc, #20]	@ (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006092:	e23e      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006094:	58024400 	.word	0x58024400
 8006098:	03d09000 	.word	0x03d09000
 800609c:	003d0900 	.word	0x003d0900
 80060a0:	016e3600 	.word	0x016e3600
 80060a4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ac:	e231      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060b6:	430b      	orrs	r3, r1
 80060b8:	f040 8085 	bne.w	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80060bc:	4b9c      	ldr	r3, [pc, #624]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80060c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80060c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060cc:	d06b      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060d4:	d874      	bhi.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80060d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060dc:	d056      	beq.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060e4:	d86c      	bhi.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060ec:	d03b      	beq.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80060ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060f4:	d864      	bhi.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80060f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060fc:	d021      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80060fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006104:	d85c      	bhi.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006108:	2b00      	cmp	r3, #0
 800610a:	d004      	beq.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006112:	d004      	beq.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006114:	e054      	b.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006116:	f7fe fb5f 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 800611a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800611c:	e1f9      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800611e:	4b84      	ldr	r3, [pc, #528]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800612a:	d107      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800612c:	f107 0318 	add.w	r3, r7, #24
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fa13 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800613a:	e1ea      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006140:	e1e7      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006142:	4b7b      	ldr	r3, [pc, #492]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800614a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614e:	d107      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006150:	f107 030c 	add.w	r3, r7, #12
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fb55 	bl	8006804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800615e:	e1d8      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006164:	e1d5      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006166:	4b72      	ldr	r3, [pc, #456]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b04      	cmp	r3, #4
 8006170:	d109      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006172:	4b6f      	ldr	r3, [pc, #444]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	4a6d      	ldr	r2, [pc, #436]	@ (8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800617e:	fa22 f303 	lsr.w	r3, r2, r3
 8006182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006184:	e1c5      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618a:	e1c2      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800618c:	4b68      	ldr	r3, [pc, #416]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006198:	d102      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800619a:	4b67      	ldr	r3, [pc, #412]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800619e:	e1b8      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a4:	e1b5      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061a6:	4b62      	ldr	r3, [pc, #392]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061b2:	d102      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80061b4:	4b61      	ldr	r3, [pc, #388]	@ (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80061b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061b8:	e1ab      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061be:	e1a8      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c4:	e1a5      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80061c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ca:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80061ce:	430b      	orrs	r3, r1
 80061d0:	d173      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80061d2:	4b57      	ldr	r3, [pc, #348]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061e2:	d02f      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061ea:	d863      	bhi.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80061ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f8:	d012      	beq.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80061fa:	e05b      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061fc:	4b4c      	ldr	r3, [pc, #304]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006204:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006208:	d107      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800620a:	f107 0318 	add.w	r3, r7, #24
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f9a4 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006218:	e17b      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621e:	e178      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006220:	4b43      	ldr	r3, [pc, #268]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800622c:	d107      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800622e:	f107 030c 	add.w	r3, r7, #12
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fae6 	bl	8006804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800623c:	e169      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006242:	e166      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006244:	4b3a      	ldr	r3, [pc, #232]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006248:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800624c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800624e:	4b38      	ldr	r3, [pc, #224]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b04      	cmp	r3, #4
 8006258:	d10c      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800625a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006260:	4b33      	ldr	r3, [pc, #204]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	08db      	lsrs	r3, r3, #3
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	4a32      	ldr	r2, [pc, #200]	@ (8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
 8006270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006272:	e01e      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006274:	4b2e      	ldr	r3, [pc, #184]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006280:	d106      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006288:	d102      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800628a:	4b2b      	ldr	r3, [pc, #172]	@ (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800628c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800628e:	e010      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006290:	4b27      	ldr	r3, [pc, #156]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800629c:	d106      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800629e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a4:	d102      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062a6:	4b25      	ldr	r3, [pc, #148]	@ (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80062a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062aa:	e002      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062b0:	e12f      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80062b2:	e12e      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b8:	e12b      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80062ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062be:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80062c2:	430b      	orrs	r3, r1
 80062c4:	d13c      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80062c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80062d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062dc:	d012      	beq.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80062de:	e023      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062e0:	4b13      	ldr	r3, [pc, #76]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ec:	d107      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fbda 	bl	8006aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062fc:	e109      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006302:	e106      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006304:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800630c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006310:	d107      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006312:	f107 0318 	add.w	r3, r7, #24
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f920 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006320:	e0f7      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006326:	e0f4      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632c:	e0f1      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800632e:	bf00      	nop
 8006330:	58024400 	.word	0x58024400
 8006334:	03d09000 	.word	0x03d09000
 8006338:	003d0900 	.word	0x003d0900
 800633c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006344:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006348:	430b      	orrs	r3, r1
 800634a:	f040 8091 	bne.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800634e:	4b73      	ldr	r3, [pc, #460]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006352:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006356:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800635e:	f000 8081 	beq.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006368:	d87f      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006370:	d06b      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006378:	d877      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006380:	d056      	beq.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006388:	d86f      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800638a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006390:	d03b      	beq.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006398:	d867      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800639a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063a0:	d021      	beq.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063a8:	d85f      	bhi.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063b6:	d004      	beq.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80063b8:	e057      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063ba:	f000 f8b9 	bl	8006530 <HAL_RCCEx_GetD3PCLK1Freq>
 80063be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063c0:	e0a7      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063c2:	4b56      	ldr	r3, [pc, #344]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ce:	d107      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063d0:	f107 0318 	add.w	r3, r7, #24
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 f8c1 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063de:	e098      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e4:	e095      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063e6:	4b4d      	ldr	r3, [pc, #308]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063f2:	d107      	bne.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063f4:	f107 030c 	add.w	r3, r7, #12
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fa03 	bl	8006804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006402:	e086      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006408:	e083      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800640a:	4b44      	ldr	r3, [pc, #272]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d109      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006416:	4b41      	ldr	r3, [pc, #260]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	08db      	lsrs	r3, r3, #3
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	4a3f      	ldr	r2, [pc, #252]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006428:	e073      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642e:	e070      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006430:	4b3a      	ldr	r3, [pc, #232]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800643c:	d102      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800643e:	4b39      	ldr	r3, [pc, #228]	@ (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006442:	e066      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006448:	e063      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800644a:	4b34      	ldr	r3, [pc, #208]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006456:	d102      	bne.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006458:	4b33      	ldr	r3, [pc, #204]	@ (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800645c:	e059      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006462:	e056      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006464:	4b31      	ldr	r3, [pc, #196]	@ (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006468:	e053      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646e:	e050      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006474:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006478:	430b      	orrs	r3, r1
 800647a:	d148      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800647c:	4b27      	ldr	r3, [pc, #156]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800647e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006480:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006484:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800648c:	d02a      	beq.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006494:	d838      	bhi.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064a2:	d00d      	beq.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80064a4:	e030      	b.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064a6:	4b1d      	ldr	r3, [pc, #116]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b2:	d102      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80064b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80064b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b8:	e02b      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064be:	e028      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064c0:	4b16      	ldr	r3, [pc, #88]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064cc:	d107      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 faea 	bl	8006aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064dc:	e019      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064e2:	e016      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064e4:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f0:	d107      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064f2:	f107 0318 	add.w	r3, r7, #24
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f830 	bl	800655c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006500:	e007      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006506:	e004      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650c:	e001      	b.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006514:	4618      	mov	r0, r3
 8006516:	3740      	adds	r7, #64	@ 0x40
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	58024400 	.word	0x58024400
 8006520:	03d09000 	.word	0x03d09000
 8006524:	003d0900 	.word	0x003d0900
 8006528:	016e3600 	.word	0x016e3600
 800652c:	00bb8000 	.word	0x00bb8000

08006530 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006534:	f7fe f920 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8006538:	4602      	mov	r2, r0
 800653a:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	4904      	ldr	r1, [pc, #16]	@ (8006558 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006546:	5ccb      	ldrb	r3, [r1, r3]
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006550:	4618      	mov	r0, r3
 8006552:	bd80      	pop	{r7, pc}
 8006554:	58024400 	.word	0x58024400
 8006558:	0800c5d4 	.word	0x0800c5d4

0800655c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800655c:	b480      	push	{r7}
 800655e:	b089      	sub	sp, #36	@ 0x24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006564:	4ba1      	ldr	r3, [pc, #644]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800656e:	4b9f      	ldr	r3, [pc, #636]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006572:	0b1b      	lsrs	r3, r3, #12
 8006574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006578:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800657a:	4b9c      	ldr	r3, [pc, #624]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006586:	4b99      	ldr	r3, [pc, #612]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658a:	08db      	lsrs	r3, r3, #3
 800658c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8111 	beq.w	80067cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	f000 8083 	beq.w	80066b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	f200 80a1 	bhi.w	80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d056      	beq.n	8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065c6:	e099      	b.n	80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065c8:	4b88      	ldr	r3, [pc, #544]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d02d      	beq.n	8006630 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d4:	4b85      	ldr	r3, [pc, #532]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	08db      	lsrs	r3, r3, #3
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	4a84      	ldr	r2, [pc, #528]	@ (80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fe:	4b7b      	ldr	r3, [pc, #492]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006612:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800662e:	e087      	b.n	8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800663e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006642:	4b6a      	ldr	r3, [pc, #424]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006652:	ed97 6a03 	vldr	s12, [r7, #12]
 8006656:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800665a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006672:	e065      	b.n	8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006686:	4b59      	ldr	r3, [pc, #356]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006696:	ed97 6a03 	vldr	s12, [r7, #12]
 800669a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800669e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066b6:	e043      	b.n	8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ca:	4b48      	ldr	r3, [pc, #288]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066da:	ed97 6a03 	vldr	s12, [r7, #12]
 80066de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066fa:	e021      	b.n	8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	ee07 3a90 	vmov	s15, r3
 8006702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006706:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800670a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670e:	4b37      	ldr	r3, [pc, #220]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006722:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800673e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006740:	4b2a      	ldr	r3, [pc, #168]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006744:	0a5b      	lsrs	r3, r3, #9
 8006746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800675a:	edd7 6a07 	vldr	s13, [r7, #28]
 800675e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006766:	ee17 2a90 	vmov	r2, s15
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800676e:	4b1f      	ldr	r3, [pc, #124]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006772:	0c1b      	lsrs	r3, r3, #16
 8006774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006778:	ee07 3a90 	vmov	s15, r3
 800677c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006788:	edd7 6a07 	vldr	s13, [r7, #28]
 800678c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006794:	ee17 2a90 	vmov	r2, s15
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800679c:	4b13      	ldr	r3, [pc, #76]	@ (80067ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	0e1b      	lsrs	r3, r3, #24
 80067a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c2:	ee17 2a90 	vmov	r2, s15
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067ca:	e008      	b.n	80067de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	609a      	str	r2, [r3, #8]
}
 80067de:	bf00      	nop
 80067e0:	3724      	adds	r7, #36	@ 0x24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	58024400 	.word	0x58024400
 80067f0:	03d09000 	.word	0x03d09000
 80067f4:	46000000 	.word	0x46000000
 80067f8:	4c742400 	.word	0x4c742400
 80067fc:	4a742400 	.word	0x4a742400
 8006800:	4bb71b00 	.word	0x4bb71b00

08006804 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006804:	b480      	push	{r7}
 8006806:	b089      	sub	sp, #36	@ 0x24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800680c:	4ba1      	ldr	r3, [pc, #644]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006816:	4b9f      	ldr	r3, [pc, #636]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681a:	0d1b      	lsrs	r3, r3, #20
 800681c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006820:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006822:	4b9c      	ldr	r3, [pc, #624]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800682e:	4b99      	ldr	r3, [pc, #612]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006832:	08db      	lsrs	r3, r3, #3
 8006834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	fb02 f303 	mul.w	r3, r2, r3
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8111 	beq.w	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b02      	cmp	r3, #2
 8006856:	f000 8083 	beq.w	8006960 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b02      	cmp	r3, #2
 800685e:	f200 80a1 	bhi.w	80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d056      	beq.n	800691c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800686e:	e099      	b.n	80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006870:	4b88      	ldr	r3, [pc, #544]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d02d      	beq.n	80068d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800687c:	4b85      	ldr	r3, [pc, #532]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	08db      	lsrs	r3, r3, #3
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	4a84      	ldr	r2, [pc, #528]	@ (8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
 800688c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	ee07 3a90 	vmov	s15, r3
 8006894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068d6:	e087      	b.n	80069e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80068e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80068fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800690e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800691a:	e065      	b.n	80069e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006926:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800692a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800692e:	4b59      	ldr	r3, [pc, #356]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006936:	ee07 3a90 	vmov	s15, r3
 800693a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800693e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006942:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800694e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800695e:	e043      	b.n	80069e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800696e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006972:	4b48      	ldr	r3, [pc, #288]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006982:	ed97 6a03 	vldr	s12, [r7, #12]
 8006986:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800698a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800698e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069a2:	e021      	b.n	80069e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b6:	4b37      	ldr	r3, [pc, #220]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80069e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ec:	0a5b      	lsrs	r3, r3, #9
 80069ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a0e:	ee17 2a90 	vmov	r2, s15
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a16:	4b1f      	ldr	r3, [pc, #124]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a20:	ee07 3a90 	vmov	s15, r3
 8006a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a3c:	ee17 2a90 	vmov	r2, s15
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a44:	4b13      	ldr	r3, [pc, #76]	@ (8006a94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a48:	0e1b      	lsrs	r3, r3, #24
 8006a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a6a:	ee17 2a90 	vmov	r2, s15
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a72:	e008      	b.n	8006a86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	609a      	str	r2, [r3, #8]
}
 8006a86:	bf00      	nop
 8006a88:	3724      	adds	r7, #36	@ 0x24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	58024400 	.word	0x58024400
 8006a98:	03d09000 	.word	0x03d09000
 8006a9c:	46000000 	.word	0x46000000
 8006aa0:	4c742400 	.word	0x4c742400
 8006aa4:	4a742400 	.word	0x4a742400
 8006aa8:	4bb71b00 	.word	0x4bb71b00

08006aac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b089      	sub	sp, #36	@ 0x24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ab4:	4ba0      	ldr	r3, [pc, #640]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab8:	f003 0303 	and.w	r3, r3, #3
 8006abc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006abe:	4b9e      	ldr	r3, [pc, #632]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	091b      	lsrs	r3, r3, #4
 8006ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ac8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006aca:	4b9b      	ldr	r3, [pc, #620]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ad4:	4b98      	ldr	r3, [pc, #608]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad8:	08db      	lsrs	r3, r3, #3
 8006ada:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8111 	beq.w	8006d1a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	f000 8083 	beq.w	8006c06 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	f200 80a1 	bhi.w	8006c4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d056      	beq.n	8006bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b14:	e099      	b.n	8006c4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b16:	4b88      	ldr	r3, [pc, #544]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02d      	beq.n	8006b7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b22:	4b85      	ldr	r3, [pc, #532]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	08db      	lsrs	r3, r3, #3
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	4a83      	ldr	r2, [pc, #524]	@ (8006d3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b32:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4c:	4b7a      	ldr	r3, [pc, #488]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b54:	ee07 3a90 	vmov	s15, r3
 8006b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b60:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b78:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b7c:	e087      	b.n	8006c8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b88:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b90:	4b69      	ldr	r3, [pc, #420]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ba4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bc0:	e065      	b.n	8006c8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bcc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006d48 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bd4:	4b58      	ldr	r3, [pc, #352]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c04:	e043      	b.n	8006c8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c10:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c18:	4b47      	ldr	r3, [pc, #284]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c20:	ee07 3a90 	vmov	s15, r3
 8006c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c28:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c2c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c48:	e021      	b.n	8006c8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c54:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5c:	4b36      	ldr	r3, [pc, #216]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c70:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c8c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c92:	0a5b      	lsrs	r3, r3, #9
 8006c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c98:	ee07 3a90 	vmov	s15, r3
 8006c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb4:	ee17 2a90 	vmov	r2, s15
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc0:	0c1b      	lsrs	r3, r3, #16
 8006cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce2:	ee17 2a90 	vmov	r2, s15
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006cea:	4b13      	ldr	r3, [pc, #76]	@ (8006d38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cee:	0e1b      	lsrs	r3, r3, #24
 8006cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cf4:	ee07 3a90 	vmov	s15, r3
 8006cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d10:	ee17 2a90 	vmov	r2, s15
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d18:	e008      	b.n	8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	609a      	str	r2, [r3, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	3724      	adds	r7, #36	@ 0x24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	58024400 	.word	0x58024400
 8006d3c:	03d09000 	.word	0x03d09000
 8006d40:	46000000 	.word	0x46000000
 8006d44:	4c742400 	.word	0x4c742400
 8006d48:	4a742400 	.word	0x4a742400
 8006d4c:	4bb71b00 	.word	0x4bb71b00

08006d50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d5e:	4b53      	ldr	r3, [pc, #332]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d101      	bne.n	8006d6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e099      	b.n	8006ea2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a4e      	ldr	r2, [pc, #312]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006d74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d7a:	f7fa fc67 	bl	800164c <HAL_GetTick>
 8006d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d80:	e008      	b.n	8006d94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d82:	f7fa fc63 	bl	800164c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e086      	b.n	8006ea2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d94:	4b45      	ldr	r3, [pc, #276]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f0      	bne.n	8006d82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006da0:	4b42      	ldr	r3, [pc, #264]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	031b      	lsls	r3, r3, #12
 8006dae:	493f      	ldr	r1, [pc, #252]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	025b      	lsls	r3, r3, #9
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	061b      	lsls	r3, r3, #24
 8006de0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006de4:	4931      	ldr	r1, [pc, #196]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006dea:	4b30      	ldr	r3, [pc, #192]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	492d      	ldr	r1, [pc, #180]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	f023 0220 	bic.w	r2, r3, #32
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	4928      	ldr	r1, [pc, #160]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e0e:	4b27      	ldr	r3, [pc, #156]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	4a26      	ldr	r2, [pc, #152]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e14:	f023 0310 	bic.w	r3, r3, #16
 8006e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e1a:	4b24      	ldr	r3, [pc, #144]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e1e:	4b24      	ldr	r3, [pc, #144]	@ (8006eb0 <RCCEx_PLL2_Config+0x160>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	69d2      	ldr	r2, [r2, #28]
 8006e26:	00d2      	lsls	r2, r2, #3
 8006e28:	4920      	ldr	r1, [pc, #128]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e32:	4a1e      	ldr	r2, [pc, #120]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e34:	f043 0310 	orr.w	r3, r3, #16
 8006e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d106      	bne.n	8006e4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e40:	4b1a      	ldr	r3, [pc, #104]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4a19      	ldr	r2, [pc, #100]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e4c:	e00f      	b.n	8006e6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d106      	bne.n	8006e62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e54:	4b15      	ldr	r3, [pc, #84]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	4a14      	ldr	r2, [pc, #80]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e60:	e005      	b.n	8006e6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e62:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	4a11      	ldr	r2, [pc, #68]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a0e      	ldr	r2, [pc, #56]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7a:	f7fa fbe7 	bl	800164c <HAL_GetTick>
 8006e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e80:	e008      	b.n	8006e94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e82:	f7fa fbe3 	bl	800164c <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e006      	b.n	8006ea2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <RCCEx_PLL2_Config+0x15c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	ffff0007 	.word	0xffff0007

08006eb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ec2:	4b53      	ldr	r3, [pc, #332]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d101      	bne.n	8006ed2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e099      	b.n	8007006 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a4e      	ldr	r2, [pc, #312]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ede:	f7fa fbb5 	bl	800164c <HAL_GetTick>
 8006ee2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ee4:	e008      	b.n	8006ef8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ee6:	f7fa fbb1 	bl	800164c <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e086      	b.n	8007006 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ef8:	4b45      	ldr	r3, [pc, #276]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1f0      	bne.n	8006ee6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f04:	4b42      	ldr	r3, [pc, #264]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	051b      	lsls	r3, r3, #20
 8006f12:	493f      	ldr	r1, [pc, #252]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	025b      	lsls	r3, r3, #9
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	041b      	lsls	r3, r3, #16
 8006f36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	061b      	lsls	r3, r3, #24
 8006f44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f48:	4931      	ldr	r1, [pc, #196]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f4e:	4b30      	ldr	r3, [pc, #192]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	492d      	ldr	r1, [pc, #180]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f60:	4b2b      	ldr	r3, [pc, #172]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	4928      	ldr	r1, [pc, #160]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f72:	4b27      	ldr	r3, [pc, #156]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	4a26      	ldr	r2, [pc, #152]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f7e:	4b24      	ldr	r3, [pc, #144]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f82:	4b24      	ldr	r3, [pc, #144]	@ (8007014 <RCCEx_PLL3_Config+0x160>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	69d2      	ldr	r2, [r2, #28]
 8006f8a:	00d2      	lsls	r2, r2, #3
 8006f8c:	4920      	ldr	r1, [pc, #128]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f92:	4b1f      	ldr	r3, [pc, #124]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	4a1e      	ldr	r2, [pc, #120]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	4a19      	ldr	r2, [pc, #100]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006faa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fb0:	e00f      	b.n	8006fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d106      	bne.n	8006fc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fb8:	4b15      	ldr	r3, [pc, #84]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	4a14      	ldr	r2, [pc, #80]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006fbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fc4:	e005      	b.n	8006fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fc6:	4b12      	ldr	r3, [pc, #72]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	4a11      	ldr	r2, [pc, #68]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fde:	f7fa fb35 	bl	800164c <HAL_GetTick>
 8006fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fe4:	e008      	b.n	8006ff8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fe6:	f7fa fb31 	bl	800164c <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e006      	b.n	8007006 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ff8:	4b05      	ldr	r3, [pc, #20]	@ (8007010 <RCCEx_PLL3_Config+0x15c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	58024400 	.word	0x58024400
 8007014:	ffff0007 	.word	0xffff0007

08007018 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e02b      	b.n	8007084 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7f9 fb37 	bl	80006b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3304      	adds	r3, #4
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f000 f921 	bl	80072a0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	461a      	mov	r2, r3
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	f000 f975 	bl	8007358 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800706e:	4b07      	ldr	r3, [pc, #28]	@ (800708c <HAL_SDRAM_Init+0x74>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a06      	ldr	r2, [pc, #24]	@ (800708c <HAL_SDRAM_Init+0x74>)
 8007074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007078:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	52004000 	.word	0x52004000

08007090 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80070a2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d101      	bne.n	80070ae <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80070aa:	2302      	movs	r3, #2
 80070ac:	e021      	b.n	80070f2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80070ae:	7dfb      	ldrb	r3, [r7, #23]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d002      	beq.n	80070ba <HAL_SDRAM_SendCommand+0x2a>
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b05      	cmp	r3, #5
 80070b8:	d118      	bne.n	80070ec <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2202      	movs	r2, #2
 80070be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f9ae 	bl	800742c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d104      	bne.n	80070e2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2205      	movs	r2, #5
 80070dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80070e0:	e006      	b.n	80070f0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80070ea:	e001      	b.n	80070f0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e05e      	b.n	80071cc <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7f9 fff0 	bl	8001108 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0203 	bic.w	r2, r2, #3
 800713e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4b22      	ldr	r3, [pc, #136]	@ (80071d4 <HAL_SPDIFRX_Init+0xd8>)
 800714c:	4013      	ands	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007158:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800715e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007164:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800716a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007170:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007176:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800717c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8007182:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8007188:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007196:	2b01      	cmp	r3, #1
 8007198:	d103      	bne.n	80071a2 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071a0:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d103      	bne.n	80071b4 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071b2:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	ffc88407 	.word	0xffc88407

080071d8 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b10      	ldr	r3, [pc, #64]	@ (8007228 <FMC_NAND_Init+0x50>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	6851      	ldr	r1, [r2, #4]
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	6892      	ldr	r2, [r2, #8]
 80071f2:	4311      	orrs	r1, r2
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	68d2      	ldr	r2, [r2, #12]
 80071f8:	4311      	orrs	r1, r2
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	6912      	ldr	r2, [r2, #16]
 80071fe:	4311      	orrs	r1, r2
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	6952      	ldr	r2, [r2, #20]
 8007204:	0252      	lsls	r2, r2, #9
 8007206:	4311      	orrs	r1, r2
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	6992      	ldr	r2, [r2, #24]
 800720c:	0352      	lsls	r2, r2, #13
 800720e:	430a      	orrs	r2, r1
 8007210:	4313      	orrs	r3, r2
 8007212:	f043 0208 	orr.w	r2, r3, #8
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	fff00189 	.word	0xfff00189

0800722c <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8007242:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800724a:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8007252:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 800727c:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8007284:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800728c:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d121      	bne.n	80072f6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <FMC_SDRAM_Init+0xb4>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	6851      	ldr	r1, [r2, #4]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	6892      	ldr	r2, [r2, #8]
 80072c2:	4311      	orrs	r1, r2
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	68d2      	ldr	r2, [r2, #12]
 80072c8:	4311      	orrs	r1, r2
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	6912      	ldr	r2, [r2, #16]
 80072ce:	4311      	orrs	r1, r2
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	6952      	ldr	r2, [r2, #20]
 80072d4:	4311      	orrs	r1, r2
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	6992      	ldr	r2, [r2, #24]
 80072da:	4311      	orrs	r1, r2
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	69d2      	ldr	r2, [r2, #28]
 80072e0:	4311      	orrs	r1, r2
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	6a12      	ldr	r2, [r2, #32]
 80072e6:	4311      	orrs	r1, r2
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072ec:	430a      	orrs	r2, r1
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e026      	b.n	8007344 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	69d9      	ldr	r1, [r3, #28]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	4319      	orrs	r1, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730c:	430b      	orrs	r3, r1
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	4b0e      	ldr	r3, [pc, #56]	@ (8007354 <FMC_SDRAM_Init+0xb4>)
 800731a:	4013      	ands	r3, r2
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	6851      	ldr	r1, [r2, #4]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	6892      	ldr	r2, [r2, #8]
 8007324:	4311      	orrs	r1, r2
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	68d2      	ldr	r2, [r2, #12]
 800732a:	4311      	orrs	r1, r2
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	6912      	ldr	r2, [r2, #16]
 8007330:	4311      	orrs	r1, r2
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	6952      	ldr	r2, [r2, #20]
 8007336:	4311      	orrs	r1, r2
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	6992      	ldr	r2, [r2, #24]
 800733c:	430a      	orrs	r2, r1
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	ffff8000 	.word	0xffff8000

08007358 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d128      	bne.n	80073bc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	1e59      	subs	r1, r3, #1
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	3b01      	subs	r3, #1
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	4319      	orrs	r1, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	3b01      	subs	r3, #1
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	4319      	orrs	r1, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	3b01      	subs	r3, #1
 8007392:	031b      	lsls	r3, r3, #12
 8007394:	4319      	orrs	r1, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	3b01      	subs	r3, #1
 800739c:	041b      	lsls	r3, r3, #16
 800739e:	4319      	orrs	r1, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	051b      	lsls	r3, r3, #20
 80073a8:	4319      	orrs	r1, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	061b      	lsls	r3, r3, #24
 80073b2:	430b      	orrs	r3, r1
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	609a      	str	r2, [r3, #8]
 80073ba:	e02d      	b.n	8007418 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <FMC_SDRAM_Timing_Init+0xd0>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	68d2      	ldr	r2, [r2, #12]
 80073c8:	3a01      	subs	r2, #1
 80073ca:	0311      	lsls	r1, r2, #12
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	6952      	ldr	r2, [r2, #20]
 80073d0:	3a01      	subs	r2, #1
 80073d2:	0512      	lsls	r2, r2, #20
 80073d4:	430a      	orrs	r2, r1
 80073d6:	431a      	orrs	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	1e59      	subs	r1, r3, #1
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	4319      	orrs	r1, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	4319      	orrs	r1, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	3b01      	subs	r3, #1
 8007404:	041b      	lsls	r3, r3, #16
 8007406:	4319      	orrs	r1, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	3b01      	subs	r3, #1
 800740e:	061b      	lsls	r3, r3, #24
 8007410:	430b      	orrs	r3, r1
 8007412:	431a      	orrs	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	ff0f0fff 	.word	0xff0f0fff

0800742c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	4b0c      	ldr	r3, [pc, #48]	@ (8007470 <FMC_SDRAM_SendCommand+0x44>)
 800743e:	4013      	ands	r3, r2
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	6811      	ldr	r1, [r2, #0]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	6852      	ldr	r2, [r2, #4]
 8007448:	4311      	orrs	r1, r2
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	6892      	ldr	r2, [r2, #8]
 800744e:	3a01      	subs	r2, #1
 8007450:	0152      	lsls	r2, r2, #5
 8007452:	4311      	orrs	r1, r2
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	68d2      	ldr	r2, [r2, #12]
 8007458:	0252      	lsls	r2, r2, #9
 800745a:	430a      	orrs	r2, r1
 800745c:	431a      	orrs	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	ffc00000 	.word	0xffc00000

08007474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007474:	b084      	sub	sp, #16
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	f107 001c 	add.w	r0, r7, #28
 8007482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007486:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800748a:	2b01      	cmp	r3, #1
 800748c:	d121      	bne.n	80074d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	4b2c      	ldr	r3, [pc, #176]	@ (8007550 <USB_CoreInit+0xdc>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d105      	bne.n	80074c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fafa 	bl	8008ac0 <USB_CoreReset>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]
 80074d0:	e01b      	b.n	800750a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 faee 	bl	8008ac0 <USB_CoreReset>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80074fc:	e005      	b.n	800750a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007502:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800750a:	7fbb      	ldrb	r3, [r7, #30]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d116      	bne.n	800753e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007514:	b29a      	uxth	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800751e:	4b0d      	ldr	r3, [pc, #52]	@ (8007554 <USB_CoreInit+0xe0>)
 8007520:	4313      	orrs	r3, r2
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f043 0206 	orr.w	r2, r3, #6
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f043 0220 	orr.w	r2, r3, #32
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800754a:	b004      	add	sp, #16
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	ffbdffbf 	.word	0xffbdffbf
 8007554:	03ee0000 	.word	0x03ee0000

08007558 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d165      	bne.n	8007638 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4a41      	ldr	r2, [pc, #260]	@ (8007674 <USB_SetTurnaroundTime+0x11c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d906      	bls.n	8007582 <USB_SetTurnaroundTime+0x2a>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4a40      	ldr	r2, [pc, #256]	@ (8007678 <USB_SetTurnaroundTime+0x120>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d202      	bcs.n	8007582 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800757c:	230f      	movs	r3, #15
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	e062      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4a3c      	ldr	r2, [pc, #240]	@ (8007678 <USB_SetTurnaroundTime+0x120>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d306      	bcc.n	8007598 <USB_SetTurnaroundTime+0x40>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4a3b      	ldr	r2, [pc, #236]	@ (800767c <USB_SetTurnaroundTime+0x124>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d202      	bcs.n	8007598 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007592:	230e      	movs	r3, #14
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	e057      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4a38      	ldr	r2, [pc, #224]	@ (800767c <USB_SetTurnaroundTime+0x124>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d306      	bcc.n	80075ae <USB_SetTurnaroundTime+0x56>
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4a37      	ldr	r2, [pc, #220]	@ (8007680 <USB_SetTurnaroundTime+0x128>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d202      	bcs.n	80075ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80075a8:	230d      	movs	r3, #13
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	e04c      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4a33      	ldr	r2, [pc, #204]	@ (8007680 <USB_SetTurnaroundTime+0x128>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d306      	bcc.n	80075c4 <USB_SetTurnaroundTime+0x6c>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4a32      	ldr	r2, [pc, #200]	@ (8007684 <USB_SetTurnaroundTime+0x12c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d802      	bhi.n	80075c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80075be:	230c      	movs	r3, #12
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	e041      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007684 <USB_SetTurnaroundTime+0x12c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d906      	bls.n	80075da <USB_SetTurnaroundTime+0x82>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4a2e      	ldr	r2, [pc, #184]	@ (8007688 <USB_SetTurnaroundTime+0x130>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d802      	bhi.n	80075da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80075d4:	230b      	movs	r3, #11
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e036      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007688 <USB_SetTurnaroundTime+0x130>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d906      	bls.n	80075f0 <USB_SetTurnaroundTime+0x98>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4a29      	ldr	r2, [pc, #164]	@ (800768c <USB_SetTurnaroundTime+0x134>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d802      	bhi.n	80075f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80075ea:	230a      	movs	r3, #10
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e02b      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	4a26      	ldr	r2, [pc, #152]	@ (800768c <USB_SetTurnaroundTime+0x134>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d906      	bls.n	8007606 <USB_SetTurnaroundTime+0xae>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4a25      	ldr	r2, [pc, #148]	@ (8007690 <USB_SetTurnaroundTime+0x138>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d202      	bcs.n	8007606 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007600:	2309      	movs	r3, #9
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e020      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4a21      	ldr	r2, [pc, #132]	@ (8007690 <USB_SetTurnaroundTime+0x138>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d306      	bcc.n	800761c <USB_SetTurnaroundTime+0xc4>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4a20      	ldr	r2, [pc, #128]	@ (8007694 <USB_SetTurnaroundTime+0x13c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d802      	bhi.n	800761c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007616:	2308      	movs	r3, #8
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	e015      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4a1d      	ldr	r2, [pc, #116]	@ (8007694 <USB_SetTurnaroundTime+0x13c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d906      	bls.n	8007632 <USB_SetTurnaroundTime+0xda>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a1c      	ldr	r2, [pc, #112]	@ (8007698 <USB_SetTurnaroundTime+0x140>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d202      	bcs.n	8007632 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800762c:	2307      	movs	r3, #7
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e00a      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007632:	2306      	movs	r3, #6
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	e007      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d102      	bne.n	8007644 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800763e:	2309      	movs	r3, #9
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	e001      	b.n	8007648 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007644:	2309      	movs	r3, #9
 8007646:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	029b      	lsls	r3, r3, #10
 800765c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007660:	431a      	orrs	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	00d8acbf 	.word	0x00d8acbf
 8007678:	00e4e1c0 	.word	0x00e4e1c0
 800767c:	00f42400 	.word	0x00f42400
 8007680:	01067380 	.word	0x01067380
 8007684:	011a499f 	.word	0x011a499f
 8007688:	01312cff 	.word	0x01312cff
 800768c:	014ca43f 	.word	0x014ca43f
 8007690:	016e3600 	.word	0x016e3600
 8007694:	01a6ab1f 	.word	0x01a6ab1f
 8007698:	01e84800 	.word	0x01e84800

0800769c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f043 0201 	orr.w	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f023 0201 	bic.w	r2, r3, #1
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076fc:	78fb      	ldrb	r3, [r7, #3]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d115      	bne.n	800772e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800770e:	200a      	movs	r0, #10
 8007710:	f7f9 ffa8 	bl	8001664 <HAL_Delay>
      ms += 10U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	330a      	adds	r3, #10
 8007718:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 f93f 	bl	800899e <USB_GetMode>
 8007720:	4603      	mov	r3, r0
 8007722:	2b01      	cmp	r3, #1
 8007724:	d01e      	beq.n	8007764 <USB_SetCurrentMode+0x84>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2bc7      	cmp	r3, #199	@ 0xc7
 800772a:	d9f0      	bls.n	800770e <USB_SetCurrentMode+0x2e>
 800772c:	e01a      	b.n	8007764 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d115      	bne.n	8007760 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007740:	200a      	movs	r0, #10
 8007742:	f7f9 ff8f 	bl	8001664 <HAL_Delay>
      ms += 10U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	330a      	adds	r3, #10
 800774a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 f926 	bl	800899e <USB_GetMode>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <USB_SetCurrentMode+0x84>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2bc7      	cmp	r3, #199	@ 0xc7
 800775c:	d9f0      	bls.n	8007740 <USB_SetCurrentMode+0x60>
 800775e:	e001      	b.n	8007764 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e005      	b.n	8007770 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2bc8      	cmp	r3, #200	@ 0xc8
 8007768:	d101      	bne.n	800776e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e000      	b.n	8007770 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007778:	b084      	sub	sp, #16
 800777a:	b580      	push	{r7, lr}
 800777c:	b086      	sub	sp, #24
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007792:	2300      	movs	r3, #0
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	e009      	b.n	80077ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3340      	adds	r3, #64	@ 0x40
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	2200      	movs	r2, #0
 80077a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	3301      	adds	r3, #1
 80077aa:	613b      	str	r3, [r7, #16]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2b0e      	cmp	r3, #14
 80077b0:	d9f2      	bls.n	8007798 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d11c      	bne.n	80077f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077c8:	f043 0302 	orr.w	r3, r3, #2
 80077cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e005      	b.n	8007800 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007806:	461a      	mov	r2, r3
 8007808:	2300      	movs	r3, #0
 800780a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800780c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007810:	2b01      	cmp	r3, #1
 8007812:	d10d      	bne.n	8007830 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800781c:	2100      	movs	r1, #0
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f968 	bl	8007af4 <USB_SetDevSpeed>
 8007824:	e008      	b.n	8007838 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007826:	2101      	movs	r1, #1
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f963 	bl	8007af4 <USB_SetDevSpeed>
 800782e:	e003      	b.n	8007838 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007830:	2103      	movs	r1, #3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f95e 	bl	8007af4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007838:	2110      	movs	r1, #16
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f8fa 	bl	8007a34 <USB_FlushTxFifo>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f924 	bl	8007a98 <USB_FlushRxFifo>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007860:	461a      	mov	r2, r3
 8007862:	2300      	movs	r3, #0
 8007864:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786c:	461a      	mov	r2, r3
 800786e:	2300      	movs	r3, #0
 8007870:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007878:	461a      	mov	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	e043      	b.n	800790c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007896:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800789a:	d118      	bne.n	80078ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ae:	461a      	mov	r2, r3
 80078b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e013      	b.n	80078e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c4:	461a      	mov	r2, r3
 80078c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	e008      	b.n	80078e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078da:	461a      	mov	r2, r3
 80078dc:	2300      	movs	r3, #0
 80078de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ec:	461a      	mov	r2, r3
 80078ee:	2300      	movs	r3, #0
 80078f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fe:	461a      	mov	r2, r3
 8007900:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007904:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	3301      	adds	r3, #1
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007910:	461a      	mov	r2, r3
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	4293      	cmp	r3, r2
 8007916:	d3b5      	bcc.n	8007884 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
 800791c:	e043      	b.n	80079a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007934:	d118      	bne.n	8007968 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10a      	bne.n	8007952 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007948:	461a      	mov	r2, r3
 800794a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e013      	b.n	800797a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800795e:	461a      	mov	r2, r3
 8007960:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	e008      	b.n	800797a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007974:	461a      	mov	r2, r3
 8007976:	2300      	movs	r3, #0
 8007978:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007986:	461a      	mov	r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007998:	461a      	mov	r2, r3
 800799a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800799e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	3301      	adds	r3, #1
 80079a4:	613b      	str	r3, [r7, #16]
 80079a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079aa:	461a      	mov	r2, r3
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d3b5      	bcc.n	800791e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80079d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	f043 0210 	orr.w	r2, r3, #16
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699a      	ldr	r2, [r3, #24]
 80079ec:	4b0f      	ldr	r3, [pc, #60]	@ (8007a2c <USB_DevInit+0x2b4>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	f043 0208 	orr.w	r2, r3, #8
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d105      	bne.n	8007a1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699a      	ldr	r2, [r3, #24]
 8007a14:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <USB_DevInit+0x2b8>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a28:	b004      	add	sp, #16
 8007a2a:	4770      	bx	lr
 8007a2c:	803c3800 	.word	0x803c3800
 8007a30:	40000004 	.word	0x40000004

08007a34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3301      	adds	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a4e:	d901      	bls.n	8007a54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e01b      	b.n	8007a8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	daf2      	bge.n	8007a42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	019b      	lsls	r3, r3, #6
 8007a64:	f043 0220 	orr.w	r2, r3, #32
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a78:	d901      	bls.n	8007a7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e006      	b.n	8007a8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d0f0      	beq.n	8007a6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ab0:	d901      	bls.n	8007ab6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e018      	b.n	8007ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	daf2      	bge.n	8007aa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2210      	movs	r2, #16
 8007ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ad4:	d901      	bls.n	8007ada <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e006      	b.n	8007ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b10      	cmp	r3, #16
 8007ae4:	d0f0      	beq.n	8007ac8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	68f9      	ldr	r1, [r7, #12]
 8007b10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b14:	4313      	orrs	r3, r2
 8007b16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b087      	sub	sp, #28
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 0306 	and.w	r3, r3, #6
 8007b3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b46:	2300      	movs	r3, #0
 8007b48:	75fb      	strb	r3, [r7, #23]
 8007b4a:	e00a      	b.n	8007b62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d002      	beq.n	8007b58 <USB_GetDevSpeed+0x32>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b06      	cmp	r3, #6
 8007b56:	d102      	bne.n	8007b5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	75fb      	strb	r3, [r7, #23]
 8007b5c:	e001      	b.n	8007b62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b5e:	230f      	movs	r3, #15
 8007b60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d139      	bne.n	8007c00 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007baa:	4313      	orrs	r3, r2
 8007bac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d153      	bne.n	8007c6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	791b      	ldrb	r3, [r3, #4]
 8007bde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007be0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	059b      	lsls	r3, r3, #22
 8007be6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007be8:	431a      	orrs	r2, r3
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	0159      	lsls	r1, r3, #5
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	440b      	add	r3, r1
 8007bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4b20      	ldr	r3, [pc, #128]	@ (8007c7c <USB_ActivateEndpoint+0x10c>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	600b      	str	r3, [r1, #0]
 8007bfe:	e035      	b.n	8007c6c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c06:	69da      	ldr	r2, [r3, #28]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	2101      	movs	r1, #1
 8007c12:	fa01 f303 	lsl.w	r3, r1, r3
 8007c16:	041b      	lsls	r3, r3, #16
 8007c18:	68f9      	ldr	r1, [r7, #12]
 8007c1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d119      	bne.n	8007c6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	791b      	ldrb	r3, [r3, #4]
 8007c52:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c54:	430b      	orrs	r3, r1
 8007c56:	431a      	orrs	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	0159      	lsls	r1, r3, #5
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	440b      	add	r3, r1
 8007c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c64:	4619      	mov	r1, r3
 8007c66:	4b05      	ldr	r3, [pc, #20]	@ (8007c7c <USB_ActivateEndpoint+0x10c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	10008000 	.word	0x10008000

08007c80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	785b      	ldrb	r3, [r3, #1]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d161      	bne.n	8007d60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cb2:	d11f      	bne.n	8007cf4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007cd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	0151      	lsls	r1, r2, #5
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	2101      	movs	r1, #1
 8007d06:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	68f9      	ldr	r1, [r7, #12]
 8007d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d14:	4013      	ands	r3, r2
 8007d16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1e:	69da      	ldr	r2, [r3, #28]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	f003 030f 	and.w	r3, r3, #15
 8007d28:	2101      	movs	r1, #1
 8007d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	43db      	mvns	r3, r3
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d38:	4013      	ands	r3, r2
 8007d3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	0159      	lsls	r1, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	440b      	add	r3, r1
 8007d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d56:	4619      	mov	r1, r3
 8007d58:	4b35      	ldr	r3, [pc, #212]	@ (8007e30 <USB_DeactivateEndpoint+0x1b0>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	600b      	str	r3, [r1, #0]
 8007d5e:	e060      	b.n	8007e22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d76:	d11f      	bne.n	8007db8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	0151      	lsls	r1, r2, #5
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	0151      	lsls	r1, r2, #5
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	440a      	add	r2, r1
 8007dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007db2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007db6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	f003 030f 	and.w	r3, r3, #15
 8007dc8:	2101      	movs	r1, #1
 8007dca:	fa01 f303 	lsl.w	r3, r1, r3
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dd8:	4013      	ands	r3, r2
 8007dda:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de2:	69da      	ldr	r2, [r3, #28]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	2101      	movs	r1, #1
 8007dee:	fa01 f303 	lsl.w	r3, r1, r3
 8007df2:	041b      	lsls	r3, r3, #16
 8007df4:	43db      	mvns	r3, r3
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	0159      	lsls	r1, r3, #5
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	440b      	add	r3, r1
 8007e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <USB_DeactivateEndpoint+0x1b4>)
 8007e1e:	4013      	ands	r3, r2
 8007e20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	ec337800 	.word	0xec337800
 8007e34:	eff37800 	.word	0xeff37800

08007e38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08a      	sub	sp, #40	@ 0x28
 8007e3c:	af02      	add	r7, sp, #8
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4613      	mov	r3, r2
 8007e44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	f040 8185 	bne.w	8008164 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d132      	bne.n	8007ec8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	0159      	lsls	r1, r3, #5
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	440b      	add	r3, r1
 8007e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4ba7      	ldr	r3, [pc, #668]	@ (800811c <USB_EPStartXfer+0x2e4>)
 8007e80:	4013      	ands	r3, r2
 8007e82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	0159      	lsls	r1, r3, #5
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	440b      	add	r3, r1
 8007eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4b97      	ldr	r3, [pc, #604]	@ (8008120 <USB_EPStartXfer+0x2e8>)
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	610b      	str	r3, [r1, #16]
 8007ec6:	e097      	b.n	8007ff8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed4:	691a      	ldr	r2, [r3, #16]
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	0159      	lsls	r1, r3, #5
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	440b      	add	r3, r1
 8007ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8008120 <USB_EPStartXfer+0x2e8>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	0159      	lsls	r1, r3, #5
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	440b      	add	r3, r1
 8007f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f04:	4619      	mov	r1, r3
 8007f06:	4b85      	ldr	r3, [pc, #532]	@ (800811c <USB_EPStartXfer+0x2e4>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d11a      	bne.n	8007f48 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d903      	bls.n	8007f26 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	69fa      	ldr	r2, [r7, #28]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f44:	6113      	str	r3, [r2, #16]
 8007f46:	e044      	b.n	8007fd2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	4413      	add	r3, r2
 8007f52:	1e5a      	subs	r2, r3, #1
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6a:	691a      	ldr	r2, [r3, #16]
 8007f6c:	8afb      	ldrh	r3, [r7, #22]
 8007f6e:	04d9      	lsls	r1, r3, #19
 8007f70:	4b6c      	ldr	r3, [pc, #432]	@ (8008124 <USB_EPStartXfer+0x2ec>)
 8007f72:	400b      	ands	r3, r1
 8007f74:	69b9      	ldr	r1, [r7, #24]
 8007f76:	0148      	lsls	r0, r1, #5
 8007f78:	69f9      	ldr	r1, [r7, #28]
 8007f7a:	4401      	add	r1, r0
 8007f7c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f80:	4313      	orrs	r3, r2
 8007f82:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	791b      	ldrb	r3, [r3, #4]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d122      	bne.n	8007fd2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	0151      	lsls	r1, r2, #5
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	440a      	add	r2, r1
 8007fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fa6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007faa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb8:	691a      	ldr	r2, [r3, #16]
 8007fba:	8afb      	ldrh	r3, [r7, #22]
 8007fbc:	075b      	lsls	r3, r3, #29
 8007fbe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007fc2:	69b9      	ldr	r1, [r7, #24]
 8007fc4:	0148      	lsls	r0, r1, #5
 8007fc6:	69f9      	ldr	r1, [r7, #28]
 8007fc8:	4401      	add	r1, r0
 8007fca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fe8:	69b9      	ldr	r1, [r7, #24]
 8007fea:	0148      	lsls	r0, r1, #5
 8007fec:	69f9      	ldr	r1, [r7, #28]
 8007fee:	4401      	add	r1, r0
 8007ff0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d14b      	bne.n	8008096 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d009      	beq.n	800801a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008012:	461a      	mov	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	791b      	ldrb	r3, [r3, #4]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d128      	bne.n	8008074 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800802e:	2b00      	cmp	r3, #0
 8008030:	d110      	bne.n	8008054 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800804c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	e00f      	b.n	8008074 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	0151      	lsls	r1, r2, #5
 8008066:	69fa      	ldr	r2, [r7, #28]
 8008068:	440a      	add	r2, r1
 800806a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800806e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008072:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	0151      	lsls	r1, r2, #5
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	440a      	add	r2, r1
 800808a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800808e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	e169      	b.n	800836a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080b4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	791b      	ldrb	r3, [r3, #4]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d015      	beq.n	80080ea <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8151 	beq.w	800836a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	f003 030f 	and.w	r3, r3, #15
 80080d8:	2101      	movs	r1, #1
 80080da:	fa01 f303 	lsl.w	r3, r1, r3
 80080de:	69f9      	ldr	r1, [r7, #28]
 80080e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080e4:	4313      	orrs	r3, r2
 80080e6:	634b      	str	r3, [r1, #52]	@ 0x34
 80080e8:	e13f      	b.n	800836a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d116      	bne.n	8008128 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008114:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008118:	6013      	str	r3, [r2, #0]
 800811a:	e015      	b.n	8008148 <USB_EPStartXfer+0x310>
 800811c:	e007ffff 	.word	0xe007ffff
 8008120:	fff80000 	.word	0xfff80000
 8008124:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	0151      	lsls	r1, r2, #5
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	440a      	add	r2, r1
 800813e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008146:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	68d9      	ldr	r1, [r3, #12]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	b298      	uxth	r0, r3
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	4603      	mov	r3, r0
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f9b9 	bl	80084d4 <USB_WritePacket>
 8008162:	e102      	b.n	800836a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008170:	691a      	ldr	r2, [r3, #16]
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	0159      	lsls	r1, r3, #5
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	440b      	add	r3, r1
 800817a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800817e:	4619      	mov	r1, r3
 8008180:	4b7c      	ldr	r3, [pc, #496]	@ (8008374 <USB_EPStartXfer+0x53c>)
 8008182:	4013      	ands	r3, r2
 8008184:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008192:	691a      	ldr	r2, [r3, #16]
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	0159      	lsls	r1, r3, #5
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	440b      	add	r3, r1
 800819c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a0:	4619      	mov	r1, r3
 80081a2:	4b75      	ldr	r3, [pc, #468]	@ (8008378 <USB_EPStartXfer+0x540>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d12f      	bne.n	800820e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	689a      	ldr	r2, [r3, #8]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081dc:	69b9      	ldr	r1, [r7, #24]
 80081de:	0148      	lsls	r0, r1, #5
 80081e0:	69f9      	ldr	r1, [r7, #28]
 80081e2:	4401      	add	r1, r0
 80081e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081e8:	4313      	orrs	r3, r2
 80081ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	0151      	lsls	r1, r2, #5
 80081fe:	69fa      	ldr	r2, [r7, #28]
 8008200:	440a      	add	r2, r1
 8008202:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008206:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800820a:	6113      	str	r3, [r2, #16]
 800820c:	e05f      	b.n	80082ce <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d123      	bne.n	800825e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800822c:	69b9      	ldr	r1, [r7, #24]
 800822e:	0148      	lsls	r0, r1, #5
 8008230:	69f9      	ldr	r1, [r7, #28]
 8008232:	4401      	add	r1, r0
 8008234:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008238:	4313      	orrs	r3, r2
 800823a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800825a:	6113      	str	r3, [r2, #16]
 800825c:	e037      	b.n	80082ce <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	691a      	ldr	r2, [r3, #16]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	4413      	add	r3, r2
 8008268:	1e5a      	subs	r2, r3, #1
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008272:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	8afa      	ldrh	r2, [r7, #22]
 800827a:	fb03 f202 	mul.w	r2, r3, r2
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	8afb      	ldrh	r3, [r7, #22]
 8008292:	04d9      	lsls	r1, r3, #19
 8008294:	4b39      	ldr	r3, [pc, #228]	@ (800837c <USB_EPStartXfer+0x544>)
 8008296:	400b      	ands	r3, r1
 8008298:	69b9      	ldr	r1, [r7, #24]
 800829a:	0148      	lsls	r0, r1, #5
 800829c:	69f9      	ldr	r1, [r7, #28]
 800829e:	4401      	add	r1, r0
 80082a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082a4:	4313      	orrs	r3, r2
 80082a6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082b4:	691a      	ldr	r2, [r3, #16]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082be:	69b9      	ldr	r1, [r7, #24]
 80082c0:	0148      	lsls	r0, r1, #5
 80082c2:	69f9      	ldr	r1, [r7, #28]
 80082c4:	4401      	add	r1, r0
 80082c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082ca:	4313      	orrs	r3, r2
 80082cc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d10d      	bne.n	80082f0 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	68d9      	ldr	r1, [r3, #12]
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ec:	460a      	mov	r2, r1
 80082ee:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d128      	bne.n	800834a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d110      	bne.n	800832a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	440a      	add	r2, r1
 800831e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008322:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	e00f      	b.n	800834a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	0151      	lsls	r1, r2, #5
 800833c:	69fa      	ldr	r2, [r7, #28]
 800833e:	440a      	add	r2, r1
 8008340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008348:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	0151      	lsls	r1, r2, #5
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	440a      	add	r2, r1
 8008360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008364:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008368:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3720      	adds	r7, #32
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	fff80000 	.word	0xfff80000
 8008378:	e007ffff 	.word	0xe007ffff
 800837c:	1ff80000 	.word	0x1ff80000

08008380 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d14a      	bne.n	8008434 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083b6:	f040 8086 	bne.w	80084c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80083dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	0151      	lsls	r1, r2, #5
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	440a      	add	r2, r1
 80083f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008400:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3301      	adds	r3, #1
 8008406:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800840e:	4293      	cmp	r3, r2
 8008410:	d902      	bls.n	8008418 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
          break;
 8008416:	e056      	b.n	80084c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800842c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008430:	d0e7      	beq.n	8008402 <USB_EPStopXfer+0x82>
 8008432:	e048      	b.n	80084c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800844c:	d13b      	bne.n	80084c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	7812      	ldrb	r2, [r2, #0]
 8008462:	0151      	lsls	r1, r2, #5
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	440a      	add	r2, r1
 8008468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800846c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008470:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	7812      	ldrb	r2, [r2, #0]
 8008486:	0151      	lsls	r1, r2, #5
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	440a      	add	r2, r1
 800848c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008490:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008494:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d902      	bls.n	80084ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	75fb      	strb	r3, [r7, #23]
          break;
 80084aa:	e00c      	b.n	80084c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084c4:	d0e7      	beq.n	8008496 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b089      	sub	sp, #36	@ 0x24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4611      	mov	r1, r2
 80084e0:	461a      	mov	r2, r3
 80084e2:	460b      	mov	r3, r1
 80084e4:	71fb      	strb	r3, [r7, #7]
 80084e6:	4613      	mov	r3, r2
 80084e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80084f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d123      	bne.n	8008542 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80084fa:	88bb      	ldrh	r3, [r7, #4]
 80084fc:	3303      	adds	r3, #3
 80084fe:	089b      	lsrs	r3, r3, #2
 8008500:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008502:	2300      	movs	r3, #0
 8008504:	61bb      	str	r3, [r7, #24]
 8008506:	e018      	b.n	800853a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	031a      	lsls	r2, r3, #12
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	4413      	add	r3, r2
 8008510:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008514:	461a      	mov	r2, r3
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	3301      	adds	r3, #1
 8008520:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	3301      	adds	r3, #1
 8008526:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	3301      	adds	r3, #1
 800852c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	3301      	adds	r3, #1
 8008532:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	3301      	adds	r3, #1
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	429a      	cmp	r2, r3
 8008540:	d3e2      	bcc.n	8008508 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3724      	adds	r7, #36	@ 0x24
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008550:	b480      	push	{r7}
 8008552:	b08b      	sub	sp, #44	@ 0x2c
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008566:	88fb      	ldrh	r3, [r7, #6]
 8008568:	089b      	lsrs	r3, r3, #2
 800856a:	b29b      	uxth	r3, r3
 800856c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	f003 0303 	and.w	r3, r3, #3
 8008574:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008576:	2300      	movs	r3, #0
 8008578:	623b      	str	r3, [r7, #32]
 800857a:	e014      	b.n	80085a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	601a      	str	r2, [r3, #0]
    pDest++;
 8008588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858a:	3301      	adds	r3, #1
 800858c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008590:	3301      	adds	r3, #1
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	3301      	adds	r3, #1
 8008598:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800859a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859c:	3301      	adds	r3, #1
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	3301      	adds	r3, #1
 80085a4:	623b      	str	r3, [r7, #32]
 80085a6:	6a3a      	ldr	r2, [r7, #32]
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d3e6      	bcc.n	800857c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085ae:	8bfb      	ldrh	r3, [r7, #30]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01e      	beq.n	80085f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085be:	461a      	mov	r2, r3
 80085c0:	f107 0310 	add.w	r3, r7, #16
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	fa22 f303 	lsr.w	r3, r2, r3
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d8:	701a      	strb	r2, [r3, #0]
      i++;
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	3301      	adds	r3, #1
 80085de:	623b      	str	r3, [r7, #32]
      pDest++;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	3301      	adds	r3, #1
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80085e6:	8bfb      	ldrh	r3, [r7, #30]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80085ec:	8bfb      	ldrh	r3, [r7, #30]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1ea      	bne.n	80085c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80085f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	372c      	adds	r7, #44	@ 0x2c
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d12c      	bne.n	8008676 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	db12      	blt.n	8008654 <USB_EPSetStall+0x54>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00f      	beq.n	8008654 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800864e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008652:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800866e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	e02b      	b.n	80086ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	db12      	blt.n	80086ae <USB_EPSetStall+0xae>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00f      	beq.n	80086ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	785b      	ldrb	r3, [r3, #1]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d128      	bne.n	800874a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	0151      	lsls	r1, r2, #5
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	440a      	add	r2, r1
 800870e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008712:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008716:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	791b      	ldrb	r3, [r3, #4]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d003      	beq.n	8008728 <USB_EPClearStall+0x4c>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	791b      	ldrb	r3, [r3, #4]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d138      	bne.n	800879a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	440a      	add	r2, r1
 800873e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	e027      	b.n	800879a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	440a      	add	r2, r1
 8008760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008764:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008768:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	791b      	ldrb	r3, [r3, #4]
 800876e:	2b03      	cmp	r3, #3
 8008770:	d003      	beq.n	800877a <USB_EPClearStall+0x9e>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	791b      	ldrb	r3, [r3, #4]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d10f      	bne.n	800879a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008798:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80087ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	011b      	lsls	r3, r3, #4
 80087d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80087dc:	68f9      	ldr	r1, [r7, #12]
 80087de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087e2:	4313      	orrs	r3, r2
 80087e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800880e:	f023 0303 	bic.w	r3, r3, #3
 8008812:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008822:	f023 0302 	bic.w	r3, r3, #2
 8008826:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008850:	f023 0303 	bic.w	r3, r3, #3
 8008854:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008864:	f043 0302 	orr.w	r3, r3, #2
 8008868:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4013      	ands	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008890:	68fb      	ldr	r3, [r7, #12]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	4013      	ands	r3, r2
 80088c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	0c1b      	lsrs	r3, r3, #16
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4013      	ands	r3, r2
 80088f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	b29b      	uxth	r3, r3
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008906:	b480      	push	{r7}
 8008908:	b085      	sub	sp, #20
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4013      	ands	r3, r2
 8008932:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008934:	68bb      	ldr	r3, [r7, #8]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008942:	b480      	push	{r7}
 8008944:	b087      	sub	sp, #28
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008964:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	f003 030f 	and.w	r3, r3, #15
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	fa22 f303 	lsr.w	r3, r2, r3
 8008972:	01db      	lsls	r3, r3, #7
 8008974:	b2db      	uxtb	r3, r3
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4013      	ands	r3, r2
 800898e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008990:	68bb      	ldr	r3, [r7, #8]
}
 8008992:	4618      	mov	r0, r3
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	f003 0301 	and.w	r3, r3, #1
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
	...

080089bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089d6:	4619      	mov	r1, r3
 80089d8:	4b09      	ldr	r3, [pc, #36]	@ (8008a00 <USB_ActivateSetup+0x44>)
 80089da:	4013      	ands	r3, r2
 80089dc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	fffff800 	.word	0xfffff800

08008a04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	333c      	adds	r3, #60	@ 0x3c
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4a26      	ldr	r2, [pc, #152]	@ (8008abc <USB_EP0_OutStart+0xb8>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d90a      	bls.n	8008a3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a38:	d101      	bne.n	8008a3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e037      	b.n	8008aae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a44:	461a      	mov	r2, r3
 8008a46:	2300      	movs	r3, #0
 8008a48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a6c:	f043 0318 	orr.w	r3, r3, #24
 8008a70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a80:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008a84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008a86:	7afb      	ldrb	r3, [r7, #11]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d10f      	bne.n	8008aac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a92:	461a      	mov	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aa6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008aaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	4f54300a 	.word	0x4f54300a

08008ac0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ad8:	d901      	bls.n	8008ade <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e01b      	b.n	8008b16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	daf2      	bge.n	8008acc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f043 0201 	orr.w	r2, r3, #1
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b02:	d901      	bls.n	8008b08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e006      	b.n	8008b16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d0f0      	beq.n	8008af6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
	...

08008b24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b30:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008b34:	f002 fd3e 	bl	800b5b4 <USBD_static_malloc>
 8008b38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	32b0      	adds	r2, #176	@ 0xb0
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008b50:	2302      	movs	r3, #2
 8008b52:	e0d4      	b.n	8008cfe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008b54:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b58:	2100      	movs	r1, #0
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f002 fe8d 	bl	800b87a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	32b0      	adds	r2, #176	@ 0xb0
 8008b6a:	68f9      	ldr	r1, [r7, #12]
 8008b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	32b0      	adds	r2, #176	@ 0xb0
 8008b7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7c1b      	ldrb	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d138      	bne.n	8008bfe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8008d08 <USBD_CDC_Init+0x1e4>)
 8008b8e:	7819      	ldrb	r1, [r3, #0]
 8008b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b94:	2202      	movs	r2, #2
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f002 fbe9 	bl	800b36e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b9c:	4b5a      	ldr	r3, [pc, #360]	@ (8008d08 <USBD_CDC_Init+0x1e4>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 020f 	and.w	r2, r3, #15
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	3324      	adds	r3, #36	@ 0x24
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bb6:	4b55      	ldr	r3, [pc, #340]	@ (8008d0c <USBD_CDC_Init+0x1e8>)
 8008bb8:	7819      	ldrb	r1, [r3, #0]
 8008bba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f002 fbd4 	bl	800b36e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008bc6:	4b51      	ldr	r3, [pc, #324]	@ (8008d0c <USBD_CDC_Init+0x1e8>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	f003 020f 	and.w	r2, r3, #15
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	440b      	add	r3, r1
 8008bda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008bde:	2201      	movs	r2, #1
 8008be0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008be2:	4b4b      	ldr	r3, [pc, #300]	@ (8008d10 <USBD_CDC_Init+0x1ec>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	3326      	adds	r3, #38	@ 0x26
 8008bf8:	2210      	movs	r2, #16
 8008bfa:	801a      	strh	r2, [r3, #0]
 8008bfc:	e035      	b.n	8008c6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008bfe:	4b42      	ldr	r3, [pc, #264]	@ (8008d08 <USBD_CDC_Init+0x1e4>)
 8008c00:	7819      	ldrb	r1, [r3, #0]
 8008c02:	2340      	movs	r3, #64	@ 0x40
 8008c04:	2202      	movs	r2, #2
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f002 fbb1 	bl	800b36e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8008d08 <USBD_CDC_Init+0x1e4>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	f003 020f 	and.w	r2, r3, #15
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	3324      	adds	r3, #36	@ 0x24
 8008c22:	2201      	movs	r2, #1
 8008c24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c26:	4b39      	ldr	r3, [pc, #228]	@ (8008d0c <USBD_CDC_Init+0x1e8>)
 8008c28:	7819      	ldrb	r1, [r3, #0]
 8008c2a:	2340      	movs	r3, #64	@ 0x40
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f002 fb9d 	bl	800b36e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c34:	4b35      	ldr	r3, [pc, #212]	@ (8008d0c <USBD_CDC_Init+0x1e8>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	f003 020f 	and.w	r2, r3, #15
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	440b      	add	r3, r1
 8008c48:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c50:	4b2f      	ldr	r3, [pc, #188]	@ (8008d10 <USBD_CDC_Init+0x1ec>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	3326      	adds	r3, #38	@ 0x26
 8008c66:	2210      	movs	r2, #16
 8008c68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c6a:	4b29      	ldr	r3, [pc, #164]	@ (8008d10 <USBD_CDC_Init+0x1ec>)
 8008c6c:	7819      	ldrb	r1, [r3, #0]
 8008c6e:	2308      	movs	r3, #8
 8008c70:	2203      	movs	r2, #3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f002 fb7b 	bl	800b36e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008c78:	4b25      	ldr	r3, [pc, #148]	@ (8008d10 <USBD_CDC_Init+0x1ec>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	f003 020f 	and.w	r2, r3, #15
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3324      	adds	r3, #36	@ 0x24
 8008c8e:	2201      	movs	r2, #1
 8008c90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	33b0      	adds	r3, #176	@ 0xb0
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	e018      	b.n	8008cfe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7c1b      	ldrb	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8008d0c <USBD_CDC_Init+0x1e8>)
 8008cd6:	7819      	ldrb	r1, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f002 fc32 	bl	800b54c <USBD_LL_PrepareReceive>
 8008ce8:	e008      	b.n	8008cfc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008cea:	4b08      	ldr	r3, [pc, #32]	@ (8008d0c <USBD_CDC_Init+0x1e8>)
 8008cec:	7819      	ldrb	r1, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cf4:	2340      	movs	r3, #64	@ 0x40
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f002 fc28 	bl	800b54c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	24000097 	.word	0x24000097
 8008d0c:	24000098 	.word	0x24000098
 8008d10:	24000099 	.word	0x24000099

08008d14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008d20:	4b3a      	ldr	r3, [pc, #232]	@ (8008e0c <USBD_CDC_DeInit+0xf8>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f002 fb47 	bl	800b3ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008d2c:	4b37      	ldr	r3, [pc, #220]	@ (8008e0c <USBD_CDC_DeInit+0xf8>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	f003 020f 	and.w	r2, r3, #15
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	3324      	adds	r3, #36	@ 0x24
 8008d42:	2200      	movs	r2, #0
 8008d44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008d46:	4b32      	ldr	r3, [pc, #200]	@ (8008e10 <USBD_CDC_DeInit+0xfc>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f002 fb34 	bl	800b3ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008d52:	4b2f      	ldr	r3, [pc, #188]	@ (8008e10 <USBD_CDC_DeInit+0xfc>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	f003 020f 	and.w	r2, r3, #15
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	440b      	add	r3, r1
 8008d66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008d6e:	4b29      	ldr	r3, [pc, #164]	@ (8008e14 <USBD_CDC_DeInit+0x100>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f002 fb20 	bl	800b3ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008d7a:	4b26      	ldr	r3, [pc, #152]	@ (8008e14 <USBD_CDC_DeInit+0x100>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	f003 020f 	and.w	r2, r3, #15
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	440b      	add	r3, r1
 8008d8e:	3324      	adds	r3, #36	@ 0x24
 8008d90:	2200      	movs	r2, #0
 8008d92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008d94:	4b1f      	ldr	r3, [pc, #124]	@ (8008e14 <USBD_CDC_DeInit+0x100>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f003 020f 	and.w	r2, r3, #15
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	440b      	add	r3, r1
 8008da8:	3326      	adds	r3, #38	@ 0x26
 8008daa:	2200      	movs	r2, #0
 8008dac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	32b0      	adds	r2, #176	@ 0xb0
 8008db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01f      	beq.n	8008e00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	33b0      	adds	r3, #176	@ 0xb0
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	32b0      	adds	r2, #176	@ 0xb0
 8008dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f002 fbf4 	bl	800b5d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	32b0      	adds	r2, #176	@ 0xb0
 8008df2:	2100      	movs	r1, #0
 8008df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	24000097 	.word	0x24000097
 8008e10:	24000098 	.word	0x24000098
 8008e14:	24000099 	.word	0x24000099

08008e18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	32b0      	adds	r2, #176	@ 0xb0
 8008e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e0bf      	b.n	8008fc8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d050      	beq.n	8008ef6 <USBD_CDC_Setup+0xde>
 8008e54:	2b20      	cmp	r3, #32
 8008e56:	f040 80af 	bne.w	8008fb8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d03a      	beq.n	8008ed8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da1b      	bge.n	8008ea4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	33b0      	adds	r3, #176	@ 0xb0
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008e82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	88d2      	ldrh	r2, [r2, #6]
 8008e88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	88db      	ldrh	r3, [r3, #6]
 8008e8e:	2b07      	cmp	r3, #7
 8008e90:	bf28      	it	cs
 8008e92:	2307      	movcs	r3, #7
 8008e94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	89fa      	ldrh	r2, [r7, #14]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 fdd9 	bl	800aa54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008ea2:	e090      	b.n	8008fc6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	785a      	ldrb	r2, [r3, #1]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	88db      	ldrh	r3, [r3, #6]
 8008eb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008eb4:	d803      	bhi.n	8008ebe <USBD_CDC_Setup+0xa6>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	88db      	ldrh	r3, [r3, #6]
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	e000      	b.n	8008ec0 <USBD_CDC_Setup+0xa8>
 8008ebe:	2240      	movs	r2, #64	@ 0x40
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008ec6:	6939      	ldr	r1, [r7, #16]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008ece:	461a      	mov	r2, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 fdeb 	bl	800aaac <USBD_CtlPrepareRx>
      break;
 8008ed6:	e076      	b.n	8008fc6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	33b0      	adds	r3, #176	@ 0xb0
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	7850      	ldrb	r0, [r2, #1]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	4798      	blx	r3
      break;
 8008ef4:	e067      	b.n	8008fc6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	2b0b      	cmp	r3, #11
 8008efc:	d851      	bhi.n	8008fa2 <USBD_CDC_Setup+0x18a>
 8008efe:	a201      	add	r2, pc, #4	@ (adr r2, 8008f04 <USBD_CDC_Setup+0xec>)
 8008f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f04:	08008f35 	.word	0x08008f35
 8008f08:	08008fb1 	.word	0x08008fb1
 8008f0c:	08008fa3 	.word	0x08008fa3
 8008f10:	08008fa3 	.word	0x08008fa3
 8008f14:	08008fa3 	.word	0x08008fa3
 8008f18:	08008fa3 	.word	0x08008fa3
 8008f1c:	08008fa3 	.word	0x08008fa3
 8008f20:	08008fa3 	.word	0x08008fa3
 8008f24:	08008fa3 	.word	0x08008fa3
 8008f28:	08008fa3 	.word	0x08008fa3
 8008f2c:	08008f5f 	.word	0x08008f5f
 8008f30:	08008f89 	.word	0x08008f89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d107      	bne.n	8008f50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f40:	f107 030a 	add.w	r3, r7, #10
 8008f44:	2202      	movs	r2, #2
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 fd83 	bl	800aa54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f4e:	e032      	b.n	8008fb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f001 fd01 	bl	800a95a <USBD_CtlError>
            ret = USBD_FAIL;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	75fb      	strb	r3, [r7, #23]
          break;
 8008f5c:	e02b      	b.n	8008fb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d107      	bne.n	8008f7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f6a:	f107 030d 	add.w	r3, r7, #13
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f001 fd6e 	bl	800aa54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f78:	e01d      	b.n	8008fb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fcec 	bl	800a95a <USBD_CtlError>
            ret = USBD_FAIL;
 8008f82:	2303      	movs	r3, #3
 8008f84:	75fb      	strb	r3, [r7, #23]
          break;
 8008f86:	e016      	b.n	8008fb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d00f      	beq.n	8008fb4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 fcdf 	bl	800a95a <USBD_CtlError>
            ret = USBD_FAIL;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008fa0:	e008      	b.n	8008fb4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 fcd8 	bl	800a95a <USBD_CtlError>
          ret = USBD_FAIL;
 8008faa:	2303      	movs	r3, #3
 8008fac:	75fb      	strb	r3, [r7, #23]
          break;
 8008fae:	e002      	b.n	8008fb6 <USBD_CDC_Setup+0x19e>
          break;
 8008fb0:	bf00      	nop
 8008fb2:	e008      	b.n	8008fc6 <USBD_CDC_Setup+0x1ae>
          break;
 8008fb4:	bf00      	nop
      }
      break;
 8008fb6:	e006      	b.n	8008fc6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 fccd 	bl	800a95a <USBD_CtlError>
      ret = USBD_FAIL;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fe2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	32b0      	adds	r2, #176	@ 0xb0
 8008fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e065      	b.n	80090c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	32b0      	adds	r2, #176	@ 0xb0
 8009004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009008:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	f003 020f 	and.w	r2, r3, #15
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	4613      	mov	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	440b      	add	r3, r1
 800901c:	3318      	adds	r3, #24
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d02f      	beq.n	8009084 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	f003 020f 	and.w	r2, r3, #15
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	440b      	add	r3, r1
 8009036:	3318      	adds	r3, #24
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	f003 010f 	and.w	r1, r3, #15
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	460b      	mov	r3, r1
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	440b      	add	r3, r1
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4403      	add	r3, r0
 800904c:	331c      	adds	r3, #28
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	fbb2 f1f3 	udiv	r1, r2, r3
 8009054:	fb01 f303 	mul.w	r3, r1, r3
 8009058:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800905a:	2b00      	cmp	r3, #0
 800905c:	d112      	bne.n	8009084 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800905e:	78fb      	ldrb	r3, [r7, #3]
 8009060:	f003 020f 	and.w	r2, r3, #15
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	3318      	adds	r3, #24
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009076:	78f9      	ldrb	r1, [r7, #3]
 8009078:	2300      	movs	r3, #0
 800907a:	2200      	movs	r2, #0
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f002 fa44 	bl	800b50a <USBD_LL_Transmit>
 8009082:	e01f      	b.n	80090c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	33b0      	adds	r3, #176	@ 0xb0
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d010      	beq.n	80090c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	33b0      	adds	r3, #176	@ 0xb0
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	460b      	mov	r3, r1
 80090d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	32b0      	adds	r2, #176	@ 0xb0
 80090e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	32b0      	adds	r2, #176	@ 0xb0
 80090f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80090fc:	2303      	movs	r3, #3
 80090fe:	e01a      	b.n	8009136 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f002 fa42 	bl	800b58e <USBD_LL_GetRxDataSize>
 800910a:	4602      	mov	r2, r0
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	33b0      	adds	r3, #176	@ 0xb0
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009130:	4611      	mov	r1, r2
 8009132:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	32b0      	adds	r2, #176	@ 0xb0
 8009150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009154:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800915c:	2303      	movs	r3, #3
 800915e:	e024      	b.n	80091aa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	33b0      	adds	r3, #176	@ 0xb0
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d019      	beq.n	80091a8 <USBD_CDC_EP0_RxReady+0x6a>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800917a:	2bff      	cmp	r3, #255	@ 0xff
 800917c:	d014      	beq.n	80091a8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	33b0      	adds	r3, #176	@ 0xb0
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009196:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800919e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	22ff      	movs	r2, #255	@ 0xff
 80091a4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091bc:	2182      	movs	r1, #130	@ 0x82
 80091be:	4818      	ldr	r0, [pc, #96]	@ (8009220 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091c0:	f000 fd6b 	bl	8009c9a <USBD_GetEpDesc>
 80091c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091c6:	2101      	movs	r1, #1
 80091c8:	4815      	ldr	r0, [pc, #84]	@ (8009220 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091ca:	f000 fd66 	bl	8009c9a <USBD_GetEpDesc>
 80091ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091d0:	2181      	movs	r1, #129	@ 0x81
 80091d2:	4813      	ldr	r0, [pc, #76]	@ (8009220 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091d4:	f000 fd61 	bl	8009c9a <USBD_GetEpDesc>
 80091d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2210      	movs	r2, #16
 80091e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091f4:	711a      	strb	r2, [r3, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d006      	beq.n	800920e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009208:	711a      	strb	r2, [r3, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2243      	movs	r2, #67	@ 0x43
 8009212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009214:	4b02      	ldr	r3, [pc, #8]	@ (8009220 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	24000054 	.word	0x24000054

08009224 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800922c:	2182      	movs	r1, #130	@ 0x82
 800922e:	4818      	ldr	r0, [pc, #96]	@ (8009290 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009230:	f000 fd33 	bl	8009c9a <USBD_GetEpDesc>
 8009234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009236:	2101      	movs	r1, #1
 8009238:	4815      	ldr	r0, [pc, #84]	@ (8009290 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800923a:	f000 fd2e 	bl	8009c9a <USBD_GetEpDesc>
 800923e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009240:	2181      	movs	r1, #129	@ 0x81
 8009242:	4813      	ldr	r0, [pc, #76]	@ (8009290 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009244:	f000 fd29 	bl	8009c9a <USBD_GetEpDesc>
 8009248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2210      	movs	r2, #16
 8009254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2200      	movs	r2, #0
 8009260:	711a      	strb	r2, [r3, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f042 0202 	orr.w	r2, r2, #2
 8009268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d006      	beq.n	800927e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	711a      	strb	r2, [r3, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f042 0202 	orr.w	r2, r2, #2
 800927c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2243      	movs	r2, #67	@ 0x43
 8009282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009284:	4b02      	ldr	r3, [pc, #8]	@ (8009290 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	24000054 	.word	0x24000054

08009294 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800929c:	2182      	movs	r1, #130	@ 0x82
 800929e:	4818      	ldr	r0, [pc, #96]	@ (8009300 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092a0:	f000 fcfb 	bl	8009c9a <USBD_GetEpDesc>
 80092a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092a6:	2101      	movs	r1, #1
 80092a8:	4815      	ldr	r0, [pc, #84]	@ (8009300 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092aa:	f000 fcf6 	bl	8009c9a <USBD_GetEpDesc>
 80092ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092b0:	2181      	movs	r1, #129	@ 0x81
 80092b2:	4813      	ldr	r0, [pc, #76]	@ (8009300 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092b4:	f000 fcf1 	bl	8009c9a <USBD_GetEpDesc>
 80092b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2210      	movs	r2, #16
 80092c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d006      	beq.n	80092da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092d4:	711a      	strb	r2, [r3, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d006      	beq.n	80092ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092e8:	711a      	strb	r2, [r3, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2243      	movs	r2, #67	@ 0x43
 80092f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092f4:	4b02      	ldr	r3, [pc, #8]	@ (8009300 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	24000054 	.word	0x24000054

08009304 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	220a      	movs	r2, #10
 8009310:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009312:	4b03      	ldr	r3, [pc, #12]	@ (8009320 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	24000010 	.word	0x24000010

08009324 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009334:	2303      	movs	r3, #3
 8009336:	e009      	b.n	800934c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	33b0      	adds	r3, #176	@ 0xb0
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	32b0      	adds	r2, #176	@ 0xb0
 800936e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009372:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800937a:	2303      	movs	r3, #3
 800937c:	e008      	b.n	8009390 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	371c      	adds	r7, #28
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	32b0      	adds	r2, #176	@ 0xb0
 80093b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80093bc:	2303      	movs	r3, #3
 80093be:	e004      	b.n	80093ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
	...

080093d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	32b0      	adds	r2, #176	@ 0xb0
 80093ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80093f0:	2301      	movs	r3, #1
 80093f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e025      	b.n	800944a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009404:	2b00      	cmp	r3, #0
 8009406:	d11f      	bne.n	8009448 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2201      	movs	r2, #1
 800940c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009410:	4b10      	ldr	r3, [pc, #64]	@ (8009454 <USBD_CDC_TransmitPacket+0x7c>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	f003 020f 	and.w	r2, r3, #15
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4403      	add	r3, r0
 800942a:	3318      	adds	r3, #24
 800942c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800942e:	4b09      	ldr	r3, [pc, #36]	@ (8009454 <USBD_CDC_TransmitPacket+0x7c>)
 8009430:	7819      	ldrb	r1, [r3, #0]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f002 f863 	bl	800b50a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	24000097 	.word	0x24000097

08009458 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	32b0      	adds	r2, #176	@ 0xb0
 800946a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	32b0      	adds	r2, #176	@ 0xb0
 800947a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009482:	2303      	movs	r3, #3
 8009484:	e018      	b.n	80094b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	7c1b      	ldrb	r3, [r3, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800948e:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <USBD_CDC_ReceivePacket+0x68>)
 8009490:	7819      	ldrb	r1, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f002 f855 	bl	800b54c <USBD_LL_PrepareReceive>
 80094a2:	e008      	b.n	80094b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094a4:	4b06      	ldr	r3, [pc, #24]	@ (80094c0 <USBD_CDC_ReceivePacket+0x68>)
 80094a6:	7819      	ldrb	r1, [r3, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094ae:	2340      	movs	r3, #64	@ 0x40
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f002 f84b 	bl	800b54c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	24000098 	.word	0x24000098

080094c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	4613      	mov	r3, r2
 80094d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80094d8:	4817      	ldr	r0, [pc, #92]	@ (8009538 <USBD_Init+0x74>)
 80094da:	f002 f971 	bl	800b7c0 <iprintf>
 80094de:	4817      	ldr	r0, [pc, #92]	@ (800953c <USBD_Init+0x78>)
 80094e0:	f002 f96e 	bl	800b7c0 <iprintf>
 80094e4:	200a      	movs	r0, #10
 80094e6:	f002 f97d 	bl	800b7e4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e01f      	b.n	800952e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	79fa      	ldrb	r2, [r7, #7]
 8009520:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f001 feb6 	bl	800b294 <USBD_LL_Init>
 8009528:	4603      	mov	r3, r0
 800952a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	0800c554 	.word	0x0800c554
 800953c:	0800c55c 	.word	0x0800c55c

08009540 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8009554:	481a      	ldr	r0, [pc, #104]	@ (80095c0 <USBD_RegisterClass+0x80>)
 8009556:	f002 f933 	bl	800b7c0 <iprintf>
 800955a:	481a      	ldr	r0, [pc, #104]	@ (80095c4 <USBD_RegisterClass+0x84>)
 800955c:	f002 f930 	bl	800b7c0 <iprintf>
 8009560:	200a      	movs	r0, #10
 8009562:	f002 f93f 	bl	800b7e4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009566:	2303      	movs	r3, #3
 8009568:	e025      	b.n	80095b6 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	32ae      	adds	r2, #174	@ 0xae
 800957c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00f      	beq.n	80095a6 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	32ae      	adds	r2, #174	@ 0xae
 8009590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009596:	f107 020e 	add.w	r2, r7, #14
 800959a:	4610      	mov	r0, r2
 800959c:	4798      	blx	r3
 800959e:	4602      	mov	r2, r0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	0800c554 	.word	0x0800c554
 80095c4:	0800c574 	.word	0x0800c574

080095c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f001 feb1 	bl	800b338 <USBD_LL_Start>
 80095d6:	4603      	mov	r3, r0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800960c:	2b00      	cmp	r3, #0
 800960e:	d009      	beq.n	8009624 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	78fa      	ldrb	r2, [r7, #3]
 800961a:	4611      	mov	r1, r2
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	4798      	blx	r3
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	460b      	mov	r3, r1
 8009638:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	78fa      	ldrb	r2, [r7, #3]
 8009648:	4611      	mov	r1, r2
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	4798      	blx	r3
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009654:	2303      	movs	r3, #3
 8009656:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f001 f936 	bl	800a8e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009688:	461a      	mov	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009696:	f003 031f 	and.w	r3, r3, #31
 800969a:	2b02      	cmp	r3, #2
 800969c:	d01a      	beq.n	80096d4 <USBD_LL_SetupStage+0x72>
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d822      	bhi.n	80096e8 <USBD_LL_SetupStage+0x86>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <USBD_LL_SetupStage+0x4a>
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d00a      	beq.n	80096c0 <USBD_LL_SetupStage+0x5e>
 80096aa:	e01d      	b.n	80096e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fb63 	bl	8009d80 <USBD_StdDevReq>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73fb      	strb	r3, [r7, #15]
      break;
 80096be:	e020      	b.n	8009702 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fbcb 	bl	8009e64 <USBD_StdItfReq>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73fb      	strb	r3, [r7, #15]
      break;
 80096d2:	e016      	b.n	8009702 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc2d 	bl	8009f3c <USBD_StdEPReq>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73fb      	strb	r3, [r7, #15]
      break;
 80096e6:	e00c      	b.n	8009702 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 fe7e 	bl	800b3f8 <USBD_LL_StallEP>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009700:	bf00      	nop
  }

  return ret;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	460b      	mov	r3, r1
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800971e:	7afb      	ldrb	r3, [r7, #11]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d16e      	bne.n	8009802 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800972a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009732:	2b03      	cmp	r3, #3
 8009734:	f040 8098 	bne.w	8009868 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	429a      	cmp	r2, r3
 8009742:	d913      	bls.n	800976c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	1ad2      	subs	r2, r2, r3
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	4293      	cmp	r3, r2
 800975c:	bf28      	it	cs
 800975e:	4613      	movcs	r3, r2
 8009760:	461a      	mov	r2, r3
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f001 f9be 	bl	800aae6 <USBD_CtlContinueRx>
 800976a:	e07d      	b.n	8009868 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009772:	f003 031f 	and.w	r3, r3, #31
 8009776:	2b02      	cmp	r3, #2
 8009778:	d014      	beq.n	80097a4 <USBD_LL_DataOutStage+0x98>
 800977a:	2b02      	cmp	r3, #2
 800977c:	d81d      	bhi.n	80097ba <USBD_LL_DataOutStage+0xae>
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <USBD_LL_DataOutStage+0x7c>
 8009782:	2b01      	cmp	r3, #1
 8009784:	d003      	beq.n	800978e <USBD_LL_DataOutStage+0x82>
 8009786:	e018      	b.n	80097ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	75bb      	strb	r3, [r7, #22]
            break;
 800978c:	e018      	b.n	80097c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009794:	b2db      	uxtb	r3, r3
 8009796:	4619      	mov	r1, r3
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 fa64 	bl	8009c66 <USBD_CoreFindIF>
 800979e:	4603      	mov	r3, r0
 80097a0:	75bb      	strb	r3, [r7, #22]
            break;
 80097a2:	e00d      	b.n	80097c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	4619      	mov	r1, r3
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fa66 	bl	8009c80 <USBD_CoreFindEP>
 80097b4:	4603      	mov	r3, r0
 80097b6:	75bb      	strb	r3, [r7, #22]
            break;
 80097b8:	e002      	b.n	80097c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	75bb      	strb	r3, [r7, #22]
            break;
 80097be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80097c0:	7dbb      	ldrb	r3, [r7, #22]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d119      	bne.n	80097fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d113      	bne.n	80097fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80097d2:	7dba      	ldrb	r2, [r7, #22]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	32ae      	adds	r2, #174	@ 0xae
 80097d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00b      	beq.n	80097fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80097e2:	7dba      	ldrb	r2, [r7, #22]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80097ea:	7dba      	ldrb	r2, [r7, #22]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	32ae      	adds	r2, #174	@ 0xae
 80097f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f001 f984 	bl	800ab08 <USBD_CtlSendStatus>
 8009800:	e032      	b.n	8009868 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009802:	7afb      	ldrb	r3, [r7, #11]
 8009804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009808:	b2db      	uxtb	r3, r3
 800980a:	4619      	mov	r1, r3
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fa37 	bl	8009c80 <USBD_CoreFindEP>
 8009812:	4603      	mov	r3, r0
 8009814:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009816:	7dbb      	ldrb	r3, [r7, #22]
 8009818:	2bff      	cmp	r3, #255	@ 0xff
 800981a:	d025      	beq.n	8009868 <USBD_LL_DataOutStage+0x15c>
 800981c:	7dbb      	ldrb	r3, [r7, #22]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d122      	bne.n	8009868 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b03      	cmp	r3, #3
 800982c:	d117      	bne.n	800985e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800982e:	7dba      	ldrb	r2, [r7, #22]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	32ae      	adds	r2, #174	@ 0xae
 8009834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00f      	beq.n	800985e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800983e:	7dba      	ldrb	r2, [r7, #22]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009846:	7dba      	ldrb	r2, [r7, #22]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	32ae      	adds	r2, #174	@ 0xae
 800984c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	7afa      	ldrb	r2, [r7, #11]
 8009854:	4611      	mov	r1, r2
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	4798      	blx	r3
 800985a:	4603      	mov	r3, r0
 800985c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009864:	7dfb      	ldrb	r3, [r7, #23]
 8009866:	e000      	b.n	800986a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b086      	sub	sp, #24
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	460b      	mov	r3, r1
 800987c:	607a      	str	r2, [r7, #4]
 800987e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d16f      	bne.n	8009966 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3314      	adds	r3, #20
 800988a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009892:	2b02      	cmp	r3, #2
 8009894:	d15a      	bne.n	800994c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d914      	bls.n	80098cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	689a      	ldr	r2, [r3, #8]
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	1ad2      	subs	r2, r2, r3
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	461a      	mov	r2, r3
 80098b6:	6879      	ldr	r1, [r7, #4]
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f001 f8e6 	bl	800aa8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098be:	2300      	movs	r3, #0
 80098c0:	2200      	movs	r2, #0
 80098c2:	2100      	movs	r1, #0
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f001 fe41 	bl	800b54c <USBD_LL_PrepareReceive>
 80098ca:	e03f      	b.n	800994c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	68da      	ldr	r2, [r3, #12]
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d11c      	bne.n	8009912 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d316      	bcc.n	8009912 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d20f      	bcs.n	8009912 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098f2:	2200      	movs	r2, #0
 80098f4:	2100      	movs	r1, #0
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f001 f8c7 	bl	800aa8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009904:	2300      	movs	r3, #0
 8009906:	2200      	movs	r2, #0
 8009908:	2100      	movs	r1, #0
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f001 fe1e 	bl	800b54c <USBD_LL_PrepareReceive>
 8009910:	e01c      	b.n	800994c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b03      	cmp	r3, #3
 800991c:	d10f      	bne.n	800993e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d009      	beq.n	800993e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800993e:	2180      	movs	r1, #128	@ 0x80
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f001 fd59 	bl	800b3f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f001 f8f1 	bl	800ab2e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d03a      	beq.n	80099cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f7ff fe42 	bl	80095e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009964:	e032      	b.n	80099cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009966:	7afb      	ldrb	r3, [r7, #11]
 8009968:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800996c:	b2db      	uxtb	r3, r3
 800996e:	4619      	mov	r1, r3
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 f985 	bl	8009c80 <USBD_CoreFindEP>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	2bff      	cmp	r3, #255	@ 0xff
 800997e:	d025      	beq.n	80099cc <USBD_LL_DataInStage+0x15a>
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d122      	bne.n	80099cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b03      	cmp	r3, #3
 8009990:	d11c      	bne.n	80099cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009992:	7dfa      	ldrb	r2, [r7, #23]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	32ae      	adds	r2, #174	@ 0xae
 8009998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d014      	beq.n	80099cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80099a2:	7dfa      	ldrb	r2, [r7, #23]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80099aa:	7dfa      	ldrb	r2, [r7, #23]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	32ae      	adds	r2, #174	@ 0xae
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	7afa      	ldrb	r2, [r7, #11]
 80099b8:	4611      	mov	r1, r2
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	4798      	blx	r3
 80099be:	4603      	mov	r3, r0
 80099c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80099c2:	7dbb      	ldrb	r3, [r7, #22]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80099c8:	7dbb      	ldrb	r3, [r7, #22]
 80099ca:	e000      	b.n	80099ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d014      	beq.n	8009a3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00e      	beq.n	8009a3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	6852      	ldr	r2, [r2, #4]
 8009a2a:	b2d2      	uxtb	r2, r2
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	4798      	blx	r3
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a3c:	2340      	movs	r3, #64	@ 0x40
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2100      	movs	r1, #0
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f001 fc93 	bl	800b36e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2240      	movs	r2, #64	@ 0x40
 8009a54:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a58:	2340      	movs	r3, #64	@ 0x40
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2180      	movs	r1, #128	@ 0x80
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fc85 	bl	800b36e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2240      	movs	r2, #64	@ 0x40
 8009a6e:	621a      	str	r2, [r3, #32]

  return ret;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	460b      	mov	r3, r1
 8009a84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	78fa      	ldrb	r2, [r7, #3]
 8009a8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	d006      	beq.n	8009abc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2204      	movs	r2, #4
 8009ac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b04      	cmp	r3, #4
 8009ae4:	d106      	bne.n	8009af4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d110      	bne.n	8009b38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00b      	beq.n	8009b38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	32ae      	adds	r2, #174	@ 0xae
 8009b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e01c      	b.n	8009b9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d115      	bne.n	8009b9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	32ae      	adds	r2, #174	@ 0xae
 8009b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	32ae      	adds	r2, #174	@ 0xae
 8009b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	4611      	mov	r1, r2
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b082      	sub	sp, #8
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	32ae      	adds	r2, #174	@ 0xae
 8009bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e01c      	b.n	8009c02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d115      	bne.n	8009c00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	32ae      	adds	r2, #174	@ 0xae
 8009bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	32ae      	adds	r2, #174	@ 0xae
 8009bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf8:	78fa      	ldrb	r2, [r7, #3]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00e      	beq.n	8009c5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	6852      	ldr	r2, [r2, #4]
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b083      	sub	sp, #12
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009c72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009c8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b086      	sub	sp, #24
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	885b      	ldrh	r3, [r3, #2]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d91f      	bls.n	8009d00 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009cc6:	e013      	b.n	8009cf0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009cc8:	f107 030a 	add.w	r3, r7, #10
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6978      	ldr	r0, [r7, #20]
 8009cd0:	f000 f81b 	bl	8009d0a <USBD_GetNextDesc>
 8009cd4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	785b      	ldrb	r3, [r3, #1]
 8009cda:	2b05      	cmp	r3, #5
 8009cdc:	d108      	bne.n	8009cf0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	789b      	ldrb	r3, [r3, #2]
 8009ce6:	78fa      	ldrb	r2, [r7, #3]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d008      	beq.n	8009cfe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009cec:	2300      	movs	r3, #0
 8009cee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	885b      	ldrh	r3, [r3, #2]
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	897b      	ldrh	r3, [r7, #10]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d8e5      	bhi.n	8009cc8 <USBD_GetEpDesc+0x2e>
 8009cfc:	e000      	b.n	8009d00 <USBD_GetEpDesc+0x66>
          break;
 8009cfe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d00:	693b      	ldr	r3, [r7, #16]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	4413      	add	r3, r2
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4413      	add	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d34:	68fb      	ldr	r3, [r7, #12]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b087      	sub	sp, #28
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	3301      	adds	r3, #1
 8009d58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009d60:	8a3b      	ldrh	r3, [r7, #16]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	b21a      	sxth	r2, r3
 8009d66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	b21b      	sxth	r3, r3
 8009d6e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009d70:	89fb      	ldrh	r3, [r7, #14]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d96:	2b40      	cmp	r3, #64	@ 0x40
 8009d98:	d005      	beq.n	8009da6 <USBD_StdDevReq+0x26>
 8009d9a:	2b40      	cmp	r3, #64	@ 0x40
 8009d9c:	d857      	bhi.n	8009e4e <USBD_StdDevReq+0xce>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00f      	beq.n	8009dc2 <USBD_StdDevReq+0x42>
 8009da2:	2b20      	cmp	r3, #32
 8009da4:	d153      	bne.n	8009e4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	32ae      	adds	r2, #174	@ 0xae
 8009db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc0:	e04a      	b.n	8009e58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b09      	cmp	r3, #9
 8009dc8:	d83b      	bhi.n	8009e42 <USBD_StdDevReq+0xc2>
 8009dca:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd0 <USBD_StdDevReq+0x50>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009e25 	.word	0x08009e25
 8009dd4:	08009e39 	.word	0x08009e39
 8009dd8:	08009e43 	.word	0x08009e43
 8009ddc:	08009e2f 	.word	0x08009e2f
 8009de0:	08009e43 	.word	0x08009e43
 8009de4:	08009e03 	.word	0x08009e03
 8009de8:	08009df9 	.word	0x08009df9
 8009dec:	08009e43 	.word	0x08009e43
 8009df0:	08009e1b 	.word	0x08009e1b
 8009df4:	08009e0d 	.word	0x08009e0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009df8:	6839      	ldr	r1, [r7, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fa3c 	bl	800a278 <USBD_GetDescriptor>
          break;
 8009e00:	e024      	b.n	8009e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fbcb 	bl	800a5a0 <USBD_SetAddress>
          break;
 8009e0a:	e01f      	b.n	8009e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fc0a 	bl	800a628 <USBD_SetConfig>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]
          break;
 8009e18:	e018      	b.n	8009e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fcad 	bl	800a77c <USBD_GetConfig>
          break;
 8009e22:	e013      	b.n	8009e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fcde 	bl	800a7e8 <USBD_GetStatus>
          break;
 8009e2c:	e00e      	b.n	8009e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fd0d 	bl	800a850 <USBD_SetFeature>
          break;
 8009e36:	e009      	b.n	8009e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fd31 	bl	800a8a2 <USBD_ClrFeature>
          break;
 8009e40:	e004      	b.n	8009e4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fd88 	bl	800a95a <USBD_CtlError>
          break;
 8009e4a:	bf00      	nop
      }
      break;
 8009e4c:	e004      	b.n	8009e58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fd82 	bl	800a95a <USBD_CtlError>
      break;
 8009e56:	bf00      	nop
  }

  return ret;
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop

08009e64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e7a:	2b40      	cmp	r3, #64	@ 0x40
 8009e7c:	d005      	beq.n	8009e8a <USBD_StdItfReq+0x26>
 8009e7e:	2b40      	cmp	r3, #64	@ 0x40
 8009e80:	d852      	bhi.n	8009f28 <USBD_StdItfReq+0xc4>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <USBD_StdItfReq+0x26>
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	d14e      	bne.n	8009f28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	3b01      	subs	r3, #1
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d840      	bhi.n	8009f1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	889b      	ldrh	r3, [r3, #4]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d836      	bhi.n	8009f10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	889b      	ldrh	r3, [r3, #4]
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fedb 	bl	8009c66 <USBD_CoreFindIF>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	2bff      	cmp	r3, #255	@ 0xff
 8009eb8:	d01d      	beq.n	8009ef6 <USBD_StdItfReq+0x92>
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d11a      	bne.n	8009ef6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ec0:	7bba      	ldrb	r2, [r7, #14]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	32ae      	adds	r2, #174	@ 0xae
 8009ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00f      	beq.n	8009ef0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ed0:	7bba      	ldrb	r2, [r7, #14]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ed8:	7bba      	ldrb	r2, [r7, #14]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	32ae      	adds	r2, #174	@ 0xae
 8009ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009eee:	e004      	b.n	8009efa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ef4:	e001      	b.n	8009efa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	88db      	ldrh	r3, [r3, #6]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d110      	bne.n	8009f24 <USBD_StdItfReq+0xc0>
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10d      	bne.n	8009f24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fdfd 	bl	800ab08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f0e:	e009      	b.n	8009f24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fd21 	bl	800a95a <USBD_CtlError>
          break;
 8009f18:	e004      	b.n	8009f24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fd1c 	bl	800a95a <USBD_CtlError>
          break;
 8009f22:	e000      	b.n	8009f26 <USBD_StdItfReq+0xc2>
          break;
 8009f24:	bf00      	nop
      }
      break;
 8009f26:	e004      	b.n	8009f32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fd15 	bl	800a95a <USBD_CtlError>
      break;
 8009f30:	bf00      	nop
  }

  return ret;
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	889b      	ldrh	r3, [r3, #4]
 8009f4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f58:	2b40      	cmp	r3, #64	@ 0x40
 8009f5a:	d007      	beq.n	8009f6c <USBD_StdEPReq+0x30>
 8009f5c:	2b40      	cmp	r3, #64	@ 0x40
 8009f5e:	f200 817f 	bhi.w	800a260 <USBD_StdEPReq+0x324>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d02a      	beq.n	8009fbc <USBD_StdEPReq+0x80>
 8009f66:	2b20      	cmp	r3, #32
 8009f68:	f040 817a 	bne.w	800a260 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7ff fe85 	bl	8009c80 <USBD_CoreFindEP>
 8009f76:	4603      	mov	r3, r0
 8009f78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f7a:	7b7b      	ldrb	r3, [r7, #13]
 8009f7c:	2bff      	cmp	r3, #255	@ 0xff
 8009f7e:	f000 8174 	beq.w	800a26a <USBD_StdEPReq+0x32e>
 8009f82:	7b7b      	ldrb	r3, [r7, #13]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f040 8170 	bne.w	800a26a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009f8a:	7b7a      	ldrb	r2, [r7, #13]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009f92:	7b7a      	ldrb	r2, [r7, #13]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	32ae      	adds	r2, #174	@ 0xae
 8009f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 8163 	beq.w	800a26a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009fa4:	7b7a      	ldrb	r2, [r7, #13]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	32ae      	adds	r2, #174	@ 0xae
 8009faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009fba:	e156      	b.n	800a26a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	785b      	ldrb	r3, [r3, #1]
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d008      	beq.n	8009fd6 <USBD_StdEPReq+0x9a>
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	f300 8145 	bgt.w	800a254 <USBD_StdEPReq+0x318>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 809b 	beq.w	800a106 <USBD_StdEPReq+0x1ca>
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d03c      	beq.n	800a04e <USBD_StdEPReq+0x112>
 8009fd4:	e13e      	b.n	800a254 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d002      	beq.n	8009fe8 <USBD_StdEPReq+0xac>
 8009fe2:	2b03      	cmp	r3, #3
 8009fe4:	d016      	beq.n	800a014 <USBD_StdEPReq+0xd8>
 8009fe6:	e02c      	b.n	800a042 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00d      	beq.n	800a00a <USBD_StdEPReq+0xce>
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
 8009ff0:	2b80      	cmp	r3, #128	@ 0x80
 8009ff2:	d00a      	beq.n	800a00a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f001 f9fd 	bl	800b3f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ffe:	2180      	movs	r1, #128	@ 0x80
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 f9f9 	bl	800b3f8 <USBD_LL_StallEP>
 800a006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a008:	e020      	b.n	800a04c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fca4 	bl	800a95a <USBD_CtlError>
              break;
 800a012:	e01b      	b.n	800a04c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	885b      	ldrh	r3, [r3, #2]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10e      	bne.n	800a03a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00b      	beq.n	800a03a <USBD_StdEPReq+0xfe>
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b80      	cmp	r3, #128	@ 0x80
 800a026:	d008      	beq.n	800a03a <USBD_StdEPReq+0xfe>
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	88db      	ldrh	r3, [r3, #6]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d104      	bne.n	800a03a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 f9df 	bl	800b3f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fd64 	bl	800ab08 <USBD_CtlSendStatus>

              break;
 800a040:	e004      	b.n	800a04c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fc88 	bl	800a95a <USBD_CtlError>
              break;
 800a04a:	bf00      	nop
          }
          break;
 800a04c:	e107      	b.n	800a25e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d002      	beq.n	800a060 <USBD_StdEPReq+0x124>
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d016      	beq.n	800a08c <USBD_StdEPReq+0x150>
 800a05e:	e04b      	b.n	800a0f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a060:	7bbb      	ldrb	r3, [r7, #14]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00d      	beq.n	800a082 <USBD_StdEPReq+0x146>
 800a066:	7bbb      	ldrb	r3, [r7, #14]
 800a068:	2b80      	cmp	r3, #128	@ 0x80
 800a06a:	d00a      	beq.n	800a082 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 f9c1 	bl	800b3f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a076:	2180      	movs	r1, #128	@ 0x80
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f001 f9bd 	bl	800b3f8 <USBD_LL_StallEP>
 800a07e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a080:	e040      	b.n	800a104 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fc68 	bl	800a95a <USBD_CtlError>
              break;
 800a08a:	e03b      	b.n	800a104 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	885b      	ldrh	r3, [r3, #2]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d136      	bne.n	800a102 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d004      	beq.n	800a0a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f001 f9c7 	bl	800b436 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fd2d 	bl	800ab08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7ff fde4 	bl	8009c80 <USBD_CoreFindEP>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0bc:	7b7b      	ldrb	r3, [r7, #13]
 800a0be:	2bff      	cmp	r3, #255	@ 0xff
 800a0c0:	d01f      	beq.n	800a102 <USBD_StdEPReq+0x1c6>
 800a0c2:	7b7b      	ldrb	r3, [r7, #13]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d11c      	bne.n	800a102 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a0c8:	7b7a      	ldrb	r2, [r7, #13]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a0d0:	7b7a      	ldrb	r2, [r7, #13]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	32ae      	adds	r2, #174	@ 0xae
 800a0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d010      	beq.n	800a102 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a0e0:	7b7a      	ldrb	r2, [r7, #13]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	32ae      	adds	r2, #174	@ 0xae
 800a0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	4798      	blx	r3
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a0f6:	e004      	b.n	800a102 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fc2d 	bl	800a95a <USBD_CtlError>
              break;
 800a100:	e000      	b.n	800a104 <USBD_StdEPReq+0x1c8>
              break;
 800a102:	bf00      	nop
          }
          break;
 800a104:	e0ab      	b.n	800a25e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d002      	beq.n	800a118 <USBD_StdEPReq+0x1dc>
 800a112:	2b03      	cmp	r3, #3
 800a114:	d032      	beq.n	800a17c <USBD_StdEPReq+0x240>
 800a116:	e097      	b.n	800a248 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d007      	beq.n	800a12e <USBD_StdEPReq+0x1f2>
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b80      	cmp	r3, #128	@ 0x80
 800a122:	d004      	beq.n	800a12e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fc17 	bl	800a95a <USBD_CtlError>
                break;
 800a12c:	e091      	b.n	800a252 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a12e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a132:	2b00      	cmp	r3, #0
 800a134:	da0b      	bge.n	800a14e <USBD_StdEPReq+0x212>
 800a136:	7bbb      	ldrb	r3, [r7, #14]
 800a138:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a13c:	4613      	mov	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	3310      	adds	r3, #16
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	4413      	add	r3, r2
 800a14a:	3304      	adds	r3, #4
 800a14c:	e00b      	b.n	800a166 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a154:	4613      	mov	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	4413      	add	r3, r2
 800a164:	3304      	adds	r3, #4
 800a166:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2200      	movs	r2, #0
 800a16c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2202      	movs	r2, #2
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fc6d 	bl	800aa54 <USBD_CtlSendData>
              break;
 800a17a:	e06a      	b.n	800a252 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a17c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a180:	2b00      	cmp	r3, #0
 800a182:	da11      	bge.n	800a1a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	f003 020f 	and.w	r2, r3, #15
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4613      	mov	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	3324      	adds	r3, #36	@ 0x24
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d117      	bne.n	800a1ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fbda 	bl	800a95a <USBD_CtlError>
                  break;
 800a1a6:	e054      	b.n	800a252 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	f003 020f 	and.w	r2, r3, #15
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	440b      	add	r3, r1
 800a1ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d104      	bne.n	800a1ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fbc7 	bl	800a95a <USBD_CtlError>
                  break;
 800a1cc:	e041      	b.n	800a252 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	da0b      	bge.n	800a1ee <USBD_StdEPReq+0x2b2>
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	3310      	adds	r3, #16
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	e00b      	b.n	800a206 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1ee:	7bbb      	ldrb	r3, [r7, #14]
 800a1f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	4413      	add	r3, r2
 800a204:	3304      	adds	r3, #4
 800a206:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <USBD_StdEPReq+0x2d8>
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
 800a210:	2b80      	cmp	r3, #128	@ 0x80
 800a212:	d103      	bne.n	800a21c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	e00e      	b.n	800a23a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f001 f927 	bl	800b474 <USBD_LL_IsStallEP>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2201      	movs	r2, #1
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	e002      	b.n	800a23a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2202      	movs	r2, #2
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fc07 	bl	800aa54 <USBD_CtlSendData>
              break;
 800a246:	e004      	b.n	800a252 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fb85 	bl	800a95a <USBD_CtlError>
              break;
 800a250:	bf00      	nop
          }
          break;
 800a252:	e004      	b.n	800a25e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fb7f 	bl	800a95a <USBD_CtlError>
          break;
 800a25c:	bf00      	nop
      }
      break;
 800a25e:	e005      	b.n	800a26c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fb79 	bl	800a95a <USBD_CtlError>
      break;
 800a268:	e000      	b.n	800a26c <USBD_StdEPReq+0x330>
      break;
 800a26a:	bf00      	nop
  }

  return ret;
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	885b      	ldrh	r3, [r3, #2]
 800a292:	0a1b      	lsrs	r3, r3, #8
 800a294:	b29b      	uxth	r3, r3
 800a296:	3b01      	subs	r3, #1
 800a298:	2b0e      	cmp	r3, #14
 800a29a:	f200 8152 	bhi.w	800a542 <USBD_GetDescriptor+0x2ca>
 800a29e:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a4 <USBD_GetDescriptor+0x2c>)
 800a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a4:	0800a315 	.word	0x0800a315
 800a2a8:	0800a32d 	.word	0x0800a32d
 800a2ac:	0800a36d 	.word	0x0800a36d
 800a2b0:	0800a543 	.word	0x0800a543
 800a2b4:	0800a543 	.word	0x0800a543
 800a2b8:	0800a4e3 	.word	0x0800a4e3
 800a2bc:	0800a50f 	.word	0x0800a50f
 800a2c0:	0800a543 	.word	0x0800a543
 800a2c4:	0800a543 	.word	0x0800a543
 800a2c8:	0800a543 	.word	0x0800a543
 800a2cc:	0800a543 	.word	0x0800a543
 800a2d0:	0800a543 	.word	0x0800a543
 800a2d4:	0800a543 	.word	0x0800a543
 800a2d8:	0800a543 	.word	0x0800a543
 800a2dc:	0800a2e1 	.word	0x0800a2e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00b      	beq.n	800a304 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	7c12      	ldrb	r2, [r2, #16]
 800a2f8:	f107 0108 	add.w	r1, r7, #8
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	4798      	blx	r3
 800a300:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a302:	e126      	b.n	800a552 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fb27 	bl	800a95a <USBD_CtlError>
        err++;
 800a30c:	7afb      	ldrb	r3, [r7, #11]
 800a30e:	3301      	adds	r3, #1
 800a310:	72fb      	strb	r3, [r7, #11]
      break;
 800a312:	e11e      	b.n	800a552 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	7c12      	ldrb	r2, [r2, #16]
 800a320:	f107 0108 	add.w	r1, r7, #8
 800a324:	4610      	mov	r0, r2
 800a326:	4798      	blx	r3
 800a328:	60f8      	str	r0, [r7, #12]
      break;
 800a32a:	e112      	b.n	800a552 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	7c1b      	ldrb	r3, [r3, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10d      	bne.n	800a350 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a33c:	f107 0208 	add.w	r2, r7, #8
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
 800a344:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3301      	adds	r3, #1
 800a34a:	2202      	movs	r2, #2
 800a34c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a34e:	e100      	b.n	800a552 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a358:	f107 0208 	add.w	r2, r7, #8
 800a35c:	4610      	mov	r0, r2
 800a35e:	4798      	blx	r3
 800a360:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3301      	adds	r3, #1
 800a366:	2202      	movs	r2, #2
 800a368:	701a      	strb	r2, [r3, #0]
      break;
 800a36a:	e0f2      	b.n	800a552 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	885b      	ldrh	r3, [r3, #2]
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b05      	cmp	r3, #5
 800a374:	f200 80ac 	bhi.w	800a4d0 <USBD_GetDescriptor+0x258>
 800a378:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <USBD_GetDescriptor+0x108>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a399 	.word	0x0800a399
 800a384:	0800a3cd 	.word	0x0800a3cd
 800a388:	0800a401 	.word	0x0800a401
 800a38c:	0800a435 	.word	0x0800a435
 800a390:	0800a469 	.word	0x0800a469
 800a394:	0800a49d 	.word	0x0800a49d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00b      	beq.n	800a3bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	7c12      	ldrb	r2, [r2, #16]
 800a3b0:	f107 0108 	add.w	r1, r7, #8
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4798      	blx	r3
 800a3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ba:	e091      	b.n	800a4e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 facb 	bl	800a95a <USBD_CtlError>
            err++;
 800a3c4:	7afb      	ldrb	r3, [r7, #11]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3ca:	e089      	b.n	800a4e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00b      	beq.n	800a3f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	7c12      	ldrb	r2, [r2, #16]
 800a3e4:	f107 0108 	add.w	r1, r7, #8
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4798      	blx	r3
 800a3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ee:	e077      	b.n	800a4e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fab1 	bl	800a95a <USBD_CtlError>
            err++;
 800a3f8:	7afb      	ldrb	r3, [r7, #11]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3fe:	e06f      	b.n	800a4e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	7c12      	ldrb	r2, [r2, #16]
 800a418:	f107 0108 	add.w	r1, r7, #8
 800a41c:	4610      	mov	r0, r2
 800a41e:	4798      	blx	r3
 800a420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a422:	e05d      	b.n	800a4e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fa97 	bl	800a95a <USBD_CtlError>
            err++;
 800a42c:	7afb      	ldrb	r3, [r7, #11]
 800a42e:	3301      	adds	r3, #1
 800a430:	72fb      	strb	r3, [r7, #11]
          break;
 800a432:	e055      	b.n	800a4e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00b      	beq.n	800a458 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	7c12      	ldrb	r2, [r2, #16]
 800a44c:	f107 0108 	add.w	r1, r7, #8
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3
 800a454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a456:	e043      	b.n	800a4e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa7d 	bl	800a95a <USBD_CtlError>
            err++;
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	3301      	adds	r3, #1
 800a464:	72fb      	strb	r3, [r7, #11]
          break;
 800a466:	e03b      	b.n	800a4e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	7c12      	ldrb	r2, [r2, #16]
 800a480:	f107 0108 	add.w	r1, r7, #8
 800a484:	4610      	mov	r0, r2
 800a486:	4798      	blx	r3
 800a488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a48a:	e029      	b.n	800a4e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa63 	bl	800a95a <USBD_CtlError>
            err++;
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	3301      	adds	r3, #1
 800a498:	72fb      	strb	r3, [r7, #11]
          break;
 800a49a:	e021      	b.n	800a4e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	7c12      	ldrb	r2, [r2, #16]
 800a4b4:	f107 0108 	add.w	r1, r7, #8
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
 800a4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4be:	e00f      	b.n	800a4e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa49 	bl	800a95a <USBD_CtlError>
            err++;
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ce:	e007      	b.n	800a4e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa41 	bl	800a95a <USBD_CtlError>
          err++;
 800a4d8:	7afb      	ldrb	r3, [r7, #11]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a4de:	bf00      	nop
      }
      break;
 800a4e0:	e037      	b.n	800a552 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7c1b      	ldrb	r3, [r3, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d109      	bne.n	800a4fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f2:	f107 0208 	add.w	r2, r7, #8
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	4798      	blx	r3
 800a4fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4fc:	e029      	b.n	800a552 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fa2a 	bl	800a95a <USBD_CtlError>
        err++;
 800a506:	7afb      	ldrb	r3, [r7, #11]
 800a508:	3301      	adds	r3, #1
 800a50a:	72fb      	strb	r3, [r7, #11]
      break;
 800a50c:	e021      	b.n	800a552 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7c1b      	ldrb	r3, [r3, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10d      	bne.n	800a532 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51e:	f107 0208 	add.w	r2, r7, #8
 800a522:	4610      	mov	r0, r2
 800a524:	4798      	blx	r3
 800a526:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3301      	adds	r3, #1
 800a52c:	2207      	movs	r2, #7
 800a52e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a530:	e00f      	b.n	800a552 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fa10 	bl	800a95a <USBD_CtlError>
        err++;
 800a53a:	7afb      	ldrb	r3, [r7, #11]
 800a53c:	3301      	adds	r3, #1
 800a53e:	72fb      	strb	r3, [r7, #11]
      break;
 800a540:	e007      	b.n	800a552 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fa08 	bl	800a95a <USBD_CtlError>
      err++;
 800a54a:	7afb      	ldrb	r3, [r7, #11]
 800a54c:	3301      	adds	r3, #1
 800a54e:	72fb      	strb	r3, [r7, #11]
      break;
 800a550:	bf00      	nop
  }

  if (err != 0U)
 800a552:	7afb      	ldrb	r3, [r7, #11]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d11e      	bne.n	800a596 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	88db      	ldrh	r3, [r3, #6]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d016      	beq.n	800a58e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a560:	893b      	ldrh	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00e      	beq.n	800a584 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	88da      	ldrh	r2, [r3, #6]
 800a56a:	893b      	ldrh	r3, [r7, #8]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	bf28      	it	cs
 800a570:	4613      	movcs	r3, r2
 800a572:	b29b      	uxth	r3, r3
 800a574:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a576:	893b      	ldrh	r3, [r7, #8]
 800a578:	461a      	mov	r2, r3
 800a57a:	68f9      	ldr	r1, [r7, #12]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fa69 	bl	800aa54 <USBD_CtlSendData>
 800a582:	e009      	b.n	800a598 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f9e7 	bl	800a95a <USBD_CtlError>
 800a58c:	e004      	b.n	800a598 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 faba 	bl	800ab08 <USBD_CtlSendStatus>
 800a594:	e000      	b.n	800a598 <USBD_GetDescriptor+0x320>
    return;
 800a596:	bf00      	nop
  }
}
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop

0800a5a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	889b      	ldrh	r3, [r3, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d131      	bne.n	800a616 <USBD_SetAddress+0x76>
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	88db      	ldrh	r3, [r3, #6]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d12d      	bne.n	800a616 <USBD_SetAddress+0x76>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	885b      	ldrh	r3, [r3, #2]
 800a5be:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5c0:	d829      	bhi.n	800a616 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	885b      	ldrh	r3, [r3, #2]
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d104      	bne.n	800a5e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f9bc 	bl	800a95a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e2:	e01d      	b.n	800a620 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7bfa      	ldrb	r2, [r7, #15]
 800a5e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 ff6b 	bl	800b4cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fa86 	bl	800ab08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d004      	beq.n	800a60c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2202      	movs	r2, #2
 800a606:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a60a:	e009      	b.n	800a620 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a614:	e004      	b.n	800a620 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f99e 	bl	800a95a <USBD_CtlError>
  }
}
 800a61e:	bf00      	nop
 800a620:	bf00      	nop
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	885b      	ldrh	r3, [r3, #2]
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	4b4e      	ldr	r3, [pc, #312]	@ (800a778 <USBD_SetConfig+0x150>)
 800a63e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a640:	4b4d      	ldr	r3, [pc, #308]	@ (800a778 <USBD_SetConfig+0x150>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d905      	bls.n	800a654 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f985 	bl	800a95a <USBD_CtlError>
    return USBD_FAIL;
 800a650:	2303      	movs	r3, #3
 800a652:	e08c      	b.n	800a76e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d002      	beq.n	800a666 <USBD_SetConfig+0x3e>
 800a660:	2b03      	cmp	r3, #3
 800a662:	d029      	beq.n	800a6b8 <USBD_SetConfig+0x90>
 800a664:	e075      	b.n	800a752 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a666:	4b44      	ldr	r3, [pc, #272]	@ (800a778 <USBD_SetConfig+0x150>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d020      	beq.n	800a6b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a66e:	4b42      	ldr	r3, [pc, #264]	@ (800a778 <USBD_SetConfig+0x150>)
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a678:	4b3f      	ldr	r3, [pc, #252]	@ (800a778 <USBD_SetConfig+0x150>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7fe ffb9 	bl	80095f6 <USBD_SetClassConfig>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d008      	beq.n	800a6a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f962 	bl	800a95a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2202      	movs	r2, #2
 800a69a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a69e:	e065      	b.n	800a76c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fa31 	bl	800ab08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2203      	movs	r2, #3
 800a6aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a6ae:	e05d      	b.n	800a76c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fa29 	bl	800ab08 <USBD_CtlSendStatus>
      break;
 800a6b6:	e059      	b.n	800a76c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a6b8:	4b2f      	ldr	r3, [pc, #188]	@ (800a778 <USBD_SetConfig+0x150>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d112      	bne.n	800a6e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a6c8:	4b2b      	ldr	r3, [pc, #172]	@ (800a778 <USBD_SetConfig+0x150>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6d2:	4b29      	ldr	r3, [pc, #164]	@ (800a778 <USBD_SetConfig+0x150>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7fe ffa8 	bl	800962e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fa12 	bl	800ab08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6e4:	e042      	b.n	800a76c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a6e6:	4b24      	ldr	r3, [pc, #144]	@ (800a778 <USBD_SetConfig+0x150>)
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d02a      	beq.n	800a74a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7fe ff96 	bl	800962e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a702:	4b1d      	ldr	r3, [pc, #116]	@ (800a778 <USBD_SetConfig+0x150>)
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a70c:	4b1a      	ldr	r3, [pc, #104]	@ (800a778 <USBD_SetConfig+0x150>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7fe ff6f 	bl	80095f6 <USBD_SetClassConfig>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00f      	beq.n	800a742 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f918 	bl	800a95a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7fe ff7b 	bl	800962e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2202      	movs	r2, #2
 800a73c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a740:	e014      	b.n	800a76c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f9e0 	bl	800ab08 <USBD_CtlSendStatus>
      break;
 800a748:	e010      	b.n	800a76c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f9dc 	bl	800ab08 <USBD_CtlSendStatus>
      break;
 800a750:	e00c      	b.n	800a76c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f900 	bl	800a95a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a75a:	4b07      	ldr	r3, [pc, #28]	@ (800a778 <USBD_SetConfig+0x150>)
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7fe ff64 	bl	800962e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a766:	2303      	movs	r3, #3
 800a768:	73fb      	strb	r3, [r7, #15]
      break;
 800a76a:	bf00      	nop
  }

  return ret;
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	240003ac 	.word	0x240003ac

0800a77c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	88db      	ldrh	r3, [r3, #6]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d004      	beq.n	800a798 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a78e:	6839      	ldr	r1, [r7, #0]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f8e2 	bl	800a95a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a796:	e023      	b.n	800a7e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	dc02      	bgt.n	800a7aa <USBD_GetConfig+0x2e>
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dc03      	bgt.n	800a7b0 <USBD_GetConfig+0x34>
 800a7a8:	e015      	b.n	800a7d6 <USBD_GetConfig+0x5a>
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d00b      	beq.n	800a7c6 <USBD_GetConfig+0x4a>
 800a7ae:	e012      	b.n	800a7d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	3308      	adds	r3, #8
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f948 	bl	800aa54 <USBD_CtlSendData>
        break;
 800a7c4:	e00c      	b.n	800a7e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f940 	bl	800aa54 <USBD_CtlSendData>
        break;
 800a7d4:	e004      	b.n	800a7e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f8be 	bl	800a95a <USBD_CtlError>
        break;
 800a7de:	bf00      	nop
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d81e      	bhi.n	800a83e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	88db      	ldrh	r3, [r3, #6]
 800a804:	2b02      	cmp	r3, #2
 800a806:	d004      	beq.n	800a812 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f8a5 	bl	800a95a <USBD_CtlError>
        break;
 800a810:	e01a      	b.n	800a848 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f043 0202 	orr.w	r2, r3, #2
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	330c      	adds	r3, #12
 800a832:	2202      	movs	r2, #2
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f90c 	bl	800aa54 <USBD_CtlSendData>
      break;
 800a83c:	e004      	b.n	800a848 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f88a 	bl	800a95a <USBD_CtlError>
      break;
 800a846:	bf00      	nop
  }
}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	885b      	ldrh	r3, [r3, #2]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d107      	bne.n	800a872 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f94c 	bl	800ab08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a870:	e013      	b.n	800a89a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	885b      	ldrh	r3, [r3, #2]
 800a876:	2b02      	cmp	r3, #2
 800a878:	d10b      	bne.n	800a892 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	889b      	ldrh	r3, [r3, #4]
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	b29b      	uxth	r3, r3
 800a882:	b2da      	uxtb	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f93c 	bl	800ab08 <USBD_CtlSendStatus>
}
 800a890:	e003      	b.n	800a89a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f860 	bl	800a95a <USBD_CtlError>
}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d80b      	bhi.n	800a8d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	885b      	ldrh	r3, [r3, #2]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d10c      	bne.n	800a8dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f91c 	bl	800ab08 <USBD_CtlSendStatus>
      }
      break;
 800a8d0:	e004      	b.n	800a8dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f840 	bl	800a95a <USBD_CtlError>
      break;
 800a8da:	e000      	b.n	800a8de <USBD_ClrFeature+0x3c>
      break;
 800a8dc:	bf00      	nop
  }
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	781a      	ldrb	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3301      	adds	r3, #1
 800a900:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	781a      	ldrb	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3301      	adds	r3, #1
 800a90e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f7ff fa16 	bl	8009d42 <SWAPBYTE>
 800a916:	4603      	mov	r3, r0
 800a918:	461a      	mov	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3301      	adds	r3, #1
 800a922:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3301      	adds	r3, #1
 800a928:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff fa09 	bl	8009d42 <SWAPBYTE>
 800a930:	4603      	mov	r3, r0
 800a932:	461a      	mov	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	3301      	adds	r3, #1
 800a93c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3301      	adds	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7ff f9fc 	bl	8009d42 <SWAPBYTE>
 800a94a:	4603      	mov	r3, r0
 800a94c:	461a      	mov	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	80da      	strh	r2, [r3, #6]
}
 800a952:	bf00      	nop
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a964:	2180      	movs	r1, #128	@ 0x80
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fd46 	bl	800b3f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a96c:	2100      	movs	r1, #0
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fd42 	bl	800b3f8 <USBD_LL_StallEP>
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a988:	2300      	movs	r3, #0
 800a98a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d042      	beq.n	800aa18 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a996:	6938      	ldr	r0, [r7, #16]
 800a998:	f000 f842 	bl	800aa20 <USBD_GetLen>
 800a99c:	4603      	mov	r3, r0
 800a99e:	3301      	adds	r3, #1
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9a6:	d808      	bhi.n	800a9ba <USBD_GetString+0x3e>
 800a9a8:	6938      	ldr	r0, [r7, #16]
 800a9aa:	f000 f839 	bl	800aa20 <USBD_GetLen>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	e001      	b.n	800a9be <USBD_GetString+0x42>
 800a9ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	7812      	ldrb	r2, [r2, #0]
 800a9cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	4413      	add	r3, r2
 800a9da:	2203      	movs	r2, #3
 800a9dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a9e4:	e013      	b.n	800aa0e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	7812      	ldrb	r2, [r2, #0]
 800a9f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	613b      	str	r3, [r7, #16]
    idx++;
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	4413      	add	r3, r2
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e7      	bne.n	800a9e6 <USBD_GetString+0x6a>
 800aa16:	e000      	b.n	800aa1a <USBD_GetString+0x9e>
    return;
 800aa18:	bf00      	nop
  }
}
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa30:	e005      	b.n	800aa3e <USBD_GetLen+0x1e>
  {
    len++;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	3301      	adds	r3, #1
 800aa36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1f5      	bne.n	800aa32 <USBD_GetLen+0x12>
  }

  return len;
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	2100      	movs	r1, #0
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 fd45 	bl	800b50a <USBD_LL_Transmit>

  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	60b9      	str	r1, [r7, #8]
 800aa94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f000 fd34 	bl	800b50a <USBD_LL_Transmit>

  return USBD_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2203      	movs	r2, #3
 800aabc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	2100      	movs	r1, #0
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 fd38 	bl	800b54c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 fd27 	bl	800b54c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2204      	movs	r2, #4
 800ab14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab18:	2300      	movs	r3, #0
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fcf3 	bl	800b50a <USBD_LL_Transmit>

  return USBD_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b082      	sub	sp, #8
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2205      	movs	r2, #5
 800ab3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab3e:	2300      	movs	r3, #0
 800ab40:	2200      	movs	r2, #0
 800ab42:	2100      	movs	r1, #0
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fd01 	bl	800b54c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800ab58:	2201      	movs	r2, #1
 800ab5a:	4913      	ldr	r1, [pc, #76]	@ (800aba8 <MX_USB_DEVICE_Init+0x54>)
 800ab5c:	4813      	ldr	r0, [pc, #76]	@ (800abac <MX_USB_DEVICE_Init+0x58>)
 800ab5e:	f7fe fcb1 	bl	80094c4 <USBD_Init>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab68:	f7f6 fa2a 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ab6c:	4910      	ldr	r1, [pc, #64]	@ (800abb0 <MX_USB_DEVICE_Init+0x5c>)
 800ab6e:	480f      	ldr	r0, [pc, #60]	@ (800abac <MX_USB_DEVICE_Init+0x58>)
 800ab70:	f7fe fce6 	bl	8009540 <USBD_RegisterClass>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab7a:	f7f6 fa21 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800ab7e:	490d      	ldr	r1, [pc, #52]	@ (800abb4 <MX_USB_DEVICE_Init+0x60>)
 800ab80:	480a      	ldr	r0, [pc, #40]	@ (800abac <MX_USB_DEVICE_Init+0x58>)
 800ab82:	f7fe fbcf 	bl	8009324 <USBD_CDC_RegisterInterface>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab8c:	f7f6 fa18 	bl	8000fc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ab90:	4806      	ldr	r0, [pc, #24]	@ (800abac <MX_USB_DEVICE_Init+0x58>)
 800ab92:	f7fe fd19 	bl	80095c8 <USBD_Start>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d001      	beq.n	800aba0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab9c:	f7f6 fa10 	bl	8000fc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800aba0:	f7f8 fe78 	bl	8003894 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aba4:	bf00      	nop
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	240000b0 	.word	0x240000b0
 800abac:	240003b0 	.word	0x240003b0
 800abb0:	2400001c 	.word	0x2400001c
 800abb4:	2400009c 	.word	0x2400009c

0800abb8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800abbc:	2200      	movs	r2, #0
 800abbe:	4905      	ldr	r1, [pc, #20]	@ (800abd4 <CDC_Init_HS+0x1c>)
 800abc0:	4805      	ldr	r0, [pc, #20]	@ (800abd8 <CDC_Init_HS+0x20>)
 800abc2:	f7fe fbc9 	bl	8009358 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800abc6:	4905      	ldr	r1, [pc, #20]	@ (800abdc <CDC_Init_HS+0x24>)
 800abc8:	4803      	ldr	r0, [pc, #12]	@ (800abd8 <CDC_Init_HS+0x20>)
 800abca:	f7fe fbe7 	bl	800939c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800abce:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	24000e8c 	.word	0x24000e8c
 800abd8:	240003b0 	.word	0x240003b0
 800abdc:	2400068c 	.word	0x2400068c

0800abe0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800abe0:	b480      	push	{r7}
 800abe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800abe4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	4603      	mov	r3, r0
 800abf8:	6039      	str	r1, [r7, #0]
 800abfa:	71fb      	strb	r3, [r7, #7]
 800abfc:	4613      	mov	r3, r2
 800abfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	2b23      	cmp	r3, #35	@ 0x23
 800ac04:	d84a      	bhi.n	800ac9c <CDC_Control_HS+0xac>
 800ac06:	a201      	add	r2, pc, #4	@ (adr r2, 800ac0c <CDC_Control_HS+0x1c>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800ac9d 	.word	0x0800ac9d
 800ac10:	0800ac9d 	.word	0x0800ac9d
 800ac14:	0800ac9d 	.word	0x0800ac9d
 800ac18:	0800ac9d 	.word	0x0800ac9d
 800ac1c:	0800ac9d 	.word	0x0800ac9d
 800ac20:	0800ac9d 	.word	0x0800ac9d
 800ac24:	0800ac9d 	.word	0x0800ac9d
 800ac28:	0800ac9d 	.word	0x0800ac9d
 800ac2c:	0800ac9d 	.word	0x0800ac9d
 800ac30:	0800ac9d 	.word	0x0800ac9d
 800ac34:	0800ac9d 	.word	0x0800ac9d
 800ac38:	0800ac9d 	.word	0x0800ac9d
 800ac3c:	0800ac9d 	.word	0x0800ac9d
 800ac40:	0800ac9d 	.word	0x0800ac9d
 800ac44:	0800ac9d 	.word	0x0800ac9d
 800ac48:	0800ac9d 	.word	0x0800ac9d
 800ac4c:	0800ac9d 	.word	0x0800ac9d
 800ac50:	0800ac9d 	.word	0x0800ac9d
 800ac54:	0800ac9d 	.word	0x0800ac9d
 800ac58:	0800ac9d 	.word	0x0800ac9d
 800ac5c:	0800ac9d 	.word	0x0800ac9d
 800ac60:	0800ac9d 	.word	0x0800ac9d
 800ac64:	0800ac9d 	.word	0x0800ac9d
 800ac68:	0800ac9d 	.word	0x0800ac9d
 800ac6c:	0800ac9d 	.word	0x0800ac9d
 800ac70:	0800ac9d 	.word	0x0800ac9d
 800ac74:	0800ac9d 	.word	0x0800ac9d
 800ac78:	0800ac9d 	.word	0x0800ac9d
 800ac7c:	0800ac9d 	.word	0x0800ac9d
 800ac80:	0800ac9d 	.word	0x0800ac9d
 800ac84:	0800ac9d 	.word	0x0800ac9d
 800ac88:	0800ac9d 	.word	0x0800ac9d
 800ac8c:	0800ac9d 	.word	0x0800ac9d
 800ac90:	0800ac9d 	.word	0x0800ac9d
 800ac94:	0800ac9d 	.word	0x0800ac9d
 800ac98:	0800ac9d 	.word	0x0800ac9d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac9c:	bf00      	nop
  }

  return (USBD_OK);
 800ac9e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	4805      	ldr	r0, [pc, #20]	@ (800acd0 <CDC_Receive_HS+0x24>)
 800acba:	f7fe fb6f 	bl	800939c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800acbe:	4804      	ldr	r0, [pc, #16]	@ (800acd0 <CDC_Receive_HS+0x24>)
 800acc0:	f7fe fbca 	bl	8009458 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800acc4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	240003b0 	.word	0x240003b0

0800acd4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	460b      	mov	r3, r1
 800acde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ace4:	4b0d      	ldr	r3, [pc, #52]	@ (800ad1c <CDC_Transmit_HS+0x48>)
 800ace6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e00b      	b.n	800ad12 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800acfa:	887b      	ldrh	r3, [r7, #2]
 800acfc:	461a      	mov	r2, r3
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	4806      	ldr	r0, [pc, #24]	@ (800ad1c <CDC_Transmit_HS+0x48>)
 800ad02:	f7fe fb29 	bl	8009358 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800ad06:	4805      	ldr	r0, [pc, #20]	@ (800ad1c <CDC_Transmit_HS+0x48>)
 800ad08:	f7fe fb66 	bl	80093d8 <USBD_CDC_TransmitPacket>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	240003b0 	.word	0x240003b0

0800ad20 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ad32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
	...

0800ad44 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	6039      	str	r1, [r7, #0]
 800ad4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2212      	movs	r2, #18
 800ad54:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ad56:	4b03      	ldr	r3, [pc, #12]	@ (800ad64 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr
 800ad64:	240000d0 	.word	0x240000d0

0800ad68 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	6039      	str	r1, [r7, #0]
 800ad72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	2204      	movs	r2, #4
 800ad78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad7a:	4b03      	ldr	r3, [pc, #12]	@ (800ad88 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	240000e4 	.word	0x240000e4

0800ad8c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	6039      	str	r1, [r7, #0]
 800ad96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad98:	79fb      	ldrb	r3, [r7, #7]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d105      	bne.n	800adaa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	4907      	ldr	r1, [pc, #28]	@ (800adc0 <USBD_HS_ProductStrDescriptor+0x34>)
 800ada2:	4808      	ldr	r0, [pc, #32]	@ (800adc4 <USBD_HS_ProductStrDescriptor+0x38>)
 800ada4:	f7ff fdea 	bl	800a97c <USBD_GetString>
 800ada8:	e004      	b.n	800adb4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	4904      	ldr	r1, [pc, #16]	@ (800adc0 <USBD_HS_ProductStrDescriptor+0x34>)
 800adae:	4805      	ldr	r0, [pc, #20]	@ (800adc4 <USBD_HS_ProductStrDescriptor+0x38>)
 800adb0:	f7ff fde4 	bl	800a97c <USBD_GetString>
  }
  return USBD_StrDesc;
 800adb4:	4b02      	ldr	r3, [pc, #8]	@ (800adc0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	2400168c 	.word	0x2400168c
 800adc4:	0800c58c 	.word	0x0800c58c

0800adc8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	4603      	mov	r3, r0
 800add0:	6039      	str	r1, [r7, #0]
 800add2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	4904      	ldr	r1, [pc, #16]	@ (800ade8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800add8:	4804      	ldr	r0, [pc, #16]	@ (800adec <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800adda:	f7ff fdcf 	bl	800a97c <USBD_GetString>
  return USBD_StrDesc;
 800adde:	4b02      	ldr	r3, [pc, #8]	@ (800ade8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	2400168c 	.word	0x2400168c
 800adec:	0800c5a4 	.word	0x0800c5a4

0800adf0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	4603      	mov	r3, r0
 800adf8:	6039      	str	r1, [r7, #0]
 800adfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	221a      	movs	r2, #26
 800ae00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae02:	f000 f843 	bl	800ae8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ae06:	4b02      	ldr	r3, [pc, #8]	@ (800ae10 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	240000e8 	.word	0x240000e8

0800ae14 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	6039      	str	r1, [r7, #0]
 800ae1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae20:	79fb      	ldrb	r3, [r7, #7]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d105      	bne.n	800ae32 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	4907      	ldr	r1, [pc, #28]	@ (800ae48 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ae2a:	4808      	ldr	r0, [pc, #32]	@ (800ae4c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ae2c:	f7ff fda6 	bl	800a97c <USBD_GetString>
 800ae30:	e004      	b.n	800ae3c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	4904      	ldr	r1, [pc, #16]	@ (800ae48 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ae36:	4805      	ldr	r0, [pc, #20]	@ (800ae4c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ae38:	f7ff fda0 	bl	800a97c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae3c:	4b02      	ldr	r3, [pc, #8]	@ (800ae48 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2400168c 	.word	0x2400168c
 800ae4c:	0800c5b8 	.word	0x0800c5b8

0800ae50 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	6039      	str	r1, [r7, #0]
 800ae5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae5c:	79fb      	ldrb	r3, [r7, #7]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d105      	bne.n	800ae6e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	4907      	ldr	r1, [pc, #28]	@ (800ae84 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ae66:	4808      	ldr	r0, [pc, #32]	@ (800ae88 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ae68:	f7ff fd88 	bl	800a97c <USBD_GetString>
 800ae6c:	e004      	b.n	800ae78 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	4904      	ldr	r1, [pc, #16]	@ (800ae84 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ae72:	4805      	ldr	r0, [pc, #20]	@ (800ae88 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ae74:	f7ff fd82 	bl	800a97c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae78:	4b02      	ldr	r3, [pc, #8]	@ (800ae84 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	2400168c 	.word	0x2400168c
 800ae88:	0800c5c4 	.word	0x0800c5c4

0800ae8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae92:	4b0f      	ldr	r3, [pc, #60]	@ (800aed0 <Get_SerialNum+0x44>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae98:	4b0e      	ldr	r3, [pc, #56]	@ (800aed4 <Get_SerialNum+0x48>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae9e:	4b0e      	ldr	r3, [pc, #56]	@ (800aed8 <Get_SerialNum+0x4c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4413      	add	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d009      	beq.n	800aec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aeb2:	2208      	movs	r2, #8
 800aeb4:	4909      	ldr	r1, [pc, #36]	@ (800aedc <Get_SerialNum+0x50>)
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 f814 	bl	800aee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aebc:	2204      	movs	r2, #4
 800aebe:	4908      	ldr	r1, [pc, #32]	@ (800aee0 <Get_SerialNum+0x54>)
 800aec0:	68b8      	ldr	r0, [r7, #8]
 800aec2:	f000 f80f 	bl	800aee4 <IntToUnicode>
  }
}
 800aec6:	bf00      	nop
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	08fff800 	.word	0x08fff800
 800aed4:	08fff804 	.word	0x08fff804
 800aed8:	08fff808 	.word	0x08fff808
 800aedc:	240000ea 	.word	0x240000ea
 800aee0:	240000fa 	.word	0x240000fa

0800aee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	4613      	mov	r3, r2
 800aef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aef6:	2300      	movs	r3, #0
 800aef8:	75fb      	strb	r3, [r7, #23]
 800aefa:	e027      	b.n	800af4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	0f1b      	lsrs	r3, r3, #28
 800af00:	2b09      	cmp	r3, #9
 800af02:	d80b      	bhi.n	800af1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	0f1b      	lsrs	r3, r3, #28
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
 800af0c:	005b      	lsls	r3, r3, #1
 800af0e:	4619      	mov	r1, r3
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	440b      	add	r3, r1
 800af14:	3230      	adds	r2, #48	@ 0x30
 800af16:	b2d2      	uxtb	r2, r2
 800af18:	701a      	strb	r2, [r3, #0]
 800af1a:	e00a      	b.n	800af32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	0f1b      	lsrs	r3, r3, #28
 800af20:	b2da      	uxtb	r2, r3
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	4619      	mov	r1, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	440b      	add	r3, r1
 800af2c:	3237      	adds	r2, #55	@ 0x37
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	011b      	lsls	r3, r3, #4
 800af36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af38:	7dfb      	ldrb	r3, [r7, #23]
 800af3a:	005b      	lsls	r3, r3, #1
 800af3c:	3301      	adds	r3, #1
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	4413      	add	r3, r2
 800af42:	2200      	movs	r2, #0
 800af44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	3301      	adds	r3, #1
 800af4a:	75fb      	strb	r3, [r7, #23]
 800af4c:	7dfa      	ldrb	r2, [r7, #23]
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	429a      	cmp	r2, r3
 800af52:	d3d3      	bcc.n	800aefc <IntToUnicode+0x18>
  }
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	371c      	adds	r7, #28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
	...

0800af64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b0ba      	sub	sp, #232	@ 0xe8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800af70:	2200      	movs	r2, #0
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	605a      	str	r2, [r3, #4]
 800af76:	609a      	str	r2, [r3, #8]
 800af78:	60da      	str	r2, [r3, #12]
 800af7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800af7c:	f107 0310 	add.w	r3, r7, #16
 800af80:	22c0      	movs	r2, #192	@ 0xc0
 800af82:	2100      	movs	r1, #0
 800af84:	4618      	mov	r0, r3
 800af86:	f000 fc78 	bl	800b87a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a45      	ldr	r2, [pc, #276]	@ (800b0a4 <HAL_PCD_MspInit+0x140>)
 800af90:	4293      	cmp	r3, r2
 800af92:	f040 8082 	bne.w	800b09a <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800af96:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800af9a:	f04f 0300 	mov.w	r3, #0
 800af9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800afa2:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800afa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800afaa:	f107 0310 	add.w	r3, r7, #16
 800afae:	4618      	mov	r0, r3
 800afb0:	f7f9 fc28 	bl	8004804 <HAL_RCCEx_PeriphCLKConfig>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800afba:	f7f6 f801 	bl	8000fc0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800afbe:	f7f8 fc69 	bl	8003894 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afc2:	4b39      	ldr	r3, [pc, #228]	@ (800b0a8 <HAL_PCD_MspInit+0x144>)
 800afc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800afc8:	4a37      	ldr	r2, [pc, #220]	@ (800b0a8 <HAL_PCD_MspInit+0x144>)
 800afca:	f043 0301 	orr.w	r3, r3, #1
 800afce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800afd2:	4b35      	ldr	r3, [pc, #212]	@ (800b0a8 <HAL_PCD_MspInit+0x144>)
 800afd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800afe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800afe8:	2300      	movs	r3, #0
 800afea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aff4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800aff8:	4619      	mov	r1, r3
 800affa:	482c      	ldr	r0, [pc, #176]	@ (800b0ac <HAL_PCD_MspInit+0x148>)
 800affc:	f7f6 fcde 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b000:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b004:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b008:	2302      	movs	r3, #2
 800b00a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b014:	2300      	movs	r3, #0
 800b016:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b01a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b01e:	4619      	mov	r1, r3
 800b020:	4822      	ldr	r0, [pc, #136]	@ (800b0ac <HAL_PCD_MspInit+0x148>)
 800b022:	f7f6 fccb 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800b026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b02a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b02e:	2302      	movs	r3, #2
 800b030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b034:	2301      	movs	r3, #1
 800b036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b03a:	2300      	movs	r3, #0
 800b03c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b040:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b044:	4619      	mov	r1, r3
 800b046:	4819      	ldr	r0, [pc, #100]	@ (800b0ac <HAL_PCD_MspInit+0x148>)
 800b048:	f7f6 fcb8 	bl	80019bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b04c:	4b16      	ldr	r3, [pc, #88]	@ (800b0a8 <HAL_PCD_MspInit+0x144>)
 800b04e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b052:	4a15      	ldr	r2, [pc, #84]	@ (800b0a8 <HAL_PCD_MspInit+0x144>)
 800b054:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b058:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800b05c:	4b12      	ldr	r3, [pc, #72]	@ (800b0a8 <HAL_PCD_MspInit+0x144>)
 800b05e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b066:	60bb      	str	r3, [r7, #8]
 800b068:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800b06a:	2200      	movs	r2, #0
 800b06c:	2100      	movs	r1, #0
 800b06e:	204a      	movs	r0, #74	@ 0x4a
 800b070:	f7f6 fbf7 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800b074:	204a      	movs	r0, #74	@ 0x4a
 800b076:	f7f6 fc0e 	bl	8001896 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800b07a:	2200      	movs	r2, #0
 800b07c:	2100      	movs	r1, #0
 800b07e:	204b      	movs	r0, #75	@ 0x4b
 800b080:	f7f6 fbef 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800b084:	204b      	movs	r0, #75	@ 0x4b
 800b086:	f7f6 fc06 	bl	8001896 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b08a:	2200      	movs	r2, #0
 800b08c:	2100      	movs	r1, #0
 800b08e:	204d      	movs	r0, #77	@ 0x4d
 800b090:	f7f6 fbe7 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b094:	204d      	movs	r0, #77	@ 0x4d
 800b096:	f7f6 fbfe 	bl	8001896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b09a:	bf00      	nop
 800b09c:	37e8      	adds	r7, #232	@ 0xe8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	40040000 	.word	0x40040000
 800b0a8:	58024400 	.word	0x58024400
 800b0ac:	58020000 	.word	0x58020000

0800b0b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	f7fe facb 	bl	8009662 <USBD_LL_SetupStage>
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b0e6:	78fa      	ldrb	r2, [r7, #3]
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	78fb      	ldrb	r3, [r7, #3]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f7fe fb05 	bl	800970c <USBD_LL_DataOutStage>
}
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	460b      	mov	r3, r1
 800b114:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b11c:	78fa      	ldrb	r2, [r7, #3]
 800b11e:	6879      	ldr	r1, [r7, #4]
 800b120:	4613      	mov	r3, r2
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	4413      	add	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	440b      	add	r3, r1
 800b12a:	3320      	adds	r3, #32
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	78fb      	ldrb	r3, [r7, #3]
 800b130:	4619      	mov	r1, r3
 800b132:	f7fe fb9e 	bl	8009872 <USBD_LL_DataInStage>
}
 800b136:	bf00      	nop
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b082      	sub	sp, #8
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fe fcd8 	bl	8009b02 <USBD_LL_SOF>
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b162:	2301      	movs	r3, #1
 800b164:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	79db      	ldrb	r3, [r3, #7]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
 800b172:	e008      	b.n	800b186 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	79db      	ldrb	r3, [r3, #7]
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d102      	bne.n	800b182 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b17c:	2301      	movs	r3, #1
 800b17e:	73fb      	strb	r3, [r7, #15]
 800b180:	e001      	b.n	800b186 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b182:	f7f5 ff1d 	bl	8000fc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b18c:	7bfa      	ldrb	r2, [r7, #15]
 800b18e:	4611      	mov	r1, r2
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe fc72 	bl	8009a7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fe fc1a 	bl	80099d6 <USBD_LL_Reset>
}
 800b1a2:	bf00      	nop
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe fc6d 	bl	8009a9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	6812      	ldr	r2, [r2, #0]
 800b1ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b1d2:	f043 0301 	orr.w	r3, r3, #1
 800b1d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	7adb      	ldrb	r3, [r3, #11]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d005      	beq.n	800b1ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1e0:	4b04      	ldr	r3, [pc, #16]	@ (800b1f4 <HAL_PCD_SuspendCallback+0x48>)
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	4a03      	ldr	r2, [pc, #12]	@ (800b1f4 <HAL_PCD_SuspendCallback+0x48>)
 800b1e6:	f043 0306 	orr.w	r3, r3, #6
 800b1ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	e000ed00 	.word	0xe000ed00

0800b1f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b206:	4618      	mov	r0, r3
 800b208:	f7fe fc63 	bl	8009ad2 <USBD_LL_Resume>
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b226:	78fa      	ldrb	r2, [r7, #3]
 800b228:	4611      	mov	r1, r2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe fcbb 	bl	8009ba6 <USBD_LL_IsoOUTIncomplete>
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b24a:	78fa      	ldrb	r2, [r7, #3]
 800b24c:	4611      	mov	r1, r2
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe fc77 	bl	8009b42 <USBD_LL_IsoINIncomplete>
}
 800b254:	bf00      	nop
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fccd 	bl	8009c0a <USBD_LL_DevConnected>
}
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe fcca 	bl	8009c20 <USBD_LL_DevDisconnected>
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d140      	bne.n	800b326 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b2a4:	4a22      	ldr	r2, [pc, #136]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a20      	ldr	r2, [pc, #128]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b2b4:	4b1e      	ldr	r3, [pc, #120]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b334 <USBD_LL_Init+0xa0>)
 800b2b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800b2ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2bc:	2209      	movs	r2, #9
 800b2be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b2c0:	4b1b      	ldr	r3, [pc, #108]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b2cc:	4b18      	ldr	r3, [pc, #96]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2ce:	2202      	movs	r2, #2
 800b2d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b2d2:	4b17      	ldr	r3, [pc, #92]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b2d8:	4b15      	ldr	r3, [pc, #84]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b2de:	4b14      	ldr	r3, [pc, #80]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800b2e4:	4b12      	ldr	r3, [pc, #72]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b2ea:	4b11      	ldr	r3, [pc, #68]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b2f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b2f6:	480e      	ldr	r0, [pc, #56]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b2f8:	f7f6 fff2 	bl	80022e0 <HAL_PCD_Init>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b302:	f7f5 fe5d 	bl	8000fc0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b306:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b30a:	4809      	ldr	r0, [pc, #36]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b30c:	f7f8 fa47 	bl	800379e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b310:	2280      	movs	r2, #128	@ 0x80
 800b312:	2100      	movs	r1, #0
 800b314:	4806      	ldr	r0, [pc, #24]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b316:	f7f8 f9fb 	bl	8003710 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b31a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b31e:	2101      	movs	r1, #1
 800b320:	4803      	ldr	r0, [pc, #12]	@ (800b330 <USBD_LL_Init+0x9c>)
 800b322:	f7f8 f9f5 	bl	8003710 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	2400188c 	.word	0x2400188c
 800b334:	40040000 	.word	0x40040000

0800b338 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b34e:	4618      	mov	r0, r3
 800b350:	f7f7 f8d2 	bl	80024f8 <HAL_PCD_Start>
 800b354:	4603      	mov	r3, r0
 800b356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b358:	7bfb      	ldrb	r3, [r7, #15]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 f942 	bl	800b5e4 <USBD_Get_USB_Status>
 800b360:	4603      	mov	r3, r0
 800b362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b364:	7bbb      	ldrb	r3, [r7, #14]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b084      	sub	sp, #16
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	4608      	mov	r0, r1
 800b378:	4611      	mov	r1, r2
 800b37a:	461a      	mov	r2, r3
 800b37c:	4603      	mov	r3, r0
 800b37e:	70fb      	strb	r3, [r7, #3]
 800b380:	460b      	mov	r3, r1
 800b382:	70bb      	strb	r3, [r7, #2]
 800b384:	4613      	mov	r3, r2
 800b386:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b396:	78bb      	ldrb	r3, [r7, #2]
 800b398:	883a      	ldrh	r2, [r7, #0]
 800b39a:	78f9      	ldrb	r1, [r7, #3]
 800b39c:	f7f7 fdd3 	bl	8002f46 <HAL_PCD_EP_Open>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 f91c 	bl	800b5e4 <USBD_Get_USB_Status>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b084      	sub	sp, #16
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3d4:	78fa      	ldrb	r2, [r7, #3]
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7f7 fe1e 	bl	800301a <HAL_PCD_EP_Close>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3e2:	7bfb      	ldrb	r3, [r7, #15]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 f8fd 	bl	800b5e4 <USBD_Get_USB_Status>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b412:	78fa      	ldrb	r2, [r7, #3]
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f7f7 fed6 	bl	80031c8 <HAL_PCD_EP_SetStall>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 f8de 	bl	800b5e4 <USBD_Get_USB_Status>
 800b428:	4603      	mov	r3, r0
 800b42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b450:	78fa      	ldrb	r2, [r7, #3]
 800b452:	4611      	mov	r1, r2
 800b454:	4618      	mov	r0, r3
 800b456:	f7f7 ff1a 	bl	800328e <HAL_PCD_EP_ClrStall>
 800b45a:	4603      	mov	r3, r0
 800b45c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	4618      	mov	r0, r3
 800b462:	f000 f8bf 	bl	800b5e4 <USBD_Get_USB_Status>
 800b466:	4603      	mov	r3, r0
 800b468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b486:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	da0b      	bge.n	800b4a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b496:	68f9      	ldr	r1, [r7, #12]
 800b498:	4613      	mov	r3, r2
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	440b      	add	r3, r1
 800b4a2:	3316      	adds	r3, #22
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	e00b      	b.n	800b4c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4a8:	78fb      	ldrb	r3, [r7, #3]
 800b4aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4ae:	68f9      	ldr	r1, [r7, #12]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	440b      	add	r3, r1
 800b4ba:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b4be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4e6:	78fa      	ldrb	r2, [r7, #3]
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f7 fd07 	bl	8002efe <HAL_PCD_SetAddress>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f874 	bl	800b5e4 <USBD_Get_USB_Status>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b500:	7bbb      	ldrb	r3, [r7, #14]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b086      	sub	sp, #24
 800b50e:	af00      	add	r7, sp, #0
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
 800b516:	460b      	mov	r3, r1
 800b518:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b528:	7af9      	ldrb	r1, [r7, #11]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	f7f7 fe11 	bl	8003154 <HAL_PCD_EP_Transmit>
 800b532:	4603      	mov	r3, r0
 800b534:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b536:	7dfb      	ldrb	r3, [r7, #23]
 800b538:	4618      	mov	r0, r3
 800b53a:	f000 f853 	bl	800b5e4 <USBD_Get_USB_Status>
 800b53e:	4603      	mov	r3, r0
 800b540:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b542:	7dbb      	ldrb	r3, [r7, #22]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	607a      	str	r2, [r7, #4]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	460b      	mov	r3, r1
 800b55a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b56a:	7af9      	ldrb	r1, [r7, #11]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	f7f7 fd9d 	bl	80030ae <HAL_PCD_EP_Receive>
 800b574:	4603      	mov	r3, r0
 800b576:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 f832 	bl	800b5e4 <USBD_Get_USB_Status>
 800b580:	4603      	mov	r3, r0
 800b582:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b584:	7dbb      	ldrb	r3, [r7, #22]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5a0:	78fa      	ldrb	r2, [r7, #3]
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7f7 fdbd 	bl	8003124 <HAL_PCD_EP_GetRxCount>
 800b5aa:	4603      	mov	r3, r0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5bc:	4b03      	ldr	r3, [pc, #12]	@ (800b5cc <USBD_static_malloc+0x18>)
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	24001d70 	.word	0x24001d70

0800b5d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5f2:	79fb      	ldrb	r3, [r7, #7]
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d817      	bhi.n	800b628 <USBD_Get_USB_Status+0x44>
 800b5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b600 <USBD_Get_USB_Status+0x1c>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b611 	.word	0x0800b611
 800b604:	0800b617 	.word	0x0800b617
 800b608:	0800b61d 	.word	0x0800b61d
 800b60c:	0800b623 	.word	0x0800b623
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	73fb      	strb	r3, [r7, #15]
    break;
 800b614:	e00b      	b.n	800b62e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b616:	2303      	movs	r3, #3
 800b618:	73fb      	strb	r3, [r7, #15]
    break;
 800b61a:	e008      	b.n	800b62e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b61c:	2301      	movs	r3, #1
 800b61e:	73fb      	strb	r3, [r7, #15]
    break;
 800b620:	e005      	b.n	800b62e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b622:	2303      	movs	r3, #3
 800b624:	73fb      	strb	r3, [r7, #15]
    break;
 800b626:	e002      	b.n	800b62e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b628:	2303      	movs	r3, #3
 800b62a:	73fb      	strb	r3, [r7, #15]
    break;
 800b62c:	bf00      	nop
  }
  return usb_status;
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <std>:
 800b63c:	2300      	movs	r3, #0
 800b63e:	b510      	push	{r4, lr}
 800b640:	4604      	mov	r4, r0
 800b642:	e9c0 3300 	strd	r3, r3, [r0]
 800b646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b64a:	6083      	str	r3, [r0, #8]
 800b64c:	8181      	strh	r1, [r0, #12]
 800b64e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b650:	81c2      	strh	r2, [r0, #14]
 800b652:	6183      	str	r3, [r0, #24]
 800b654:	4619      	mov	r1, r3
 800b656:	2208      	movs	r2, #8
 800b658:	305c      	adds	r0, #92	@ 0x5c
 800b65a:	f000 f90e 	bl	800b87a <memset>
 800b65e:	4b0d      	ldr	r3, [pc, #52]	@ (800b694 <std+0x58>)
 800b660:	6263      	str	r3, [r4, #36]	@ 0x24
 800b662:	4b0d      	ldr	r3, [pc, #52]	@ (800b698 <std+0x5c>)
 800b664:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <std+0x60>)
 800b668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b66a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a0 <std+0x64>)
 800b66c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b66e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a4 <std+0x68>)
 800b670:	6224      	str	r4, [r4, #32]
 800b672:	429c      	cmp	r4, r3
 800b674:	d006      	beq.n	800b684 <std+0x48>
 800b676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b67a:	4294      	cmp	r4, r2
 800b67c:	d002      	beq.n	800b684 <std+0x48>
 800b67e:	33d0      	adds	r3, #208	@ 0xd0
 800b680:	429c      	cmp	r4, r3
 800b682:	d105      	bne.n	800b690 <std+0x54>
 800b684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b68c:	f000 b96e 	b.w	800b96c <__retarget_lock_init_recursive>
 800b690:	bd10      	pop	{r4, pc}
 800b692:	bf00      	nop
 800b694:	0800b7f5 	.word	0x0800b7f5
 800b698:	0800b817 	.word	0x0800b817
 800b69c:	0800b84f 	.word	0x0800b84f
 800b6a0:	0800b873 	.word	0x0800b873
 800b6a4:	24001f90 	.word	0x24001f90

0800b6a8 <stdio_exit_handler>:
 800b6a8:	4a02      	ldr	r2, [pc, #8]	@ (800b6b4 <stdio_exit_handler+0xc>)
 800b6aa:	4903      	ldr	r1, [pc, #12]	@ (800b6b8 <stdio_exit_handler+0x10>)
 800b6ac:	4803      	ldr	r0, [pc, #12]	@ (800b6bc <stdio_exit_handler+0x14>)
 800b6ae:	f000 b869 	b.w	800b784 <_fwalk_sglue>
 800b6b2:	bf00      	nop
 800b6b4:	24000104 	.word	0x24000104
 800b6b8:	0800c20d 	.word	0x0800c20d
 800b6bc:	24000114 	.word	0x24000114

0800b6c0 <cleanup_stdio>:
 800b6c0:	6841      	ldr	r1, [r0, #4]
 800b6c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f4 <cleanup_stdio+0x34>)
 800b6c4:	4299      	cmp	r1, r3
 800b6c6:	b510      	push	{r4, lr}
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	d001      	beq.n	800b6d0 <cleanup_stdio+0x10>
 800b6cc:	f000 fd9e 	bl	800c20c <_fflush_r>
 800b6d0:	68a1      	ldr	r1, [r4, #8]
 800b6d2:	4b09      	ldr	r3, [pc, #36]	@ (800b6f8 <cleanup_stdio+0x38>)
 800b6d4:	4299      	cmp	r1, r3
 800b6d6:	d002      	beq.n	800b6de <cleanup_stdio+0x1e>
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fd97 	bl	800c20c <_fflush_r>
 800b6de:	68e1      	ldr	r1, [r4, #12]
 800b6e0:	4b06      	ldr	r3, [pc, #24]	@ (800b6fc <cleanup_stdio+0x3c>)
 800b6e2:	4299      	cmp	r1, r3
 800b6e4:	d004      	beq.n	800b6f0 <cleanup_stdio+0x30>
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ec:	f000 bd8e 	b.w	800c20c <_fflush_r>
 800b6f0:	bd10      	pop	{r4, pc}
 800b6f2:	bf00      	nop
 800b6f4:	24001f90 	.word	0x24001f90
 800b6f8:	24001ff8 	.word	0x24001ff8
 800b6fc:	24002060 	.word	0x24002060

0800b700 <global_stdio_init.part.0>:
 800b700:	b510      	push	{r4, lr}
 800b702:	4b0b      	ldr	r3, [pc, #44]	@ (800b730 <global_stdio_init.part.0+0x30>)
 800b704:	4c0b      	ldr	r4, [pc, #44]	@ (800b734 <global_stdio_init.part.0+0x34>)
 800b706:	4a0c      	ldr	r2, [pc, #48]	@ (800b738 <global_stdio_init.part.0+0x38>)
 800b708:	601a      	str	r2, [r3, #0]
 800b70a:	4620      	mov	r0, r4
 800b70c:	2200      	movs	r2, #0
 800b70e:	2104      	movs	r1, #4
 800b710:	f7ff ff94 	bl	800b63c <std>
 800b714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b718:	2201      	movs	r2, #1
 800b71a:	2109      	movs	r1, #9
 800b71c:	f7ff ff8e 	bl	800b63c <std>
 800b720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b724:	2202      	movs	r2, #2
 800b726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b72a:	2112      	movs	r1, #18
 800b72c:	f7ff bf86 	b.w	800b63c <std>
 800b730:	240020c8 	.word	0x240020c8
 800b734:	24001f90 	.word	0x24001f90
 800b738:	0800b6a9 	.word	0x0800b6a9

0800b73c <__sfp_lock_acquire>:
 800b73c:	4801      	ldr	r0, [pc, #4]	@ (800b744 <__sfp_lock_acquire+0x8>)
 800b73e:	f000 b916 	b.w	800b96e <__retarget_lock_acquire_recursive>
 800b742:	bf00      	nop
 800b744:	240020d1 	.word	0x240020d1

0800b748 <__sfp_lock_release>:
 800b748:	4801      	ldr	r0, [pc, #4]	@ (800b750 <__sfp_lock_release+0x8>)
 800b74a:	f000 b911 	b.w	800b970 <__retarget_lock_release_recursive>
 800b74e:	bf00      	nop
 800b750:	240020d1 	.word	0x240020d1

0800b754 <__sinit>:
 800b754:	b510      	push	{r4, lr}
 800b756:	4604      	mov	r4, r0
 800b758:	f7ff fff0 	bl	800b73c <__sfp_lock_acquire>
 800b75c:	6a23      	ldr	r3, [r4, #32]
 800b75e:	b11b      	cbz	r3, 800b768 <__sinit+0x14>
 800b760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b764:	f7ff bff0 	b.w	800b748 <__sfp_lock_release>
 800b768:	4b04      	ldr	r3, [pc, #16]	@ (800b77c <__sinit+0x28>)
 800b76a:	6223      	str	r3, [r4, #32]
 800b76c:	4b04      	ldr	r3, [pc, #16]	@ (800b780 <__sinit+0x2c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1f5      	bne.n	800b760 <__sinit+0xc>
 800b774:	f7ff ffc4 	bl	800b700 <global_stdio_init.part.0>
 800b778:	e7f2      	b.n	800b760 <__sinit+0xc>
 800b77a:	bf00      	nop
 800b77c:	0800b6c1 	.word	0x0800b6c1
 800b780:	240020c8 	.word	0x240020c8

0800b784 <_fwalk_sglue>:
 800b784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b788:	4607      	mov	r7, r0
 800b78a:	4688      	mov	r8, r1
 800b78c:	4614      	mov	r4, r2
 800b78e:	2600      	movs	r6, #0
 800b790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b794:	f1b9 0901 	subs.w	r9, r9, #1
 800b798:	d505      	bpl.n	800b7a6 <_fwalk_sglue+0x22>
 800b79a:	6824      	ldr	r4, [r4, #0]
 800b79c:	2c00      	cmp	r4, #0
 800b79e:	d1f7      	bne.n	800b790 <_fwalk_sglue+0xc>
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d907      	bls.n	800b7bc <_fwalk_sglue+0x38>
 800b7ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	d003      	beq.n	800b7bc <_fwalk_sglue+0x38>
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	47c0      	blx	r8
 800b7ba:	4306      	orrs	r6, r0
 800b7bc:	3568      	adds	r5, #104	@ 0x68
 800b7be:	e7e9      	b.n	800b794 <_fwalk_sglue+0x10>

0800b7c0 <iprintf>:
 800b7c0:	b40f      	push	{r0, r1, r2, r3}
 800b7c2:	b507      	push	{r0, r1, r2, lr}
 800b7c4:	4906      	ldr	r1, [pc, #24]	@ (800b7e0 <iprintf+0x20>)
 800b7c6:	ab04      	add	r3, sp, #16
 800b7c8:	6808      	ldr	r0, [r1, #0]
 800b7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ce:	6881      	ldr	r1, [r0, #8]
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	f000 f9f1 	bl	800bbb8 <_vfiprintf_r>
 800b7d6:	b003      	add	sp, #12
 800b7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7dc:	b004      	add	sp, #16
 800b7de:	4770      	bx	lr
 800b7e0:	24000110 	.word	0x24000110

0800b7e4 <putchar>:
 800b7e4:	4b02      	ldr	r3, [pc, #8]	@ (800b7f0 <putchar+0xc>)
 800b7e6:	4601      	mov	r1, r0
 800b7e8:	6818      	ldr	r0, [r3, #0]
 800b7ea:	6882      	ldr	r2, [r0, #8]
 800b7ec:	f000 bd36 	b.w	800c25c <_putc_r>
 800b7f0:	24000110 	.word	0x24000110

0800b7f4 <__sread>:
 800b7f4:	b510      	push	{r4, lr}
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7fc:	f000 f868 	bl	800b8d0 <_read_r>
 800b800:	2800      	cmp	r0, #0
 800b802:	bfab      	itete	ge
 800b804:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b806:	89a3      	ldrhlt	r3, [r4, #12]
 800b808:	181b      	addge	r3, r3, r0
 800b80a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b80e:	bfac      	ite	ge
 800b810:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b812:	81a3      	strhlt	r3, [r4, #12]
 800b814:	bd10      	pop	{r4, pc}

0800b816 <__swrite>:
 800b816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b81a:	461f      	mov	r7, r3
 800b81c:	898b      	ldrh	r3, [r1, #12]
 800b81e:	05db      	lsls	r3, r3, #23
 800b820:	4605      	mov	r5, r0
 800b822:	460c      	mov	r4, r1
 800b824:	4616      	mov	r6, r2
 800b826:	d505      	bpl.n	800b834 <__swrite+0x1e>
 800b828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b82c:	2302      	movs	r3, #2
 800b82e:	2200      	movs	r2, #0
 800b830:	f000 f83c 	bl	800b8ac <_lseek_r>
 800b834:	89a3      	ldrh	r3, [r4, #12]
 800b836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b83a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b83e:	81a3      	strh	r3, [r4, #12]
 800b840:	4632      	mov	r2, r6
 800b842:	463b      	mov	r3, r7
 800b844:	4628      	mov	r0, r5
 800b846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b84a:	f000 b853 	b.w	800b8f4 <_write_r>

0800b84e <__sseek>:
 800b84e:	b510      	push	{r4, lr}
 800b850:	460c      	mov	r4, r1
 800b852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b856:	f000 f829 	bl	800b8ac <_lseek_r>
 800b85a:	1c43      	adds	r3, r0, #1
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	bf15      	itete	ne
 800b860:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b862:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b866:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b86a:	81a3      	strheq	r3, [r4, #12]
 800b86c:	bf18      	it	ne
 800b86e:	81a3      	strhne	r3, [r4, #12]
 800b870:	bd10      	pop	{r4, pc}

0800b872 <__sclose>:
 800b872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b876:	f000 b809 	b.w	800b88c <_close_r>

0800b87a <memset>:
 800b87a:	4402      	add	r2, r0
 800b87c:	4603      	mov	r3, r0
 800b87e:	4293      	cmp	r3, r2
 800b880:	d100      	bne.n	800b884 <memset+0xa>
 800b882:	4770      	bx	lr
 800b884:	f803 1b01 	strb.w	r1, [r3], #1
 800b888:	e7f9      	b.n	800b87e <memset+0x4>
	...

0800b88c <_close_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d06      	ldr	r5, [pc, #24]	@ (800b8a8 <_close_r+0x1c>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	602b      	str	r3, [r5, #0]
 800b898:	f7f5 fd45 	bl	8001326 <_close>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d102      	bne.n	800b8a6 <_close_r+0x1a>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	b103      	cbz	r3, 800b8a6 <_close_r+0x1a>
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	240020cc 	.word	0x240020cc

0800b8ac <_lseek_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	4d07      	ldr	r5, [pc, #28]	@ (800b8cc <_lseek_r+0x20>)
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	4608      	mov	r0, r1
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	602a      	str	r2, [r5, #0]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f7f5 fd5a 	bl	8001374 <_lseek>
 800b8c0:	1c43      	adds	r3, r0, #1
 800b8c2:	d102      	bne.n	800b8ca <_lseek_r+0x1e>
 800b8c4:	682b      	ldr	r3, [r5, #0]
 800b8c6:	b103      	cbz	r3, 800b8ca <_lseek_r+0x1e>
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	240020cc 	.word	0x240020cc

0800b8d0 <_read_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4d07      	ldr	r5, [pc, #28]	@ (800b8f0 <_read_r+0x20>)
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	4608      	mov	r0, r1
 800b8d8:	4611      	mov	r1, r2
 800b8da:	2200      	movs	r2, #0
 800b8dc:	602a      	str	r2, [r5, #0]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f7f5 fce8 	bl	80012b4 <_read>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	d102      	bne.n	800b8ee <_read_r+0x1e>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	b103      	cbz	r3, 800b8ee <_read_r+0x1e>
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	bd38      	pop	{r3, r4, r5, pc}
 800b8f0:	240020cc 	.word	0x240020cc

0800b8f4 <_write_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	@ (800b914 <_write_r+0x20>)
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	4608      	mov	r0, r1
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	2200      	movs	r2, #0
 800b900:	602a      	str	r2, [r5, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	f7f5 fcf3 	bl	80012ee <_write>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_write_r+0x1e>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_write_r+0x1e>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	240020cc 	.word	0x240020cc

0800b918 <__errno>:
 800b918:	4b01      	ldr	r3, [pc, #4]	@ (800b920 <__errno+0x8>)
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	24000110 	.word	0x24000110

0800b924 <__libc_init_array>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	4d0d      	ldr	r5, [pc, #52]	@ (800b95c <__libc_init_array+0x38>)
 800b928:	4c0d      	ldr	r4, [pc, #52]	@ (800b960 <__libc_init_array+0x3c>)
 800b92a:	1b64      	subs	r4, r4, r5
 800b92c:	10a4      	asrs	r4, r4, #2
 800b92e:	2600      	movs	r6, #0
 800b930:	42a6      	cmp	r6, r4
 800b932:	d109      	bne.n	800b948 <__libc_init_array+0x24>
 800b934:	4d0b      	ldr	r5, [pc, #44]	@ (800b964 <__libc_init_array+0x40>)
 800b936:	4c0c      	ldr	r4, [pc, #48]	@ (800b968 <__libc_init_array+0x44>)
 800b938:	f000 fdec 	bl	800c514 <_init>
 800b93c:	1b64      	subs	r4, r4, r5
 800b93e:	10a4      	asrs	r4, r4, #2
 800b940:	2600      	movs	r6, #0
 800b942:	42a6      	cmp	r6, r4
 800b944:	d105      	bne.n	800b952 <__libc_init_array+0x2e>
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	f855 3b04 	ldr.w	r3, [r5], #4
 800b94c:	4798      	blx	r3
 800b94e:	3601      	adds	r6, #1
 800b950:	e7ee      	b.n	800b930 <__libc_init_array+0xc>
 800b952:	f855 3b04 	ldr.w	r3, [r5], #4
 800b956:	4798      	blx	r3
 800b958:	3601      	adds	r6, #1
 800b95a:	e7f2      	b.n	800b942 <__libc_init_array+0x1e>
 800b95c:	0800c620 	.word	0x0800c620
 800b960:	0800c620 	.word	0x0800c620
 800b964:	0800c620 	.word	0x0800c620
 800b968:	0800c624 	.word	0x0800c624

0800b96c <__retarget_lock_init_recursive>:
 800b96c:	4770      	bx	lr

0800b96e <__retarget_lock_acquire_recursive>:
 800b96e:	4770      	bx	lr

0800b970 <__retarget_lock_release_recursive>:
 800b970:	4770      	bx	lr
	...

0800b974 <_free_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4605      	mov	r5, r0
 800b978:	2900      	cmp	r1, #0
 800b97a:	d041      	beq.n	800ba00 <_free_r+0x8c>
 800b97c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b980:	1f0c      	subs	r4, r1, #4
 800b982:	2b00      	cmp	r3, #0
 800b984:	bfb8      	it	lt
 800b986:	18e4      	addlt	r4, r4, r3
 800b988:	f000 f8e0 	bl	800bb4c <__malloc_lock>
 800b98c:	4a1d      	ldr	r2, [pc, #116]	@ (800ba04 <_free_r+0x90>)
 800b98e:	6813      	ldr	r3, [r2, #0]
 800b990:	b933      	cbnz	r3, 800b9a0 <_free_r+0x2c>
 800b992:	6063      	str	r3, [r4, #4]
 800b994:	6014      	str	r4, [r2, #0]
 800b996:	4628      	mov	r0, r5
 800b998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b99c:	f000 b8dc 	b.w	800bb58 <__malloc_unlock>
 800b9a0:	42a3      	cmp	r3, r4
 800b9a2:	d908      	bls.n	800b9b6 <_free_r+0x42>
 800b9a4:	6820      	ldr	r0, [r4, #0]
 800b9a6:	1821      	adds	r1, r4, r0
 800b9a8:	428b      	cmp	r3, r1
 800b9aa:	bf01      	itttt	eq
 800b9ac:	6819      	ldreq	r1, [r3, #0]
 800b9ae:	685b      	ldreq	r3, [r3, #4]
 800b9b0:	1809      	addeq	r1, r1, r0
 800b9b2:	6021      	streq	r1, [r4, #0]
 800b9b4:	e7ed      	b.n	800b992 <_free_r+0x1e>
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	b10b      	cbz	r3, 800b9c0 <_free_r+0x4c>
 800b9bc:	42a3      	cmp	r3, r4
 800b9be:	d9fa      	bls.n	800b9b6 <_free_r+0x42>
 800b9c0:	6811      	ldr	r1, [r2, #0]
 800b9c2:	1850      	adds	r0, r2, r1
 800b9c4:	42a0      	cmp	r0, r4
 800b9c6:	d10b      	bne.n	800b9e0 <_free_r+0x6c>
 800b9c8:	6820      	ldr	r0, [r4, #0]
 800b9ca:	4401      	add	r1, r0
 800b9cc:	1850      	adds	r0, r2, r1
 800b9ce:	4283      	cmp	r3, r0
 800b9d0:	6011      	str	r1, [r2, #0]
 800b9d2:	d1e0      	bne.n	800b996 <_free_r+0x22>
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	6053      	str	r3, [r2, #4]
 800b9da:	4408      	add	r0, r1
 800b9dc:	6010      	str	r0, [r2, #0]
 800b9de:	e7da      	b.n	800b996 <_free_r+0x22>
 800b9e0:	d902      	bls.n	800b9e8 <_free_r+0x74>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	602b      	str	r3, [r5, #0]
 800b9e6:	e7d6      	b.n	800b996 <_free_r+0x22>
 800b9e8:	6820      	ldr	r0, [r4, #0]
 800b9ea:	1821      	adds	r1, r4, r0
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	bf04      	itt	eq
 800b9f0:	6819      	ldreq	r1, [r3, #0]
 800b9f2:	685b      	ldreq	r3, [r3, #4]
 800b9f4:	6063      	str	r3, [r4, #4]
 800b9f6:	bf04      	itt	eq
 800b9f8:	1809      	addeq	r1, r1, r0
 800b9fa:	6021      	streq	r1, [r4, #0]
 800b9fc:	6054      	str	r4, [r2, #4]
 800b9fe:	e7ca      	b.n	800b996 <_free_r+0x22>
 800ba00:	bd38      	pop	{r3, r4, r5, pc}
 800ba02:	bf00      	nop
 800ba04:	240020d8 	.word	0x240020d8

0800ba08 <sbrk_aligned>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	4e0f      	ldr	r6, [pc, #60]	@ (800ba48 <sbrk_aligned+0x40>)
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	6831      	ldr	r1, [r6, #0]
 800ba10:	4605      	mov	r5, r0
 800ba12:	b911      	cbnz	r1, 800ba1a <sbrk_aligned+0x12>
 800ba14:	f000 fcea 	bl	800c3ec <_sbrk_r>
 800ba18:	6030      	str	r0, [r6, #0]
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 fce5 	bl	800c3ec <_sbrk_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d103      	bne.n	800ba2e <sbrk_aligned+0x26>
 800ba26:	f04f 34ff 	mov.w	r4, #4294967295
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	1cc4      	adds	r4, r0, #3
 800ba30:	f024 0403 	bic.w	r4, r4, #3
 800ba34:	42a0      	cmp	r0, r4
 800ba36:	d0f8      	beq.n	800ba2a <sbrk_aligned+0x22>
 800ba38:	1a21      	subs	r1, r4, r0
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f000 fcd6 	bl	800c3ec <_sbrk_r>
 800ba40:	3001      	adds	r0, #1
 800ba42:	d1f2      	bne.n	800ba2a <sbrk_aligned+0x22>
 800ba44:	e7ef      	b.n	800ba26 <sbrk_aligned+0x1e>
 800ba46:	bf00      	nop
 800ba48:	240020d4 	.word	0x240020d4

0800ba4c <_malloc_r>:
 800ba4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba50:	1ccd      	adds	r5, r1, #3
 800ba52:	f025 0503 	bic.w	r5, r5, #3
 800ba56:	3508      	adds	r5, #8
 800ba58:	2d0c      	cmp	r5, #12
 800ba5a:	bf38      	it	cc
 800ba5c:	250c      	movcc	r5, #12
 800ba5e:	2d00      	cmp	r5, #0
 800ba60:	4606      	mov	r6, r0
 800ba62:	db01      	blt.n	800ba68 <_malloc_r+0x1c>
 800ba64:	42a9      	cmp	r1, r5
 800ba66:	d904      	bls.n	800ba72 <_malloc_r+0x26>
 800ba68:	230c      	movs	r3, #12
 800ba6a:	6033      	str	r3, [r6, #0]
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb48 <_malloc_r+0xfc>
 800ba76:	f000 f869 	bl	800bb4c <__malloc_lock>
 800ba7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba7e:	461c      	mov	r4, r3
 800ba80:	bb44      	cbnz	r4, 800bad4 <_malloc_r+0x88>
 800ba82:	4629      	mov	r1, r5
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7ff ffbf 	bl	800ba08 <sbrk_aligned>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	d158      	bne.n	800bb42 <_malloc_r+0xf6>
 800ba90:	f8d8 4000 	ldr.w	r4, [r8]
 800ba94:	4627      	mov	r7, r4
 800ba96:	2f00      	cmp	r7, #0
 800ba98:	d143      	bne.n	800bb22 <_malloc_r+0xd6>
 800ba9a:	2c00      	cmp	r4, #0
 800ba9c:	d04b      	beq.n	800bb36 <_malloc_r+0xea>
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	4639      	mov	r1, r7
 800baa2:	4630      	mov	r0, r6
 800baa4:	eb04 0903 	add.w	r9, r4, r3
 800baa8:	f000 fca0 	bl	800c3ec <_sbrk_r>
 800baac:	4581      	cmp	r9, r0
 800baae:	d142      	bne.n	800bb36 <_malloc_r+0xea>
 800bab0:	6821      	ldr	r1, [r4, #0]
 800bab2:	1a6d      	subs	r5, r5, r1
 800bab4:	4629      	mov	r1, r5
 800bab6:	4630      	mov	r0, r6
 800bab8:	f7ff ffa6 	bl	800ba08 <sbrk_aligned>
 800babc:	3001      	adds	r0, #1
 800babe:	d03a      	beq.n	800bb36 <_malloc_r+0xea>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	442b      	add	r3, r5
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	f8d8 3000 	ldr.w	r3, [r8]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	bb62      	cbnz	r2, 800bb28 <_malloc_r+0xdc>
 800bace:	f8c8 7000 	str.w	r7, [r8]
 800bad2:	e00f      	b.n	800baf4 <_malloc_r+0xa8>
 800bad4:	6822      	ldr	r2, [r4, #0]
 800bad6:	1b52      	subs	r2, r2, r5
 800bad8:	d420      	bmi.n	800bb1c <_malloc_r+0xd0>
 800bada:	2a0b      	cmp	r2, #11
 800badc:	d917      	bls.n	800bb0e <_malloc_r+0xc2>
 800bade:	1961      	adds	r1, r4, r5
 800bae0:	42a3      	cmp	r3, r4
 800bae2:	6025      	str	r5, [r4, #0]
 800bae4:	bf18      	it	ne
 800bae6:	6059      	strne	r1, [r3, #4]
 800bae8:	6863      	ldr	r3, [r4, #4]
 800baea:	bf08      	it	eq
 800baec:	f8c8 1000 	streq.w	r1, [r8]
 800baf0:	5162      	str	r2, [r4, r5]
 800baf2:	604b      	str	r3, [r1, #4]
 800baf4:	4630      	mov	r0, r6
 800baf6:	f000 f82f 	bl	800bb58 <__malloc_unlock>
 800bafa:	f104 000b 	add.w	r0, r4, #11
 800bafe:	1d23      	adds	r3, r4, #4
 800bb00:	f020 0007 	bic.w	r0, r0, #7
 800bb04:	1ac2      	subs	r2, r0, r3
 800bb06:	bf1c      	itt	ne
 800bb08:	1a1b      	subne	r3, r3, r0
 800bb0a:	50a3      	strne	r3, [r4, r2]
 800bb0c:	e7af      	b.n	800ba6e <_malloc_r+0x22>
 800bb0e:	6862      	ldr	r2, [r4, #4]
 800bb10:	42a3      	cmp	r3, r4
 800bb12:	bf0c      	ite	eq
 800bb14:	f8c8 2000 	streq.w	r2, [r8]
 800bb18:	605a      	strne	r2, [r3, #4]
 800bb1a:	e7eb      	b.n	800baf4 <_malloc_r+0xa8>
 800bb1c:	4623      	mov	r3, r4
 800bb1e:	6864      	ldr	r4, [r4, #4]
 800bb20:	e7ae      	b.n	800ba80 <_malloc_r+0x34>
 800bb22:	463c      	mov	r4, r7
 800bb24:	687f      	ldr	r7, [r7, #4]
 800bb26:	e7b6      	b.n	800ba96 <_malloc_r+0x4a>
 800bb28:	461a      	mov	r2, r3
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	d1fb      	bne.n	800bb28 <_malloc_r+0xdc>
 800bb30:	2300      	movs	r3, #0
 800bb32:	6053      	str	r3, [r2, #4]
 800bb34:	e7de      	b.n	800baf4 <_malloc_r+0xa8>
 800bb36:	230c      	movs	r3, #12
 800bb38:	6033      	str	r3, [r6, #0]
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f000 f80c 	bl	800bb58 <__malloc_unlock>
 800bb40:	e794      	b.n	800ba6c <_malloc_r+0x20>
 800bb42:	6005      	str	r5, [r0, #0]
 800bb44:	e7d6      	b.n	800baf4 <_malloc_r+0xa8>
 800bb46:	bf00      	nop
 800bb48:	240020d8 	.word	0x240020d8

0800bb4c <__malloc_lock>:
 800bb4c:	4801      	ldr	r0, [pc, #4]	@ (800bb54 <__malloc_lock+0x8>)
 800bb4e:	f7ff bf0e 	b.w	800b96e <__retarget_lock_acquire_recursive>
 800bb52:	bf00      	nop
 800bb54:	240020d0 	.word	0x240020d0

0800bb58 <__malloc_unlock>:
 800bb58:	4801      	ldr	r0, [pc, #4]	@ (800bb60 <__malloc_unlock+0x8>)
 800bb5a:	f7ff bf09 	b.w	800b970 <__retarget_lock_release_recursive>
 800bb5e:	bf00      	nop
 800bb60:	240020d0 	.word	0x240020d0

0800bb64 <__sfputc_r>:
 800bb64:	6893      	ldr	r3, [r2, #8]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	b410      	push	{r4}
 800bb6c:	6093      	str	r3, [r2, #8]
 800bb6e:	da08      	bge.n	800bb82 <__sfputc_r+0x1e>
 800bb70:	6994      	ldr	r4, [r2, #24]
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	db01      	blt.n	800bb7a <__sfputc_r+0x16>
 800bb76:	290a      	cmp	r1, #10
 800bb78:	d103      	bne.n	800bb82 <__sfputc_r+0x1e>
 800bb7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb7e:	f000 bba1 	b.w	800c2c4 <__swbuf_r>
 800bb82:	6813      	ldr	r3, [r2, #0]
 800bb84:	1c58      	adds	r0, r3, #1
 800bb86:	6010      	str	r0, [r2, #0]
 800bb88:	7019      	strb	r1, [r3, #0]
 800bb8a:	4608      	mov	r0, r1
 800bb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb90:	4770      	bx	lr

0800bb92 <__sfputs_r>:
 800bb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb94:	4606      	mov	r6, r0
 800bb96:	460f      	mov	r7, r1
 800bb98:	4614      	mov	r4, r2
 800bb9a:	18d5      	adds	r5, r2, r3
 800bb9c:	42ac      	cmp	r4, r5
 800bb9e:	d101      	bne.n	800bba4 <__sfputs_r+0x12>
 800bba0:	2000      	movs	r0, #0
 800bba2:	e007      	b.n	800bbb4 <__sfputs_r+0x22>
 800bba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba8:	463a      	mov	r2, r7
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f7ff ffda 	bl	800bb64 <__sfputc_r>
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d1f3      	bne.n	800bb9c <__sfputs_r+0xa>
 800bbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbb8 <_vfiprintf_r>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	460d      	mov	r5, r1
 800bbbe:	b09d      	sub	sp, #116	@ 0x74
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	4698      	mov	r8, r3
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	b118      	cbz	r0, 800bbd0 <_vfiprintf_r+0x18>
 800bbc8:	6a03      	ldr	r3, [r0, #32]
 800bbca:	b90b      	cbnz	r3, 800bbd0 <_vfiprintf_r+0x18>
 800bbcc:	f7ff fdc2 	bl	800b754 <__sinit>
 800bbd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbd2:	07d9      	lsls	r1, r3, #31
 800bbd4:	d405      	bmi.n	800bbe2 <_vfiprintf_r+0x2a>
 800bbd6:	89ab      	ldrh	r3, [r5, #12]
 800bbd8:	059a      	lsls	r2, r3, #22
 800bbda:	d402      	bmi.n	800bbe2 <_vfiprintf_r+0x2a>
 800bbdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbde:	f7ff fec6 	bl	800b96e <__retarget_lock_acquire_recursive>
 800bbe2:	89ab      	ldrh	r3, [r5, #12]
 800bbe4:	071b      	lsls	r3, r3, #28
 800bbe6:	d501      	bpl.n	800bbec <_vfiprintf_r+0x34>
 800bbe8:	692b      	ldr	r3, [r5, #16]
 800bbea:	b99b      	cbnz	r3, 800bc14 <_vfiprintf_r+0x5c>
 800bbec:	4629      	mov	r1, r5
 800bbee:	4630      	mov	r0, r6
 800bbf0:	f000 fba6 	bl	800c340 <__swsetup_r>
 800bbf4:	b170      	cbz	r0, 800bc14 <_vfiprintf_r+0x5c>
 800bbf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbf8:	07dc      	lsls	r4, r3, #31
 800bbfa:	d504      	bpl.n	800bc06 <_vfiprintf_r+0x4e>
 800bbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bc00:	b01d      	add	sp, #116	@ 0x74
 800bc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc06:	89ab      	ldrh	r3, [r5, #12]
 800bc08:	0598      	lsls	r0, r3, #22
 800bc0a:	d4f7      	bmi.n	800bbfc <_vfiprintf_r+0x44>
 800bc0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc0e:	f7ff feaf 	bl	800b970 <__retarget_lock_release_recursive>
 800bc12:	e7f3      	b.n	800bbfc <_vfiprintf_r+0x44>
 800bc14:	2300      	movs	r3, #0
 800bc16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc18:	2320      	movs	r3, #32
 800bc1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc22:	2330      	movs	r3, #48	@ 0x30
 800bc24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bdd4 <_vfiprintf_r+0x21c>
 800bc28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc2c:	f04f 0901 	mov.w	r9, #1
 800bc30:	4623      	mov	r3, r4
 800bc32:	469a      	mov	sl, r3
 800bc34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc38:	b10a      	cbz	r2, 800bc3e <_vfiprintf_r+0x86>
 800bc3a:	2a25      	cmp	r2, #37	@ 0x25
 800bc3c:	d1f9      	bne.n	800bc32 <_vfiprintf_r+0x7a>
 800bc3e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc42:	d00b      	beq.n	800bc5c <_vfiprintf_r+0xa4>
 800bc44:	465b      	mov	r3, fp
 800bc46:	4622      	mov	r2, r4
 800bc48:	4629      	mov	r1, r5
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff ffa1 	bl	800bb92 <__sfputs_r>
 800bc50:	3001      	adds	r0, #1
 800bc52:	f000 80a7 	beq.w	800bda4 <_vfiprintf_r+0x1ec>
 800bc56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc58:	445a      	add	r2, fp
 800bc5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 809f 	beq.w	800bda4 <_vfiprintf_r+0x1ec>
 800bc66:	2300      	movs	r3, #0
 800bc68:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc70:	f10a 0a01 	add.w	sl, sl, #1
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	9307      	str	r3, [sp, #28]
 800bc78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc7e:	4654      	mov	r4, sl
 800bc80:	2205      	movs	r2, #5
 800bc82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc86:	4853      	ldr	r0, [pc, #332]	@ (800bdd4 <_vfiprintf_r+0x21c>)
 800bc88:	f7f4 fb32 	bl	80002f0 <memchr>
 800bc8c:	9a04      	ldr	r2, [sp, #16]
 800bc8e:	b9d8      	cbnz	r0, 800bcc8 <_vfiprintf_r+0x110>
 800bc90:	06d1      	lsls	r1, r2, #27
 800bc92:	bf44      	itt	mi
 800bc94:	2320      	movmi	r3, #32
 800bc96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc9a:	0713      	lsls	r3, r2, #28
 800bc9c:	bf44      	itt	mi
 800bc9e:	232b      	movmi	r3, #43	@ 0x2b
 800bca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bca4:	f89a 3000 	ldrb.w	r3, [sl]
 800bca8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcaa:	d015      	beq.n	800bcd8 <_vfiprintf_r+0x120>
 800bcac:	9a07      	ldr	r2, [sp, #28]
 800bcae:	4654      	mov	r4, sl
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	f04f 0c0a 	mov.w	ip, #10
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcbc:	3b30      	subs	r3, #48	@ 0x30
 800bcbe:	2b09      	cmp	r3, #9
 800bcc0:	d94b      	bls.n	800bd5a <_vfiprintf_r+0x1a2>
 800bcc2:	b1b0      	cbz	r0, 800bcf2 <_vfiprintf_r+0x13a>
 800bcc4:	9207      	str	r2, [sp, #28]
 800bcc6:	e014      	b.n	800bcf2 <_vfiprintf_r+0x13a>
 800bcc8:	eba0 0308 	sub.w	r3, r0, r8
 800bccc:	fa09 f303 	lsl.w	r3, r9, r3
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	46a2      	mov	sl, r4
 800bcd6:	e7d2      	b.n	800bc7e <_vfiprintf_r+0xc6>
 800bcd8:	9b03      	ldr	r3, [sp, #12]
 800bcda:	1d19      	adds	r1, r3, #4
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	9103      	str	r1, [sp, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	bfbb      	ittet	lt
 800bce4:	425b      	neglt	r3, r3
 800bce6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcea:	9307      	strge	r3, [sp, #28]
 800bcec:	9307      	strlt	r3, [sp, #28]
 800bcee:	bfb8      	it	lt
 800bcf0:	9204      	strlt	r2, [sp, #16]
 800bcf2:	7823      	ldrb	r3, [r4, #0]
 800bcf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcf6:	d10a      	bne.n	800bd0e <_vfiprintf_r+0x156>
 800bcf8:	7863      	ldrb	r3, [r4, #1]
 800bcfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcfc:	d132      	bne.n	800bd64 <_vfiprintf_r+0x1ac>
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	1d1a      	adds	r2, r3, #4
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	9203      	str	r2, [sp, #12]
 800bd06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd0a:	3402      	adds	r4, #2
 800bd0c:	9305      	str	r3, [sp, #20]
 800bd0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bde4 <_vfiprintf_r+0x22c>
 800bd12:	7821      	ldrb	r1, [r4, #0]
 800bd14:	2203      	movs	r2, #3
 800bd16:	4650      	mov	r0, sl
 800bd18:	f7f4 faea 	bl	80002f0 <memchr>
 800bd1c:	b138      	cbz	r0, 800bd2e <_vfiprintf_r+0x176>
 800bd1e:	9b04      	ldr	r3, [sp, #16]
 800bd20:	eba0 000a 	sub.w	r0, r0, sl
 800bd24:	2240      	movs	r2, #64	@ 0x40
 800bd26:	4082      	lsls	r2, r0
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	3401      	adds	r4, #1
 800bd2c:	9304      	str	r3, [sp, #16]
 800bd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd32:	4829      	ldr	r0, [pc, #164]	@ (800bdd8 <_vfiprintf_r+0x220>)
 800bd34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd38:	2206      	movs	r2, #6
 800bd3a:	f7f4 fad9 	bl	80002f0 <memchr>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d03f      	beq.n	800bdc2 <_vfiprintf_r+0x20a>
 800bd42:	4b26      	ldr	r3, [pc, #152]	@ (800bddc <_vfiprintf_r+0x224>)
 800bd44:	bb1b      	cbnz	r3, 800bd8e <_vfiprintf_r+0x1d6>
 800bd46:	9b03      	ldr	r3, [sp, #12]
 800bd48:	3307      	adds	r3, #7
 800bd4a:	f023 0307 	bic.w	r3, r3, #7
 800bd4e:	3308      	adds	r3, #8
 800bd50:	9303      	str	r3, [sp, #12]
 800bd52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd54:	443b      	add	r3, r7
 800bd56:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd58:	e76a      	b.n	800bc30 <_vfiprintf_r+0x78>
 800bd5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd5e:	460c      	mov	r4, r1
 800bd60:	2001      	movs	r0, #1
 800bd62:	e7a8      	b.n	800bcb6 <_vfiprintf_r+0xfe>
 800bd64:	2300      	movs	r3, #0
 800bd66:	3401      	adds	r4, #1
 800bd68:	9305      	str	r3, [sp, #20]
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	f04f 0c0a 	mov.w	ip, #10
 800bd70:	4620      	mov	r0, r4
 800bd72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd76:	3a30      	subs	r2, #48	@ 0x30
 800bd78:	2a09      	cmp	r2, #9
 800bd7a:	d903      	bls.n	800bd84 <_vfiprintf_r+0x1cc>
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0c6      	beq.n	800bd0e <_vfiprintf_r+0x156>
 800bd80:	9105      	str	r1, [sp, #20]
 800bd82:	e7c4      	b.n	800bd0e <_vfiprintf_r+0x156>
 800bd84:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd88:	4604      	mov	r4, r0
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e7f0      	b.n	800bd70 <_vfiprintf_r+0x1b8>
 800bd8e:	ab03      	add	r3, sp, #12
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	462a      	mov	r2, r5
 800bd94:	4b12      	ldr	r3, [pc, #72]	@ (800bde0 <_vfiprintf_r+0x228>)
 800bd96:	a904      	add	r1, sp, #16
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f3af 8000 	nop.w
 800bd9e:	4607      	mov	r7, r0
 800bda0:	1c78      	adds	r0, r7, #1
 800bda2:	d1d6      	bne.n	800bd52 <_vfiprintf_r+0x19a>
 800bda4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bda6:	07d9      	lsls	r1, r3, #31
 800bda8:	d405      	bmi.n	800bdb6 <_vfiprintf_r+0x1fe>
 800bdaa:	89ab      	ldrh	r3, [r5, #12]
 800bdac:	059a      	lsls	r2, r3, #22
 800bdae:	d402      	bmi.n	800bdb6 <_vfiprintf_r+0x1fe>
 800bdb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdb2:	f7ff fddd 	bl	800b970 <__retarget_lock_release_recursive>
 800bdb6:	89ab      	ldrh	r3, [r5, #12]
 800bdb8:	065b      	lsls	r3, r3, #25
 800bdba:	f53f af1f 	bmi.w	800bbfc <_vfiprintf_r+0x44>
 800bdbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdc0:	e71e      	b.n	800bc00 <_vfiprintf_r+0x48>
 800bdc2:	ab03      	add	r3, sp, #12
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	4b05      	ldr	r3, [pc, #20]	@ (800bde0 <_vfiprintf_r+0x228>)
 800bdca:	a904      	add	r1, sp, #16
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f000 f879 	bl	800bec4 <_printf_i>
 800bdd2:	e7e4      	b.n	800bd9e <_vfiprintf_r+0x1e6>
 800bdd4:	0800c5e4 	.word	0x0800c5e4
 800bdd8:	0800c5ee 	.word	0x0800c5ee
 800bddc:	00000000 	.word	0x00000000
 800bde0:	0800bb93 	.word	0x0800bb93
 800bde4:	0800c5ea 	.word	0x0800c5ea

0800bde8 <_printf_common>:
 800bde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdec:	4616      	mov	r6, r2
 800bdee:	4698      	mov	r8, r3
 800bdf0:	688a      	ldr	r2, [r1, #8]
 800bdf2:	690b      	ldr	r3, [r1, #16]
 800bdf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	bfb8      	it	lt
 800bdfc:	4613      	movlt	r3, r2
 800bdfe:	6033      	str	r3, [r6, #0]
 800be00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be04:	4607      	mov	r7, r0
 800be06:	460c      	mov	r4, r1
 800be08:	b10a      	cbz	r2, 800be0e <_printf_common+0x26>
 800be0a:	3301      	adds	r3, #1
 800be0c:	6033      	str	r3, [r6, #0]
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	0699      	lsls	r1, r3, #26
 800be12:	bf42      	ittt	mi
 800be14:	6833      	ldrmi	r3, [r6, #0]
 800be16:	3302      	addmi	r3, #2
 800be18:	6033      	strmi	r3, [r6, #0]
 800be1a:	6825      	ldr	r5, [r4, #0]
 800be1c:	f015 0506 	ands.w	r5, r5, #6
 800be20:	d106      	bne.n	800be30 <_printf_common+0x48>
 800be22:	f104 0a19 	add.w	sl, r4, #25
 800be26:	68e3      	ldr	r3, [r4, #12]
 800be28:	6832      	ldr	r2, [r6, #0]
 800be2a:	1a9b      	subs	r3, r3, r2
 800be2c:	42ab      	cmp	r3, r5
 800be2e:	dc26      	bgt.n	800be7e <_printf_common+0x96>
 800be30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be34:	6822      	ldr	r2, [r4, #0]
 800be36:	3b00      	subs	r3, #0
 800be38:	bf18      	it	ne
 800be3a:	2301      	movne	r3, #1
 800be3c:	0692      	lsls	r2, r2, #26
 800be3e:	d42b      	bmi.n	800be98 <_printf_common+0xb0>
 800be40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be44:	4641      	mov	r1, r8
 800be46:	4638      	mov	r0, r7
 800be48:	47c8      	blx	r9
 800be4a:	3001      	adds	r0, #1
 800be4c:	d01e      	beq.n	800be8c <_printf_common+0xa4>
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	6922      	ldr	r2, [r4, #16]
 800be52:	f003 0306 	and.w	r3, r3, #6
 800be56:	2b04      	cmp	r3, #4
 800be58:	bf02      	ittt	eq
 800be5a:	68e5      	ldreq	r5, [r4, #12]
 800be5c:	6833      	ldreq	r3, [r6, #0]
 800be5e:	1aed      	subeq	r5, r5, r3
 800be60:	68a3      	ldr	r3, [r4, #8]
 800be62:	bf0c      	ite	eq
 800be64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be68:	2500      	movne	r5, #0
 800be6a:	4293      	cmp	r3, r2
 800be6c:	bfc4      	itt	gt
 800be6e:	1a9b      	subgt	r3, r3, r2
 800be70:	18ed      	addgt	r5, r5, r3
 800be72:	2600      	movs	r6, #0
 800be74:	341a      	adds	r4, #26
 800be76:	42b5      	cmp	r5, r6
 800be78:	d11a      	bne.n	800beb0 <_printf_common+0xc8>
 800be7a:	2000      	movs	r0, #0
 800be7c:	e008      	b.n	800be90 <_printf_common+0xa8>
 800be7e:	2301      	movs	r3, #1
 800be80:	4652      	mov	r2, sl
 800be82:	4641      	mov	r1, r8
 800be84:	4638      	mov	r0, r7
 800be86:	47c8      	blx	r9
 800be88:	3001      	adds	r0, #1
 800be8a:	d103      	bne.n	800be94 <_printf_common+0xac>
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295
 800be90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be94:	3501      	adds	r5, #1
 800be96:	e7c6      	b.n	800be26 <_printf_common+0x3e>
 800be98:	18e1      	adds	r1, r4, r3
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	2030      	movs	r0, #48	@ 0x30
 800be9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bea2:	4422      	add	r2, r4
 800bea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bea8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800beac:	3302      	adds	r3, #2
 800beae:	e7c7      	b.n	800be40 <_printf_common+0x58>
 800beb0:	2301      	movs	r3, #1
 800beb2:	4622      	mov	r2, r4
 800beb4:	4641      	mov	r1, r8
 800beb6:	4638      	mov	r0, r7
 800beb8:	47c8      	blx	r9
 800beba:	3001      	adds	r0, #1
 800bebc:	d0e6      	beq.n	800be8c <_printf_common+0xa4>
 800bebe:	3601      	adds	r6, #1
 800bec0:	e7d9      	b.n	800be76 <_printf_common+0x8e>
	...

0800bec4 <_printf_i>:
 800bec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bec8:	7e0f      	ldrb	r7, [r1, #24]
 800beca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800becc:	2f78      	cmp	r7, #120	@ 0x78
 800bece:	4691      	mov	r9, r2
 800bed0:	4680      	mov	r8, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	469a      	mov	sl, r3
 800bed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800beda:	d807      	bhi.n	800beec <_printf_i+0x28>
 800bedc:	2f62      	cmp	r7, #98	@ 0x62
 800bede:	d80a      	bhi.n	800bef6 <_printf_i+0x32>
 800bee0:	2f00      	cmp	r7, #0
 800bee2:	f000 80d2 	beq.w	800c08a <_printf_i+0x1c6>
 800bee6:	2f58      	cmp	r7, #88	@ 0x58
 800bee8:	f000 80b9 	beq.w	800c05e <_printf_i+0x19a>
 800beec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bef4:	e03a      	b.n	800bf6c <_printf_i+0xa8>
 800bef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800befa:	2b15      	cmp	r3, #21
 800befc:	d8f6      	bhi.n	800beec <_printf_i+0x28>
 800befe:	a101      	add	r1, pc, #4	@ (adr r1, 800bf04 <_printf_i+0x40>)
 800bf00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf04:	0800bf5d 	.word	0x0800bf5d
 800bf08:	0800bf71 	.word	0x0800bf71
 800bf0c:	0800beed 	.word	0x0800beed
 800bf10:	0800beed 	.word	0x0800beed
 800bf14:	0800beed 	.word	0x0800beed
 800bf18:	0800beed 	.word	0x0800beed
 800bf1c:	0800bf71 	.word	0x0800bf71
 800bf20:	0800beed 	.word	0x0800beed
 800bf24:	0800beed 	.word	0x0800beed
 800bf28:	0800beed 	.word	0x0800beed
 800bf2c:	0800beed 	.word	0x0800beed
 800bf30:	0800c071 	.word	0x0800c071
 800bf34:	0800bf9b 	.word	0x0800bf9b
 800bf38:	0800c02b 	.word	0x0800c02b
 800bf3c:	0800beed 	.word	0x0800beed
 800bf40:	0800beed 	.word	0x0800beed
 800bf44:	0800c093 	.word	0x0800c093
 800bf48:	0800beed 	.word	0x0800beed
 800bf4c:	0800bf9b 	.word	0x0800bf9b
 800bf50:	0800beed 	.word	0x0800beed
 800bf54:	0800beed 	.word	0x0800beed
 800bf58:	0800c033 	.word	0x0800c033
 800bf5c:	6833      	ldr	r3, [r6, #0]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6032      	str	r2, [r6, #0]
 800bf64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e09d      	b.n	800c0ac <_printf_i+0x1e8>
 800bf70:	6833      	ldr	r3, [r6, #0]
 800bf72:	6820      	ldr	r0, [r4, #0]
 800bf74:	1d19      	adds	r1, r3, #4
 800bf76:	6031      	str	r1, [r6, #0]
 800bf78:	0606      	lsls	r6, r0, #24
 800bf7a:	d501      	bpl.n	800bf80 <_printf_i+0xbc>
 800bf7c:	681d      	ldr	r5, [r3, #0]
 800bf7e:	e003      	b.n	800bf88 <_printf_i+0xc4>
 800bf80:	0645      	lsls	r5, r0, #25
 800bf82:	d5fb      	bpl.n	800bf7c <_printf_i+0xb8>
 800bf84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf88:	2d00      	cmp	r5, #0
 800bf8a:	da03      	bge.n	800bf94 <_printf_i+0xd0>
 800bf8c:	232d      	movs	r3, #45	@ 0x2d
 800bf8e:	426d      	negs	r5, r5
 800bf90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf94:	4859      	ldr	r0, [pc, #356]	@ (800c0fc <_printf_i+0x238>)
 800bf96:	230a      	movs	r3, #10
 800bf98:	e011      	b.n	800bfbe <_printf_i+0xfa>
 800bf9a:	6821      	ldr	r1, [r4, #0]
 800bf9c:	6833      	ldr	r3, [r6, #0]
 800bf9e:	0608      	lsls	r0, r1, #24
 800bfa0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfa4:	d402      	bmi.n	800bfac <_printf_i+0xe8>
 800bfa6:	0649      	lsls	r1, r1, #25
 800bfa8:	bf48      	it	mi
 800bfaa:	b2ad      	uxthmi	r5, r5
 800bfac:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfae:	4853      	ldr	r0, [pc, #332]	@ (800c0fc <_printf_i+0x238>)
 800bfb0:	6033      	str	r3, [r6, #0]
 800bfb2:	bf14      	ite	ne
 800bfb4:	230a      	movne	r3, #10
 800bfb6:	2308      	moveq	r3, #8
 800bfb8:	2100      	movs	r1, #0
 800bfba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfbe:	6866      	ldr	r6, [r4, #4]
 800bfc0:	60a6      	str	r6, [r4, #8]
 800bfc2:	2e00      	cmp	r6, #0
 800bfc4:	bfa2      	ittt	ge
 800bfc6:	6821      	ldrge	r1, [r4, #0]
 800bfc8:	f021 0104 	bicge.w	r1, r1, #4
 800bfcc:	6021      	strge	r1, [r4, #0]
 800bfce:	b90d      	cbnz	r5, 800bfd4 <_printf_i+0x110>
 800bfd0:	2e00      	cmp	r6, #0
 800bfd2:	d04b      	beq.n	800c06c <_printf_i+0x1a8>
 800bfd4:	4616      	mov	r6, r2
 800bfd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfda:	fb03 5711 	mls	r7, r3, r1, r5
 800bfde:	5dc7      	ldrb	r7, [r0, r7]
 800bfe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfe4:	462f      	mov	r7, r5
 800bfe6:	42bb      	cmp	r3, r7
 800bfe8:	460d      	mov	r5, r1
 800bfea:	d9f4      	bls.n	800bfd6 <_printf_i+0x112>
 800bfec:	2b08      	cmp	r3, #8
 800bfee:	d10b      	bne.n	800c008 <_printf_i+0x144>
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	07df      	lsls	r7, r3, #31
 800bff4:	d508      	bpl.n	800c008 <_printf_i+0x144>
 800bff6:	6923      	ldr	r3, [r4, #16]
 800bff8:	6861      	ldr	r1, [r4, #4]
 800bffa:	4299      	cmp	r1, r3
 800bffc:	bfde      	ittt	le
 800bffe:	2330      	movle	r3, #48	@ 0x30
 800c000:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c004:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c008:	1b92      	subs	r2, r2, r6
 800c00a:	6122      	str	r2, [r4, #16]
 800c00c:	f8cd a000 	str.w	sl, [sp]
 800c010:	464b      	mov	r3, r9
 800c012:	aa03      	add	r2, sp, #12
 800c014:	4621      	mov	r1, r4
 800c016:	4640      	mov	r0, r8
 800c018:	f7ff fee6 	bl	800bde8 <_printf_common>
 800c01c:	3001      	adds	r0, #1
 800c01e:	d14a      	bne.n	800c0b6 <_printf_i+0x1f2>
 800c020:	f04f 30ff 	mov.w	r0, #4294967295
 800c024:	b004      	add	sp, #16
 800c026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	f043 0320 	orr.w	r3, r3, #32
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	4833      	ldr	r0, [pc, #204]	@ (800c100 <_printf_i+0x23c>)
 800c034:	2778      	movs	r7, #120	@ 0x78
 800c036:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	6831      	ldr	r1, [r6, #0]
 800c03e:	061f      	lsls	r7, r3, #24
 800c040:	f851 5b04 	ldr.w	r5, [r1], #4
 800c044:	d402      	bmi.n	800c04c <_printf_i+0x188>
 800c046:	065f      	lsls	r7, r3, #25
 800c048:	bf48      	it	mi
 800c04a:	b2ad      	uxthmi	r5, r5
 800c04c:	6031      	str	r1, [r6, #0]
 800c04e:	07d9      	lsls	r1, r3, #31
 800c050:	bf44      	itt	mi
 800c052:	f043 0320 	orrmi.w	r3, r3, #32
 800c056:	6023      	strmi	r3, [r4, #0]
 800c058:	b11d      	cbz	r5, 800c062 <_printf_i+0x19e>
 800c05a:	2310      	movs	r3, #16
 800c05c:	e7ac      	b.n	800bfb8 <_printf_i+0xf4>
 800c05e:	4827      	ldr	r0, [pc, #156]	@ (800c0fc <_printf_i+0x238>)
 800c060:	e7e9      	b.n	800c036 <_printf_i+0x172>
 800c062:	6823      	ldr	r3, [r4, #0]
 800c064:	f023 0320 	bic.w	r3, r3, #32
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	e7f6      	b.n	800c05a <_printf_i+0x196>
 800c06c:	4616      	mov	r6, r2
 800c06e:	e7bd      	b.n	800bfec <_printf_i+0x128>
 800c070:	6833      	ldr	r3, [r6, #0]
 800c072:	6825      	ldr	r5, [r4, #0]
 800c074:	6961      	ldr	r1, [r4, #20]
 800c076:	1d18      	adds	r0, r3, #4
 800c078:	6030      	str	r0, [r6, #0]
 800c07a:	062e      	lsls	r6, r5, #24
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	d501      	bpl.n	800c084 <_printf_i+0x1c0>
 800c080:	6019      	str	r1, [r3, #0]
 800c082:	e002      	b.n	800c08a <_printf_i+0x1c6>
 800c084:	0668      	lsls	r0, r5, #25
 800c086:	d5fb      	bpl.n	800c080 <_printf_i+0x1bc>
 800c088:	8019      	strh	r1, [r3, #0]
 800c08a:	2300      	movs	r3, #0
 800c08c:	6123      	str	r3, [r4, #16]
 800c08e:	4616      	mov	r6, r2
 800c090:	e7bc      	b.n	800c00c <_printf_i+0x148>
 800c092:	6833      	ldr	r3, [r6, #0]
 800c094:	1d1a      	adds	r2, r3, #4
 800c096:	6032      	str	r2, [r6, #0]
 800c098:	681e      	ldr	r6, [r3, #0]
 800c09a:	6862      	ldr	r2, [r4, #4]
 800c09c:	2100      	movs	r1, #0
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f7f4 f926 	bl	80002f0 <memchr>
 800c0a4:	b108      	cbz	r0, 800c0aa <_printf_i+0x1e6>
 800c0a6:	1b80      	subs	r0, r0, r6
 800c0a8:	6060      	str	r0, [r4, #4]
 800c0aa:	6863      	ldr	r3, [r4, #4]
 800c0ac:	6123      	str	r3, [r4, #16]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0b4:	e7aa      	b.n	800c00c <_printf_i+0x148>
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	4632      	mov	r2, r6
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	4640      	mov	r0, r8
 800c0be:	47d0      	blx	sl
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d0ad      	beq.n	800c020 <_printf_i+0x15c>
 800c0c4:	6823      	ldr	r3, [r4, #0]
 800c0c6:	079b      	lsls	r3, r3, #30
 800c0c8:	d413      	bmi.n	800c0f2 <_printf_i+0x22e>
 800c0ca:	68e0      	ldr	r0, [r4, #12]
 800c0cc:	9b03      	ldr	r3, [sp, #12]
 800c0ce:	4298      	cmp	r0, r3
 800c0d0:	bfb8      	it	lt
 800c0d2:	4618      	movlt	r0, r3
 800c0d4:	e7a6      	b.n	800c024 <_printf_i+0x160>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	4632      	mov	r2, r6
 800c0da:	4649      	mov	r1, r9
 800c0dc:	4640      	mov	r0, r8
 800c0de:	47d0      	blx	sl
 800c0e0:	3001      	adds	r0, #1
 800c0e2:	d09d      	beq.n	800c020 <_printf_i+0x15c>
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	68e3      	ldr	r3, [r4, #12]
 800c0e8:	9903      	ldr	r1, [sp, #12]
 800c0ea:	1a5b      	subs	r3, r3, r1
 800c0ec:	42ab      	cmp	r3, r5
 800c0ee:	dcf2      	bgt.n	800c0d6 <_printf_i+0x212>
 800c0f0:	e7eb      	b.n	800c0ca <_printf_i+0x206>
 800c0f2:	2500      	movs	r5, #0
 800c0f4:	f104 0619 	add.w	r6, r4, #25
 800c0f8:	e7f5      	b.n	800c0e6 <_printf_i+0x222>
 800c0fa:	bf00      	nop
 800c0fc:	0800c5f5 	.word	0x0800c5f5
 800c100:	0800c606 	.word	0x0800c606

0800c104 <__sflush_r>:
 800c104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10c:	0716      	lsls	r6, r2, #28
 800c10e:	4605      	mov	r5, r0
 800c110:	460c      	mov	r4, r1
 800c112:	d454      	bmi.n	800c1be <__sflush_r+0xba>
 800c114:	684b      	ldr	r3, [r1, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	dc02      	bgt.n	800c120 <__sflush_r+0x1c>
 800c11a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dd48      	ble.n	800c1b2 <__sflush_r+0xae>
 800c120:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c122:	2e00      	cmp	r6, #0
 800c124:	d045      	beq.n	800c1b2 <__sflush_r+0xae>
 800c126:	2300      	movs	r3, #0
 800c128:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c12c:	682f      	ldr	r7, [r5, #0]
 800c12e:	6a21      	ldr	r1, [r4, #32]
 800c130:	602b      	str	r3, [r5, #0]
 800c132:	d030      	beq.n	800c196 <__sflush_r+0x92>
 800c134:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	0759      	lsls	r1, r3, #29
 800c13a:	d505      	bpl.n	800c148 <__sflush_r+0x44>
 800c13c:	6863      	ldr	r3, [r4, #4]
 800c13e:	1ad2      	subs	r2, r2, r3
 800c140:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c142:	b10b      	cbz	r3, 800c148 <__sflush_r+0x44>
 800c144:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c146:	1ad2      	subs	r2, r2, r3
 800c148:	2300      	movs	r3, #0
 800c14a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c14c:	6a21      	ldr	r1, [r4, #32]
 800c14e:	4628      	mov	r0, r5
 800c150:	47b0      	blx	r6
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	d106      	bne.n	800c166 <__sflush_r+0x62>
 800c158:	6829      	ldr	r1, [r5, #0]
 800c15a:	291d      	cmp	r1, #29
 800c15c:	d82b      	bhi.n	800c1b6 <__sflush_r+0xb2>
 800c15e:	4a2a      	ldr	r2, [pc, #168]	@ (800c208 <__sflush_r+0x104>)
 800c160:	410a      	asrs	r2, r1
 800c162:	07d6      	lsls	r6, r2, #31
 800c164:	d427      	bmi.n	800c1b6 <__sflush_r+0xb2>
 800c166:	2200      	movs	r2, #0
 800c168:	6062      	str	r2, [r4, #4]
 800c16a:	04d9      	lsls	r1, r3, #19
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	6022      	str	r2, [r4, #0]
 800c170:	d504      	bpl.n	800c17c <__sflush_r+0x78>
 800c172:	1c42      	adds	r2, r0, #1
 800c174:	d101      	bne.n	800c17a <__sflush_r+0x76>
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	b903      	cbnz	r3, 800c17c <__sflush_r+0x78>
 800c17a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c17c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c17e:	602f      	str	r7, [r5, #0]
 800c180:	b1b9      	cbz	r1, 800c1b2 <__sflush_r+0xae>
 800c182:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c186:	4299      	cmp	r1, r3
 800c188:	d002      	beq.n	800c190 <__sflush_r+0x8c>
 800c18a:	4628      	mov	r0, r5
 800c18c:	f7ff fbf2 	bl	800b974 <_free_r>
 800c190:	2300      	movs	r3, #0
 800c192:	6363      	str	r3, [r4, #52]	@ 0x34
 800c194:	e00d      	b.n	800c1b2 <__sflush_r+0xae>
 800c196:	2301      	movs	r3, #1
 800c198:	4628      	mov	r0, r5
 800c19a:	47b0      	blx	r6
 800c19c:	4602      	mov	r2, r0
 800c19e:	1c50      	adds	r0, r2, #1
 800c1a0:	d1c9      	bne.n	800c136 <__sflush_r+0x32>
 800c1a2:	682b      	ldr	r3, [r5, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d0c6      	beq.n	800c136 <__sflush_r+0x32>
 800c1a8:	2b1d      	cmp	r3, #29
 800c1aa:	d001      	beq.n	800c1b0 <__sflush_r+0xac>
 800c1ac:	2b16      	cmp	r3, #22
 800c1ae:	d11e      	bne.n	800c1ee <__sflush_r+0xea>
 800c1b0:	602f      	str	r7, [r5, #0]
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	e022      	b.n	800c1fc <__sflush_r+0xf8>
 800c1b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ba:	b21b      	sxth	r3, r3
 800c1bc:	e01b      	b.n	800c1f6 <__sflush_r+0xf2>
 800c1be:	690f      	ldr	r7, [r1, #16]
 800c1c0:	2f00      	cmp	r7, #0
 800c1c2:	d0f6      	beq.n	800c1b2 <__sflush_r+0xae>
 800c1c4:	0793      	lsls	r3, r2, #30
 800c1c6:	680e      	ldr	r6, [r1, #0]
 800c1c8:	bf08      	it	eq
 800c1ca:	694b      	ldreq	r3, [r1, #20]
 800c1cc:	600f      	str	r7, [r1, #0]
 800c1ce:	bf18      	it	ne
 800c1d0:	2300      	movne	r3, #0
 800c1d2:	eba6 0807 	sub.w	r8, r6, r7
 800c1d6:	608b      	str	r3, [r1, #8]
 800c1d8:	f1b8 0f00 	cmp.w	r8, #0
 800c1dc:	dde9      	ble.n	800c1b2 <__sflush_r+0xae>
 800c1de:	6a21      	ldr	r1, [r4, #32]
 800c1e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1e2:	4643      	mov	r3, r8
 800c1e4:	463a      	mov	r2, r7
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47b0      	blx	r6
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	dc08      	bgt.n	800c200 <__sflush_r+0xfc>
 800c1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	4407      	add	r7, r0
 800c202:	eba8 0800 	sub.w	r8, r8, r0
 800c206:	e7e7      	b.n	800c1d8 <__sflush_r+0xd4>
 800c208:	dfbffffe 	.word	0xdfbffffe

0800c20c <_fflush_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	690b      	ldr	r3, [r1, #16]
 800c210:	4605      	mov	r5, r0
 800c212:	460c      	mov	r4, r1
 800c214:	b913      	cbnz	r3, 800c21c <_fflush_r+0x10>
 800c216:	2500      	movs	r5, #0
 800c218:	4628      	mov	r0, r5
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	b118      	cbz	r0, 800c226 <_fflush_r+0x1a>
 800c21e:	6a03      	ldr	r3, [r0, #32]
 800c220:	b90b      	cbnz	r3, 800c226 <_fflush_r+0x1a>
 800c222:	f7ff fa97 	bl	800b754 <__sinit>
 800c226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d0f3      	beq.n	800c216 <_fflush_r+0xa>
 800c22e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c230:	07d0      	lsls	r0, r2, #31
 800c232:	d404      	bmi.n	800c23e <_fflush_r+0x32>
 800c234:	0599      	lsls	r1, r3, #22
 800c236:	d402      	bmi.n	800c23e <_fflush_r+0x32>
 800c238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c23a:	f7ff fb98 	bl	800b96e <__retarget_lock_acquire_recursive>
 800c23e:	4628      	mov	r0, r5
 800c240:	4621      	mov	r1, r4
 800c242:	f7ff ff5f 	bl	800c104 <__sflush_r>
 800c246:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c248:	07da      	lsls	r2, r3, #31
 800c24a:	4605      	mov	r5, r0
 800c24c:	d4e4      	bmi.n	800c218 <_fflush_r+0xc>
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	059b      	lsls	r3, r3, #22
 800c252:	d4e1      	bmi.n	800c218 <_fflush_r+0xc>
 800c254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c256:	f7ff fb8b 	bl	800b970 <__retarget_lock_release_recursive>
 800c25a:	e7dd      	b.n	800c218 <_fflush_r+0xc>

0800c25c <_putc_r>:
 800c25c:	b570      	push	{r4, r5, r6, lr}
 800c25e:	460d      	mov	r5, r1
 800c260:	4614      	mov	r4, r2
 800c262:	4606      	mov	r6, r0
 800c264:	b118      	cbz	r0, 800c26e <_putc_r+0x12>
 800c266:	6a03      	ldr	r3, [r0, #32]
 800c268:	b90b      	cbnz	r3, 800c26e <_putc_r+0x12>
 800c26a:	f7ff fa73 	bl	800b754 <__sinit>
 800c26e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c270:	07d8      	lsls	r0, r3, #31
 800c272:	d405      	bmi.n	800c280 <_putc_r+0x24>
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	0599      	lsls	r1, r3, #22
 800c278:	d402      	bmi.n	800c280 <_putc_r+0x24>
 800c27a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c27c:	f7ff fb77 	bl	800b96e <__retarget_lock_acquire_recursive>
 800c280:	68a3      	ldr	r3, [r4, #8]
 800c282:	3b01      	subs	r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	60a3      	str	r3, [r4, #8]
 800c288:	da05      	bge.n	800c296 <_putc_r+0x3a>
 800c28a:	69a2      	ldr	r2, [r4, #24]
 800c28c:	4293      	cmp	r3, r2
 800c28e:	db12      	blt.n	800c2b6 <_putc_r+0x5a>
 800c290:	b2eb      	uxtb	r3, r5
 800c292:	2b0a      	cmp	r3, #10
 800c294:	d00f      	beq.n	800c2b6 <_putc_r+0x5a>
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	6022      	str	r2, [r4, #0]
 800c29c:	701d      	strb	r5, [r3, #0]
 800c29e:	b2ed      	uxtb	r5, r5
 800c2a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2a2:	07da      	lsls	r2, r3, #31
 800c2a4:	d405      	bmi.n	800c2b2 <_putc_r+0x56>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	059b      	lsls	r3, r3, #22
 800c2aa:	d402      	bmi.n	800c2b2 <_putc_r+0x56>
 800c2ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2ae:	f7ff fb5f 	bl	800b970 <__retarget_lock_release_recursive>
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4622      	mov	r2, r4
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f000 f802 	bl	800c2c4 <__swbuf_r>
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	e7ed      	b.n	800c2a0 <_putc_r+0x44>

0800c2c4 <__swbuf_r>:
 800c2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c6:	460e      	mov	r6, r1
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	b118      	cbz	r0, 800c2d6 <__swbuf_r+0x12>
 800c2ce:	6a03      	ldr	r3, [r0, #32]
 800c2d0:	b90b      	cbnz	r3, 800c2d6 <__swbuf_r+0x12>
 800c2d2:	f7ff fa3f 	bl	800b754 <__sinit>
 800c2d6:	69a3      	ldr	r3, [r4, #24]
 800c2d8:	60a3      	str	r3, [r4, #8]
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	071a      	lsls	r2, r3, #28
 800c2de:	d501      	bpl.n	800c2e4 <__swbuf_r+0x20>
 800c2e0:	6923      	ldr	r3, [r4, #16]
 800c2e2:	b943      	cbnz	r3, 800c2f6 <__swbuf_r+0x32>
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f000 f82a 	bl	800c340 <__swsetup_r>
 800c2ec:	b118      	cbz	r0, 800c2f6 <__swbuf_r+0x32>
 800c2ee:	f04f 37ff 	mov.w	r7, #4294967295
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	6922      	ldr	r2, [r4, #16]
 800c2fa:	1a98      	subs	r0, r3, r2
 800c2fc:	6963      	ldr	r3, [r4, #20]
 800c2fe:	b2f6      	uxtb	r6, r6
 800c300:	4283      	cmp	r3, r0
 800c302:	4637      	mov	r7, r6
 800c304:	dc05      	bgt.n	800c312 <__swbuf_r+0x4e>
 800c306:	4621      	mov	r1, r4
 800c308:	4628      	mov	r0, r5
 800c30a:	f7ff ff7f 	bl	800c20c <_fflush_r>
 800c30e:	2800      	cmp	r0, #0
 800c310:	d1ed      	bne.n	800c2ee <__swbuf_r+0x2a>
 800c312:	68a3      	ldr	r3, [r4, #8]
 800c314:	3b01      	subs	r3, #1
 800c316:	60a3      	str	r3, [r4, #8]
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	6022      	str	r2, [r4, #0]
 800c31e:	701e      	strb	r6, [r3, #0]
 800c320:	6962      	ldr	r2, [r4, #20]
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	429a      	cmp	r2, r3
 800c326:	d004      	beq.n	800c332 <__swbuf_r+0x6e>
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	07db      	lsls	r3, r3, #31
 800c32c:	d5e1      	bpl.n	800c2f2 <__swbuf_r+0x2e>
 800c32e:	2e0a      	cmp	r6, #10
 800c330:	d1df      	bne.n	800c2f2 <__swbuf_r+0x2e>
 800c332:	4621      	mov	r1, r4
 800c334:	4628      	mov	r0, r5
 800c336:	f7ff ff69 	bl	800c20c <_fflush_r>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d0d9      	beq.n	800c2f2 <__swbuf_r+0x2e>
 800c33e:	e7d6      	b.n	800c2ee <__swbuf_r+0x2a>

0800c340 <__swsetup_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4b29      	ldr	r3, [pc, #164]	@ (800c3e8 <__swsetup_r+0xa8>)
 800c344:	4605      	mov	r5, r0
 800c346:	6818      	ldr	r0, [r3, #0]
 800c348:	460c      	mov	r4, r1
 800c34a:	b118      	cbz	r0, 800c354 <__swsetup_r+0x14>
 800c34c:	6a03      	ldr	r3, [r0, #32]
 800c34e:	b90b      	cbnz	r3, 800c354 <__swsetup_r+0x14>
 800c350:	f7ff fa00 	bl	800b754 <__sinit>
 800c354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c358:	0719      	lsls	r1, r3, #28
 800c35a:	d422      	bmi.n	800c3a2 <__swsetup_r+0x62>
 800c35c:	06da      	lsls	r2, r3, #27
 800c35e:	d407      	bmi.n	800c370 <__swsetup_r+0x30>
 800c360:	2209      	movs	r2, #9
 800c362:	602a      	str	r2, [r5, #0]
 800c364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c368:	81a3      	strh	r3, [r4, #12]
 800c36a:	f04f 30ff 	mov.w	r0, #4294967295
 800c36e:	e033      	b.n	800c3d8 <__swsetup_r+0x98>
 800c370:	0758      	lsls	r0, r3, #29
 800c372:	d512      	bpl.n	800c39a <__swsetup_r+0x5a>
 800c374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c376:	b141      	cbz	r1, 800c38a <__swsetup_r+0x4a>
 800c378:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c37c:	4299      	cmp	r1, r3
 800c37e:	d002      	beq.n	800c386 <__swsetup_r+0x46>
 800c380:	4628      	mov	r0, r5
 800c382:	f7ff faf7 	bl	800b974 <_free_r>
 800c386:	2300      	movs	r3, #0
 800c388:	6363      	str	r3, [r4, #52]	@ 0x34
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	2300      	movs	r3, #0
 800c394:	6063      	str	r3, [r4, #4]
 800c396:	6923      	ldr	r3, [r4, #16]
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	f043 0308 	orr.w	r3, r3, #8
 800c3a0:	81a3      	strh	r3, [r4, #12]
 800c3a2:	6923      	ldr	r3, [r4, #16]
 800c3a4:	b94b      	cbnz	r3, 800c3ba <__swsetup_r+0x7a>
 800c3a6:	89a3      	ldrh	r3, [r4, #12]
 800c3a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c3ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3b0:	d003      	beq.n	800c3ba <__swsetup_r+0x7a>
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f000 f84f 	bl	800c458 <__smakebuf_r>
 800c3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3be:	f013 0201 	ands.w	r2, r3, #1
 800c3c2:	d00a      	beq.n	800c3da <__swsetup_r+0x9a>
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	60a2      	str	r2, [r4, #8]
 800c3c8:	6962      	ldr	r2, [r4, #20]
 800c3ca:	4252      	negs	r2, r2
 800c3cc:	61a2      	str	r2, [r4, #24]
 800c3ce:	6922      	ldr	r2, [r4, #16]
 800c3d0:	b942      	cbnz	r2, 800c3e4 <__swsetup_r+0xa4>
 800c3d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3d6:	d1c5      	bne.n	800c364 <__swsetup_r+0x24>
 800c3d8:	bd38      	pop	{r3, r4, r5, pc}
 800c3da:	0799      	lsls	r1, r3, #30
 800c3dc:	bf58      	it	pl
 800c3de:	6962      	ldrpl	r2, [r4, #20]
 800c3e0:	60a2      	str	r2, [r4, #8]
 800c3e2:	e7f4      	b.n	800c3ce <__swsetup_r+0x8e>
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	e7f7      	b.n	800c3d8 <__swsetup_r+0x98>
 800c3e8:	24000110 	.word	0x24000110

0800c3ec <_sbrk_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4d06      	ldr	r5, [pc, #24]	@ (800c408 <_sbrk_r+0x1c>)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	602b      	str	r3, [r5, #0]
 800c3f8:	f7f4 ffca 	bl	8001390 <_sbrk>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_sbrk_r+0x1a>
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	b103      	cbz	r3, 800c406 <_sbrk_r+0x1a>
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	240020cc 	.word	0x240020cc

0800c40c <__swhatbuf_r>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	460c      	mov	r4, r1
 800c410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c414:	2900      	cmp	r1, #0
 800c416:	b096      	sub	sp, #88	@ 0x58
 800c418:	4615      	mov	r5, r2
 800c41a:	461e      	mov	r6, r3
 800c41c:	da0d      	bge.n	800c43a <__swhatbuf_r+0x2e>
 800c41e:	89a3      	ldrh	r3, [r4, #12]
 800c420:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c424:	f04f 0100 	mov.w	r1, #0
 800c428:	bf14      	ite	ne
 800c42a:	2340      	movne	r3, #64	@ 0x40
 800c42c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c430:	2000      	movs	r0, #0
 800c432:	6031      	str	r1, [r6, #0]
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	b016      	add	sp, #88	@ 0x58
 800c438:	bd70      	pop	{r4, r5, r6, pc}
 800c43a:	466a      	mov	r2, sp
 800c43c:	f000 f848 	bl	800c4d0 <_fstat_r>
 800c440:	2800      	cmp	r0, #0
 800c442:	dbec      	blt.n	800c41e <__swhatbuf_r+0x12>
 800c444:	9901      	ldr	r1, [sp, #4]
 800c446:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c44a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c44e:	4259      	negs	r1, r3
 800c450:	4159      	adcs	r1, r3
 800c452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c456:	e7eb      	b.n	800c430 <__swhatbuf_r+0x24>

0800c458 <__smakebuf_r>:
 800c458:	898b      	ldrh	r3, [r1, #12]
 800c45a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c45c:	079d      	lsls	r5, r3, #30
 800c45e:	4606      	mov	r6, r0
 800c460:	460c      	mov	r4, r1
 800c462:	d507      	bpl.n	800c474 <__smakebuf_r+0x1c>
 800c464:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	6123      	str	r3, [r4, #16]
 800c46c:	2301      	movs	r3, #1
 800c46e:	6163      	str	r3, [r4, #20]
 800c470:	b003      	add	sp, #12
 800c472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c474:	ab01      	add	r3, sp, #4
 800c476:	466a      	mov	r2, sp
 800c478:	f7ff ffc8 	bl	800c40c <__swhatbuf_r>
 800c47c:	9f00      	ldr	r7, [sp, #0]
 800c47e:	4605      	mov	r5, r0
 800c480:	4639      	mov	r1, r7
 800c482:	4630      	mov	r0, r6
 800c484:	f7ff fae2 	bl	800ba4c <_malloc_r>
 800c488:	b948      	cbnz	r0, 800c49e <__smakebuf_r+0x46>
 800c48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c48e:	059a      	lsls	r2, r3, #22
 800c490:	d4ee      	bmi.n	800c470 <__smakebuf_r+0x18>
 800c492:	f023 0303 	bic.w	r3, r3, #3
 800c496:	f043 0302 	orr.w	r3, r3, #2
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	e7e2      	b.n	800c464 <__smakebuf_r+0xc>
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	6020      	str	r0, [r4, #0]
 800c4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4a6:	81a3      	strh	r3, [r4, #12]
 800c4a8:	9b01      	ldr	r3, [sp, #4]
 800c4aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4ae:	b15b      	cbz	r3, 800c4c8 <__smakebuf_r+0x70>
 800c4b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f000 f81d 	bl	800c4f4 <_isatty_r>
 800c4ba:	b128      	cbz	r0, 800c4c8 <__smakebuf_r+0x70>
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	f023 0303 	bic.w	r3, r3, #3
 800c4c2:	f043 0301 	orr.w	r3, r3, #1
 800c4c6:	81a3      	strh	r3, [r4, #12]
 800c4c8:	89a3      	ldrh	r3, [r4, #12]
 800c4ca:	431d      	orrs	r5, r3
 800c4cc:	81a5      	strh	r5, [r4, #12]
 800c4ce:	e7cf      	b.n	800c470 <__smakebuf_r+0x18>

0800c4d0 <_fstat_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4d07      	ldr	r5, [pc, #28]	@ (800c4f0 <_fstat_r+0x20>)
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	4608      	mov	r0, r1
 800c4da:	4611      	mov	r1, r2
 800c4dc:	602b      	str	r3, [r5, #0]
 800c4de:	f7f4 ff2e 	bl	800133e <_fstat>
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	d102      	bne.n	800c4ec <_fstat_r+0x1c>
 800c4e6:	682b      	ldr	r3, [r5, #0]
 800c4e8:	b103      	cbz	r3, 800c4ec <_fstat_r+0x1c>
 800c4ea:	6023      	str	r3, [r4, #0]
 800c4ec:	bd38      	pop	{r3, r4, r5, pc}
 800c4ee:	bf00      	nop
 800c4f0:	240020cc 	.word	0x240020cc

0800c4f4 <_isatty_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d06      	ldr	r5, [pc, #24]	@ (800c510 <_isatty_r+0x1c>)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	602b      	str	r3, [r5, #0]
 800c500:	f7f4 ff2d 	bl	800135e <_isatty>
 800c504:	1c43      	adds	r3, r0, #1
 800c506:	d102      	bne.n	800c50e <_isatty_r+0x1a>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	b103      	cbz	r3, 800c50e <_isatty_r+0x1a>
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	bd38      	pop	{r3, r4, r5, pc}
 800c510:	240020cc 	.word	0x240020cc

0800c514 <_init>:
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	bf00      	nop
 800c518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c51a:	bc08      	pop	{r3}
 800c51c:	469e      	mov	lr, r3
 800c51e:	4770      	bx	lr

0800c520 <_fini>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	bf00      	nop
 800c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c526:	bc08      	pop	{r3}
 800c528:	469e      	mov	lr, r3
 800c52a:	4770      	bx	lr
