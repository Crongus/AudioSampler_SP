
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006240  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080064ec  080064ec  000074ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080064fc  080064fc  000074fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08006500  08006500  00007500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08006504  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000071c  24000010  08006514  00008010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400072c  08006514  0000872c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000192aa  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000038e7  00000000  00000000  000212e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001378  00000000  00000000  00024bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ecb  00000000  00000000  00025f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032005  00000000  00000000  00026e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d239  00000000  00000000  00058e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00136a61  00000000  00000000  00076051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001acab2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000509c  00000000  00000000  001acaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001b1b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080064d4 	.word	0x080064d4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080064d4 	.word	0x080064d4

080002ec <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	@ 0x40
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80002f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8000300:	f107 0320 	add.w	r3, r7, #32
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
 800031c:	615a      	str	r2, [r3, #20]
 800031e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 8000320:	4b46      	ldr	r3, [pc, #280]	@ (800043c <MX_FMC_Init+0x150>)
 8000322:	4a47      	ldr	r2, [pc, #284]	@ (8000440 <MX_FMC_Init+0x154>)
 8000324:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 8000326:	4b45      	ldr	r3, [pc, #276]	@ (800043c <MX_FMC_Init+0x150>)
 8000328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800032c:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 800032e:	4b43      	ldr	r3, [pc, #268]	@ (800043c <MX_FMC_Init+0x150>)
 8000330:	2202      	movs	r2, #2
 8000332:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 8000334:	4b41      	ldr	r3, [pc, #260]	@ (800043c <MX_FMC_Init+0x150>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 800033a:	4b40      	ldr	r3, [pc, #256]	@ (800043c <MX_FMC_Init+0x150>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000340:	4b3e      	ldr	r3, [pc, #248]	@ (800043c <MX_FMC_Init+0x150>)
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000346:	4b3d      	ldr	r3, [pc, #244]	@ (800043c <MX_FMC_Init+0x150>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 800034c:	4b3b      	ldr	r3, [pc, #236]	@ (800043c <MX_FMC_Init+0x150>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 8000352:	4b3a      	ldr	r3, [pc, #232]	@ (800043c <MX_FMC_Init+0x150>)
 8000354:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8000358:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 800035a:	4b38      	ldr	r3, [pc, #224]	@ (800043c <MX_FMC_Init+0x150>)
 800035c:	2240      	movs	r2, #64	@ 0x40
 800035e:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 8000360:	4b36      	ldr	r3, [pc, #216]	@ (800043c <MX_FMC_Init+0x150>)
 8000362:	2240      	movs	r2, #64	@ 0x40
 8000364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 8000366:	4b35      	ldr	r3, [pc, #212]	@ (800043c <MX_FMC_Init+0x150>)
 8000368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800036c:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 0;
 800036e:	4b33      	ldr	r3, [pc, #204]	@ (800043c <MX_FMC_Init+0x150>)
 8000370:	2200      	movs	r2, #0
 8000372:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000374:	4b31      	ldr	r3, [pc, #196]	@ (800043c <MX_FMC_Init+0x150>)
 8000376:	2200      	movs	r2, #0
 8000378:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 800037a:	4b30      	ldr	r3, [pc, #192]	@ (800043c <MX_FMC_Init+0x150>)
 800037c:	2201      	movs	r2, #1
 800037e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000382:	23fc      	movs	r3, #252	@ 0xfc
 8000384:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 8000386:	23fc      	movs	r3, #252	@ 0xfc
 8000388:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 800038a:	23fc      	movs	r3, #252	@ 0xfc
 800038c:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 800038e:	23fc      	movs	r3, #252	@ 0xfc
 8000390:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000392:	23fc      	movs	r3, #252	@ 0xfc
 8000394:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 8000396:	23fc      	movs	r3, #252	@ 0xfc
 8000398:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 800039a:	23fc      	movs	r3, #252	@ 0xfc
 800039c:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 800039e:	23fc      	movs	r3, #252	@ 0xfc
 80003a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80003a2:	f107 0220 	add.w	r2, r7, #32
 80003a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003aa:	4619      	mov	r1, r3
 80003ac:	4823      	ldr	r0, [pc, #140]	@ (800043c <MX_FMC_Init+0x150>)
 80003ae:	f001 fe13 	bl	8001fd8 <HAL_NAND_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 80003b8:	f000 fd7c 	bl	8000eb4 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80003bc:	4b21      	ldr	r3, [pc, #132]	@ (8000444 <MX_FMC_Init+0x158>)
 80003be:	4a22      	ldr	r2, [pc, #136]	@ (8000448 <MX_FMC_Init+0x15c>)
 80003c0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80003c2:	4b20      	ldr	r3, [pc, #128]	@ (8000444 <MX_FMC_Init+0x158>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80003c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000444 <MX_FMC_Init+0x158>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80003ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000444 <MX_FMC_Init+0x158>)
 80003d0:	2204      	movs	r2, #4
 80003d2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <MX_FMC_Init+0x158>)
 80003d6:	2210      	movs	r2, #16
 80003d8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80003da:	4b1a      	ldr	r3, [pc, #104]	@ (8000444 <MX_FMC_Init+0x158>)
 80003dc:	2240      	movs	r2, #64	@ 0x40
 80003de:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80003e0:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <MX_FMC_Init+0x158>)
 80003e2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80003e6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80003e8:	4b16      	ldr	r3, [pc, #88]	@ (8000444 <MX_FMC_Init+0x158>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80003ee:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <MX_FMC_Init+0x158>)
 80003f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80003f4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80003f6:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <MX_FMC_Init+0x158>)
 80003f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80003fe:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <MX_FMC_Init+0x158>)
 8000400:	2200      	movs	r2, #0
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000404:	2302      	movs	r3, #2
 8000406:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 8000408:	2309      	movs	r3, #9
 800040a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 800040c:	2306      	movs	r3, #6
 800040e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 8000410:	2309      	movs	r3, #9
 8000412:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000414:	2303      	movs	r3, #3
 8000416:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 8000418:	2303      	movs	r3, #3
 800041a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 800041c:	2303      	movs	r3, #3
 800041e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4619      	mov	r1, r3
 8000424:	4807      	ldr	r0, [pc, #28]	@ (8000444 <MX_FMC_Init+0x158>)
 8000426:	f005 fb4d 	bl	8005ac4 <HAL_SDRAM_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8000430:	f000 fd40 	bl	8000eb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000434:	bf00      	nop
 8000436:	3740      	adds	r7, #64	@ 0x40
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	2400002c 	.word	0x2400002c
 8000440:	52004080 	.word	0x52004080
 8000444:	2400006c 	.word	0x2400006c
 8000448:	52004140 	.word	0x52004140

0800044c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b0b8      	sub	sp, #224	@ 0xe0
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
 8000460:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000462:	4b5c      	ldr	r3, [pc, #368]	@ (80005d4 <HAL_FMC_MspInit+0x188>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	f040 80af 	bne.w	80005ca <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 800046c:	4b59      	ldr	r3, [pc, #356]	@ (80005d4 <HAL_FMC_MspInit+0x188>)
 800046e:	2201      	movs	r2, #1
 8000470:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	22c0      	movs	r2, #192	@ 0xc0
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f005 fffd 	bl	800647a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000484:	f04f 0300 	mov.w	r3, #0
 8000488:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800048c:	2300      	movs	r3, #0
 800048e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4618      	mov	r0, r3
 8000496:	f002 ff0b 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80004a0:	f000 fd08 	bl	8000eb4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80004a4:	4b4c      	ldr	r3, [pc, #304]	@ (80005d8 <HAL_FMC_MspInit+0x18c>)
 80004a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80004aa:	4a4b      	ldr	r2, [pc, #300]	@ (80005d8 <HAL_FMC_MspInit+0x18c>)
 80004ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004b0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 80004b4:	4b48      	ldr	r3, [pc, #288]	@ (80005d8 <HAL_FMC_MspInit+0x18c>)
 80004b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80004ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80004c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d6:	2303      	movs	r3, #3
 80004d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80004dc:	230c      	movs	r3, #12
 80004de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004e2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80004e6:	4619      	mov	r1, r3
 80004e8:	483c      	ldr	r0, [pc, #240]	@ (80005dc <HAL_FMC_MspInit+0x190>)
 80004ea:	f001 f92d 	bl	8001748 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80004ee:	230d      	movs	r3, #13
 80004f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f4:	2302      	movs	r3, #2
 80004f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000500:	2303      	movs	r3, #3
 8000502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000506:	230c      	movs	r3, #12
 8000508:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000510:	4619      	mov	r1, r3
 8000512:	4833      	ldr	r0, [pc, #204]	@ (80005e0 <HAL_FMC_MspInit+0x194>)
 8000514:	f001 f918 	bl	8001748 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000518:	f248 1333 	movw	r3, #33075	@ 0x8133
 800051c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000532:	230c      	movs	r3, #12
 8000534:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000538:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800053c:	4619      	mov	r1, r3
 800053e:	4829      	ldr	r0, [pc, #164]	@ (80005e4 <HAL_FMC_MspInit+0x198>)
 8000540:	f001 f902 	bl	8001748 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000544:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000548:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054c:	2302      	movs	r3, #2
 800054e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000558:	2303      	movs	r3, #3
 800055a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800055e:	230c      	movs	r3, #12
 8000560:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000564:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000568:	4619      	mov	r1, r3
 800056a:	481f      	ldr	r0, [pc, #124]	@ (80005e8 <HAL_FMC_MspInit+0x19c>)
 800056c:	f001 f8ec 	bl	8001748 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000570:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 8000574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000584:	2303      	movs	r3, #3
 8000586:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058a:	230c      	movs	r3, #12
 800058c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000590:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000594:	4619      	mov	r1, r3
 8000596:	4815      	ldr	r0, [pc, #84]	@ (80005ec <HAL_FMC_MspInit+0x1a0>)
 8000598:	f001 f8d6 	bl	8001748 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800059c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80005b6:	2309      	movs	r3, #9
 80005b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005c0:	4619      	mov	r1, r3
 80005c2:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <HAL_FMC_MspInit+0x194>)
 80005c4:	f001 f8c0 	bl	8001748 <HAL_GPIO_Init>
 80005c8:	e000      	b.n	80005cc <HAL_FMC_MspInit+0x180>
    return;
 80005ca:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80005cc:	37e0      	adds	r7, #224	@ 0xe0
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	240000a0 	.word	0x240000a0
 80005d8:	58024400 	.word	0x58024400
 80005dc:	58021400 	.word	0x58021400
 80005e0:	58020800 	.word	0x58020800
 80005e4:	58021800 	.word	0x58021800
 80005e8:	58021000 	.word	0x58021000
 80005ec:	58020c00 	.word	0x58020c00

080005f0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80005f8:	f7ff ff28 	bl	800044c <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800060c:	f7ff ff1e 	bl	800044c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	@ 0x30
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062e:	4b60      	ldr	r3, [pc, #384]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000630:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000634:	4a5e      	ldr	r2, [pc, #376]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800063e:	4b5c      	ldr	r3, [pc, #368]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000640:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b58      	ldr	r3, [pc, #352]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800064e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000652:	4a57      	ldr	r2, [pc, #348]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800065c:	4b54      	ldr	r3, [pc, #336]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800065e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b51      	ldr	r3, [pc, #324]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800066c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000670:	4a4f      	ldr	r2, [pc, #316]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800067a:	4b4d      	ldr	r3, [pc, #308]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800067c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000680:	f003 0320 	and.w	r3, r3, #32
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b49      	ldr	r3, [pc, #292]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800068a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800068e:	4a48      	ldr	r2, [pc, #288]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000698:	4b45      	ldr	r3, [pc, #276]	@ (80007b0 <MX_GPIO_Init+0x198>)
 800069a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b42      	ldr	r3, [pc, #264]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006ac:	4a40      	ldr	r2, [pc, #256]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006b6:	4b3e      	ldr	r3, [pc, #248]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	4b3a      	ldr	r3, [pc, #232]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006ca:	4a39      	ldr	r2, [pc, #228]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006d4:	4b36      	ldr	r3, [pc, #216]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	4b33      	ldr	r3, [pc, #204]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006e8:	4a31      	ldr	r2, [pc, #196]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006f2:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2150      	movs	r1, #80	@ 0x50
 8000704:	482b      	ldr	r0, [pc, #172]	@ (80007b4 <MX_GPIO_Init+0x19c>)
 8000706:	f001 f9cf 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000710:	4829      	ldr	r0, [pc, #164]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000712:	f001 f9c9 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	21c0      	movs	r1, #192	@ 0xc0
 800071a:	4828      	ldr	r0, [pc, #160]	@ (80007bc <MX_GPIO_Init+0x1a4>)
 800071c:	f001 f9c4 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8000720:	232c      	movs	r3, #44	@ 0x2c
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4820      	ldr	r0, [pc, #128]	@ (80007b4 <MX_GPIO_Init+0x19c>)
 8000734:	f001 f808 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000738:	2350      	movs	r3, #80	@ 0x50
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	4819      	ldr	r0, [pc, #100]	@ (80007b4 <MX_GPIO_Init+0x19c>)
 8000750:	f000 fffa 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4812      	ldr	r0, [pc, #72]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 800076e:	f000 ffeb 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000772:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000788:	f000 ffde 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800078c:	23c0      	movs	r3, #192	@ 0xc0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <MX_GPIO_Init+0x1a4>)
 80007a4:	f000 ffd0 	bl	8001748 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58024400 	.word	0x58024400
 80007b4:	58021000 	.word	0x58021000
 80007b8:	58020800 	.word	0x58020800
 80007bc:	58021400 	.word	0x58021400

080007c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_I2C1_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_I2C1_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <MX_I2C1_Init+0x74>)
 80007fc:	f001 f988 	bl	8001b10 <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 fb55 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <MX_I2C1_Init+0x74>)
 800080e:	f001 fa1b 	bl	8001c48 <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 fb4c 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_I2C1_Init+0x74>)
 8000820:	f001 fa5d 	bl	8001cde <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 fb43 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	240000a4 	.word	0x240000a4
 8000838:	40005400 	.word	0x40005400
 800083c:	20b0ccff 	.word	0x20b0ccff

08000840 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	@ (80008b8 <MX_I2C2_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <MX_I2C2_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000850:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800087c:	f001 f948 	bl	8001b10 <HAL_I2C_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000886:	f000 fb15 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <MX_I2C2_Init+0x74>)
 800088e:	f001 f9db 	bl	8001c48 <HAL_I2CEx_ConfigAnalogFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 fb0c 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_I2C2_Init+0x74>)
 80008a0:	f001 fa1d 	bl	8001cde <HAL_I2CEx_ConfigDigitalFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fb03 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	240000f8 	.word	0x240000f8
 80008b8:	40005800 	.word	0x40005800
 80008bc:	20b0ccff 	.word	0x20b0ccff

080008c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0bc      	sub	sp, #240	@ 0xf0
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	22c0      	movs	r2, #192	@ 0xc0
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 fdca 	bl	800647a <memset>
  if(i2cHandle->Instance==I2C1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a4d      	ldr	r2, [pc, #308]	@ (8000a20 <HAL_I2C_MspInit+0x160>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d146      	bne.n	800097e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008f0:	f04f 0208 	mov.w	r2, #8
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fcd2 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000912:	f000 facf 	bl	8000eb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b43      	ldr	r3, [pc, #268]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000918:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800091c:	4a41      	ldr	r2, [pc, #260]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000926:	4b3f      	ldr	r3, [pc, #252]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000934:	23c0      	movs	r3, #192	@ 0xc0
 8000936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000956:	4619      	mov	r1, r3
 8000958:	4833      	ldr	r0, [pc, #204]	@ (8000a28 <HAL_I2C_MspInit+0x168>)
 800095a:	f000 fef5 	bl	8001748 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095e:	4b31      	ldr	r3, [pc, #196]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000960:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000964:	4a2f      	ldr	r2, [pc, #188]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000966:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800096a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000970:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800097c:	e04b      	b.n	8000a16 <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a2a      	ldr	r2, [pc, #168]	@ (8000a2c <HAL_I2C_MspInit+0x16c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d146      	bne.n	8000a16 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000988:	f04f 0208 	mov.w	r2, #8
 800098c:	f04f 0300 	mov.w	r3, #0
 8000990:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fc86 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80009aa:	f000 fa83 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 80009b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 80009c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d4:	2312      	movs	r3, #18
 80009d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009e6:	2304      	movs	r3, #4
 80009e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <HAL_I2C_MspInit+0x168>)
 80009f4:	f000 fea8 	bl	8001748 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 80009fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80009fe:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a04:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_I2C_MspInit+0x164>)
 8000a0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
}
 8000a16:	bf00      	nop
 8000a18:	37f0      	adds	r7, #240	@ 0xf0
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40005400 	.word	0x40005400
 8000a24:	58024400 	.word	0x58024400
 8000a28:	58020400 	.word	0x58020400
 8000a2c:	40005800 	.word	0x40005800

08000a30 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <MX_I2S1_Init+0x64>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a3c:	2206      	movs	r2, #6
 8000a3e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a4c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a54:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a58:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_I2S1_Init+0x60>)
 8000a7e:	f001 f97b 	bl	8001d78 <HAL_I2S_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000a88:	f000 fa14 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2400014c 	.word	0x2400014c
 8000a94:	40013000 	.word	0x40013000

08000a98 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <MX_I2S2_Init+0x64>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000aae:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ab6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000abe:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000ac2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_I2S2_Init+0x60>)
 8000ae4:	f001 f948 	bl	8001d78 <HAL_I2S_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000aee:	f000 f9e1 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	240001a0 	.word	0x240001a0
 8000afc:	40003800 	.word	0x40003800

08000b00 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0be      	sub	sp, #248	@ 0xf8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	22c0      	movs	r2, #192	@ 0xc0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 fcaa 	bl	800647a <memset>
  if(i2sHandle->Instance==SPI1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a71      	ldr	r2, [pc, #452]	@ (8000cf0 <HAL_I2S_MspInit+0x1f0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d16b      	bne.n	8000c08 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000b30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b42:	f107 0320 	add.w	r3, r7, #32
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fbb2 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000b52:	f000 f9af 	bl	8000eb4 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b56:	4b67      	ldr	r3, [pc, #412]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b58:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b5c:	4a65      	ldr	r2, [pc, #404]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b62:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000b66:	4b63      	ldr	r3, [pc, #396]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b68:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b5f      	ldr	r3, [pc, #380]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b7a:	4a5e      	ldr	r2, [pc, #376]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b84:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b58      	ldr	r3, [pc, #352]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b98:	4a56      	ldr	r2, [pc, #344]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ba2:	4b54      	ldr	r3, [pc, #336]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000bb0:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000bb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4848      	ldr	r0, [pc, #288]	@ (8000cf8 <HAL_I2S_MspInit+0x1f8>)
 8000bd8:	f000 fdb6 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bdc:	2310      	movs	r3, #16
 8000bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	483e      	ldr	r0, [pc, #248]	@ (8000cfc <HAL_I2S_MspInit+0x1fc>)
 8000c02:	f000 fda1 	bl	8001748 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c06:	e06f      	b.n	8000ce8 <HAL_I2S_MspInit+0x1e8>
  else if(i2sHandle->Instance==SPI2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8000d00 <HAL_I2S_MspInit+0x200>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d16a      	bne.n	8000ce8 <HAL_I2S_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000c12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fb41 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_I2S_MspInit+0x138>
      Error_Handler();
 8000c34:	f000 f93e 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c38:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c3a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c44:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c5c:	4a25      	ldr	r2, [pc, #148]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <HAL_I2S_MspInit+0x1f4>)
 8000c86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000c92:	2342      	movs	r3, #66	@ 0x42
 8000c94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000caa:	2305      	movs	r3, #5
 8000cac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4811      	ldr	r0, [pc, #68]	@ (8000cfc <HAL_I2S_MspInit+0x1fc>)
 8000cb8:	f000 fd46 	bl	8001748 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cbc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4808      	ldr	r0, [pc, #32]	@ (8000d04 <HAL_I2S_MspInit+0x204>)
 8000ce4:	f000 fd30 	bl	8001748 <HAL_GPIO_Init>
}
 8000ce8:	bf00      	nop
 8000cea:	37f8      	adds	r7, #248	@ 0xf8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40013000 	.word	0x40013000
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	58020800 	.word	0x58020800
 8000d00:	40003800 	.word	0x40003800
 8000d04:	58020400 	.word	0x58020400

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int buffer = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d12:	f000 f8a3 	bl	8000e5c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d16:	f000 fb05 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1a:	f000 f827 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1e:	f7ff fc7b 	bl	8000618 <MX_GPIO_Init>
  MX_FMC_Init();
 8000d22:	f7ff fae3 	bl	80002ec <MX_FMC_Init>
  MX_I2S1_Init();
 8000d26:	f7ff fe83 	bl	8000a30 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000d2a:	f7ff feb5 	bl	8000a98 <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000d2e:	f000 f8c7 	bl	8000ec0 <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000d32:	f7ff fd45 	bl	80007c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d36:	f7ff fd83 	bl	8000840 <MX_I2C2_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000d3a:	f000 fa1d 	bl	8001178 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Write to starting address
	  *(__IO uint32_t*) SDRAM_BANK_ADDR = 42;
 8000d3e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d42:	222a      	movs	r2, #42	@ 0x2a
 8000d44:	601a      	str	r2, [r3, #0]

	  // Read from starting address
	  buffer = *(__IO uint32_t*) SDRAM_BANK_ADDR;
 8000d46:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	607b      	str	r3, [r7, #4]

	  if (buffer == 42) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d52:	d1f4      	bne.n	8000d3e <main+0x36>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <main+0x60>)
 8000d5a:	f000 febe 	bl	8001ada <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8000d5e:	2032      	movs	r0, #50	@ 0x32
 8000d60:	f000 fb72 	bl	8001448 <HAL_Delay>
	  *(__IO uint32_t*) SDRAM_BANK_ADDR = 42;
 8000d64:	e7eb      	b.n	8000d3e <main+0x36>
 8000d66:	bf00      	nop
 8000d68:	58020800 	.word	0x58020800

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b09c      	sub	sp, #112	@ 0x70
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d76:	224c      	movs	r2, #76	@ 0x4c
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f005 fb7d 	bl	800647a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2220      	movs	r2, #32
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f005 fb77 	bl	800647a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000d8c:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <SystemClock_Config+0xe8>)
 8000d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d96:	2002      	movs	r0, #2
 8000d98:	f001 fa98 	bl	80022cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <SystemClock_Config+0xec>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a2c      	ldr	r2, [pc, #176]	@ (8000e58 <SystemClock_Config+0xec>)
 8000da6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <SystemClock_Config+0xec>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000db8:	bf00      	nop
 8000dba:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <SystemClock_Config+0xec>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dc6:	d1f8      	bne.n	8000dba <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000dc8:	2322      	movs	r3, #34	@ 0x22
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000dd0:	2340      	movs	r3, #64	@ 0x40
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000de4:	2323      	movs	r3, #35	@ 0x23
 8000de6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000df4:	230c      	movs	r3, #12
 8000df6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 faab 	bl	8002360 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e10:	f000 f850 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	233f      	movs	r3, #63	@ 0x3f
 8000e16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e24:	2340      	movs	r3, #64	@ 0x40
 8000e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e28:	2340      	movs	r3, #64	@ 0x40
 8000e2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e32:	2340      	movs	r3, #64	@ 0x40
 8000e34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2106      	movs	r1, #6
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fec2 	bl	8002bc4 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000e46:	f000 f835 	bl	8000eb4 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3770      	adds	r7, #112	@ 0x70
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	58024400 	.word	0x58024400
 8000e58:	58024800 	.word	0x58024800

08000e5c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e62:	463b      	mov	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e6e:	f000 fbf3 	bl	8001658 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e72:	2301      	movs	r3, #1
 8000e74:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e7e:	231f      	movs	r3, #31
 8000e80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e82:	2387      	movs	r3, #135	@ 0x87
 8000e84:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fc11 	bl	80016c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ea6:	2004      	movs	r0, #4
 8000ea8:	f000 fbee 	bl	8001688 <HAL_MPU_Enable>

}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <Error_Handler+0x8>

08000ec0 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000ec6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000eca:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_SPDIFRX_Init+0x6c>)
 8000f1a:	f004 fe0f 	bl	8005b3c <HAL_SPDIFRX_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 8000f24:	f7ff ffc6 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	240001f4 	.word	0x240001f4

08000f30 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ba      	sub	sp, #232	@ 0xe8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	22c0      	movs	r2, #192	@ 0xc0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fa92 	bl	800647a <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8000f5e:	d141      	bne.n	8000fe4 <HAL_SPDIFRX_MspInit+0xb4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8000f60:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 f99b 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8000f80:	f7ff ff98 	bl	8000eb4 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_SPDIFRX_MspInit+0xbc>)
 8000f86:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f8a:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <HAL_SPDIFRX_MspInit+0xbc>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f90:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_SPDIFRX_MspInit+0xbc>)
 8000f96:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_SPDIFRX_MspInit+0xbc>)
 8000fa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa8:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <HAL_SPDIFRX_MspInit+0xbc>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_SPDIFRX_MspInit+0xbc>)
 8000fb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <HAL_SPDIFRX_MspInit+0xc0>)
 8000fe0:	f000 fbb2 	bl	8001748 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	37e8      	adds	r7, #232	@ 0xe8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020c00 	.word	0x58020c00

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_MspInit+0x30>)
 8000ffc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001000:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_MspInit+0x30>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_MspInit+0x30>)
 800100c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	58024400 	.word	0x58024400

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <NMI_Handler+0x4>

08001030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MemManage_Handler+0x4>

08001040 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <UsageFault_Handler+0x4>

08001050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107e:	f000 f9c3 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800108c:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <SystemInit+0xd0>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001092:	4a31      	ldr	r2, [pc, #196]	@ (8001158 <SystemInit+0xd0>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800109c:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <SystemInit+0xd4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d807      	bhi.n	80010b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a8:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <SystemInit+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f023 030f 	bic.w	r3, r3, #15
 80010b0:	4a2a      	ldr	r2, [pc, #168]	@ (800115c <SystemInit+0xd4>)
 80010b2:	f043 0303 	orr.w	r3, r3, #3
 80010b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010b8:	4b29      	ldr	r3, [pc, #164]	@ (8001160 <SystemInit+0xd8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a28      	ldr	r2, [pc, #160]	@ (8001160 <SystemInit+0xd8>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010c4:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <SystemInit+0xd8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010ca:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <SystemInit+0xd8>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4924      	ldr	r1, [pc, #144]	@ (8001160 <SystemInit+0xd8>)
 80010d0:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <SystemInit+0xdc>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <SystemInit+0xd4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <SystemInit+0xd4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 030f 	bic.w	r3, r3, #15
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <SystemInit+0xd4>)
 80010ec:	f043 0303 	orr.w	r3, r3, #3
 80010f0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <SystemInit+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <SystemInit+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <SystemInit+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001104:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <SystemInit+0xd8>)
 8001106:	4a18      	ldr	r2, [pc, #96]	@ (8001168 <SystemInit+0xe0>)
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <SystemInit+0xd8>)
 800110c:	4a17      	ldr	r2, [pc, #92]	@ (800116c <SystemInit+0xe4>)
 800110e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <SystemInit+0xd8>)
 8001112:	4a17      	ldr	r2, [pc, #92]	@ (8001170 <SystemInit+0xe8>)
 8001114:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001116:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <SystemInit+0xd8>)
 8001118:	2200      	movs	r2, #0
 800111a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800111c:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <SystemInit+0xd8>)
 800111e:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <SystemInit+0xe8>)
 8001120:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001122:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <SystemInit+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001128:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <SystemInit+0xd8>)
 800112a:	4a11      	ldr	r2, [pc, #68]	@ (8001170 <SystemInit+0xe8>)
 800112c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <SystemInit+0xd8>)
 8001130:	2200      	movs	r2, #0
 8001132:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001134:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <SystemInit+0xd8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <SystemInit+0xd8>)
 800113a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <SystemInit+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <SystemInit+0xec>)
 8001148:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800114c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	52002000 	.word	0x52002000
 8001160:	58024400 	.word	0x58024400
 8001164:	eaf6ed7f 	.word	0xeaf6ed7f
 8001168:	02020200 	.word	0x02020200
 800116c:	01ff0000 	.word	0x01ff0000
 8001170:	01010280 	.word	0x01010280
 8001174:	52004000 	.word	0x52004000

08001178 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800117e:	4a16      	ldr	r2, [pc, #88]	@ (80011d8 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001180:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001184:	2209      	movs	r2, #9
 8001186:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800118a:	2202      	movs	r2, #2
 800118c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001190:	2200      	movs	r2, #0
 8001192:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001196:	2202      	movs	r2, #2
 8001198:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800119c:	2200      	movs	r2, #0
 800119e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80011c0:	f000 ff54 	bl	800206c <HAL_PCD_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 80011ca:	f7ff fe73 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24000244 	.word	0x24000244
 80011d8:	40040000 	.word	0x40040000

080011dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0ba      	sub	sp, #232	@ 0xe8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	22c0      	movs	r2, #192	@ 0xc0
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 f93c 	bl	800647a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a2f      	ldr	r2, [pc, #188]	@ (80012c4 <HAL_PCD_MspInit+0xe8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d156      	bne.n	80012ba <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800120c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001218:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800121c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4618      	mov	r0, r3
 8001226:	f002 f843 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001230:	f7ff fe40 	bl	8000eb4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001234:	f001 f884 	bl	8002340 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <HAL_PCD_MspInit+0xec>)
 800123a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800123e:	4a22      	ldr	r2, [pc, #136]	@ (80012c8 <HAL_PCD_MspInit+0xec>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001248:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <HAL_PCD_MspInit+0xec>)
 800124a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001256:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800125a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800126e:	4619      	mov	r1, r3
 8001270:	4816      	ldr	r0, [pc, #88]	@ (80012cc <HAL_PCD_MspInit+0xf0>)
 8001272:	f000 fa69 	bl	8001748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001276:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800127a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <HAL_PCD_MspInit+0xf0>)
 8001298:	f000 fa56 	bl	8001748 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_PCD_MspInit+0xec>)
 800129e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80012a2:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <HAL_PCD_MspInit+0xec>)
 80012a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012a8:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_PCD_MspInit+0xec>)
 80012ae:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80012ba:	bf00      	nop
 80012bc:	37e8      	adds	r7, #232	@ 0xe8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40040000 	.word	0x40040000
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58020000 	.word	0x58020000

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001308 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012d4:	f7ff fed8 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012da:	490d      	ldr	r1, [pc, #52]	@ (8001310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f0:	4c0a      	ldr	r4, [pc, #40]	@ (800131c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fe:	f005 f8c5 	bl	800648c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff fd01 	bl	8000d08 <main>
  bx  lr
 8001306:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800130c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001310:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001314:	08006504 	.word	0x08006504
  ldr r2, =_sbss
 8001318:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800131c:	2400072c 	.word	0x2400072c

08001320 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132a:	2003      	movs	r0, #3
 800132c:	f000 f962 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001330:	f001 fdfe 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_Init+0x68>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	4913      	ldr	r1, [pc, #76]	@ (8001390 <HAL_Init+0x6c>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_Init+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <HAL_Init+0x6c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <HAL_Init+0x70>)
 8001366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001368:	4a0b      	ldr	r2, [pc, #44]	@ (8001398 <HAL_Init+0x74>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136e:	200f      	movs	r0, #15
 8001370:	f000 f814 	bl	800139c <HAL_InitTick>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e002      	b.n	8001384 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800137e:	f7ff fe39 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	080064ec 	.word	0x080064ec
 8001394:	24000004 	.word	0x24000004
 8001398:	24000000 	.word	0x24000000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013a4:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <HAL_InitTick+0x60>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e021      	b.n	80013f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <HAL_InitTick+0x64>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_InitTick+0x60>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f939 	bl	800163e <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f911 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	@ (8001404 <HAL_InitTick+0x68>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2400000c 	.word	0x2400000c
 8001400:	24000000 	.word	0x24000000
 8001404:	24000008 	.word	0x24000008

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	@ (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	2400000c 	.word	0x2400000c
 800142c:	24000728 	.word	0x24000728

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	24000728 	.word	0x24000728

08001448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff ffee 	bl	8001430 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001460:	d005      	beq.n	800146e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_Delay+0x44>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146e:	bf00      	nop
 8001470:	f7ff ffde 	bl	8001430 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d8f7      	bhi.n	8001470 <HAL_Delay+0x28>
  {
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2400000c 	.word	0x2400000c

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	05fa0000 	.word	0x05fa0000

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	@ (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff8e 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff47 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff5e 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff90 	bl	8001548 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5f 	bl	80014f4 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffb2 	bl	80015b0 <SysTick_Config>
 800164c:	4603      	mov	r3, r0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800165c:	f3bf 8f5f 	dmb	sy
}
 8001660:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_MPU_Disable+0x28>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_MPU_Disable+0x28>)
 8001668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800166c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <HAL_MPU_Disable+0x2c>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00
 8001684:	e000ed90 	.word	0xe000ed90

08001688 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001690:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <HAL_MPU_Enable+0x38>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_MPU_Enable+0x3c>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	4a09      	ldr	r2, [pc, #36]	@ (80016c4 <HAL_MPU_Enable+0x3c>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016a6:	f3bf 8f4f 	dsb	sy
}
 80016aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ac:	f3bf 8f6f 	isb	sy
}
 80016b0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed90 	.word	0xe000ed90
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	785a      	ldrb	r2, [r3, #1]
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_MPU_ConfigRegion+0x7c>)
 80016d6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_MPU_ConfigRegion+0x7c>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <HAL_MPU_ConfigRegion+0x7c>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80016e4:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_MPU_ConfigRegion+0x7c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7b1b      	ldrb	r3, [r3, #12]
 80016f0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7adb      	ldrb	r3, [r3, #11]
 80016f6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7a9b      	ldrb	r3, [r3, #10]
 80016fe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7b5b      	ldrb	r3, [r3, #13]
 8001706:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7b9b      	ldrb	r3, [r3, #14]
 800170e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7bdb      	ldrb	r3, [r3, #15]
 8001716:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7a5b      	ldrb	r3, [r3, #9]
 800171e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7a1b      	ldrb	r3, [r3, #8]
 8001726:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001728:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001732:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001734:	6113      	str	r3, [r2, #16]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed90 	.word	0xe000ed90

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	@ 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001756:	4b89      	ldr	r3, [pc, #548]	@ (800197c <HAL_GPIO_Init+0x234>)
 8001758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800175a:	e194      	b.n	8001a86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8186 	beq.w	8001a80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d005      	beq.n	800178c <HAL_GPIO_Init+0x44>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d130      	bne.n	80017ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017c2:	2201      	movs	r2, #1
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	f003 0201 	and.w	r2, r3, #1
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d017      	beq.n	800182a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d123      	bne.n	800187e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	69b9      	ldr	r1, [r7, #24]
 800187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0203 	and.w	r2, r3, #3
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80e0 	beq.w	8001a80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <HAL_GPIO_Init+0x238>)
 80018c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80018c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001980 <HAL_GPIO_Init+0x238>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80018d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <HAL_GPIO_Init+0x238>)
 80018d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018de:	4a29      	ldr	r2, [pc, #164]	@ (8001984 <HAL_GPIO_Init+0x23c>)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a20      	ldr	r2, [pc, #128]	@ (8001988 <HAL_GPIO_Init+0x240>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d052      	beq.n	80019b0 <HAL_GPIO_Init+0x268>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a1f      	ldr	r2, [pc, #124]	@ (800198c <HAL_GPIO_Init+0x244>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d031      	beq.n	8001976 <HAL_GPIO_Init+0x22e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a1e      	ldr	r2, [pc, #120]	@ (8001990 <HAL_GPIO_Init+0x248>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d02b      	beq.n	8001972 <HAL_GPIO_Init+0x22a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <HAL_GPIO_Init+0x24c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d025      	beq.n	800196e <HAL_GPIO_Init+0x226>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a1c      	ldr	r2, [pc, #112]	@ (8001998 <HAL_GPIO_Init+0x250>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01f      	beq.n	800196a <HAL_GPIO_Init+0x222>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a1b      	ldr	r2, [pc, #108]	@ (800199c <HAL_GPIO_Init+0x254>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d019      	beq.n	8001966 <HAL_GPIO_Init+0x21e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <HAL_GPIO_Init+0x258>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x21a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a19      	ldr	r2, [pc, #100]	@ (80019a4 <HAL_GPIO_Init+0x25c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x216>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <HAL_GPIO_Init+0x260>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x212>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <HAL_GPIO_Init+0x264>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x20e>
 8001952:	2309      	movs	r3, #9
 8001954:	e02d      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 8001956:	230a      	movs	r3, #10
 8001958:	e02b      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 800195a:	2308      	movs	r3, #8
 800195c:	e029      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 800195e:	2307      	movs	r3, #7
 8001960:	e027      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 8001962:	2306      	movs	r3, #6
 8001964:	e025      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 8001966:	2305      	movs	r3, #5
 8001968:	e023      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 800196a:	2304      	movs	r3, #4
 800196c:	e021      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 800196e:	2303      	movs	r3, #3
 8001970:	e01f      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 8001972:	2302      	movs	r3, #2
 8001974:	e01d      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 8001976:	2301      	movs	r3, #1
 8001978:	e01b      	b.n	80019b2 <HAL_GPIO_Init+0x26a>
 800197a:	bf00      	nop
 800197c:	58000080 	.word	0x58000080
 8001980:	58024400 	.word	0x58024400
 8001984:	58000400 	.word	0x58000400
 8001988:	58020000 	.word	0x58020000
 800198c:	58020400 	.word	0x58020400
 8001990:	58020800 	.word	0x58020800
 8001994:	58020c00 	.word	0x58020c00
 8001998:	58021000 	.word	0x58021000
 800199c:	58021400 	.word	0x58021400
 80019a0:	58021800 	.word	0x58021800
 80019a4:	58021c00 	.word	0x58021c00
 80019a8:	58022000 	.word	0x58022000
 80019ac:	58022400 	.word	0x58022400
 80019b0:	2300      	movs	r3, #0
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c2:	4938      	ldr	r1, [pc, #224]	@ (8001aa4 <HAL_GPIO_Init+0x35c>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	3301      	adds	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f47f ae63 	bne.w	800175c <HAL_GPIO_Init+0x14>
  }
}
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
 8001a9a:	3724      	adds	r7, #36	@ 0x24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	58000400 	.word	0x58000400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ac4:	e003      	b.n	8001ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aec:	887a      	ldrh	r2, [r7, #2]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4013      	ands	r3, r2
 8001af2:	041a      	lsls	r2, r3, #16
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	400b      	ands	r3, r1
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	619a      	str	r2, [r3, #24]
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e08b      	b.n	8001c3a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fec2 	bl	80008c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2224      	movs	r2, #36	@ 0x24
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	e006      	b.n	8001b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d108      	bne.n	8001bb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	e007      	b.n	8001bc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_I2C_Init+0x134>)
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69d9      	ldr	r1, [r3, #28]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1a      	ldr	r2, [r3, #32]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	02008000 	.word	0x02008000

08001c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d138      	bne.n	8001cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e032      	b.n	8001cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	@ 0x24
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6819      	ldr	r1, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d139      	bne.n	8001d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e033      	b.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2224      	movs	r2, #36	@ 0x24
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e11a      	b.n	8001fc0 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe feae 	bl	8000b00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d107      	bne.n	8001dca <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d008      	beq.n	8001dec <HAL_I2S_Init+0x74>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d004      	beq.n	8001dec <HAL_I2S_Init+0x74>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	f040 8094 	bne.w	8001f14 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d067      	beq.n	8001ec4 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e001      	b.n	8001e06 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8001e02:	2301      	movs	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b30      	cmp	r3, #48	@ 0x30
 8001e0c:	d003      	beq.n	8001e16 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001e12:	2bb0      	cmp	r3, #176	@ 0xb0
 8001e14:	d102      	bne.n	8001e1c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8001e16:	2301      	movs	r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	e001      	b.n	8001e20 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a68      	ldr	r2, [pc, #416]	@ (8001fc8 <HAL_I2S_Init+0x250>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d107      	bne.n	8001e3a <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8001e2a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	f002 fbfb 	bl	800462c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	e006      	b.n	8001e48 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8001e3a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	f002 fbf3 	bl	800462c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e46:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e50:	d113      	bne.n	8001e7a <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8001e52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	3305      	adds	r3, #5
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e014      	b.n	8001ea4 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	fb02 f303 	mul.w	r3, r2, r3
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	3305      	adds	r3, #5
 8001ea2:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4a49      	ldr	r2, [pc, #292]	@ (8001fcc <HAL_I2S_Init+0x254>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e003      	b.n	8001ecc <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_I2S_Init+0x160>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d002      	beq.n	8001ede <HAL_I2S_Init+0x166>
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d907      	bls.n	8001eee <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e068      	b.n	8001fc0 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001efe:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <HAL_I2S_Init+0x258>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	0411      	lsls	r1, r2, #16
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	0612      	lsls	r2, r2, #24
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	430b      	orrs	r3, r1
 8001f12:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <HAL_I2S_Init+0x25c>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6851      	ldr	r1, [r2, #4]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6892      	ldr	r2, [r2, #8]
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68d2      	ldr	r2, [r2, #12]
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6992      	ldr	r2, [r2, #24]
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6a12      	ldr	r2, [r2, #32]
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6912      	ldr	r2, [r2, #16]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8001f5a:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f6a:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d007      	beq.n	8001f9a <HAL_I2S_Init+0x222>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d003      	beq.n	8001f9a <HAL_I2S_Init+0x222>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b0a      	cmp	r3, #10
 8001f98:	d10a      	bne.n	8001fb0 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	58001400 	.word	0x58001400
 8001fcc:	cccccccd 	.word	0xcccccccd
 8001fd0:	fe00ffff 	.word	0xfe00ffff
 8001fd4:	fdff9040 	.word	0xfdff9040

08001fd8 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e037      	b.n	800205e <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7fe faf4 	bl	80005f0 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3304      	adds	r3, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f003 fe00 	bl	8005c18 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	461a      	mov	r2, r3
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	f003 fe22 	bl	8005c6c <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	461a      	mov	r2, r3
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f003 fe37 	bl	8005ca6 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0204 	orr.w	r2, r2, #4
 8002046:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002048:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <HAL_NAND_Init+0x90>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a06      	ldr	r2, [pc, #24]	@ (8002068 <HAL_NAND_Init+0x90>)
 800204e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002052:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	52004000 	.word	0x52004000

0800206c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0fe      	b.n	800227c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff f8a2 	bl	80011dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 ff53 	bl	8005f50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7c1a      	ldrb	r2, [r3, #16]
 80020b2:	f88d 2000 	strb.w	r2, [sp]
 80020b6:	3304      	adds	r3, #4
 80020b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ba:	f003 fed7 	bl	8005e6c <USB_CoreInit>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d5      	b.n	800227c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 ff4b 	bl	8005f72 <USB_SetCurrentMode>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0c6      	b.n	800227c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	e04a      	b.n	800218a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3315      	adds	r3, #21
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3314      	adds	r3, #20
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	b298      	uxth	r0, r3
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	332e      	adds	r3, #46	@ 0x2e
 8002130:	4602      	mov	r2, r0
 8002132:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3318      	adds	r3, #24
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	331c      	adds	r3, #28
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	3320      	adds	r3, #32
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3324      	adds	r3, #36	@ 0x24
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	3301      	adds	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	791b      	ldrb	r3, [r3, #4]
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3af      	bcc.n	80020f4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e044      	b.n	8002224 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	3301      	adds	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	791b      	ldrb	r3, [r3, #4]
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3b5      	bcc.n	800219a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7c1a      	ldrb	r2, [r3, #16]
 8002236:	f88d 2000 	strb.w	r2, [sp]
 800223a:	3304      	adds	r3, #4
 800223c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223e:	f003 fee5 	bl	800600c <USB_DevInit>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e013      	b.n	800227c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7b1b      	ldrb	r3, [r3, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d102      	bne.n	8002270 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f80a 	bl	8002284 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f004 f8a0 	bl	80063ba <USB_DevDisconnect>

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	10000003 	.word	0x10000003

080022cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_PWREx_ConfigSupply+0x70>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d00a      	beq.n	80022f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022e0:	4b16      	ldr	r3, [pc, #88]	@ (800233c <HAL_PWREx_ConfigSupply+0x70>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e01f      	b.n	8002332 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e01d      	b.n	8002332 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_PWREx_ConfigSupply+0x70>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	490f      	ldr	r1, [pc, #60]	@ (800233c <HAL_PWREx_ConfigSupply+0x70>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4313      	orrs	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002306:	f7ff f893 	bl	8001430 <HAL_GetTick>
 800230a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800230c:	e009      	b.n	8002322 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800230e:	f7ff f88f 	bl	8001430 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800231c:	d901      	bls.n	8002322 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e007      	b.n	8002332 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_PWREx_ConfigSupply+0x70>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800232e:	d1ee      	bne.n	800230e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	58024800 	.word	0x58024800

08002340 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	58024800 	.word	0x58024800

08002360 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	@ 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d102      	bne.n	8002374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	f000 bc1f 	b.w	8002bb2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80b3 	beq.w	80024e8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002382:	4b95      	ldr	r3, [pc, #596]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800238c:	4b92      	ldr	r3, [pc, #584]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	2b10      	cmp	r3, #16
 8002396:	d007      	beq.n	80023a8 <HAL_RCC_OscConfig+0x48>
 8002398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239a:	2b18      	cmp	r3, #24
 800239c:	d112      	bne.n	80023c4 <HAL_RCC_OscConfig+0x64>
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4b8b      	ldr	r3, [pc, #556]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8098 	beq.w	80024e6 <HAL_RCC_OscConfig+0x186>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f040 8093 	bne.w	80024e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e3f6      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x7c>
 80023ce:	4b82      	ldr	r3, [pc, #520]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a81      	ldr	r2, [pc, #516]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e058      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0xaa>
 80023e4:	4b7c      	ldr	r3, [pc, #496]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a7b      	ldr	r2, [pc, #492]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b79      	ldr	r3, [pc, #484]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a78      	ldr	r2, [pc, #480]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80023f6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b76      	ldr	r3, [pc, #472]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a75      	ldr	r2, [pc, #468]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e041      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002412:	d112      	bne.n	800243a <HAL_RCC_OscConfig+0xda>
 8002414:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6f      	ldr	r2, [pc, #444]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800241a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6c      	ldr	r2, [pc, #432]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002426:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b6a      	ldr	r3, [pc, #424]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a69      	ldr	r2, [pc, #420]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e029      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002442:	d112      	bne.n	800246a <HAL_RCC_OscConfig+0x10a>
 8002444:	4b64      	ldr	r3, [pc, #400]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a63      	ldr	r2, [pc, #396]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800244a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b61      	ldr	r3, [pc, #388]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a60      	ldr	r2, [pc, #384]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a5d      	ldr	r2, [pc, #372]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e011      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
 800246a:	4b5b      	ldr	r3, [pc, #364]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5a      	ldr	r2, [pc, #360]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b58      	ldr	r3, [pc, #352]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a57      	ldr	r2, [pc, #348]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a54      	ldr	r2, [pc, #336]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002488:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800248c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d013      	beq.n	80024be <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe ffcb 	bl	8001430 <HAL_GetTick>
 800249a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249e:	f7fe ffc7 	bl	8001430 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	@ 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e380      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b0:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x13e>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe ffb7 	bl	8001430 <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c6:	f7fe ffb3 	bl	8001430 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b64      	cmp	r3, #100	@ 0x64
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e36c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024d8:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x166>
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 808c 	beq.w	800260e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b38      	ldr	r3, [pc, #224]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002500:	4b35      	ldr	r3, [pc, #212]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002504:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_RCC_OscConfig+0x1bc>
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	2b18      	cmp	r3, #24
 8002510:	d137      	bne.n	8002582 <HAL_RCC_OscConfig+0x222>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d132      	bne.n	8002582 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251c:	4b2e      	ldr	r3, [pc, #184]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x1d4>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e33e      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002534:	4b28      	ldr	r3, [pc, #160]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 0219 	bic.w	r2, r3, #25
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4925      	ldr	r1, [pc, #148]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe ff73 	bl	8001430 <HAL_GetTick>
 800254a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe ff6f 	bl	8001430 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e328      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	4917      	ldr	r1, [pc, #92]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002580:	e045      	b.n	800260e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d028      	beq.n	80025dc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800258a:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0219 	bic.w	r2, r3, #25
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4910      	ldr	r1, [pc, #64]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe ff48 	bl	8001430 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe ff44 	bl	8001430 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e2fd      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	4901      	ldr	r1, [pc, #4]	@ (80025d8 <HAL_RCC_OscConfig+0x278>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
 80025d6:	e01a      	b.n	800260e <HAL_RCC_OscConfig+0x2ae>
 80025d8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025dc:	4b97      	ldr	r3, [pc, #604]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a96      	ldr	r2, [pc, #600]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe ff22 	bl	8001430 <HAL_GetTick>
 80025ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe ff1e 	bl	8001430 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e2d7      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002602:	4b8e      	ldr	r3, [pc, #568]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d06a      	beq.n	80026f0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261a:	4b88      	ldr	r3, [pc, #544]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002622:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002624:	4b85      	ldr	r3, [pc, #532]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d007      	beq.n	8002640 <HAL_RCC_OscConfig+0x2e0>
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b18      	cmp	r3, #24
 8002634:	d11b      	bne.n	800266e <HAL_RCC_OscConfig+0x30e>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d116      	bne.n	800266e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002640:	4b7e      	ldr	r3, [pc, #504]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_OscConfig+0x2f8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	2b80      	cmp	r3, #128	@ 0x80
 8002652:	d001      	beq.n	8002658 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e2ac      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002658:	4b78      	ldr	r3, [pc, #480]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	4975      	ldr	r1, [pc, #468]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800266c:	e040      	b.n	80026f0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d023      	beq.n	80026be <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002676:	4b71      	ldr	r3, [pc, #452]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a70      	ldr	r2, [pc, #448]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fed5 	bl	8001430 <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800268a:	f7fe fed1 	bl	8001430 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e28a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800269c:	4b67      	ldr	r3, [pc, #412]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026a8:	4b64      	ldr	r3, [pc, #400]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	4961      	ldr	r1, [pc, #388]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60cb      	str	r3, [r1, #12]
 80026bc:	e018      	b.n	80026f0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026be:	4b5f      	ldr	r3, [pc, #380]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a5e      	ldr	r2, [pc, #376]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80026c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe feb1 	bl	8001430 <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026d2:	f7fe fead 	bl	8001430 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e266      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026e4:	4b55      	ldr	r3, [pc, #340]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d036      	beq.n	800276a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d019      	beq.n	8002738 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002704:	4b4d      	ldr	r3, [pc, #308]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002708:	4a4c      	ldr	r2, [pc, #304]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe fe8e 	bl	8001430 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002718:	f7fe fe8a 	bl	8001430 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e243      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800272a:	4b44      	ldr	r3, [pc, #272]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800272c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x3b8>
 8002736:	e018      	b.n	800276a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002738:	4b40      	ldr	r3, [pc, #256]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800273a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273c:	4a3f      	ldr	r2, [pc, #252]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fe74 	bl	8001430 <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7fe fe70 	bl	8001430 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e229      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800275e:	4b37      	ldr	r3, [pc, #220]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d036      	beq.n	80027e4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d019      	beq.n	80027b2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800277e:	4b2f      	ldr	r3, [pc, #188]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2e      	ldr	r2, [pc, #184]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002784:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002788:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800278a:	f7fe fe51 	bl	8001430 <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002792:	f7fe fe4d 	bl	8001430 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e206      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027a4:	4b25      	ldr	r3, [pc, #148]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x432>
 80027b0:	e018      	b.n	80027e4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a21      	ldr	r2, [pc, #132]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80027b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027be:	f7fe fe37 	bl	8001430 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c6:	f7fe fe33 	bl	8001430 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1ec      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027d8:	4b18      	ldr	r3, [pc, #96]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80af 	beq.w	8002950 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027f2:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <HAL_RCC_OscConfig+0x4e0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <HAL_RCC_OscConfig+0x4e0>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027fe:	f7fe fe17 	bl	8001430 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002806:	f7fe fe13 	bl	8001430 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b64      	cmp	r3, #100	@ 0x64
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e1cc      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002818:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_RCC_OscConfig+0x4e0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10b      	bne.n	8002844 <HAL_RCC_OscConfig+0x4e4>
 800282c:	4b03      	ldr	r3, [pc, #12]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	4a02      	ldr	r2, [pc, #8]	@ (800283c <HAL_RCC_OscConfig+0x4dc>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	@ 0x70
 8002838:	e05b      	b.n	80028f2 <HAL_RCC_OscConfig+0x592>
 800283a:	bf00      	nop
 800283c:	58024400 	.word	0x58024400
 8002840:	58024800 	.word	0x58024800
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d112      	bne.n	8002872 <HAL_RCC_OscConfig+0x512>
 800284c:	4b9d      	ldr	r3, [pc, #628]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	4a9c      	ldr	r2, [pc, #624]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	@ 0x70
 8002858:	4b9a      	ldr	r3, [pc, #616]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a99      	ldr	r2, [pc, #612]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800285e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	4b97      	ldr	r3, [pc, #604]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a96      	ldr	r2, [pc, #600]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002870:	e03f      	b.n	80028f2 <HAL_RCC_OscConfig+0x592>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b05      	cmp	r3, #5
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x540>
 800287a:	4b92      	ldr	r3, [pc, #584]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	4a91      	ldr	r2, [pc, #580]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6713      	str	r3, [r2, #112]	@ 0x70
 8002886:	4b8f      	ldr	r3, [pc, #572]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288a:	4a8e      	ldr	r2, [pc, #568]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800288c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002890:	6713      	str	r3, [r2, #112]	@ 0x70
 8002892:	4b8c      	ldr	r3, [pc, #560]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	4a8b      	ldr	r2, [pc, #556]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6713      	str	r3, [r2, #112]	@ 0x70
 800289e:	e028      	b.n	80028f2 <HAL_RCC_OscConfig+0x592>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b85      	cmp	r3, #133	@ 0x85
 80028a6:	d112      	bne.n	80028ce <HAL_RCC_OscConfig+0x56e>
 80028a8:	4b86      	ldr	r3, [pc, #536]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	4a85      	ldr	r2, [pc, #532]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b4:	4b83      	ldr	r3, [pc, #524]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	4a82      	ldr	r2, [pc, #520]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028be:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c0:	4b80      	ldr	r3, [pc, #512]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	4a7f      	ldr	r2, [pc, #508]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80028cc:	e011      	b.n	80028f2 <HAL_RCC_OscConfig+0x592>
 80028ce:	4b7d      	ldr	r3, [pc, #500]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028da:	4b7a      	ldr	r3, [pc, #488]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a79      	ldr	r2, [pc, #484]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028e0:	f023 0304 	bic.w	r3, r3, #4
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e6:	4b77      	ldr	r3, [pc, #476]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	4a76      	ldr	r2, [pc, #472]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80028ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d015      	beq.n	8002926 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe fd99 	bl	8001430 <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe fd95 	bl	8001430 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e14c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002918:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ee      	beq.n	8002902 <HAL_RCC_OscConfig+0x5a2>
 8002924:	e014      	b.n	8002950 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe fd83 	bl	8001430 <HAL_GetTick>
 800292a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fd7f 	bl	8001430 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e136      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002944:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ee      	bne.n	800292e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 812b 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800295a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002962:	2b18      	cmp	r3, #24
 8002964:	f000 80bb 	beq.w	8002ade <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	2b02      	cmp	r3, #2
 800296e:	f040 8095 	bne.w	8002a9c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b54      	ldr	r3, [pc, #336]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a53      	ldr	r2, [pc, #332]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002978:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fd57 	bl	8001430 <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fd53 	bl	8001430 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e10c      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002998:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f0      	bne.n	8002986 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a4:	4b47      	ldr	r3, [pc, #284]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80029a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a8:	4b47      	ldr	r3, [pc, #284]	@ (8002ac8 <HAL_RCC_OscConfig+0x768>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	430a      	orrs	r2, r1
 80029b8:	4942      	ldr	r1, [pc, #264]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029cc:	3b01      	subs	r3, #1
 80029ce:	025b      	lsls	r3, r3, #9
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d8:	3b01      	subs	r3, #1
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e6:	3b01      	subs	r3, #1
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029ee:	4935      	ldr	r1, [pc, #212]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029f4:	4b33      	ldr	r3, [pc, #204]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	4a32      	ldr	r2, [pc, #200]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a00:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a04:	4b31      	ldr	r3, [pc, #196]	@ (8002acc <HAL_RCC_OscConfig+0x76c>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a0c:	00d2      	lsls	r2, r2, #3
 8002a0e:	492d      	ldr	r1, [pc, #180]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	f023 020c 	bic.w	r2, r3, #12
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	4928      	ldr	r1, [pc, #160]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a26:	4b27      	ldr	r3, [pc, #156]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	f023 0202 	bic.w	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	4924      	ldr	r1, [pc, #144]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a38:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	4a21      	ldr	r2, [pc, #132]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a44:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a15      	ldr	r2, [pc, #84]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fcdc 	bl	8001430 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe fcd8 	bl	8001430 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e091      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x71c>
 8002a9a:	e089      	b.n	8002bb0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a08      	ldr	r2, [pc, #32]	@ (8002ac4 <HAL_RCC_OscConfig+0x764>)
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fcc2 	bl	8001430 <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aae:	e00f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fcbe 	bl	8001430 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d908      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e077      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
 8002ac2:	bf00      	nop
 8002ac4:	58024400 	.word	0x58024400
 8002ac8:	fffffc0c 	.word	0xfffffc0c
 8002acc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e9      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x750>
 8002adc:	e068      	b.n	8002bb0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ade:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ae4:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d031      	beq.n	8002b56 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d12a      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d122      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d11a      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	0a5b      	lsrs	r3, r3, #9
 8002b24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b2c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d111      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d108      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	0e1b      	lsrs	r3, r3, #24
 8002b48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e02b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b5a:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b64:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d01f      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	4a11      	ldr	r2, [pc, #68]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b7c:	f7fe fc58 	bl	8001430 <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b82:	bf00      	nop
 8002b84:	f7fe fc54 	bl	8001430 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d0f9      	beq.n	8002b84 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b90:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002b92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b94:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <HAL_RCC_OscConfig+0x860>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b9c:	00d2      	lsls	r2, r2, #3
 8002b9e:	4907      	ldr	r1, [pc, #28]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <HAL_RCC_OscConfig+0x85c>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3730      	adds	r7, #48	@ 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	ffff0007 	.word	0xffff0007

08002bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e19c      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d910      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b87      	ldr	r3, [pc, #540]	@ (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 020f 	bic.w	r2, r3, #15
 8002bee:	4985      	ldr	r1, [pc, #532]	@ (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b83      	ldr	r3, [pc, #524]	@ (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e184      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d010      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	4b7b      	ldr	r3, [pc, #492]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d908      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c24:	4b78      	ldr	r3, [pc, #480]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4975      	ldr	r1, [pc, #468]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d010      	beq.n	8002c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	4b70      	ldr	r3, [pc, #448]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d908      	bls.n	8002c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c52:	4b6d      	ldr	r3, [pc, #436]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	496a      	ldr	r1, [pc, #424]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	4b64      	ldr	r3, [pc, #400]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d908      	bls.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c80:	4b61      	ldr	r3, [pc, #388]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	495e      	ldr	r1, [pc, #376]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69da      	ldr	r2, [r3, #28]
 8002ca2:	4b59      	ldr	r3, [pc, #356]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d908      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cae:	4b56      	ldr	r3, [pc, #344]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4953      	ldr	r1, [pc, #332]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d908      	bls.n	8002cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f023 020f 	bic.w	r2, r3, #15
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4947      	ldr	r1, [pc, #284]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d055      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cfa:	4b43      	ldr	r3, [pc, #268]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4940      	ldr	r1, [pc, #256]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d14:	4b3c      	ldr	r3, [pc, #240]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d121      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0f6      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2c:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d115      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0ea      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d44:	4b30      	ldr	r3, [pc, #192]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0de      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d54:	4b2c      	ldr	r3, [pc, #176]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0d6      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d64:	4b28      	ldr	r3, [pc, #160]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f023 0207 	bic.w	r2, r3, #7
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4925      	ldr	r1, [pc, #148]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d76:	f7fe fb5b 	bl	8001430 <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7e:	f7fe fb57 	bl	8001430 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0be      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d94:	4b1c      	ldr	r3, [pc, #112]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d1eb      	bne.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d010      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d208      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc2:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f023 020f 	bic.w	r2, r3, #15
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	490e      	ldr	r1, [pc, #56]	@ (8002e08 <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d214      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 020f 	bic.w	r2, r3, #15
 8002dea:	4906      	ldr	r1, [pc, #24]	@ (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <HAL_RCC_ClockConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e086      	b.n	8002f12 <HAL_RCC_ClockConfig+0x34e>
 8002e04:	52002000 	.word	0x52002000
 8002e08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d208      	bcs.n	8002e3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e28:	4b3c      	ldr	r3, [pc, #240]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	4939      	ldr	r1, [pc, #228]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d208      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e56:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	492e      	ldr	r1, [pc, #184]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	4b28      	ldr	r3, [pc, #160]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d208      	bcs.n	8002e96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	4922      	ldr	r1, [pc, #136]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d208      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4917      	ldr	r1, [pc, #92]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ec4:	f000 f834 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	4912      	ldr	r1, [pc, #72]	@ (8002f20 <HAL_RCC_ClockConfig+0x35c>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <HAL_RCC_ClockConfig+0x35c>)
 8002eec:	5cd3      	ldrb	r3, [r2, r3]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <HAL_RCC_ClockConfig+0x360>)
 8002efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002efc:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <HAL_RCC_ClockConfig+0x364>)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_RCC_ClockConfig+0x368>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fa48 	bl	800139c <HAL_InitTick>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	080064ec 	.word	0x080064ec
 8002f24:	24000004 	.word	0x24000004
 8002f28:	24000000 	.word	0x24000000
 8002f2c:	24000008 	.word	0x24000008

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	@ 0x24
 8002f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f36:	4bb3      	ldr	r3, [pc, #716]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f3e:	2b18      	cmp	r3, #24
 8002f40:	f200 8155 	bhi.w	80031ee <HAL_RCC_GetSysClockFreq+0x2be>
 8002f44:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002fb1 	.word	0x08002fb1
 8002f50:	080031ef 	.word	0x080031ef
 8002f54:	080031ef 	.word	0x080031ef
 8002f58:	080031ef 	.word	0x080031ef
 8002f5c:	080031ef 	.word	0x080031ef
 8002f60:	080031ef 	.word	0x080031ef
 8002f64:	080031ef 	.word	0x080031ef
 8002f68:	080031ef 	.word	0x080031ef
 8002f6c:	08002fd7 	.word	0x08002fd7
 8002f70:	080031ef 	.word	0x080031ef
 8002f74:	080031ef 	.word	0x080031ef
 8002f78:	080031ef 	.word	0x080031ef
 8002f7c:	080031ef 	.word	0x080031ef
 8002f80:	080031ef 	.word	0x080031ef
 8002f84:	080031ef 	.word	0x080031ef
 8002f88:	080031ef 	.word	0x080031ef
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	080031ef 	.word	0x080031ef
 8002f94:	080031ef 	.word	0x080031ef
 8002f98:	080031ef 	.word	0x080031ef
 8002f9c:	080031ef 	.word	0x080031ef
 8002fa0:	080031ef 	.word	0x080031ef
 8002fa4:	080031ef 	.word	0x080031ef
 8002fa8:	080031ef 	.word	0x080031ef
 8002fac:	08002fe3 	.word	0x08002fe3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fb0:	4b94      	ldr	r3, [pc, #592]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fbc:	4b91      	ldr	r3, [pc, #580]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	4a90      	ldr	r2, [pc, #576]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fce:	e111      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fd0:	4b8d      	ldr	r3, [pc, #564]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fd2:	61bb      	str	r3, [r7, #24]
      break;
 8002fd4:	e10e      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fd8:	61bb      	str	r3, [r7, #24]
      break;
 8002fda:	e10b      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fdc:	4b8c      	ldr	r3, [pc, #560]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fde:	61bb      	str	r3, [r7, #24]
      break;
 8002fe0:	e108      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fe2:	4b88      	ldr	r3, [pc, #544]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fec:	4b85      	ldr	r3, [pc, #532]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ff6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ff8:	4b82      	ldr	r3, [pc, #520]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003002:	4b80      	ldr	r3, [pc, #512]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003006:	08db      	lsrs	r3, r3, #3
 8003008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80e1 	beq.w	80031e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b02      	cmp	r3, #2
 800302a:	f000 8083 	beq.w	8003134 <HAL_RCC_GetSysClockFreq+0x204>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b02      	cmp	r3, #2
 8003032:	f200 80a1 	bhi.w	8003178 <HAL_RCC_GetSysClockFreq+0x248>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x114>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d056      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003042:	e099      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003044:	4b6f      	ldr	r3, [pc, #444]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02d      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003050:	4b6c      	ldr	r3, [pc, #432]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	4a6b      	ldr	r2, [pc, #428]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307a:	4b62      	ldr	r3, [pc, #392]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800308a:	ed97 6a02 	vldr	s12, [r7, #8]
 800308e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800309a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800309e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030aa:	e087      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003218 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030be:	4b51      	ldr	r3, [pc, #324]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80030d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ee:	e065      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800321c <HAL_RCC_GetSysClockFreq+0x2ec>
 80030fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003102:	4b40      	ldr	r3, [pc, #256]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003112:	ed97 6a02 	vldr	s12, [r7, #8]
 8003116:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800311a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003132:	e043      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003146:	4b2f      	ldr	r3, [pc, #188]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	ed97 6a02 	vldr	s12, [r7, #8]
 800315a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800315e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800316a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003176:	e021      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800321c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318a:	4b1e      	ldr	r3, [pc, #120]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319a:	ed97 6a02 	vldr	s12, [r7, #8]
 800319e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	0a5b      	lsrs	r3, r3, #9
 80031c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031c6:	3301      	adds	r3, #1
 80031c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80031d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e0:	ee17 3a90 	vmov	r3, s15
 80031e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031e6:	e005      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
      break;
 80031ec:	e002      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031ee:	4b07      	ldr	r3, [pc, #28]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031f0:	61bb      	str	r3, [r7, #24]
      break;
 80031f2:	bf00      	nop
  }

  return sysclockfreq;
 80031f4:	69bb      	ldr	r3, [r7, #24]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	@ 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	58024400 	.word	0x58024400
 8003208:	03d09000 	.word	0x03d09000
 800320c:	003d0900 	.word	0x003d0900
 8003210:	016e3600 	.word	0x016e3600
 8003214:	46000000 	.word	0x46000000
 8003218:	4c742400 	.word	0x4c742400
 800321c:	4a742400 	.word	0x4a742400
 8003220:	4bb71b00 	.word	0x4bb71b00

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800322a:	f7ff fe81 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <HAL_RCC_GetHCLKFreq+0x50>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490f      	ldr	r1, [pc, #60]	@ (8003278 <HAL_RCC_GetHCLKFreq+0x54>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003248:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <HAL_RCC_GetHCLKFreq+0x50>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	4a09      	ldr	r2, [pc, #36]	@ (8003278 <HAL_RCC_GetHCLKFreq+0x54>)
 8003252:	5cd3      	ldrb	r3, [r2, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a07      	ldr	r2, [pc, #28]	@ (800327c <HAL_RCC_GetHCLKFreq+0x58>)
 8003260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003262:	4a07      	ldr	r2, [pc, #28]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <HAL_RCC_GetHCLKFreq+0x58>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	58024400 	.word	0x58024400
 8003278:	080064ec 	.word	0x080064ec
 800327c:	24000004 	.word	0x24000004
 8003280:	24000000 	.word	0x24000000

08003284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003288:	f7ff ffcc 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4904      	ldr	r1, [pc, #16]	@ (80032ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	58024400 	.word	0x58024400
 80032ac:	080064ec 	.word	0x080064ec

080032b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b4:	b0c8      	sub	sp, #288	@ 0x120
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80032d4:	2500      	movs	r5, #0
 80032d6:	ea54 0305 	orrs.w	r3, r4, r5
 80032da:	d049      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80032dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032e6:	d02f      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032ec:	d828      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032f2:	d01a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032f8:	d822      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003302:	d007      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003304:	e01c      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003306:	4ba7      	ldr	r3, [pc, #668]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	4aa6      	ldr	r2, [pc, #664]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800330c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003310:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003312:	e01a      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003318:	3308      	adds	r3, #8
 800331a:	2102      	movs	r1, #2
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fa6d 	bl	80057fc <RCCEx_PLL2_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003328:	e00f      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800332a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800332e:	3328      	adds	r3, #40	@ 0x28
 8003330:	2102      	movs	r1, #2
 8003332:	4618      	mov	r0, r3
 8003334:	f002 fb14 	bl	8005960 <RCCEx_PLL3_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800333e:	e004      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003352:	4b94      	ldr	r3, [pc, #592]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003356:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800335e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003360:	4a90      	ldr	r2, [pc, #576]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003362:	430b      	orrs	r3, r1
 8003364:	6513      	str	r3, [r2, #80]	@ 0x50
 8003366:	e003      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800336c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800337c:	f04f 0900 	mov.w	r9, #0
 8003380:	ea58 0309 	orrs.w	r3, r8, r9
 8003384:	d047      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003386:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	2b04      	cmp	r3, #4
 800338e:	d82a      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003390:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033ad 	.word	0x080033ad
 800339c:	080033bb 	.word	0x080033bb
 80033a0:	080033d1 	.word	0x080033d1
 80033a4:	080033ef 	.word	0x080033ef
 80033a8:	080033ef 	.word	0x080033ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ac:	4b7d      	ldr	r3, [pc, #500]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4a7c      	ldr	r2, [pc, #496]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b8:	e01a      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033be:	3308      	adds	r3, #8
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 fa1a 	bl	80057fc <RCCEx_PLL2_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ce:	e00f      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033d4:	3328      	adds	r3, #40	@ 0x28
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 fac1 	bl	8005960 <RCCEx_PLL3_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e4:	e004      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f8:	4b6a      	ldr	r3, [pc, #424]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fc:	f023 0107 	bic.w	r1, r3, #7
 8003400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	4a67      	ldr	r2, [pc, #412]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003408:	430b      	orrs	r3, r1
 800340a:	6513      	str	r3, [r2, #80]	@ 0x50
 800340c:	e003      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003412:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003422:	f04f 0b00 	mov.w	fp, #0
 8003426:	ea5a 030b 	orrs.w	r3, sl, fp
 800342a:	d054      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800342c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003436:	d036      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003438:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800343c:	d82f      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800343e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003442:	d032      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003448:	d829      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800344a:	2bc0      	cmp	r3, #192	@ 0xc0
 800344c:	d02f      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800344e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003450:	d825      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003452:	2b80      	cmp	r3, #128	@ 0x80
 8003454:	d018      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003456:	2b80      	cmp	r3, #128	@ 0x80
 8003458:	d821      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d007      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003462:	e01c      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4b4f      	ldr	r3, [pc, #316]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	4a4e      	ldr	r2, [pc, #312]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003470:	e01e      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003476:	3308      	adds	r3, #8
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f002 f9be 	bl	80057fc <RCCEx_PLL2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003486:	e013      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800348c:	3328      	adds	r3, #40	@ 0x28
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f002 fa65 	bl	8005960 <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800349c:	e008      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80034a4:	e004      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034a6:	bf00      	nop
 80034a8:	e002      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80034b8:	4b3a      	ldr	r3, [pc, #232]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	4a37      	ldr	r2, [pc, #220]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80034d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80034e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80034f0:	460b      	mov	r3, r1
 80034f2:	4313      	orrs	r3, r2
 80034f4:	d05c      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80034f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003500:	d03b      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003502:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003506:	d834      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800350c:	d037      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003512:	d82e      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003514:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003518:	d033      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800351a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800351e:	d828      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003524:	d01a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352a:	d822      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003534:	d007      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003536:	e01c      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003538:	4b1a      	ldr	r3, [pc, #104]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003544:	e01e      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800354a:	3308      	adds	r3, #8
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f002 f954 	bl	80057fc <RCCEx_PLL2_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800355a:	e013      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800355c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003560:	3328      	adds	r3, #40	@ 0x28
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f002 f9fb 	bl	8005960 <RCCEx_PLL3_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003578:	e004      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800358e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003590:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	4a02      	ldr	r2, [pc, #8]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800359c:	430b      	orrs	r3, r1
 800359e:	6513      	str	r3, [r2, #80]	@ 0x50
 80035a0:	e006      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80035a2:	bf00      	nop
 80035a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	d03a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80035d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d6:	2b30      	cmp	r3, #48	@ 0x30
 80035d8:	d01f      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80035da:	2b30      	cmp	r3, #48	@ 0x30
 80035dc:	d819      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d00c      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d815      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d111      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ee:	4bae      	ldr	r3, [pc, #696]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	4aad      	ldr	r2, [pc, #692]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035fa:	e011      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003600:	3308      	adds	r3, #8
 8003602:	2102      	movs	r1, #2
 8003604:	4618      	mov	r0, r3
 8003606:	f002 f8f9 	bl	80057fc <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003610:	e006      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003618:	e002      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800361e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003620:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003628:	4b9f      	ldr	r3, [pc, #636]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800362a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	4a9c      	ldr	r2, [pc, #624]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003638:	430b      	orrs	r3, r1
 800363a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003642:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003652:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800365c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d051      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800366a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800366c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003670:	d035      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003676:	d82e      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003678:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800367c:	d031      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800367e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003682:	d828      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003688:	d01a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800368a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800368e:	d822      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003698:	d007      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800369a:	e01c      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369c:	4b82      	ldr	r3, [pc, #520]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	4a81      	ldr	r2, [pc, #516]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036a8:	e01c      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ae:	3308      	adds	r3, #8
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f002 f8a2 	bl	80057fc <RCCEx_PLL2_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036be:	e011      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036c4:	3328      	adds	r3, #40	@ 0x28
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f002 f949 	bl	8005960 <RCCEx_PLL3_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036d4:	e006      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036dc:	e002      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80036e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036ec:	4b6e      	ldr	r3, [pc, #440]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036fa:	4a6b      	ldr	r2, [pc, #428]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003702:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003706:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800370a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003720:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003724:	460b      	mov	r3, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	d053      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800372a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800372e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003734:	d033      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003736:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373a:	d82c      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800373c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003740:	d02f      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003742:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003746:	d826      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003748:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800374c:	d02b      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800374e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003752:	d820      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003758:	d012      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800375a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800375e:	d81a      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003768:	d115      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800376a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800376e:	3308      	adds	r3, #8
 8003770:	2101      	movs	r1, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f002 f842 	bl	80057fc <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800377e:	e015      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003784:	3328      	adds	r3, #40	@ 0x28
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f002 f8e9 	bl	8005960 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003794:	e00a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800379e:	bf00      	nop
 80037a0:	e004      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037a2:	bf00      	nop
 80037a4:	e002      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037b4:	4b3c      	ldr	r3, [pc, #240]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c2:	4a39      	ldr	r2, [pc, #228]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037c8:	e003      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037e2:	2300      	movs	r3, #0
 80037e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	d060      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037fa:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80037fe:	d039      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003800:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003804:	d832      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380a:	d035      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800380c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003810:	d82c      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003816:	d031      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381c:	d826      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800381e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003822:	d02d      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003824:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003828:	d820      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800382a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800382e:	d012      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003834:	d81a      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d024      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800383a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800383e:	d115      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003844:	3308      	adds	r3, #8
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f001 ffd7 	bl	80057fc <RCCEx_PLL2_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003854:	e017      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800385a:	3328      	adds	r3, #40	@ 0x28
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f002 f87e 	bl	8005960 <RCCEx_PLL3_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800386a:	e00c      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003872:	e008      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003874:	bf00      	nop
 8003876:	e006      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003878:	bf00      	nop
 800387a:	e004      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800387c:	bf00      	nop
 800387e:	e002      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003880:	bf00      	nop
 8003882:	e000      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10e      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800389a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800389e:	4a02      	ldr	r2, [pc, #8]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80038a6:	bf00      	nop
 80038a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d037      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038de:	d00e      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80038e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e4:	d816      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80038ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ee:	d111      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f0:	4bc4      	ldr	r3, [pc, #784]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	4ac3      	ldr	r2, [pc, #780]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038fc:	e00f      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003902:	3308      	adds	r3, #8
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f001 ff78 	bl	80057fc <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003912:	e004      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800391c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003926:	4bb7      	ldr	r3, [pc, #732]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800392e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003934:	4ab3      	ldr	r2, [pc, #716]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003936:	430b      	orrs	r3, r1
 8003938:	6513      	str	r3, [r2, #80]	@ 0x50
 800393a:	e003      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003940:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003954:	2300      	movs	r3, #0
 8003956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800395a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800395e:	460b      	mov	r3, r1
 8003960:	4313      	orrs	r3, r2
 8003962:	d039      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396a:	2b03      	cmp	r3, #3
 800396c:	d81c      	bhi.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800396e:	a201      	add	r2, pc, #4	@ (adr r2, 8003974 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	080039b1 	.word	0x080039b1
 8003978:	08003985 	.word	0x08003985
 800397c:	08003993 	.word	0x08003993
 8003980:	080039b1 	.word	0x080039b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003984:	4b9f      	ldr	r3, [pc, #636]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	4a9e      	ldr	r2, [pc, #632]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003990:	e00f      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003996:	3308      	adds	r3, #8
 8003998:	2102      	movs	r1, #2
 800399a:	4618      	mov	r0, r3
 800399c:	f001 ff2e 	bl	80057fc <RCCEx_PLL2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039a6:	e004      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80039b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039ba:	4b92      	ldr	r3, [pc, #584]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	f023 0103 	bic.w	r1, r3, #3
 80039c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c8:	4a8e      	ldr	r2, [pc, #568]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f000 8099 	beq.w	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fa:	4b83      	ldr	r3, [pc, #524]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a82      	ldr	r2, [pc, #520]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a06:	f7fd fd13 	bl	8001430 <HAL_GetTick>
 8003a0a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fd fd0e 	bl	8001430 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b64      	cmp	r3, #100	@ 0x64
 8003a1e:	d903      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a26:	e005      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a28:	4b77      	ldr	r3, [pc, #476]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ed      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003a34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d173      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a3c:	4b71      	ldr	r3, [pc, #452]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a48:	4053      	eors	r3, r2
 8003a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d015      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a52:	4b6c      	ldr	r3, [pc, #432]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a5e:	4b69      	ldr	r3, [pc, #420]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	4a68      	ldr	r2, [pc, #416]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6a:	4b66      	ldr	r3, [pc, #408]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6e:	4a65      	ldr	r2, [pc, #404]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a76:	4a63      	ldr	r2, [pc, #396]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d118      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fcd0 	bl	8001430 <HAL_GetTick>
 8003a90:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a94:	e00d      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fd fccb 	bl	8001430 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d903      	bls.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003ab0:	e005      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ab2:	4b54      	ldr	r3, [pc, #336]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0eb      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003abe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d129      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ad6:	d10e      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ae8:	091a      	lsrs	r2, r3, #4
 8003aea:	4b48      	ldr	r3, [pc, #288]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	4a45      	ldr	r2, [pc, #276]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6113      	str	r3, [r2, #16]
 8003af4:	e005      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003af6:	4b43      	ldr	r3, [pc, #268]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	4a42      	ldr	r2, [pc, #264]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003afc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b00:	6113      	str	r3, [r2, #16]
 8003b02:	4b40      	ldr	r3, [pc, #256]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b04:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b12:	4a3c      	ldr	r2, [pc, #240]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b18:	e008      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003b22:	e003      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f002 0301 	and.w	r3, r2, #1
 8003b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f000 8090 	beq.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b56:	2b28      	cmp	r3, #40	@ 0x28
 8003b58:	d870      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003c45 	.word	0x08003c45
 8003b64:	08003c3d 	.word	0x08003c3d
 8003b68:	08003c3d 	.word	0x08003c3d
 8003b6c:	08003c3d 	.word	0x08003c3d
 8003b70:	08003c3d 	.word	0x08003c3d
 8003b74:	08003c3d 	.word	0x08003c3d
 8003b78:	08003c3d 	.word	0x08003c3d
 8003b7c:	08003c3d 	.word	0x08003c3d
 8003b80:	08003c11 	.word	0x08003c11
 8003b84:	08003c3d 	.word	0x08003c3d
 8003b88:	08003c3d 	.word	0x08003c3d
 8003b8c:	08003c3d 	.word	0x08003c3d
 8003b90:	08003c3d 	.word	0x08003c3d
 8003b94:	08003c3d 	.word	0x08003c3d
 8003b98:	08003c3d 	.word	0x08003c3d
 8003b9c:	08003c3d 	.word	0x08003c3d
 8003ba0:	08003c27 	.word	0x08003c27
 8003ba4:	08003c3d 	.word	0x08003c3d
 8003ba8:	08003c3d 	.word	0x08003c3d
 8003bac:	08003c3d 	.word	0x08003c3d
 8003bb0:	08003c3d 	.word	0x08003c3d
 8003bb4:	08003c3d 	.word	0x08003c3d
 8003bb8:	08003c3d 	.word	0x08003c3d
 8003bbc:	08003c3d 	.word	0x08003c3d
 8003bc0:	08003c45 	.word	0x08003c45
 8003bc4:	08003c3d 	.word	0x08003c3d
 8003bc8:	08003c3d 	.word	0x08003c3d
 8003bcc:	08003c3d 	.word	0x08003c3d
 8003bd0:	08003c3d 	.word	0x08003c3d
 8003bd4:	08003c3d 	.word	0x08003c3d
 8003bd8:	08003c3d 	.word	0x08003c3d
 8003bdc:	08003c3d 	.word	0x08003c3d
 8003be0:	08003c45 	.word	0x08003c45
 8003be4:	08003c3d 	.word	0x08003c3d
 8003be8:	08003c3d 	.word	0x08003c3d
 8003bec:	08003c3d 	.word	0x08003c3d
 8003bf0:	08003c3d 	.word	0x08003c3d
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c3d 	.word	0x08003c3d
 8003bfc:	08003c3d 	.word	0x08003c3d
 8003c00:	08003c45 	.word	0x08003c45
 8003c04:	58024400 	.word	0x58024400
 8003c08:	58024800 	.word	0x58024800
 8003c0c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c14:	3308      	adds	r3, #8
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f001 fdef 	bl	80057fc <RCCEx_PLL2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c24:	e00f      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c2a:	3328      	adds	r3, #40	@ 0x28
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fe96 	bl	8005960 <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c4e:	4bc0      	ldr	r3, [pc, #768]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c52:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c5e:	4abc      	ldr	r2, [pc, #752]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f002 0302 	and.w	r3, r2, #2
 8003c7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c84:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	d043      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d824      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003ced 	.word	0x08003ced
 8003ca4:	08003cb9 	.word	0x08003cb9
 8003ca8:	08003ccf 	.word	0x08003ccf
 8003cac:	08003ced 	.word	0x08003ced
 8003cb0:	08003ced 	.word	0x08003ced
 8003cb4:	08003ced 	.word	0x08003ced
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fd9b 	bl	80057fc <RCCEx_PLL2_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e00f      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cd2:	3328      	adds	r3, #40	@ 0x28
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fe42 	bl	8005960 <RCCEx_PLL3_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ce2:	e004      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cf6:	4b96      	ldr	r3, [pc, #600]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	f023 0107 	bic.w	r1, r3, #7
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d06:	4a92      	ldr	r2, [pc, #584]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d0c:	e003      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f002 0304 	and.w	r3, r2, #4
 8003d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d26:	2300      	movs	r3, #0
 8003d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d2c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4313      	orrs	r3, r2
 8003d34:	d043      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d3e:	2b05      	cmp	r3, #5
 8003d40:	d824      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003d42:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d95 	.word	0x08003d95
 8003d4c:	08003d61 	.word	0x08003d61
 8003d50:	08003d77 	.word	0x08003d77
 8003d54:	08003d95 	.word	0x08003d95
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003d95 	.word	0x08003d95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d64:	3308      	adds	r3, #8
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fd47 	bl	80057fc <RCCEx_PLL2_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d74:	e00f      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d7a:	3328      	adds	r3, #40	@ 0x28
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 fdee 	bl	8005960 <RCCEx_PLL3_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d8a:	e004      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da2:	f023 0107 	bic.w	r1, r3, #7
 8003da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dae:	4a68      	ldr	r2, [pc, #416]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003db4:	e003      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f002 0320 	and.w	r3, r2, #32
 8003dca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	d055      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dea:	d033      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003df0:	d82c      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df6:	d02f      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfc:	d826      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e02:	d02b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003e04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e08:	d820      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e0e:	d012      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e14:	d81a      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d022      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e1e:	d115      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e24:	3308      	adds	r3, #8
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fce7 	bl	80057fc <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e34:	e015      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e3a:	3328      	adds	r3, #40	@ 0x28
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fd8e 	bl	8005960 <RCCEx_PLL3_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e52:	e006      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e54:	bf00      	nop
 8003e56:	e004      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e58:	bf00      	nop
 8003e5a:	e002      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e6a:	4b39      	ldr	r3, [pc, #228]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e7a:	4a35      	ldr	r2, [pc, #212]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ea0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	d058      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003eb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eb6:	d033      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003eb8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ebc:	d82c      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec2:	d02f      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec8:	d826      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003eca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ece:	d02b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ed4:	d820      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eda:	d012      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee0:	d81a      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d022      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eea:	d115      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fc81 	bl	80057fc <RCCEx_PLL2_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f00:	e015      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f06:	3328      	adds	r3, #40	@ 0x28
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f001 fd28 	bl	8005960 <RCCEx_PLL3_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f16:	e00a      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f1e:	e006      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f20:	bf00      	nop
 8003f22:	e004      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f24:	bf00      	nop
 8003f26:	e002      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e000      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10e      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f46:	4a02      	ldr	r2, [pc, #8]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f4c:	e006      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003f4e:	bf00      	nop
 8003f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	d055      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f88:	d033      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003f8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f8e:	d82c      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f94:	d02f      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f9a:	d826      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003f9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fa0:	d02b      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003fa2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fa6:	d820      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fac:	d012      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fb2:	d81a      	bhi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d022      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fbc:	d115      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 fc18 	bl	80057fc <RCCEx_PLL2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fd2:	e015      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fd8:	3328      	adds	r3, #40	@ 0x28
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 fcbf 	bl	8005960 <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e00a      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004000:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004008:	4ba1      	ldr	r3, [pc, #644]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004014:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004018:	4a9d      	ldr	r2, [pc, #628]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6593      	str	r3, [r2, #88]	@ 0x58
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004024:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f002 0308 	and.w	r3, r2, #8
 8004034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800403e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d01e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004054:	d10c      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800405a:	3328      	adds	r3, #40	@ 0x28
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f001 fc7e 	bl	8005960 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004070:	4b87      	ldr	r3, [pc, #540]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004074:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004080:	4a83      	ldr	r2, [pc, #524]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004082:	430b      	orrs	r3, r1
 8004084:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f002 0310 	and.w	r3, r2, #16
 8004092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004096:	2300      	movs	r3, #0
 8004098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800409c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040a0:	460b      	mov	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	d01e      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b2:	d10c      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040b8:	3328      	adds	r3, #40	@ 0x28
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fc4f 	bl	8005960 <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ce:	4b70      	ldr	r3, [pc, #448]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040de:	4a6c      	ldr	r2, [pc, #432]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d03e      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004108:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800410c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004110:	d022      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004116:	d81b      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004120:	d00b      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004122:	e015      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004128:	3308      	adds	r3, #8
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f001 fb65 	bl	80057fc <RCCEx_PLL2_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004138:	e00f      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800413a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800413e:	3328      	adds	r3, #40	@ 0x28
 8004140:	2102      	movs	r1, #2
 8004142:	4618      	mov	r0, r3
 8004144:	f001 fc0c 	bl	8005960 <RCCEx_PLL3_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800414e:	e004      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004156:	e000      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004162:	4b4b      	ldr	r3, [pc, #300]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004166:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800416a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800416e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004172:	4a47      	ldr	r2, [pc, #284]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004174:	430b      	orrs	r3, r1
 8004176:	6593      	str	r3, [r2, #88]	@ 0x58
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800417e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004182:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800418e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004190:	2300      	movs	r3, #0
 8004192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004194:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004198:	460b      	mov	r3, r1
 800419a:	4313      	orrs	r3, r2
 800419c:	d03b      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800419e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041aa:	d01f      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80041ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041b0:	d818      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80041b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b6:	d003      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80041b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041bc:	d007      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80041be:	e011      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c0:	4b33      	ldr	r3, [pc, #204]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041cc:	e00f      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d2:	3328      	adds	r3, #40	@ 0x28
 80041d4:	2101      	movs	r1, #1
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 fbc2 	bl	8005960 <RCCEx_PLL3_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80041e2:	e004      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041ea:	e000      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80041ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041f6:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004206:	4a22      	ldr	r2, [pc, #136]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6553      	str	r3, [r2, #84]	@ 0x54
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004212:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004222:	673b      	str	r3, [r7, #112]	@ 0x70
 8004224:	2300      	movs	r3, #0
 8004226:	677b      	str	r3, [r7, #116]	@ 0x74
 8004228:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d034      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004240:	d007      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004242:	e011      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004244:	4b12      	ldr	r3, [pc, #72]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	4a11      	ldr	r2, [pc, #68]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800424a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800424e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004250:	e00e      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004256:	3308      	adds	r3, #8
 8004258:	2102      	movs	r1, #2
 800425a:	4618      	mov	r0, r3
 800425c:	f001 face 	bl	80057fc <RCCEx_PLL2_Config>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004266:	e003      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800426e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004270:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10d      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004278:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800427a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004280:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004286:	4a02      	ldr	r2, [pc, #8]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004288:	430b      	orrs	r3, r1
 800428a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800428c:	e006      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800428e:	bf00      	nop
 8004290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004298:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800429c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042aa:	2300      	movs	r3, #0
 80042ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d00c      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042bc:	3328      	adds	r3, #40	@ 0x28
 80042be:	2102      	movs	r1, #2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 fb4d 	bl	8005960 <RCCEx_PLL3_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042de:	663b      	str	r3, [r7, #96]	@ 0x60
 80042e0:	2300      	movs	r3, #0
 80042e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80042e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d038      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042fa:	d018      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80042fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004300:	d811      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004306:	d014      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800430c:	d80b      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d011      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004316:	d106      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004318:	4bc3      	ldr	r3, [pc, #780]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4ac2      	ldr	r2, [pc, #776]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800431e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004324:	e008      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800432c:	e004      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800432e:	bf00      	nop
 8004330:	e002      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004332:	bf00      	nop
 8004334:	e000      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004338:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004340:	4bb9      	ldr	r3, [pc, #740]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004344:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004350:	4ab5      	ldr	r2, [pc, #724]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004352:	430b      	orrs	r3, r1
 8004354:	6553      	str	r3, [r2, #84]	@ 0x54
 8004356:	e003      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004358:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800435c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800436c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800436e:	2300      	movs	r3, #0
 8004370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004372:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800437c:	4baa      	ldr	r3, [pc, #680]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800437e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004380:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438a:	4aa7      	ldr	r2, [pc, #668]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800439c:	653b      	str	r3, [r7, #80]	@ 0x50
 800439e:	2300      	movs	r3, #0
 80043a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	d009      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ac:	4b9e      	ldr	r3, [pc, #632]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	4a9b      	ldr	r2, [pc, #620]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043bc:	430b      	orrs	r3, r1
 80043be:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80043c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80043cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043ce:	2300      	movs	r3, #0
 80043d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80043dc:	4b92      	ldr	r3, [pc, #584]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ea:	4a8f      	ldr	r2, [pc, #572]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fe:	2300      	movs	r3, #0
 8004400:	647b      	str	r3, [r7, #68]	@ 0x44
 8004402:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004406:	460b      	mov	r3, r1
 8004408:	4313      	orrs	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800440c:	4b86      	ldr	r3, [pc, #536]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	4a85      	ldr	r2, [pc, #532]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004412:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004416:	6113      	str	r3, [r2, #16]
 8004418:	4b83      	ldr	r3, [pc, #524]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800441a:	6919      	ldr	r1, [r3, #16]
 800441c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004420:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004424:	4a80      	ldr	r2, [pc, #512]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800442a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004436:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004438:	2300      	movs	r3, #0
 800443a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800443c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004446:	4b78      	ldr	r3, [pc, #480]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800444a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800444e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004454:	4a74      	ldr	r2, [pc, #464]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004456:	430b      	orrs	r3, r1
 8004458:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800445a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004466:	633b      	str	r3, [r7, #48]	@ 0x30
 8004468:	2300      	movs	r3, #0
 800446a:	637b      	str	r3, [r7, #52]	@ 0x34
 800446c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004470:	460b      	mov	r3, r1
 8004472:	4313      	orrs	r3, r2
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004476:	4b6c      	ldr	r3, [pc, #432]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800447e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004486:	4a68      	ldr	r2, [pc, #416]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	2100      	movs	r1, #0
 8004496:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800449e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d011      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ac:	3308      	adds	r3, #8
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 f9a3 	bl	80057fc <RCCEx_PLL2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	2100      	movs	r1, #0
 80044d6:	6239      	str	r1, [r7, #32]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d011      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044ec:	3308      	adds	r3, #8
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 f983 	bl	80057fc <RCCEx_PLL2_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004508:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	2100      	movs	r1, #0
 8004516:	61b9      	str	r1, [r7, #24]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d011      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800452c:	3308      	adds	r3, #8
 800452e:	2102      	movs	r1, #2
 8004530:	4618      	mov	r0, r3
 8004532:	f001 f963 	bl	80057fc <RCCEx_PLL2_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800453c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004548:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800454c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	2100      	movs	r1, #0
 8004556:	6139      	str	r1, [r7, #16]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004562:	460b      	mov	r3, r1
 8004564:	4313      	orrs	r3, r2
 8004566:	d011      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800456c:	3328      	adds	r3, #40	@ 0x28
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f001 f9f5 	bl	8005960 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800457c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004588:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800458c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	2100      	movs	r1, #0
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d011      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ac:	3328      	adds	r3, #40	@ 0x28
 80045ae:	2101      	movs	r1, #1
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 f9d5 	bl	8005960 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	2100      	movs	r1, #0
 80045d6:	6039      	str	r1, [r7, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d011      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ec:	3328      	adds	r3, #40	@ 0x28
 80045ee:	2102      	movs	r1, #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 f9b5 	bl	8005960 <RCCEx_PLL3_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004608:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800460c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e000      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
}
 800461a:	4618      	mov	r0, r3
 800461c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004620:	46bd      	mov	sp, r7
 8004622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400

0800462c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b090      	sub	sp, #64	@ 0x40
 8004630:	af00      	add	r7, sp, #0
 8004632:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800463a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800463e:	430b      	orrs	r3, r1
 8004640:	f040 8094 	bne.w	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004644:	4b97      	ldr	r3, [pc, #604]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	2b04      	cmp	r3, #4
 8004652:	f200 8087 	bhi.w	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004656:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004671 	.word	0x08004671
 8004660:	08004699 	.word	0x08004699
 8004664:	080046c1 	.word	0x080046c1
 8004668:	0800475d 	.word	0x0800475d
 800466c:	080046e9 	.word	0x080046e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004670:	4b8c      	ldr	r3, [pc, #560]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004678:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800467c:	d108      	bne.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800467e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004682:	4618      	mov	r0, r3
 8004684:	f000 ff68 	bl	8005558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800468c:	f000 bc97 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004694:	f000 bc93 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004698:	4b82      	ldr	r3, [pc, #520]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a4:	d108      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a6:	f107 0318 	add.w	r3, r7, #24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fcac 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046b4:	f000 bc83 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046bc:	f000 bc7f 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046c0:	4b78      	ldr	r3, [pc, #480]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046cc:	d108      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046ce:	f107 030c 	add.w	r3, r7, #12
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fdec 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046dc:	f000 bc6f 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046e4:	f000 bc6b 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80046e8:	4b6e      	ldr	r3, [pc, #440]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046f2:	4b6c      	ldr	r3, [pc, #432]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d10c      	bne.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80046fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004704:	4b67      	ldr	r3, [pc, #412]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	08db      	lsrs	r3, r3, #3
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	4a66      	ldr	r2, [pc, #408]	@ (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004716:	e01f      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004718:	4b62      	ldr	r3, [pc, #392]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004724:	d106      	bne.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800472c:	d102      	bne.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800472e:	4b5f      	ldr	r3, [pc, #380]	@ (80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004732:	e011      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004734:	4b5b      	ldr	r3, [pc, #364]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004740:	d106      	bne.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004748:	d102      	bne.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800474a:	4b59      	ldr	r3, [pc, #356]	@ (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800474c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800474e:	e003      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004754:	f000 bc33 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004758:	f000 bc31 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800475c:	4b55      	ldr	r3, [pc, #340]	@ (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800475e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004760:	f000 bc2d 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004768:	f000 bc29 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800476c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004770:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004774:	430b      	orrs	r3, r1
 8004776:	f040 809f 	bne.w	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800477a:	4b4a      	ldr	r3, [pc, #296]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800477c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004782:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800478a:	d04d      	beq.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004792:	f200 8084 	bhi.w	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	2bc0      	cmp	r3, #192	@ 0xc0
 800479a:	d07d      	beq.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	2bc0      	cmp	r3, #192	@ 0xc0
 80047a0:	d87d      	bhi.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	2b80      	cmp	r3, #128	@ 0x80
 80047a6:	d02d      	beq.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	2b80      	cmp	r3, #128	@ 0x80
 80047ac:	d877      	bhi.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	2b40      	cmp	r3, #64	@ 0x40
 80047b8:	d012      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80047ba:	e070      	b.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047bc:	4b39      	ldr	r3, [pc, #228]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047c8:	d107      	bne.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fec2 	bl	8005558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047d8:	e3f1      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047de:	e3ee      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047e0:	4b30      	ldr	r3, [pc, #192]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047ec:	d107      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047ee:	f107 0318 	add.w	r3, r7, #24
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fc08 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047fc:	e3df      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004802:	e3dc      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004804:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800480c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004810:	d107      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004812:	f107 030c 	add.w	r3, r7, #12
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fd4a 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004820:	e3cd      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004826:	e3ca      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004828:	4b1e      	ldr	r3, [pc, #120]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800482a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004832:	4b1c      	ldr	r3, [pc, #112]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b04      	cmp	r3, #4
 800483c:	d10c      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800483e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004844:	4b17      	ldr	r3, [pc, #92]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	08db      	lsrs	r3, r3, #3
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	4a16      	ldr	r2, [pc, #88]	@ (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
 8004854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004856:	e01e      	b.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004858:	4b12      	ldr	r3, [pc, #72]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004864:	d106      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8004866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800486c:	d102      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800486e:	4b0f      	ldr	r3, [pc, #60]	@ (80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004872:	e010      	b.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004880:	d106      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004888:	d102      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800488a:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800488c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800488e:	e002      	b.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004894:	e393      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004896:	e392      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800489a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800489c:	e38f      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048a2:	e38c      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80048a4:	58024400 	.word	0x58024400
 80048a8:	03d09000 	.word	0x03d09000
 80048ac:	003d0900 	.word	0x003d0900
 80048b0:	016e3600 	.word	0x016e3600
 80048b4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80048b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048bc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80048c0:	430b      	orrs	r3, r1
 80048c2:	f040 809c 	bne.w	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80048c6:	4b9e      	ldr	r3, [pc, #632]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80048c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ca:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80048ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d6:	d054      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048de:	f200 808b 	bhi.w	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048e8:	f000 8083 	beq.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048f2:	f200 8081 	bhi.w	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fc:	d02f      	beq.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004904:	d878      	bhi.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004912:	d012      	beq.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004914:	e070      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004916:	4b8a      	ldr	r3, [pc, #552]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004922:	d107      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fe15 	bl	8005558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004932:	e344      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004938:	e341      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800493a:	4b81      	ldr	r3, [pc, #516]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004942:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004946:	d107      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004948:	f107 0318 	add.w	r3, r7, #24
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fb5b 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004956:	e332      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800495c:	e32f      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800495e:	4b78      	ldr	r3, [pc, #480]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800496a:	d107      	bne.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800496c:	f107 030c 	add.w	r3, r7, #12
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fc9d 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800497a:	e320      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004980:	e31d      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004982:	4b6f      	ldr	r3, [pc, #444]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004986:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800498a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800498c:	4b6c      	ldr	r3, [pc, #432]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d10c      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800499e:	4b68      	ldr	r3, [pc, #416]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	08db      	lsrs	r3, r3, #3
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	4a66      	ldr	r2, [pc, #408]	@ (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049b0:	e01e      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049b2:	4b63      	ldr	r3, [pc, #396]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049be:	d106      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80049c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049c6:	d102      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80049c8:	4b5f      	ldr	r3, [pc, #380]	@ (8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80049ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049cc:	e010      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049da:	d106      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80049dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e2:	d102      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80049e4:	4b59      	ldr	r3, [pc, #356]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80049e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80049ee:	e2e6      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80049f0:	e2e5      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80049f2:	4b57      	ldr	r3, [pc, #348]	@ (8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80049f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049f6:	e2e2      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049fc:	e2df      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80049fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a02:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004a06:	430b      	orrs	r3, r1
 8004a08:	f040 80a7 	bne.w	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a10:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004a14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a1c:	d055      	beq.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a24:	f200 8096 	bhi.w	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a2e:	f000 8084 	beq.w	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a38:	f200 808c 	bhi.w	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a42:	d030      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4a:	f200 8083 	bhi.w	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d004      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5a:	d012      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8004a5c:	e07a      	b.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a5e:	4b38      	ldr	r3, [pc, #224]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fd71 	bl	8005558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a7a:	e2a0      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a80:	e29d      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a82:	4b2f      	ldr	r3, [pc, #188]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a90:	f107 0318 	add.w	r3, r7, #24
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fab7 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a9e:	e28e      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aa4:	e28b      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aa6:	4b26      	ldr	r3, [pc, #152]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fbf9 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ac2:	e27c      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ac8:	e279      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004aca:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ad2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d10c      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ae6:	4b16      	ldr	r3, [pc, #88]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	08db      	lsrs	r3, r3, #3
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	4a14      	ldr	r2, [pc, #80]	@ (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004af8:	e01e      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004afa:	4b11      	ldr	r3, [pc, #68]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b06:	d106      	bne.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b0e:	d102      	bne.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004b10:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b14:	e010      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b22:	d106      	bne.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b2a:	d102      	bne.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004b2c:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004b36:	e242      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004b38:	e241      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b3e:	e23e      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004b40:	58024400 	.word	0x58024400
 8004b44:	03d09000 	.word	0x03d09000
 8004b48:	003d0900 	.word	0x003d0900
 8004b4c:	016e3600 	.word	0x016e3600
 8004b50:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b58:	e231      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004b62:	430b      	orrs	r3, r1
 8004b64:	f040 8085 	bne.w	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004b68:	4b9c      	ldr	r3, [pc, #624]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004b70:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b78:	d06b      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b80:	d874      	bhi.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b88:	d056      	beq.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b90:	d86c      	bhi.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b98:	d03b      	beq.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ba0:	d864      	bhi.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba8:	d021      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8004baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bb0:	d85c      	bhi.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbe:	d004      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8004bc0:	e054      	b.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004bc2:	f7fe fb5f 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 8004bc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bc8:	e1f9      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bca:	4b84      	ldr	r3, [pc, #528]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bd6:	d107      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bd8:	f107 0318 	add.w	r3, r7, #24
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fa13 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004be6:	e1ea      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bec:	e1e7      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bee:	4b7b      	ldr	r3, [pc, #492]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fb55 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c0a:	e1d8      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c10:	e1d5      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c12:	4b72      	ldr	r3, [pc, #456]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c1e:	4b6f      	ldr	r3, [pc, #444]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	08db      	lsrs	r3, r3, #3
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	4a6d      	ldr	r2, [pc, #436]	@ (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c30:	e1c5      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c36:	e1c2      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004c38:	4b68      	ldr	r3, [pc, #416]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c44:	d102      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8004c46:	4b67      	ldr	r3, [pc, #412]	@ (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c4a:	e1b8      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c50:	e1b5      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c52:	4b62      	ldr	r3, [pc, #392]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c5e:	d102      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8004c60:	4b61      	ldr	r3, [pc, #388]	@ (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8004c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c64:	e1ab      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c6a:	e1a8      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c70:	e1a5      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c76:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	d173      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004c7e:	4b57      	ldr	r3, [pc, #348]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c86:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c8e:	d02f      	beq.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c96:	d863      	bhi.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8004c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca4:	d012      	beq.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8004ca6:	e05b      	b.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cb6:	f107 0318 	add.w	r3, r7, #24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f9a4 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cc4:	e17b      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cca:	e178      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ccc:	4b43      	ldr	r3, [pc, #268]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cd8:	d107      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cda:	f107 030c 	add.w	r3, r7, #12
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fae6 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ce8:	e169      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cee:	e166      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cfa:	4b38      	ldr	r3, [pc, #224]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8004d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d0c:	4b33      	ldr	r3, [pc, #204]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	08db      	lsrs	r3, r3, #3
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	4a32      	ldr	r2, [pc, #200]	@ (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d1e:	e01e      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d20:	4b2e      	ldr	r3, [pc, #184]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d2c:	d106      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d34:	d102      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004d36:	4b2b      	ldr	r3, [pc, #172]	@ (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d3a:	e010      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d3c:	4b27      	ldr	r3, [pc, #156]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d48:	d106      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d50:	d102      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004d52:	4b25      	ldr	r3, [pc, #148]	@ (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8004d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d56:	e002      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004d5c:	e12f      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004d5e:	e12e      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d64:	e12b      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d6a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	d13c      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004d72:	4b1a      	ldr	r3, [pc, #104]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d7a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d88:	d012      	beq.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8004d8a:	e023      	b.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d8c:	4b13      	ldr	r3, [pc, #76]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d98:	d107      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fbda 	bl	8005558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004da8:	e109      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dae:	e106      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004db0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dbc:	d107      	bne.n	8004dce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dbe:	f107 0318 	add.w	r3, r7, #24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f920 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dcc:	e0f7      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd2:	e0f4      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd8:	e0f1      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004dda:	bf00      	nop
 8004ddc:	58024400 	.word	0x58024400
 8004de0:	03d09000 	.word	0x03d09000
 8004de4:	003d0900 	.word	0x003d0900
 8004de8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004df4:	430b      	orrs	r3, r1
 8004df6:	f040 8091 	bne.w	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004dfa:	4b73      	ldr	r3, [pc, #460]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004e02:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e06:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004e0a:	f000 8081 	beq.w	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004e14:	d87f      	bhi.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e1c:	d06b      	beq.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e24:	d877      	bhi.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2c:	d056      	beq.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e34:	d86f      	bhi.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e3c:	d03b      	beq.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e44:	d867      	bhi.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e4c:	d021      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e54:	d85f      	bhi.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e62:	d004      	beq.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004e64:	e057      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e66:	f000 f8b9 	bl	8004fdc <HAL_RCCEx_GetD3PCLK1Freq>
 8004e6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e6c:	e0a7      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e6e:	4b56      	ldr	r3, [pc, #344]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e7c:	f107 0318 	add.w	r3, r7, #24
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f8c1 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e8a:	e098      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e90:	e095      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e92:	4b4d      	ldr	r3, [pc, #308]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ea0:	f107 030c 	add.w	r3, r7, #12
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fa03 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eae:	e086      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eb4:	e083      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eb6:	4b44      	ldr	r3, [pc, #272]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ec2:	4b41      	ldr	r3, [pc, #260]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	08db      	lsrs	r3, r3, #3
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004ece:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ed4:	e073      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eda:	e070      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004edc:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee8:	d102      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8004eea:	4b39      	ldr	r3, [pc, #228]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8004eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eee:	e066      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ef4:	e063      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ef6:	4b34      	ldr	r3, [pc, #208]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f02:	d102      	bne.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8004f04:	4b33      	ldr	r3, [pc, #204]	@ (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f08:	e059      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f0e:	e056      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f10:	4b31      	ldr	r3, [pc, #196]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f14:	e053      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f1a:	e050      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f20:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004f24:	430b      	orrs	r3, r1
 8004f26:	d148      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004f28:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f38:	d02a      	beq.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f40:	d838      	bhi.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4e:	d00d      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8004f50:	e030      	b.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f52:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f5e:	d102      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8004f60:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f64:	e02b      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f6a:	e028      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f6c:	4b16      	ldr	r3, [pc, #88]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f78:	d107      	bne.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 faea 	bl	8005558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f88:	e019      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f8e:	e016      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f90:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f9c:	d107      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f9e:	f107 0318 	add.w	r3, r7, #24
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f830 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fac:	e007      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fb2:	e004      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fb8:	e001      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8004fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3740      	adds	r7, #64	@ 0x40
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	58024400 	.word	0x58024400
 8004fcc:	03d09000 	.word	0x03d09000
 8004fd0:	003d0900 	.word	0x003d0900
 8004fd4:	016e3600 	.word	0x016e3600
 8004fd8:	00bb8000 	.word	0x00bb8000

08004fdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004fe0:	f7fe f920 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4904      	ldr	r1, [pc, #16]	@ (8005004 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	58024400 	.word	0x58024400
 8005004:	080064ec 	.word	0x080064ec

08005008 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	@ 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005010:	4ba1      	ldr	r3, [pc, #644]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800501a:	4b9f      	ldr	r3, [pc, #636]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501e:	0b1b      	lsrs	r3, r3, #12
 8005020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005024:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005026:	4b9c      	ldr	r3, [pc, #624]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005032:	4b99      	ldr	r3, [pc, #612]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	08db      	lsrs	r3, r3, #3
 8005038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8111 	beq.w	8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b02      	cmp	r3, #2
 800505a:	f000 8083 	beq.w	8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b02      	cmp	r3, #2
 8005062:	f200 80a1 	bhi.w	80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d056      	beq.n	8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005072:	e099      	b.n	80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005074:	4b88      	ldr	r3, [pc, #544]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02d      	beq.n	80050dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005080:	4b85      	ldr	r3, [pc, #532]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	4a84      	ldr	r2, [pc, #528]	@ (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
 8005090:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80050be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050da:	e087      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005102:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511e:	e065      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800512e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005132:	4b59      	ldr	r3, [pc, #356]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005142:	ed97 6a03 	vldr	s12, [r7, #12]
 8005146:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800514a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005162:	e043      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005176:	4b48      	ldr	r3, [pc, #288]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005186:	ed97 6a03 	vldr	s12, [r7, #12]
 800518a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800518e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800519a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051a6:	e021      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ba:	4b37      	ldr	r3, [pc, #220]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	0a5b      	lsrs	r3, r3, #9
 80051f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005206:	edd7 6a07 	vldr	s13, [r7, #28]
 800520a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005212:	ee17 2a90 	vmov	r2, s15
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800521a:	4b1f      	ldr	r3, [pc, #124]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800521c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521e:	0c1b      	lsrs	r3, r3, #16
 8005220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005224:	ee07 3a90 	vmov	s15, r3
 8005228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005234:	edd7 6a07 	vldr	s13, [r7, #28]
 8005238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005240:	ee17 2a90 	vmov	r2, s15
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005248:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	0e1b      	lsrs	r3, r3, #24
 800524e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800525e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005262:	edd7 6a07 	vldr	s13, [r7, #28]
 8005266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526e:	ee17 2a90 	vmov	r2, s15
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005276:	e008      	b.n	800528a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
}
 800528a:	bf00      	nop
 800528c:	3724      	adds	r7, #36	@ 0x24
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	58024400 	.word	0x58024400
 800529c:	03d09000 	.word	0x03d09000
 80052a0:	46000000 	.word	0x46000000
 80052a4:	4c742400 	.word	0x4c742400
 80052a8:	4a742400 	.word	0x4a742400
 80052ac:	4bb71b00 	.word	0x4bb71b00

080052b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	@ 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052c2:	4b9f      	ldr	r3, [pc, #636]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	0d1b      	lsrs	r3, r3, #20
 80052c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052da:	4b99      	ldr	r3, [pc, #612]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	08db      	lsrs	r3, r3, #3
 80052e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8111 	beq.w	8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b02      	cmp	r3, #2
 8005302:	f000 8083 	beq.w	800540c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b02      	cmp	r3, #2
 800530a:	f200 80a1 	bhi.w	8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d056      	beq.n	80053c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800531a:	e099      	b.n	8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800531c:	4b88      	ldr	r3, [pc, #544]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02d      	beq.n	8005384 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005328:	4b85      	ldr	r3, [pc, #532]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	4a84      	ldr	r2, [pc, #528]	@ (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
 8005338:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	ee07 3a90 	vmov	s15, r3
 8005340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005352:	4b7b      	ldr	r3, [pc, #492]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005362:	ed97 6a03 	vldr	s12, [r7, #12]
 8005366:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800536a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005382:	e087      	b.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005396:	4b6a      	ldr	r3, [pc, #424]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c6:	e065      	b.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053da:	4b59      	ldr	r3, [pc, #356]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800540a:	e043      	b.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800541a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541e:	4b48      	ldr	r3, [pc, #288]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005432:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800544e:	e021      	b.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800545e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005462:	4b37      	ldr	r3, [pc, #220]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ed97 6a03 	vldr	s12, [r7, #12]
 8005476:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800547a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005492:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005494:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	0a5b      	lsrs	r3, r3, #9
 800549a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ba:	ee17 2a90 	vmov	r2, s15
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e8:	ee17 2a90 	vmov	r2, s15
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80054f0:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	0e1b      	lsrs	r3, r3, #24
 80054f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800550a:	edd7 6a07 	vldr	s13, [r7, #28]
 800550e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005516:	ee17 2a90 	vmov	r2, s15
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800551e:	e008      	b.n	8005532 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
}
 8005532:	bf00      	nop
 8005534:	3724      	adds	r7, #36	@ 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	58024400 	.word	0x58024400
 8005544:	03d09000 	.word	0x03d09000
 8005548:	46000000 	.word	0x46000000
 800554c:	4c742400 	.word	0x4c742400
 8005550:	4a742400 	.word	0x4a742400
 8005554:	4bb71b00 	.word	0x4bb71b00

08005558 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005558:	b480      	push	{r7}
 800555a:	b089      	sub	sp, #36	@ 0x24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005560:	4ba0      	ldr	r3, [pc, #640]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800556a:	4b9e      	ldr	r3, [pc, #632]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800556c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005574:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005576:	4b9b      	ldr	r3, [pc, #620]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005580:	4b98      	ldr	r3, [pc, #608]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005584:	08db      	lsrs	r3, r3, #3
 8005586:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	ee07 3a90 	vmov	s15, r3
 8005594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005598:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8111 	beq.w	80057c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	f000 8083 	beq.w	80056b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	f200 80a1 	bhi.w	80056f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d056      	beq.n	800566e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055c0:	e099      	b.n	80056f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055c2:	4b88      	ldr	r3, [pc, #544]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d02d      	beq.n	800562a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055ce:	4b85      	ldr	r3, [pc, #532]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	08db      	lsrs	r3, r3, #3
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	4a83      	ldr	r2, [pc, #524]	@ (80057e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	ee07 3a90 	vmov	s15, r3
 80055f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f8:	4b7a      	ldr	r3, [pc, #488]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005608:	ed97 6a03 	vldr	s12, [r7, #12]
 800560c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80057ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005624:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005628:	e087      	b.n	800573a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005634:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563c:	4b69      	ldr	r3, [pc, #420]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005650:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80057ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800566c:	e065      	b.n	800573a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005678:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80057f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800567c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005680:	4b58      	ldr	r3, [pc, #352]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005688:	ee07 3a90 	vmov	s15, r3
 800568c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005690:	ed97 6a03 	vldr	s12, [r7, #12]
 8005694:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80057ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056b0:	e043      	b.n	800573a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80057f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c4:	4b47      	ldr	r3, [pc, #284]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056cc:	ee07 3a90 	vmov	s15, r3
 80056d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80057ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056f4:	e021      	b.n	800573a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005700:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005708:	4b36      	ldr	r3, [pc, #216]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005710:	ee07 3a90 	vmov	s15, r3
 8005714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005718:	ed97 6a03 	vldr	s12, [r7, #12]
 800571c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80057ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005728:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800572c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005734:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005738:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800573a:	4b2a      	ldr	r3, [pc, #168]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	0a5b      	lsrs	r3, r3, #9
 8005740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005744:	ee07 3a90 	vmov	s15, r3
 8005748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005754:	edd7 6a07 	vldr	s13, [r7, #28]
 8005758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800575c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005760:	ee17 2a90 	vmov	r2, s15
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005768:	4b1e      	ldr	r3, [pc, #120]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800577e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005782:	edd7 6a07 	vldr	s13, [r7, #28]
 8005786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800578e:	ee17 2a90 	vmov	r2, s15
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005796:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579a:	0e1b      	lsrs	r3, r3, #24
 800579c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057bc:	ee17 2a90 	vmov	r2, s15
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057c4:	e008      	b.n	80057d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	3724      	adds	r7, #36	@ 0x24
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	58024400 	.word	0x58024400
 80057e8:	03d09000 	.word	0x03d09000
 80057ec:	46000000 	.word	0x46000000
 80057f0:	4c742400 	.word	0x4c742400
 80057f4:	4a742400 	.word	0x4a742400
 80057f8:	4bb71b00 	.word	0x4bb71b00

080057fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800580a:	4b53      	ldr	r3, [pc, #332]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b03      	cmp	r3, #3
 8005814:	d101      	bne.n	800581a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e099      	b.n	800594e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800581a:	4b4f      	ldr	r3, [pc, #316]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a4e      	ldr	r2, [pc, #312]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005820:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005826:	f7fb fe03 	bl	8001430 <HAL_GetTick>
 800582a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800582c:	e008      	b.n	8005840 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800582e:	f7fb fdff 	bl	8001430 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e086      	b.n	800594e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005840:	4b45      	ldr	r3, [pc, #276]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800584c:	4b42      	ldr	r3, [pc, #264]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	031b      	lsls	r3, r3, #12
 800585a:	493f      	ldr	r1, [pc, #252]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800585c:	4313      	orrs	r3, r2
 800585e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	3b01      	subs	r3, #1
 8005866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	3b01      	subs	r3, #1
 8005870:	025b      	lsls	r3, r3, #9
 8005872:	b29b      	uxth	r3, r3
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	3b01      	subs	r3, #1
 800588a:	061b      	lsls	r3, r3, #24
 800588c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005890:	4931      	ldr	r1, [pc, #196]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005896:	4b30      	ldr	r3, [pc, #192]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	492d      	ldr	r1, [pc, #180]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	f023 0220 	bic.w	r2, r3, #32
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	4928      	ldr	r1, [pc, #160]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058ba:	4b27      	ldr	r3, [pc, #156]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	4a26      	ldr	r2, [pc, #152]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058c0:	f023 0310 	bic.w	r3, r3, #16
 80058c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058c6:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058ca:	4b24      	ldr	r3, [pc, #144]	@ (800595c <RCCEx_PLL2_Config+0x160>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	69d2      	ldr	r2, [r2, #28]
 80058d2:	00d2      	lsls	r2, r2, #3
 80058d4:	4920      	ldr	r1, [pc, #128]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058da:	4b1f      	ldr	r3, [pc, #124]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058e0:	f043 0310 	orr.w	r3, r3, #16
 80058e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f0:	4a19      	ldr	r2, [pc, #100]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 80058f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058f8:	e00f      	b.n	800591a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d106      	bne.n	800590e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005900:	4b15      	ldr	r3, [pc, #84]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	4a14      	ldr	r2, [pc, #80]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800590a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800590c:	e005      	b.n	800591a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800590e:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005914:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005918:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a0e      	ldr	r2, [pc, #56]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005920:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005926:	f7fb fd83 	bl	8001430 <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800592e:	f7fb fd7f 	bl	8001430 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e006      	b.n	800594e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005940:	4b05      	ldr	r3, [pc, #20]	@ (8005958 <RCCEx_PLL2_Config+0x15c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	58024400 	.word	0x58024400
 800595c:	ffff0007 	.word	0xffff0007

08005960 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800596e:	4b53      	ldr	r3, [pc, #332]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b03      	cmp	r3, #3
 8005978:	d101      	bne.n	800597e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e099      	b.n	8005ab2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800597e:	4b4f      	ldr	r3, [pc, #316]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4e      	ldr	r2, [pc, #312]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598a:	f7fb fd51 	bl	8001430 <HAL_GetTick>
 800598e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005990:	e008      	b.n	80059a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005992:	f7fb fd4d 	bl	8001430 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e086      	b.n	8005ab2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059a4:	4b45      	ldr	r3, [pc, #276]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f0      	bne.n	8005992 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059b0:	4b42      	ldr	r3, [pc, #264]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	051b      	lsls	r3, r3, #20
 80059be:	493f      	ldr	r1, [pc, #252]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	025b      	lsls	r3, r3, #9
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	3b01      	subs	r3, #1
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	061b      	lsls	r3, r3, #24
 80059f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059f4:	4931      	ldr	r1, [pc, #196]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059fa:	4b30      	ldr	r3, [pc, #192]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	492d      	ldr	r1, [pc, #180]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	4928      	ldr	r1, [pc, #160]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a1e:	4b27      	ldr	r3, [pc, #156]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a22:	4a26      	ldr	r2, [pc, #152]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a2a:	4b24      	ldr	r3, [pc, #144]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a2e:	4b24      	ldr	r3, [pc, #144]	@ (8005ac0 <RCCEx_PLL3_Config+0x160>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	69d2      	ldr	r2, [r2, #28]
 8005a36:	00d2      	lsls	r2, r2, #3
 8005a38:	4920      	ldr	r1, [pc, #128]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a42:	4a1e      	ldr	r2, [pc, #120]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a50:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	4a19      	ldr	r2, [pc, #100]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a5c:	e00f      	b.n	8005a7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d106      	bne.n	8005a72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a64:	4b15      	ldr	r3, [pc, #84]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	4a14      	ldr	r2, [pc, #80]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a70:	e005      	b.n	8005a7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a72:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	4a11      	ldr	r2, [pc, #68]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a0e      	ldr	r2, [pc, #56]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8a:	f7fb fcd1 	bl	8001430 <HAL_GetTick>
 8005a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a90:	e008      	b.n	8005aa4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a92:	f7fb fccd 	bl	8001430 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e006      	b.n	8005ab2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aa4:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	ffff0007 	.word	0xffff0007

08005ac4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e02b      	b.n	8005b30 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fa fd89 	bl	8000604 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f000 f8eb 	bl	8005ce0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	461a      	mov	r2, r3
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	f000 f93f 	bl	8005d98 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005b1a:	4b07      	ldr	r3, [pc, #28]	@ (8005b38 <HAL_SDRAM_Init+0x74>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a06      	ldr	r2, [pc, #24]	@ (8005b38 <HAL_SDRAM_Init+0x74>)
 8005b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b24:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	52004000 	.word	0x52004000

08005b3c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e05e      	b.n	8005c0c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fb f9e4 	bl	8000f30 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0203 	bic.w	r2, r2, #3
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4b22      	ldr	r3, [pc, #136]	@ (8005c14 <HAL_SPDIFRX_Init+0xd8>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8005b98:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8005b9e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8005ba4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8005baa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8005bb0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8005bb6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8005bbc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8005bc2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8005bc8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d103      	bne.n	8005be2 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005be0:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d103      	bne.n	8005bf4 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bf2:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	ffc88407 	.word	0xffc88407

08005c18 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b10      	ldr	r3, [pc, #64]	@ (8005c68 <FMC_NAND_Init+0x50>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	6851      	ldr	r1, [r2, #4]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	6892      	ldr	r2, [r2, #8]
 8005c32:	4311      	orrs	r1, r2
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	68d2      	ldr	r2, [r2, #12]
 8005c38:	4311      	orrs	r1, r2
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	6912      	ldr	r2, [r2, #16]
 8005c3e:	4311      	orrs	r1, r2
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	6952      	ldr	r2, [r2, #20]
 8005c44:	0252      	lsls	r2, r2, #9
 8005c46:	4311      	orrs	r1, r2
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	6992      	ldr	r2, [r2, #24]
 8005c4c:	0352      	lsls	r2, r2, #13
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f043 0208 	orr.w	r2, r3, #8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	fff00189 	.word	0xfff00189

08005c6c <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8005c82:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8005c8a:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8005c92:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 8005cbc:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8005cc4:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8005ccc:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d121      	bne.n	8005d36 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4b27      	ldr	r3, [pc, #156]	@ (8005d94 <FMC_SDRAM_Init+0xb4>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	6851      	ldr	r1, [r2, #4]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	6892      	ldr	r2, [r2, #8]
 8005d02:	4311      	orrs	r1, r2
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	68d2      	ldr	r2, [r2, #12]
 8005d08:	4311      	orrs	r1, r2
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	6912      	ldr	r2, [r2, #16]
 8005d0e:	4311      	orrs	r1, r2
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	6952      	ldr	r2, [r2, #20]
 8005d14:	4311      	orrs	r1, r2
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	6992      	ldr	r2, [r2, #24]
 8005d1a:	4311      	orrs	r1, r2
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	69d2      	ldr	r2, [r2, #28]
 8005d20:	4311      	orrs	r1, r2
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	6a12      	ldr	r2, [r2, #32]
 8005d26:	4311      	orrs	r1, r2
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e026      	b.n	8005d84 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	69d9      	ldr	r1, [r3, #28]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	4319      	orrs	r1, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	4b0e      	ldr	r3, [pc, #56]	@ (8005d94 <FMC_SDRAM_Init+0xb4>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	6851      	ldr	r1, [r2, #4]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	6892      	ldr	r2, [r2, #8]
 8005d64:	4311      	orrs	r1, r2
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	68d2      	ldr	r2, [r2, #12]
 8005d6a:	4311      	orrs	r1, r2
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	6912      	ldr	r2, [r2, #16]
 8005d70:	4311      	orrs	r1, r2
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	6952      	ldr	r2, [r2, #20]
 8005d76:	4311      	orrs	r1, r2
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	6992      	ldr	r2, [r2, #24]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	ffff8000 	.word	0xffff8000

08005d98 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d128      	bne.n	8005dfc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	1e59      	subs	r1, r3, #1
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	4319      	orrs	r1, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	4319      	orrs	r1, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	031b      	lsls	r3, r3, #12
 8005dd4:	4319      	orrs	r1, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	4319      	orrs	r1, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	051b      	lsls	r3, r3, #20
 8005de8:	4319      	orrs	r1, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	061b      	lsls	r3, r3, #24
 8005df2:	430b      	orrs	r3, r1
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	609a      	str	r2, [r3, #8]
 8005dfa:	e02d      	b.n	8005e58 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	4b19      	ldr	r3, [pc, #100]	@ (8005e68 <FMC_SDRAM_Timing_Init+0xd0>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	68d2      	ldr	r2, [r2, #12]
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	0311      	lsls	r1, r2, #12
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	6952      	ldr	r2, [r2, #20]
 8005e10:	3a01      	subs	r2, #1
 8005e12:	0512      	lsls	r2, r2, #20
 8005e14:	430a      	orrs	r2, r1
 8005e16:	431a      	orrs	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	1e59      	subs	r1, r3, #1
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	4319      	orrs	r1, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	4319      	orrs	r1, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	4319      	orrs	r1, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	061b      	lsls	r3, r3, #24
 8005e50:	430b      	orrs	r3, r1
 8005e52:	431a      	orrs	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	ff0f0fff 	.word	0xff0f0fff

08005e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	f107 001c 	add.w	r0, r7, #28
 8005e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d121      	bne.n	8005eca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	4b2c      	ldr	r3, [pc, #176]	@ (8005f48 <USB_CoreInit+0xdc>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d105      	bne.n	8005ebe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 faaa 	bl	8006418 <USB_CoreReset>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e01b      	b.n	8005f02 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa9e 	bl	8006418 <USB_CoreReset>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ee0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ef4:	e005      	b.n	8005f02 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f02:	7fbb      	ldrb	r3, [r7, #30]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d116      	bne.n	8005f36 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f16:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <USB_CoreInit+0xe0>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f043 0206 	orr.w	r2, r3, #6
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f42:	b004      	add	sp, #16
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	ffbdffbf 	.word	0xffbdffbf
 8005f4c:	03ee0000 	.word	0x03ee0000

08005f50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f023 0201 	bic.w	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d115      	bne.n	8005fc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fa0:	200a      	movs	r0, #10
 8005fa2:	f7fb fa51 	bl	8001448 <HAL_Delay>
      ms += 10U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	330a      	adds	r3, #10
 8005faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa25 	bl	80063fc <USB_GetMode>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d01e      	beq.n	8005ff6 <USB_SetCurrentMode+0x84>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fbc:	d9f0      	bls.n	8005fa0 <USB_SetCurrentMode+0x2e>
 8005fbe:	e01a      	b.n	8005ff6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d115      	bne.n	8005ff2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fd2:	200a      	movs	r0, #10
 8005fd4:	f7fb fa38 	bl	8001448 <HAL_Delay>
      ms += 10U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	330a      	adds	r3, #10
 8005fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fa0c 	bl	80063fc <USB_GetMode>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <USB_SetCurrentMode+0x84>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fee:	d9f0      	bls.n	8005fd2 <USB_SetCurrentMode+0x60>
 8005ff0:	e001      	b.n	8005ff6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e005      	b.n	8006002 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ffa:	d101      	bne.n	8006000 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800600c:	b084      	sub	sp, #16
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800601a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e009      	b.n	8006040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3340      	adds	r3, #64	@ 0x40
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	2200      	movs	r2, #0
 8006038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3301      	adds	r3, #1
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b0e      	cmp	r3, #14
 8006044:	d9f2      	bls.n	800602c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006046:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800604a:	2b00      	cmp	r3, #0
 800604c:	d11c      	bne.n	8006088 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e005      	b.n	8006094 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800609a:	461a      	mov	r2, r3
 800609c:	2300      	movs	r3, #0
 800609e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d10d      	bne.n	80060c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060b0:	2100      	movs	r1, #0
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f968 	bl	8006388 <USB_SetDevSpeed>
 80060b8:	e008      	b.n	80060cc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060ba:	2101      	movs	r1, #1
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f963 	bl	8006388 <USB_SetDevSpeed>
 80060c2:	e003      	b.n	80060cc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060c4:	2103      	movs	r1, #3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f95e 	bl	8006388 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060cc:	2110      	movs	r1, #16
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f8fa 	bl	80062c8 <USB_FlushTxFifo>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f924 	bl	800632c <USB_FlushRxFifo>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f4:	461a      	mov	r2, r3
 80060f6:	2300      	movs	r3, #0
 80060f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800610c:	461a      	mov	r2, r3
 800610e:	2300      	movs	r3, #0
 8006110:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	e043      	b.n	80061a0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800612a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800612e:	d118      	bne.n	8006162 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006142:	461a      	mov	r2, r3
 8006144:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e013      	b.n	8006174 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006158:	461a      	mov	r2, r3
 800615a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	e008      	b.n	8006174 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616e:	461a      	mov	r2, r3
 8006170:	2300      	movs	r3, #0
 8006172:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006180:	461a      	mov	r2, r3
 8006182:	2300      	movs	r3, #0
 8006184:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006192:	461a      	mov	r2, r3
 8006194:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006198:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	3301      	adds	r3, #1
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061a4:	461a      	mov	r2, r3
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d3b5      	bcc.n	8006118 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061ac:	2300      	movs	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	e043      	b.n	800623a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061c8:	d118      	bne.n	80061fc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	461a      	mov	r2, r3
 80061de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	e013      	b.n	800620e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f2:	461a      	mov	r2, r3
 80061f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e008      	b.n	800620e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	2300      	movs	r3, #0
 800620c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621a:	461a      	mov	r2, r3
 800621c:	2300      	movs	r3, #0
 800621e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622c:	461a      	mov	r2, r3
 800622e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006232:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	3301      	adds	r3, #1
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800623e:	461a      	mov	r2, r3
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4293      	cmp	r3, r2
 8006244:	d3b5      	bcc.n	80061b2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006258:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006266:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f043 0210 	orr.w	r2, r3, #16
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699a      	ldr	r2, [r3, #24]
 8006280:	4b0f      	ldr	r3, [pc, #60]	@ (80062c0 <USB_DevInit+0x2b4>)
 8006282:	4313      	orrs	r3, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006288:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f043 0208 	orr.w	r2, r3, #8
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800629c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d105      	bne.n	80062b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <USB_DevInit+0x2b8>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062bc:	b004      	add	sp, #16
 80062be:	4770      	bx	lr
 80062c0:	803c3800 	.word	0x803c3800
 80062c4:	40000004 	.word	0x40000004

080062c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062e2:	d901      	bls.n	80062e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e01b      	b.n	8006320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	daf2      	bge.n	80062d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	019b      	lsls	r3, r3, #6
 80062f8:	f043 0220 	orr.w	r2, r3, #32
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800630c:	d901      	bls.n	8006312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e006      	b.n	8006320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d0f0      	beq.n	8006300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006344:	d901      	bls.n	800634a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e018      	b.n	800637c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	daf2      	bge.n	8006338 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2210      	movs	r2, #16
 800635a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3301      	adds	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006368:	d901      	bls.n	800636e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e006      	b.n	800637c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b10      	cmp	r3, #16
 8006378:	d0f0      	beq.n	800635c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063e8:	f043 0302 	orr.w	r3, r3, #2
 80063ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	f003 0301 	and.w	r3, r3, #1
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006430:	d901      	bls.n	8006436 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e01b      	b.n	800646e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	daf2      	bge.n	8006424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f043 0201 	orr.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3301      	adds	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800645a:	d901      	bls.n	8006460 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e006      	b.n	800646e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d0f0      	beq.n	800644e <USB_CoreReset+0x36>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <memset>:
 800647a:	4402      	add	r2, r0
 800647c:	4603      	mov	r3, r0
 800647e:	4293      	cmp	r3, r2
 8006480:	d100      	bne.n	8006484 <memset+0xa>
 8006482:	4770      	bx	lr
 8006484:	f803 1b01 	strb.w	r1, [r3], #1
 8006488:	e7f9      	b.n	800647e <memset+0x4>
	...

0800648c <__libc_init_array>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4d0d      	ldr	r5, [pc, #52]	@ (80064c4 <__libc_init_array+0x38>)
 8006490:	4c0d      	ldr	r4, [pc, #52]	@ (80064c8 <__libc_init_array+0x3c>)
 8006492:	1b64      	subs	r4, r4, r5
 8006494:	10a4      	asrs	r4, r4, #2
 8006496:	2600      	movs	r6, #0
 8006498:	42a6      	cmp	r6, r4
 800649a:	d109      	bne.n	80064b0 <__libc_init_array+0x24>
 800649c:	4d0b      	ldr	r5, [pc, #44]	@ (80064cc <__libc_init_array+0x40>)
 800649e:	4c0c      	ldr	r4, [pc, #48]	@ (80064d0 <__libc_init_array+0x44>)
 80064a0:	f000 f818 	bl	80064d4 <_init>
 80064a4:	1b64      	subs	r4, r4, r5
 80064a6:	10a4      	asrs	r4, r4, #2
 80064a8:	2600      	movs	r6, #0
 80064aa:	42a6      	cmp	r6, r4
 80064ac:	d105      	bne.n	80064ba <__libc_init_array+0x2e>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b4:	4798      	blx	r3
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7ee      	b.n	8006498 <__libc_init_array+0xc>
 80064ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80064be:	4798      	blx	r3
 80064c0:	3601      	adds	r6, #1
 80064c2:	e7f2      	b.n	80064aa <__libc_init_array+0x1e>
 80064c4:	080064fc 	.word	0x080064fc
 80064c8:	080064fc 	.word	0x080064fc
 80064cc:	080064fc 	.word	0x080064fc
 80064d0:	08006500 	.word	0x08006500

080064d4 <_init>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	bf00      	nop
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr

080064e0 <_fini>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	bf00      	nop
 80064e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e6:	bc08      	pop	{r3}
 80064e8:	469e      	mov	lr, r3
 80064ea:	4770      	bx	lr
