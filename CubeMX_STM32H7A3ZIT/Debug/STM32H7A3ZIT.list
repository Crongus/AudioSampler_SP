
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e684  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800e934  0800e934  0000f934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f0cc  0800f0cc  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f0d4  0800f0d4  000100d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f0d8  0800f0d8  000100d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800f0dc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000023d0  24000160  0800f23c  00011160  2**2
                  ALLOC
  8 ._user_heap_stack 00001200  24002530  0800f23c  00011530  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011160  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002991a  00000000  00000000  0001118e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005ec5  00000000  00000000  0003aaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fc0  00000000  00000000  00040970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000182d  00000000  00000000  00042930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003834e  00000000  00000000  0004415d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f588  00000000  00000000  0007c4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00148330  00000000  00000000  000aba33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f3d63  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d38  00000000  00000000  001f3da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001fcae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e91c 	.word	0x0800e91c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800e91c 	.word	0x0800e91c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <flashBoot>:
#include "sdram_init.h"

FMC_SDRAM_CommandTypeDef command;


void flashBoot(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	*(uint8_t *) (FLASH_COMMON_BANK_ADDR + FLASH_COMMAND_OFFSET) = 0xFF;
 8000394:	f04f 4301 	mov.w	r3, #2164260864	@ 0x81000000
 8000398:	22ff      	movs	r2, #255	@ 0xff
 800039a:	701a      	strb	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
	...

080003a8 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	@ 0x40
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80003ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003bc:	f107 0320 	add.w	r3, r7, #32
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003dc:	4b48      	ldr	r3, [pc, #288]	@ (8000500 <MX_FMC_Init+0x158>)
 80003de:	4a49      	ldr	r2, [pc, #292]	@ (8000504 <MX_FMC_Init+0x15c>)
 80003e0:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003e2:	4b47      	ldr	r3, [pc, #284]	@ (8000500 <MX_FMC_Init+0x158>)
 80003e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003ea:	4b45      	ldr	r3, [pc, #276]	@ (8000500 <MX_FMC_Init+0x158>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003f0:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 80003f6:	4b42      	ldr	r3, [pc, #264]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f8:	2240      	movs	r2, #64	@ 0x40
 80003fa:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003fc:	4b40      	ldr	r3, [pc, #256]	@ (8000500 <MX_FMC_Init+0x158>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000402:	4b3f      	ldr	r3, [pc, #252]	@ (8000500 <MX_FMC_Init+0x158>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000408:	4b3d      	ldr	r3, [pc, #244]	@ (8000500 <MX_FMC_Init+0x158>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 800040e:	4b3c      	ldr	r3, [pc, #240]	@ (8000500 <MX_FMC_Init+0x158>)
 8000410:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 8000416:	4b3a      	ldr	r3, [pc, #232]	@ (8000500 <MX_FMC_Init+0x158>)
 8000418:	2240      	movs	r2, #64	@ 0x40
 800041a:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 800041c:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <MX_FMC_Init+0x158>)
 800041e:	2240      	movs	r2, #64	@ 0x40
 8000420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 8000422:	4b37      	ldr	r3, [pc, #220]	@ (8000500 <MX_FMC_Init+0x158>)
 8000424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 1;
 800042a:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <MX_FMC_Init+0x158>)
 800042c:	2201      	movs	r2, #1
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000430:	4b33      	ldr	r3, [pc, #204]	@ (8000500 <MX_FMC_Init+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8000436:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_FMC_Init+0x158>)
 8000438:	2201      	movs	r2, #1
 800043a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 8000446:	23fc      	movs	r3, #252	@ 0xfc
 8000448:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 800044a:	23fc      	movs	r3, #252	@ 0xfc
 800044c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800044e:	23fc      	movs	r3, #252	@ 0xfc
 8000450:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 8000452:	23fc      	movs	r3, #252	@ 0xfc
 8000454:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 8000456:	23fc      	movs	r3, #252	@ 0xfc
 8000458:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 800045a:	23fc      	movs	r3, #252	@ 0xfc
 800045c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800045e:	f107 0220 	add.w	r2, r7, #32
 8000462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000466:	4619      	mov	r1, r3
 8000468:	4825      	ldr	r0, [pc, #148]	@ (8000500 <MX_FMC_Init+0x158>)
 800046a:	f003 f9c7 	bl	80037fc <HAL_NAND_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 8000474:	f000 fff4 	bl	8001460 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000478:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <MX_FMC_Init+0x160>)
 800047a:	4a24      	ldr	r2, [pc, #144]	@ (800050c <MX_FMC_Init+0x164>)
 800047c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <MX_FMC_Init+0x160>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000484:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <MX_FMC_Init+0x160>)
 8000486:	2201      	movs	r2, #1
 8000488:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800048a:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <MX_FMC_Init+0x160>)
 800048c:	2204      	movs	r2, #4
 800048e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000490:	4b1d      	ldr	r3, [pc, #116]	@ (8000508 <MX_FMC_Init+0x160>)
 8000492:	2210      	movs	r2, #16
 8000494:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MX_FMC_Init+0x160>)
 8000498:	2240      	movs	r2, #64	@ 0x40
 800049a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_FMC_Init+0x160>)
 800049e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80004a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_FMC_Init+0x160>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80004b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80004b2:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_FMC_Init+0x160>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004c2:	2309      	movs	r3, #9
 80004c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004c6:	2306      	movs	r3, #6
 80004c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004ca:	2309      	movs	r3, #9
 80004cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004ce:	2303      	movs	r3, #3
 80004d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004d2:	2303      	movs	r3, #3
 80004d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	480a      	ldr	r0, [pc, #40]	@ (8000508 <MX_FMC_Init+0x160>)
 80004e0:	f008 f872 	bl	80085c8 <HAL_SDRAM_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80004ea:	f000 ffb9 	bl	8001460 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80004ee:	4908      	ldr	r1, [pc, #32]	@ (8000510 <MX_FMC_Init+0x168>)
 80004f0:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_FMC_Init+0x160>)
 80004f2:	f000 ffbb 	bl	800146c <SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	@ 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2400018c 	.word	0x2400018c
 8000504:	52004080 	.word	0x52004080
 8000508:	240001cc 	.word	0x240001cc
 800050c:	52004140 	.word	0x52004140
 8000510:	2400017c 	.word	0x2400017c

08000514 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0b8      	sub	sp, #224	@ 0xe0
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800052a:	4b5c      	ldr	r3, [pc, #368]	@ (800069c <HAL_FMC_MspInit+0x188>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 80af 	bne.w	8000692 <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 8000534:	4b59      	ldr	r3, [pc, #356]	@ (800069c <HAL_FMC_MspInit+0x188>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	22c0      	movs	r2, #192	@ 0xc0
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f00d f9e7 	bl	800d916 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800054c:	f04f 0300 	mov.w	r3, #0
 8000550:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_CLKP;
 8000554:	2303      	movs	r3, #3
 8000556:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4618      	mov	r0, r3
 800055e:	f005 fc29 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000568:	f000 ff7a 	bl	8001460 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800056c:	4b4c      	ldr	r3, [pc, #304]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800056e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000572:	4a4b      	ldr	r2, [pc, #300]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 8000574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000578:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800057c:	4b48      	ldr	r3, [pc, #288]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800057e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800058a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800058e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a4:	230c      	movs	r3, #12
 80005a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005ae:	4619      	mov	r1, r3
 80005b0:	483c      	ldr	r0, [pc, #240]	@ (80006a4 <HAL_FMC_MspInit+0x190>)
 80005b2:	f001 ff39 	bl	8002428 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80005b6:	230d      	movs	r3, #13
 80005b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005ce:	230c      	movs	r3, #12
 80005d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005d8:	4619      	mov	r1, r3
 80005da:	4833      	ldr	r0, [pc, #204]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 80005dc:	f001 ff24 	bl	8002428 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005fa:	230c      	movs	r3, #12
 80005fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000600:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000604:	4619      	mov	r1, r3
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <HAL_FMC_MspInit+0x198>)
 8000608:	f001 ff0e 	bl	8002428 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800060c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000626:	230c      	movs	r3, #12
 8000628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000630:	4619      	mov	r1, r3
 8000632:	481f      	ldr	r0, [pc, #124]	@ (80006b0 <HAL_FMC_MspInit+0x19c>)
 8000634:	f001 fef8 	bl	8002428 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000638:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 800063c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000652:	230c      	movs	r3, #12
 8000654:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000658:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800065c:	4619      	mov	r1, r3
 800065e:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <HAL_FMC_MspInit+0x1a0>)
 8000660:	f001 fee2 	bl	8002428 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800067e:	2309      	movs	r3, #9
 8000680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000688:	4619      	mov	r1, r3
 800068a:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 800068c:	f001 fecc 	bl	8002428 <HAL_GPIO_Init>
 8000690:	e000      	b.n	8000694 <HAL_FMC_MspInit+0x180>
    return;
 8000692:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000694:	37e0      	adds	r7, #224	@ 0xe0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000200 	.word	0x24000200
 80006a0:	58024400 	.word	0x58024400
 80006a4:	58021400 	.word	0x58021400
 80006a8:	58020800 	.word	0x58020800
 80006ac:	58021800 	.word	0x58021800
 80006b0:	58021000 	.word	0x58021000
 80006b4:	58020c00 	.word	0x58020c00

080006b8 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80006c0:	f7ff ff28 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006d4:	f7ff ff1e 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	4b67      	ldr	r3, [pc, #412]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006fc:	4a65      	ldr	r2, [pc, #404]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000706:	4b63      	ldr	r3, [pc, #396]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000714:	4b5f      	ldr	r3, [pc, #380]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800071a:	4a5e      	ldr	r2, [pc, #376]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000724:	4b5b      	ldr	r3, [pc, #364]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b58      	ldr	r3, [pc, #352]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000738:	4a56      	ldr	r2, [pc, #344]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000742:	4b54      	ldr	r3, [pc, #336]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000748:	f003 0320 	and.w	r3, r3, #32
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b50      	ldr	r3, [pc, #320]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000756:	4a4f      	ldr	r2, [pc, #316]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000760:	4b4c      	ldr	r3, [pc, #304]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	4b49      	ldr	r3, [pc, #292]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000774:	4a47      	ldr	r2, [pc, #284]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800077a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800077e:	4b45      	ldr	r3, [pc, #276]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000780:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b41      	ldr	r3, [pc, #260]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000792:	4a40      	ldr	r2, [pc, #256]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800079c:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 800079e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80007ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b0:	4a38      	ldr	r2, [pc, #224]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ba:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80007bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2150      	movs	r1, #80	@ 0x50
 80007cc:	4832      	ldr	r0, [pc, #200]	@ (8000898 <MX_GPIO_Init+0x1b8>)
 80007ce:	f001 fff3 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d8:	4830      	ldr	r0, [pc, #192]	@ (800089c <MX_GPIO_Init+0x1bc>)
 80007da:	f001 ffed 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	21c0      	movs	r1, #192	@ 0xc0
 80007e2:	482f      	ldr	r0, [pc, #188]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 80007e4:	f001 ffe8 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007e8:	232c      	movs	r3, #44	@ 0x2c
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4827      	ldr	r0, [pc, #156]	@ (8000898 <MX_GPIO_Init+0x1b8>)
 80007fc:	f001 fe14 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000800:	2350      	movs	r3, #80	@ 0x50
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4820      	ldr	r0, [pc, #128]	@ (8000898 <MX_GPIO_Init+0x1b8>)
 8000818:	f001 fe06 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4819      	ldr	r0, [pc, #100]	@ (800089c <MX_GPIO_Init+0x1bc>)
 8000836:	f001 fdf7 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800083a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4813      	ldr	r0, [pc, #76]	@ (800089c <MX_GPIO_Init+0x1bc>)
 8000850:	f001 fdea 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000854:	2340      	movs	r3, #64	@ 0x40
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 800086c:	f001 fddc 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000888:	f001 fdce 	bl	8002428 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	@ 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58024400 	.word	0x58024400
 8000898:	58021000 	.word	0x58021000
 800089c:	58020800 	.word	0x58020800
 80008a0:	58021400 	.word	0x58021400

080008a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	@ (800091c <MX_I2C1_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <MX_I2C1_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b4:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008bc:	2201      	movs	r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008de:	480e      	ldr	r0, [pc, #56]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008e0:	f001 ff9e 	bl	8002820 <HAL_I2C_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ea:	f000 fdb9 	bl	8001460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008f2:	f002 fcb9 	bl	8003268 <HAL_I2CEx_ConfigAnalogFilter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f000 fdb0 	bl	8001460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_I2C1_Init+0x74>)
 8000904:	f002 fcfb 	bl	80032fe <HAL_I2CEx_ConfigDigitalFilter>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 fda7 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	24000204 	.word	0x24000204
 800091c:	40005400 	.word	0x40005400
 8000920:	20b0ccff 	.word	0x20b0ccff

08000924 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_I2C2_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <MX_I2C2_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	@ (80009a0 <MX_I2C2_Init+0x7c>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_I2C2_Init+0x74>)
 800093c:	2201      	movs	r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000960:	f001 ff5e 	bl	8002820 <HAL_I2C_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800096a:	f000 fd79 	bl	8001460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000972:	f002 fc79 	bl	8003268 <HAL_I2CEx_ConfigAnalogFilter>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 fd70 	bl	8001460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000984:	f002 fcbb 	bl	80032fe <HAL_I2CEx_ConfigDigitalFilter>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 fd67 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	24000258 	.word	0x24000258
 800099c:	40005800 	.word	0x40005800
 80009a0:	20b0ccff 	.word	0x20b0ccff

080009a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0bc      	sub	sp, #240	@ 0xf0
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	22c0      	movs	r2, #192	@ 0xc0
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00c ffa6 	bl	800d916 <memset>
  if(i2cHandle->Instance==I2C1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a4d      	ldr	r2, [pc, #308]	@ (8000b04 <HAL_I2C_MspInit+0x160>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d146      	bne.n	8000a62 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009d4:	f04f 0208 	mov.w	r2, #8
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 f9e2 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009f6:	f000 fd33 	bl	8001460 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 80009fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a00:	4a41      	ldr	r2, [pc, #260]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a18:	23c0      	movs	r3, #192	@ 0xc0
 8000a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a30:	2304      	movs	r3, #4
 8000a32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4833      	ldr	r0, [pc, #204]	@ (8000b0c <HAL_I2C_MspInit+0x168>)
 8000a3e:	f001 fcf3 	bl	8002428 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a42:	4b31      	ldr	r3, [pc, #196]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a48:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a4e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a54:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a60:	e04b      	b.n	8000afa <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a2a      	ldr	r2, [pc, #168]	@ (8000b10 <HAL_I2C_MspInit+0x16c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d146      	bne.n	8000afa <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a6c:	f04f 0208 	mov.w	r2, #8
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 f996 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a8e:	f000 fce7 	bl	8001460 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a98:	4a1b      	ldr	r2, [pc, #108]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000aa2:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ab0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab8:	2312      	movs	r3, #18
 8000aba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aca:	2304      	movs	r3, #4
 8000acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <HAL_I2C_MspInit+0x168>)
 8000ad8:	f001 fca6 	bl	8002428 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000ade:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000ae4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ae8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000aee:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
}
 8000afa:	bf00      	nop
 8000afc:	37f0      	adds	r7, #240	@ 0xf0
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40005400 	.word	0x40005400
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	40005800 	.word	0x40005800

08000b14 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b1a:	4a17      	ldr	r2, [pc, #92]	@ (8000b78 <MX_I2S1_Init+0x64>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b20:	2206      	movs	r2, #6
 8000b22:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b30:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b38:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b3c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b40:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b62:	f002 fc19 	bl	8003398 <HAL_I2S_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f000 fc78 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	240002ac 	.word	0x240002ac
 8000b78:	40013000 	.word	0x40013000

08000b7c <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b82:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <MX_I2S2_Init+0x64>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b88:	2204      	movs	r2, #4
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000ba2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000ba6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bc8:	f002 fbe6 	bl	8003398 <HAL_I2S_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000bd2:	f000 fc45 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000300 	.word	0x24000300
 8000be0:	40003800 	.word	0x40003800

08000be4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0be      	sub	sp, #248	@ 0xf8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	22c0      	movs	r2, #192	@ 0xc0
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00c fe86 	bl	800d916 <memset>
  if(i2sHandle->Instance==SPI1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a75      	ldr	r2, [pc, #468]	@ (8000de4 <HAL_I2S_MspInit+0x200>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d173      	bne.n	8000cfc <HAL_I2S_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f005 f8c2 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000c36:	f000 fc13 	bl	8001460 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c40:	4a69      	ldr	r2, [pc, #420]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c46:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c4a:	4b67      	ldr	r3, [pc, #412]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b63      	ldr	r3, [pc, #396]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c5e:	4a62      	ldr	r2, [pc, #392]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c68:	4b5f      	ldr	r3, [pc, #380]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	4b5c      	ldr	r3, [pc, #368]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c86:	4b58      	ldr	r3, [pc, #352]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c94:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	484c      	ldr	r0, [pc, #304]	@ (8000dec <HAL_I2S_MspInit+0x208>)
 8000cbc:	f001 fbb4 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4842      	ldr	r0, [pc, #264]	@ (8000df0 <HAL_I2S_MspInit+0x20c>)
 8000ce6:	f001 fb9f 	bl	8002428 <HAL_GPIO_Init>

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2023      	movs	r0, #35	@ 0x23
 8000cf0:	f001 faed 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cf4:	2023      	movs	r0, #35	@ 0x23
 8000cf6:	f001 fb04 	bl	8002302 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cfa:	e06f      	b.n	8000ddc <HAL_I2S_MspInit+0x1f8>
  else if(i2sHandle->Instance==SPI2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a3c      	ldr	r2, [pc, #240]	@ (8000df4 <HAL_I2S_MspInit+0x210>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d16a      	bne.n	8000ddc <HAL_I2S_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000d06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 f849 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2S_MspInit+0x148>
      Error_Handler();
 8000d28:	f000 fb9a 	bl	8001460 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d32:	4a2d      	ldr	r2, [pc, #180]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d38:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d50:	4a25      	ldr	r2, [pc, #148]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d5a:	4b23      	ldr	r3, [pc, #140]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d86:	2342      	movs	r3, #66	@ 0x42
 8000d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <HAL_I2S_MspInit+0x20c>)
 8000dac:	f001 fb3c 	bl	8002428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000db0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000db4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <HAL_I2S_MspInit+0x214>)
 8000dd8:	f001 fb26 	bl	8002428 <HAL_GPIO_Init>
}
 8000ddc:	bf00      	nop
 8000dde:	37f8      	adds	r7, #248	@ 0xf8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013000 	.word	0x40013000
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58020000 	.word	0x58020000
 8000df0:	58020800 	.word	0x58020800
 8000df4:	40003800 	.word	0x40003800
 8000df8:	58020400 	.word	0x58020400

08000dfc <GetKey>:
 * behavior.
 * Note also that this function currently leaves row pins as it was using them when it
 * returns control. A desirable change might be to have it re-drive them LO so that the
 * press detection algorithm does not have to handle it.
 */
int GetKey() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	uint16_t ColNum, RowNum, RowFudge;
	//Note that we expect row pins already LO when this function is passed into.
	for (ColNum = 0; ColNum < 5; ColNum++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	80fb      	strh	r3, [r7, #6]
 8000e06:	e009      	b.n	8000e1c <GetKey+0x20>
		if (!ReadOneColPin(ColNum)) break;
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f842 	bl	8000e94 <ReadOneColPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <GetKey+0x28>
	for (ColNum = 0; ColNum < 5; ColNum++) {
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d9f2      	bls.n	8000e08 <GetKey+0xc>
 8000e22:	e000      	b.n	8000e26 <GetKey+0x2a>
		if (!ReadOneColPin(ColNum)) break;
 8000e24:	bf00      	nop
	} //Find the column that's currently LO and stop
	if (ColNum > 4) return -1; //If the col finding loop doesn't break out there was a problem
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d902      	bls.n	8000e32 <GetKey+0x36>
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e30:	e02b      	b.n	8000e8a <GetKey+0x8e>
	for (RowNum = 0; RowNum < 4; RowNum++) {
 8000e32:	2300      	movs	r3, #0
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	e014      	b.n	8000e62 <GetKey+0x66>
		DriveAllRowPins(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 f8c9 	bl	8000fd0 <DriveAllRowPins>
		DriveOneRowPin(RowNum, 0);
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f866 	bl	8000f14 <DriveOneRowPin>
		//Get the rows HI then go through driving LO to see which one hits.
		HAL_Delay(3);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f001 f941 	bl	80020d0 <HAL_Delay>
		//Our STM32H7 is running at 280 MHz. 3 ms delay seems to be adequate.
		//This should be adjusted up if performance isn't satisfactory, though
		if (!ReadOneColPin(ColNum)) break;
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f81f 	bl	8000e94 <ReadOneColPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <GetKey+0x6e>
	for (RowNum = 0; RowNum < 4; RowNum++) {
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	88bb      	ldrh	r3, [r7, #4]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d9e7      	bls.n	8000e38 <GetKey+0x3c>
 8000e68:	e000      	b.n	8000e6c <GetKey+0x70>
		if (!ReadOneColPin(ColNum)) break;
 8000e6a:	bf00      	nop
		//Find the row that gets the identified column LO when driven and stop
	}
	if (RowNum > 3) return -1; //Row finding loop didn't find anything
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d902      	bls.n	8000e78 <GetKey+0x7c>
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e008      	b.n	8000e8a <GetKey+0x8e>
	RowFudge = RowNum * 5;
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	807b      	strh	r3, [r7, #2]
	return ColNum + 1 + RowFudge;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	887b      	ldrh	r3, [r7, #2]
 8000e88:	4413      	add	r3, r2
	//How this logic works:
	//ColNum = 0, RowNum = 1 is key#6. 0 + 1 + (1 * 5) = 6
	//ColNum = 3, RowNum = 2 is key#14. 3 + 1 + (2 * 5) = 14
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <ReadOneColPin>:

int ReadOneColPin(int col) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	//Mind that the col variable is zero-indexed
	//GPIOBANK and GPIOPIN constants are one-indexed
	switch (col) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d82c      	bhi.n	8000efc <ReadOneColPin+0x68>
 8000ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea8 <ReadOneColPin+0x14>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ebd 	.word	0x08000ebd
 8000eac:	08000ecb 	.word	0x08000ecb
 8000eb0:	08000ed9 	.word	0x08000ed9
 8000eb4:	08000ee5 	.word	0x08000ee5
 8000eb8:	08000ef1 	.word	0x08000ef1
		case 0:
			return(HAL_GPIO_ReadPin(C1GPIOBANK, C1GPIOPIN));
 8000ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ec0:	4812      	ldr	r0, [pc, #72]	@ (8000f0c <ReadOneColPin+0x78>)
 8000ec2:	f001 fc61 	bl	8002788 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e01b      	b.n	8000f02 <ReadOneColPin+0x6e>
			break;
		case 1:
			return(HAL_GPIO_ReadPin(C2GPIOBANK, C2GPIOPIN));
 8000eca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ece:	480f      	ldr	r0, [pc, #60]	@ (8000f0c <ReadOneColPin+0x78>)
 8000ed0:	f001 fc5a 	bl	8002788 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	e014      	b.n	8000f02 <ReadOneColPin+0x6e>
			break;
		case 2:
			return(HAL_GPIO_ReadPin(C3GPIOBANK, C3GPIOPIN));
 8000ed8:	2120      	movs	r1, #32
 8000eda:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <ReadOneColPin+0x7c>)
 8000edc:	f001 fc54 	bl	8002788 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	e00e      	b.n	8000f02 <ReadOneColPin+0x6e>
			break;
		case 3:
			return(HAL_GPIO_ReadPin(C4GPIOBANK, C4GPIOPIN));
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	480a      	ldr	r0, [pc, #40]	@ (8000f10 <ReadOneColPin+0x7c>)
 8000ee8:	f001 fc4e 	bl	8002788 <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	e008      	b.n	8000f02 <ReadOneColPin+0x6e>
			break;
		case 4:
			return(HAL_GPIO_ReadPin(C5GPIOBANK, C5GPIOPIN));
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <ReadOneColPin+0x7c>)
 8000ef4:	f001 fc48 	bl	8002788 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	e002      	b.n	8000f02 <ReadOneColPin+0x6e>
			break;
		default:
			break;
 8000efc:	bf00      	nop
	}
	return -1; //This will only happen if the passed col was out of bounds
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	58020800 	.word	0x58020800
 8000f10:	58021000 	.word	0x58021000

08000f14 <DriveOneRowPin>:

void DriveOneRowPin(int row, int state) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	//Be aware that "row" as passed is zero-indexed
	//GPIOBANK and GPIOPIN constants are one-indexed
	switch (row) {
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d849      	bhi.n	8000fb8 <DriveOneRowPin+0xa4>
 8000f24:	a201      	add	r2, pc, #4	@ (adr r2, 8000f2c <DriveOneRowPin+0x18>)
 8000f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2a:	bf00      	nop
 8000f2c:	08000f3d 	.word	0x08000f3d
 8000f30:	08000f5b 	.word	0x08000f5b
 8000f34:	08000f79 	.word	0x08000f79
 8000f38:	08000f9b 	.word	0x08000f9b
		case 0:
			if (state) {
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <DriveOneRowPin+0x3a>
				HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2110      	movs	r1, #16
 8000f46:	481f      	ldr	r0, [pc, #124]	@ (8000fc4 <DriveOneRowPin+0xb0>)
 8000f48:	f001 fc36 	bl	80027b8 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
			}
			break;
 8000f4c:	e035      	b.n	8000fba <DriveOneRowPin+0xa6>
				HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	481c      	ldr	r0, [pc, #112]	@ (8000fc4 <DriveOneRowPin+0xb0>)
 8000f54:	f001 fc30 	bl	80027b8 <HAL_GPIO_WritePin>
			break;
 8000f58:	e02f      	b.n	8000fba <DriveOneRowPin+0xa6>
		case 1:
			if (state) {
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <DriveOneRowPin+0x58>
				HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2140      	movs	r1, #64	@ 0x40
 8000f64:	4817      	ldr	r0, [pc, #92]	@ (8000fc4 <DriveOneRowPin+0xb0>)
 8000f66:	f001 fc27 	bl	80027b8 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
			}
			break;
 8000f6a:	e026      	b.n	8000fba <DriveOneRowPin+0xa6>
				HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	@ 0x40
 8000f70:	4814      	ldr	r0, [pc, #80]	@ (8000fc4 <DriveOneRowPin+0xb0>)
 8000f72:	f001 fc21 	bl	80027b8 <HAL_GPIO_WritePin>
			break;
 8000f76:	e020      	b.n	8000fba <DriveOneRowPin+0xa6>
		case 2:
			if (state) {
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <DriveOneRowPin+0x78>
				HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f84:	4810      	ldr	r0, [pc, #64]	@ (8000fc8 <DriveOneRowPin+0xb4>)
 8000f86:	f001 fc17 	bl	80027b8 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
			}
			break;
 8000f8a:	e016      	b.n	8000fba <DriveOneRowPin+0xa6>
				HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <DriveOneRowPin+0xb4>)
 8000f94:	f001 fc10 	bl	80027b8 <HAL_GPIO_WritePin>
			break;
 8000f98:	e00f      	b.n	8000fba <DriveOneRowPin+0xa6>
		case 3:
			if (state) {
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <DriveOneRowPin+0x98>
				HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2180      	movs	r1, #128	@ 0x80
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <DriveOneRowPin+0xb8>)
 8000fa6:	f001 fc07 	bl	80027b8 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
			}
			break;
 8000faa:	e006      	b.n	8000fba <DriveOneRowPin+0xa6>
				HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2180      	movs	r1, #128	@ 0x80
 8000fb0:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <DriveOneRowPin+0xb8>)
 8000fb2:	f001 fc01 	bl	80027b8 <HAL_GPIO_WritePin>
			break;
 8000fb6:	e000      	b.n	8000fba <DriveOneRowPin+0xa6>
		default:
			break; //Row out of bounds -> function returns without doing anything
 8000fb8:	bf00      	nop
	}
	return;
 8000fba:	bf00      	nop
}
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	58021000 	.word	0x58021000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58021400 	.word	0x58021400

08000fd0 <DriveAllRowPins>:

void DriveAllRowPins(int state) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if (state) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d015      	beq.n	800100a <DriveAllRowPins+0x3a>
		HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	4816      	ldr	r0, [pc, #88]	@ (800103c <DriveAllRowPins+0x6c>)
 8000fe4:	f001 fbe8 	bl	80027b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2140      	movs	r1, #64	@ 0x40
 8000fec:	4813      	ldr	r0, [pc, #76]	@ (800103c <DriveAllRowPins+0x6c>)
 8000fee:	f001 fbe3 	bl	80027b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff8:	4811      	ldr	r0, [pc, #68]	@ (8001040 <DriveAllRowPins+0x70>)
 8000ffa:	f001 fbdd 	bl	80027b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	4810      	ldr	r0, [pc, #64]	@ (8001044 <DriveAllRowPins+0x74>)
 8001004:	f001 fbd8 	bl	80027b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
	}
	return;
 8001008:	e015      	b.n	8001036 <DriveAllRowPins+0x66>
		HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2110      	movs	r1, #16
 800100e:	480b      	ldr	r0, [pc, #44]	@ (800103c <DriveAllRowPins+0x6c>)
 8001010:	f001 fbd2 	bl	80027b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2140      	movs	r1, #64	@ 0x40
 8001018:	4808      	ldr	r0, [pc, #32]	@ (800103c <DriveAllRowPins+0x6c>)
 800101a:	f001 fbcd 	bl	80027b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001024:	4806      	ldr	r0, [pc, #24]	@ (8001040 <DriveAllRowPins+0x70>)
 8001026:	f001 fbc7 	bl	80027b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <DriveAllRowPins+0x74>)
 8001030:	f001 fbc2 	bl	80027b8 <HAL_GPIO_WritePin>
	return;
 8001034:	bf00      	nop
}
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58021000 	.word	0x58021000
 8001040:	58020800 	.word	0x58020800
 8001044:	58021400 	.word	0x58021400

08001048 <LCD_Init>:
#include <stdio.h> //sprintf
#include <stdlib.h> //abs

#include "main.h"

void LCD_Init() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af02      	add	r7, sp, #8
	ssd1306_Init();
 800104e:	f000 fb55 	bl	80016fc <ssd1306_Init>
	ssd1306_Fill(White);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 fbbc 	bl	80017d0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 2);
 8001058:	2102      	movs	r1, #2
 800105a:	2002      	movs	r0, #2
 800105c:	f000 fd02 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("Clip", Font_6x8, Black);
 8001060:	4b31      	ldr	r3, [pc, #196]	@ (8001128 <LCD_Init+0xe0>)
 8001062:	2200      	movs	r2, #0
 8001064:	9200      	str	r2, [sp, #0]
 8001066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001068:	4830      	ldr	r0, [pc, #192]	@ (800112c <LCD_Init+0xe4>)
 800106a:	f000 fcd5 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_SetCursor(52, 2);
 800106e:	2102      	movs	r1, #2
 8001070:	2034      	movs	r0, #52	@ 0x34
 8001072:	f000 fcf7 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("||||||||||||", Font_6x8, Black);
 8001076:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <LCD_Init+0xe0>)
 8001078:	2200      	movs	r2, #0
 800107a:	9200      	str	r2, [sp, #0]
 800107c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800107e:	482c      	ldr	r0, [pc, #176]	@ (8001130 <LCD_Init+0xe8>)
 8001080:	f000 fcca 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 12);
 8001084:	210c      	movs	r1, #12
 8001086:	2002      	movs	r0, #2
 8001088:	f000 fcec 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("Stored", Font_6x8, Black);
 800108c:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <LCD_Init+0xe0>)
 800108e:	2200      	movs	r2, #0
 8001090:	9200      	str	r2, [sp, #0]
 8001092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001094:	4827      	ldr	r0, [pc, #156]	@ (8001134 <LCD_Init+0xec>)
 8001096:	f000 fcbf 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 22);
 800109a:	2116      	movs	r1, #22
 800109c:	2002      	movs	r0, #2
 800109e:	f000 fce1 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("Active", Font_6x8, Black);
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <LCD_Init+0xe0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010aa:	4823      	ldr	r0, [pc, #140]	@ (8001138 <LCD_Init+0xf0>)
 80010ac:	f000 fcb4 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 32);
 80010b0:	2120      	movs	r1, #32
 80010b2:	2002      	movs	r0, #2
 80010b4:	f000 fcd6 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("Pitch 0%", Font_6x8, Black);
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <LCD_Init+0xe0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	9200      	str	r2, [sp, #0]
 80010be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c0:	481e      	ldr	r0, [pc, #120]	@ (800113c <LCD_Init+0xf4>)
 80010c2:	f000 fca9 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 42);
 80010c6:	212a      	movs	r1, #42	@ 0x2a
 80010c8:	2002      	movs	r0, #2
 80010ca:	f000 fccb 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("Mode--------", Font_6x8, Black);
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <LCD_Init+0xe0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d6:	481a      	ldr	r0, [pc, #104]	@ (8001140 <LCD_Init+0xf8>)
 80010d8:	f000 fc9e 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_SetCursor(82, 42);
 80010dc:	212a      	movs	r1, #42	@ 0x2a
 80010de:	2052      	movs	r0, #82	@ 0x52
 80010e0:	f000 fcc0 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("REC", Font_6x8, Black);
 80010e4:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <LCD_Init+0xe0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	9200      	str	r2, [sp, #0]
 80010ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ec:	4815      	ldr	r0, [pc, #84]	@ (8001144 <LCD_Init+0xfc>)
 80010ee:	f000 fc93 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 52);
 80010f2:	2134      	movs	r1, #52	@ 0x34
 80010f4:	2002      	movs	r0, #2
 80010f6:	f000 fcb5 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("Source------", Font_6x8, Black);
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <LCD_Init+0xe0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001102:	4811      	ldr	r0, [pc, #68]	@ (8001148 <LCD_Init+0x100>)
 8001104:	f000 fc88 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_SetCursor(82, 52);
 8001108:	2134      	movs	r1, #52	@ 0x34
 800110a:	2052      	movs	r0, #82	@ 0x52
 800110c:	f000 fcaa 	bl	8001a64 <ssd1306_SetCursor>
	ssd1306_WriteString("DIGITAL", Font_6x8, Black);
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <LCD_Init+0xe0>)
 8001112:	2200      	movs	r2, #0
 8001114:	9200      	str	r2, [sp, #0]
 8001116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LCD_Init+0x104>)
 800111a:	f000 fc7d 	bl	8001a18 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800111e:	f000 fb6f 	bl	8001800 <ssd1306_UpdateScreen>
	return;
 8001122:	bf00      	nop
}
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800f07c 	.word	0x0800f07c
 800112c:	0800e934 	.word	0x0800e934
 8001130:	0800e93c 	.word	0x0800e93c
 8001134:	0800e94c 	.word	0x0800e94c
 8001138:	0800e954 	.word	0x0800e954
 800113c:	0800e95c 	.word	0x0800e95c
 8001140:	0800e968 	.word	0x0800e968
 8001144:	0800e978 	.word	0x0800e978
 8001148:	0800e97c 	.word	0x0800e97c
 800114c:	0800e98c 	.word	0x0800e98c

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	f5ad 5d8a 	sub.w	sp, sp, #4416	@ 0x1140
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800115a:	f000 f937 	bl	80013cc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f000 ff25 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f89d 	bl	80012a0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001166:	f000 f913 	bl	8001390 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f7ff fab9 	bl	80006e0 <MX_GPIO_Init>
  MX_FMC_Init();
 800116e:	f7ff f91b 	bl	80003a8 <MX_FMC_Init>
  MX_I2S1_Init();
 8001172:	f7ff fccf 	bl	8000b14 <MX_I2S1_Init>
  MX_I2S2_Init();
 8001176:	f7ff fd01 	bl	8000b7c <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 800117a:	f000 f9e3 	bl	8001544 <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 800117e:	f7ff fb91 	bl	80008a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001182:	f7ff fbcf 	bl	8000924 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001186:	f00b fd13 	bl	800cbb0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800118a:	f000 fe71 	bl	8001e70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  flashBoot();
 800118e:	f7ff f8ff 	bl	8000390 <flashBoot>

  NAND_AddressTypedef Address;
  uint8_t txBuf[BUFFER_SIZE];
  uint8_t rxBuf[BUFFER_SIZE];
  int memtest = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	f241 123c 	movw	r2, #4412	@ 0x113c
 8001198:	443a      	add	r2, r7
 800119a:	6013      	str	r3, [r2, #0]
  NAND_IDTypeDef NAND_ID;
  LCD_Init();
 800119c:	f7ff ff54 	bl	8001048 <LCD_Init>
  int Success1 = HAL_I2C_IsDeviceReady(&hi2c2, (0x3c << 1), 2, 25);
 80011a0:	2319      	movs	r3, #25
 80011a2:	2202      	movs	r2, #2
 80011a4:	2178      	movs	r1, #120	@ 0x78
 80011a6:	483b      	ldr	r0, [pc, #236]	@ (8001294 <main+0x144>)
 80011a8:	f001 fcea 	bl	8002b80 <HAL_I2C_IsDeviceReady>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f241 1238 	movw	r2, #4408	@ 0x1138
 80011b2:	443a      	add	r2, r7
 80011b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  int cols[] = {0, 0, 0, 0, 0};
 80011b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011ba:	3bb4      	subs	r3, #180	@ 0xb4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
	  int col, result;
	  uint8_t str[100];
	  int TheFlag = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f241 1244 	movw	r2, #4420	@ 0x1144
 80011ce:	443a      	add	r2, r7
 80011d0:	6013      	str	r3, [r2, #0]
	  for (col = 0; col < 5; col++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e02d      	b.n	8001238 <main+0xe8>
		  DriveAllRowPins(0);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fef7 	bl	8000fd0 <DriveAllRowPins>
		  HAL_Delay(10);
 80011e2:	200a      	movs	r0, #10
 80011e4:	f000 ff74 	bl	80020d0 <HAL_Delay>
		  cols[col] = ReadOneColPin(col);
 80011e8:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	f7ff fe51 	bl	8000e94 <ReadOneColPin>
 80011f2:	4602      	mov	r2, r0
 80011f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011f8:	4619      	mov	r1, r3
 80011fa:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	f843 2cb4 	str.w	r2, [r3, #-180]
		  if (!cols[col]) TheFlag = 1;
 8001208:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800120c:	461a      	mov	r2, r3
 800120e:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d104      	bne.n	800122a <main+0xda>
 8001220:	2301      	movs	r3, #1
 8001222:	f241 1244 	movw	r2, #4420	@ 0x1144
 8001226:	443a      	add	r2, r7
 8001228:	6013      	str	r3, [r2, #0]
	  for (col = 0; col < 5; col++) {
 800122a:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b04      	cmp	r3, #4
 8001240:	ddcc      	ble.n	80011dc <main+0x8c>
	  }
	  if (TheFlag) {
 8001242:	f241 1344 	movw	r3, #4420	@ 0x1144
 8001246:	443b      	add	r3, r7
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0b3      	beq.n	80011b6 <main+0x66>
		  result = GetKey();
 800124e:	f7ff fdd5 	bl	8000dfc <GetKey>
 8001252:	f241 1334 	movw	r3, #4404	@ 0x1134
 8001256:	443b      	add	r3, r7
 8001258:	6018      	str	r0, [r3, #0]
		  sprintf(str, "%d\r\n", result);
 800125a:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <main+0x148>)
 800125c:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 8001260:	f103 0308 	add.w	r3, r3, #8
 8001264:	443b      	add	r3, r7
 8001266:	f241 1234 	movw	r2, #4404	@ 0x1134
 800126a:	443a      	add	r2, r7
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	490b      	ldr	r1, [pc, #44]	@ (800129c <main+0x14c>)
 8001270:	4618      	mov	r0, r3
 8001272:	f00c faed 	bl	800d850 <siprintf>
		  CDC_Transmit_HS(str, sizeof(str));
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <main+0x148>)
 8001278:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 800127c:	f103 0308 	add.w	r3, r3, #8
 8001280:	443b      	add	r3, r7
 8001282:	2164      	movs	r1, #100	@ 0x64
 8001284:	4618      	mov	r0, r3
 8001286:	f00b fd53 	bl	800cd30 <CDC_Transmit_HS>
		  HAL_Delay(60);
 800128a:	203c      	movs	r0, #60	@ 0x3c
 800128c:	f000 ff20 	bl	80020d0 <HAL_Delay>
  while (1) {
 8001290:	e791      	b.n	80011b6 <main+0x66>
 8001292:	bf00      	nop
 8001294:	24000258 	.word	0x24000258
 8001298:	ffffeeb8 	.word	0xffffeeb8
 800129c:	0800e9d8 	.word	0x0800e9d8

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09c      	sub	sp, #112	@ 0x70
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012aa:	224c      	movs	r2, #76	@ 0x4c
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f00c fb31 	bl	800d916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2220      	movs	r2, #32
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00c fb2b 	bl	800d916 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <SystemClock_Config+0xe8>)
 80012c2:	f04f 32ff 	mov.w	r2, #4294967295
 80012c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012ca:	2002      	movs	r0, #2
 80012cc:	f003 fd80 	bl	8004dd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <SystemClock_Config+0xec>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a2c      	ldr	r2, [pc, #176]	@ (800138c <SystemClock_Config+0xec>)
 80012da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <SystemClock_Config+0xec>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012ec:	bf00      	nop
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <SystemClock_Config+0xec>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012fa:	d1f8      	bne.n	80012ee <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80012fc:	2322      	movs	r3, #34	@ 0x22
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001300:	2301      	movs	r3, #1
 8001302:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001304:	2340      	movs	r3, #64	@ 0x40
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001310:	2300      	movs	r3, #0
 8001312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001314:	2304      	movs	r3, #4
 8001316:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001318:	2323      	movs	r3, #35	@ 0x23
 800131a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800131c:	2302      	movs	r3, #2
 800131e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001320:	2302      	movs	r3, #2
 8001322:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001324:	2302      	movs	r3, #2
 8001326:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001328:	230c      	movs	r3, #12
 800132a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800132c:	2300      	movs	r3, #0
 800132e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fd93 	bl	8004e64 <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001344:	f000 f88c 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001348:	233f      	movs	r3, #63	@ 0x3f
 800134a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2303      	movs	r3, #3
 800134e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001358:	2340      	movs	r3, #64	@ 0x40
 800135a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800135c:	2340      	movs	r3, #64	@ 0x40
 800135e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001364:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001366:	2340      	movs	r3, #64	@ 0x40
 8001368:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2106      	movs	r1, #6
 800136e:	4618      	mov	r0, r3
 8001370:	f004 f9aa 	bl	80056c8 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800137a:	f000 f871 	bl	8001460 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3770      	adds	r7, #112	@ 0x70
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	58024400 	.word	0x58024400
 800138c:	58024800 	.word	0x58024800

08001390 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0b0      	sub	sp, #192	@ 0xc0
 8001394:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	22c0      	movs	r2, #192	@ 0xc0
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00c faba 	bl	800d916 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80013a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80013ae:	2300      	movs	r3, #0
 80013b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 fcfd 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 80013c0:	f000 f84e 	bl	8001460 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	37c0      	adds	r7, #192	@ 0xc0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013de:	f000 ffab 	bl	8002338 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013ee:	231f      	movs	r3, #31
 80013f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80013f2:	2387      	movs	r3, #135	@ 0x87
 80013f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80013fa:	2300      	movs	r3, #0
 80013fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80013fe:	2301      	movs	r3, #1
 8001400:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001402:	2301      	movs	r3, #1
 8001404:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800140e:	463b      	mov	r3, r7
 8001410:	4618      	mov	r0, r3
 8001412:	f000 ffc9 	bl	80023a8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001416:	2301      	movs	r3, #1
 8001418:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 800141a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800141e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001420:	2317      	movs	r3, #23
 8001422:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001424:	2300      	movs	r3, #0
 8001426:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001428:	2301      	movs	r3, #1
 800142a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800142c:	2303      	movs	r3, #3
 800142e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001434:	463b      	mov	r3, r7
 8001436:	4618      	mov	r0, r3
 8001438:	f000 ffb6 	bl	80023a8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800143c:	2302      	movs	r3, #2
 800143e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x8000000;
 8001440:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001444:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001446:	231f      	movs	r3, #31
 8001448:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800144a:	463b      	mov	r3, r7
 800144c:	4618      	mov	r0, r3
 800144e:	f000 ffab 	bl	80023a8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001452:	2004      	movs	r0, #4
 8001454:	f000 ff88 	bl	8002368 <HAL_MPU_Enable>

}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <Error_Handler+0x8>

0800146c <SDRAM_Initialization_Sequence>:
 * 6 Min of 2 auto-refresh cycles
 *
 */
#include "sdram_init.h"

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	 __IO uint32_t tmpmrd =0;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
	/* Step 2:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2210      	movs	r2, #16
 8001484:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f007 f8d1 	bl	8008640 <HAL_SDRAM_SendCommand>

	  /* Step 3: Insert 200 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 fe16 	bl	80020d0 <HAL_Delay>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2210      	movs	r2, #16
 80014ae:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80014bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c0:	6839      	ldr	r1, [r7, #0]
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f007 f8bc 	bl	8008640 <HAL_SDRAM_SendCommand>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2202      	movs	r2, #2
 80014cc:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2210      	movs	r2, #16
 80014d2:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2201      	movs	r2, #1
 80014d8:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80014e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f007 f8aa 	bl	8008640 <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80014ec:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80014f0:	60fb      	str	r3, [r7, #12]
	                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_3           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2204      	movs	r2, #4
 80014f6:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2210      	movs	r2, #16
 80014fc:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800150a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150e:	6839      	ldr	r1, [r7, #0]
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f007 f895 	bl	8008640 <HAL_SDRAM_SendCommand>

	  /* Step 6 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2203      	movs	r2, #3
 800151a:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2210      	movs	r2, #16
 8001520:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 2;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2202      	movs	r2, #2
 8001526:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]

	  /* Send the command twice*/
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800152e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f007 f883 	bl	8008640 <HAL_SDRAM_SendCommand>
	  //HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 800154a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800154e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 8001588:	2200      	movs	r2, #0
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 8001596:	2200      	movs	r2, #0
 8001598:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_SPDIFRX_Init+0x6c>)
 800159e:	f007 f885 	bl	80086ac <HAL_SPDIFRX_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 80015a8:	f7ff ff5a 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	24000354 	.word	0x24000354

080015b4 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0ba      	sub	sp, #232	@ 0xe8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	22c0      	movs	r2, #192	@ 0xc0
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00c f99e 	bl	800d916 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80015e2:	d149      	bne.n	8001678 <HAL_SPDIFRX_MspInit+0xc4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80015e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fbdb 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8001604:	f7ff ff2c 	bl	8001460 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <HAL_SPDIFRX_MspInit+0xcc>)
 800160a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800160e:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <HAL_SPDIFRX_MspInit+0xcc>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001614:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_SPDIFRX_MspInit+0xcc>)
 800161a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800161e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <HAL_SPDIFRX_MspInit+0xcc>)
 8001628:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800162c:	4a14      	ldr	r2, [pc, #80]	@ (8001680 <HAL_SPDIFRX_MspInit+0xcc>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001636:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_SPDIFRX_MspInit+0xcc>)
 8001638:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001660:	4619      	mov	r1, r3
 8001662:	4808      	ldr	r0, [pc, #32]	@ (8001684 <HAL_SPDIFRX_MspInit+0xd0>)
 8001664:	f000 fee0 	bl	8002428 <HAL_GPIO_Init>

    /* SPDIFRX interrupt Init */
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2061      	movs	r0, #97	@ 0x61
 800166e:	f000 fe2e 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 8001672:	2061      	movs	r0, #97	@ 0x61
 8001674:	f000 fe45 	bl	8002302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001678:	bf00      	nop
 800167a:	37e8      	adds	r7, #232	@ 0xe8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	58024400 	.word	0x58024400
 8001684:	58020c00 	.word	0x58020c00

08001688 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af04      	add	r7, sp, #16
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	9302      	str	r3, [sp, #8]
 80016a8:	2301      	movs	r3, #1
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	2200      	movs	r2, #0
 80016b4:	2178      	movs	r1, #120	@ 0x78
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <ssd1306_WriteCommand+0x2c>)
 80016b8:	f001 f94e 	bl	8002958 <HAL_I2C_Mem_Write>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24000258 	.word	0x24000258

080016c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af04      	add	r7, sp, #16
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f04f 32ff 	mov.w	r2, #4294967295
 80016da:	9202      	str	r2, [sp, #8]
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	2240      	movs	r2, #64	@ 0x40
 80016e6:	2178      	movs	r1, #120	@ 0x78
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <ssd1306_WriteData+0x30>)
 80016ea:	f001 f935 	bl	8002958 <HAL_I2C_Mem_Write>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	24000258 	.word	0x24000258

080016fc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001700:	f7ff ffc2 	bl	8001688 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001704:	2064      	movs	r0, #100	@ 0x64
 8001706:	f000 fce3 	bl	80020d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f9d6 	bl	8001abc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001710:	2020      	movs	r0, #32
 8001712:	f7ff ffc1 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff ffbe 	bl	8001698 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800171c:	20b0      	movs	r0, #176	@ 0xb0
 800171e:	f7ff ffbb 	bl	8001698 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001722:	20c8      	movs	r0, #200	@ 0xc8
 8001724:	f7ff ffb8 	bl	8001698 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff ffb5 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800172e:	2010      	movs	r0, #16
 8001730:	f7ff ffb2 	bl	8001698 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001734:	2040      	movs	r0, #64	@ 0x40
 8001736:	f7ff ffaf 	bl	8001698 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800173a:	20ff      	movs	r0, #255	@ 0xff
 800173c:	f000 f9aa 	bl	8001a94 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001740:	20a1      	movs	r0, #161	@ 0xa1
 8001742:	f7ff ffa9 	bl	8001698 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001746:	20a6      	movs	r0, #166	@ 0xa6
 8001748:	f7ff ffa6 	bl	8001698 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800174c:	20a8      	movs	r0, #168	@ 0xa8
 800174e:	f7ff ffa3 	bl	8001698 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001752:	203f      	movs	r0, #63	@ 0x3f
 8001754:	f7ff ffa0 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001758:	20a4      	movs	r0, #164	@ 0xa4
 800175a:	f7ff ff9d 	bl	8001698 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800175e:	20d3      	movs	r0, #211	@ 0xd3
 8001760:	f7ff ff9a 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff ff97 	bl	8001698 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800176a:	20d5      	movs	r0, #213	@ 0xd5
 800176c:	f7ff ff94 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001770:	20f0      	movs	r0, #240	@ 0xf0
 8001772:	f7ff ff91 	bl	8001698 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001776:	20d9      	movs	r0, #217	@ 0xd9
 8001778:	f7ff ff8e 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800177c:	2022      	movs	r0, #34	@ 0x22
 800177e:	f7ff ff8b 	bl	8001698 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001782:	20da      	movs	r0, #218	@ 0xda
 8001784:	f7ff ff88 	bl	8001698 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001788:	2012      	movs	r0, #18
 800178a:	f7ff ff85 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800178e:	20db      	movs	r0, #219	@ 0xdb
 8001790:	f7ff ff82 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001794:	2020      	movs	r0, #32
 8001796:	f7ff ff7f 	bl	8001698 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800179a:	208d      	movs	r0, #141	@ 0x8d
 800179c:	f7ff ff7c 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017a0:	2014      	movs	r0, #20
 80017a2:	f7ff ff79 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80017a6:	2001      	movs	r0, #1
 80017a8:	f000 f988 	bl	8001abc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f000 f80f 	bl	80017d0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80017b2:	f000 f825 	bl	8001800 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <ssd1306_Init+0xd0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <ssd1306_Init+0xd0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80017c2:	4b02      	ldr	r3, [pc, #8]	@ (80017cc <ssd1306_Init+0xd0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	711a      	strb	r2, [r3, #4]
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	240007a4 	.word	0x240007a4

080017d0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <ssd1306_Fill+0x14>
 80017e0:	2300      	movs	r3, #0
 80017e2:	e000      	b.n	80017e6 <ssd1306_Fill+0x16>
 80017e4:	23ff      	movs	r3, #255	@ 0xff
 80017e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ea:	4619      	mov	r1, r3
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <ssd1306_Fill+0x2c>)
 80017ee:	f00c f892 	bl	800d916 <memset>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	240003a4 	.word	0x240003a4

08001800 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	e016      	b.n	800183a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	3b50      	subs	r3, #80	@ 0x50
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff40 	bl	8001698 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff ff3d 	bl	8001698 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800181e:	2010      	movs	r0, #16
 8001820:	f7ff ff3a 	bl	8001698 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	01db      	lsls	r3, r3, #7
 8001828:	4a08      	ldr	r2, [pc, #32]	@ (800184c <ssd1306_UpdateScreen+0x4c>)
 800182a:	4413      	add	r3, r2
 800182c:	2180      	movs	r1, #128	@ 0x80
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff4a 	bl	80016c8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	3301      	adds	r3, #1
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b07      	cmp	r3, #7
 800183e:	d9e5      	bls.n	800180c <ssd1306_UpdateScreen+0xc>
    }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	240003a4 	.word	0x240003a4

08001850 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	460b      	mov	r3, r1
 800185c:	71bb      	strb	r3, [r7, #6]
 800185e:	4613      	mov	r3, r2
 8001860:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db3d      	blt.n	80018e6 <ssd1306_DrawPixel+0x96>
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	2b3f      	cmp	r3, #63	@ 0x3f
 800186e:	d83a      	bhi.n	80018e6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001870:	797b      	ldrb	r3, [r7, #5]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d11a      	bne.n	80018ac <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	b2d8      	uxtb	r0, r3
 800187e:	4603      	mov	r3, r0
 8001880:	01db      	lsls	r3, r3, #7
 8001882:	4413      	add	r3, r2
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <ssd1306_DrawPixel+0xa4>)
 8001886:	5cd3      	ldrb	r3, [r2, r3]
 8001888:	b25a      	sxtb	r2, r3
 800188a:	79bb      	ldrb	r3, [r7, #6]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	b25b      	sxtb	r3, r3
 8001898:	4313      	orrs	r3, r2
 800189a:	b259      	sxtb	r1, r3
 800189c:	79fa      	ldrb	r2, [r7, #7]
 800189e:	4603      	mov	r3, r0
 80018a0:	01db      	lsls	r3, r3, #7
 80018a2:	4413      	add	r3, r2
 80018a4:	b2c9      	uxtb	r1, r1
 80018a6:	4a13      	ldr	r2, [pc, #76]	@ (80018f4 <ssd1306_DrawPixel+0xa4>)
 80018a8:	54d1      	strb	r1, [r2, r3]
 80018aa:	e01d      	b.n	80018e8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	b2d8      	uxtb	r0, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	01db      	lsls	r3, r3, #7
 80018b8:	4413      	add	r3, r2
 80018ba:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <ssd1306_DrawPixel+0xa4>)
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	b25a      	sxtb	r2, r3
 80018c0:	79bb      	ldrb	r3, [r7, #6]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	2101      	movs	r1, #1
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	4013      	ands	r3, r2
 80018d4:	b259      	sxtb	r1, r3
 80018d6:	79fa      	ldrb	r2, [r7, #7]
 80018d8:	4603      	mov	r3, r0
 80018da:	01db      	lsls	r3, r3, #7
 80018dc:	4413      	add	r3, r2
 80018de:	b2c9      	uxtb	r1, r1
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <ssd1306_DrawPixel+0xa4>)
 80018e2:	54d1      	strb	r1, [r2, r3]
 80018e4:	e000      	b.n	80018e8 <ssd1306_DrawPixel+0x98>
        return;
 80018e6:	bf00      	nop
    }
}
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	240003a4 	.word	0x240003a4

080018f8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4604      	mov	r4, r0
 8001900:	4638      	mov	r0, r7
 8001902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001906:	4623      	mov	r3, r4
 8001908:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	2b1f      	cmp	r3, #31
 800190e:	d902      	bls.n	8001916 <ssd1306_WriteChar+0x1e>
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b7e      	cmp	r3, #126	@ 0x7e
 8001914:	d901      	bls.n	800191a <ssd1306_WriteChar+0x22>
        return 0;
 8001916:	2300      	movs	r3, #0
 8001918:	e077      	b.n	8001a0a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800191a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a14 <ssd1306_WriteChar+0x11c>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	783b      	ldrb	r3, [r7, #0]
 8001922:	4413      	add	r3, r2
 8001924:	2b80      	cmp	r3, #128	@ 0x80
 8001926:	dc06      	bgt.n	8001936 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001928:	4b3a      	ldr	r3, [pc, #232]	@ (8001a14 <ssd1306_WriteChar+0x11c>)
 800192a:	885b      	ldrh	r3, [r3, #2]
 800192c:	461a      	mov	r2, r3
 800192e:	787b      	ldrb	r3, [r7, #1]
 8001930:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001932:	2b40      	cmp	r3, #64	@ 0x40
 8001934:	dd01      	ble.n	800193a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001936:	2300      	movs	r3, #0
 8001938:	e067      	b.n	8001a0a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	e04e      	b.n	80019de <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	3b20      	subs	r3, #32
 8001946:	7879      	ldrb	r1, [r7, #1]
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4619      	mov	r1, r3
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	440b      	add	r3, r1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	e036      	b.n	80019ce <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001970:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <ssd1306_WriteChar+0x11c>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4413      	add	r3, r2
 800197c:	b2d8      	uxtb	r0, r3
 800197e:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <ssd1306_WriteChar+0x11c>)
 8001980:	885b      	ldrh	r3, [r3, #2]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	4413      	add	r3, r2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff ff5d 	bl	8001850 <ssd1306_DrawPixel>
 8001996:	e017      	b.n	80019c8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <ssd1306_WriteChar+0x11c>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b2d8      	uxtb	r0, r3
 80019a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <ssd1306_WriteChar+0x11c>)
 80019a8:	885b      	ldrh	r3, [r3, #2]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	b2d9      	uxtb	r1, r3
 80019b4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	f7ff ff44 	bl	8001850 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	3301      	adds	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	783b      	ldrb	r3, [r7, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d3c3      	bcc.n	8001960 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	787b      	ldrb	r3, [r7, #1]
 80019e0:	461a      	mov	r2, r3
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d3ab      	bcc.n	8001940 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <ssd1306_WriteChar+0x11c>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	2a00      	cmp	r2, #0
 80019f0:	d005      	beq.n	80019fe <ssd1306_WriteChar+0x106>
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	3a20      	subs	r2, #32
 80019f8:	440a      	add	r2, r1
 80019fa:	7812      	ldrb	r2, [r2, #0]
 80019fc:	e000      	b.n	8001a00 <ssd1306_WriteChar+0x108>
 80019fe:	783a      	ldrb	r2, [r7, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <ssd1306_WriteChar+0x11c>)
 8001a06:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	240007a4 	.word	0x240007a4

08001a18 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	4638      	mov	r0, r7
 8001a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001a26:	e013      	b.n	8001a50 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	7818      	ldrb	r0, [r3, #0]
 8001a2c:	7e3b      	ldrb	r3, [r7, #24]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	463b      	mov	r3, r7
 8001a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a34:	f7ff ff60 	bl	80018f8 <ssd1306_WriteChar>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d002      	beq.n	8001a4a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	e008      	b.n	8001a5c <ssd1306_WriteString+0x44>
        }
        str++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e7      	bne.n	8001a28 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	4613      	mov	r3, r2
 8001a72:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <ssd1306_SetCursor+0x2c>)
 8001a7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <ssd1306_SetCursor+0x2c>)
 8001a82:	805a      	strh	r2, [r3, #2]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	240007a4 	.word	0x240007a4

08001a94 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001a9e:	2381      	movs	r3, #129	@ 0x81
 8001aa0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fdf7 	bl	8001698 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fdf3 	bl	8001698 <ssd1306_WriteCommand>
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001acc:	23af      	movs	r3, #175	@ 0xaf
 8001ace:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <ssd1306_SetDisplayOn+0x38>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	715a      	strb	r2, [r3, #5]
 8001ad6:	e004      	b.n	8001ae2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ad8:	23ae      	movs	r3, #174	@ 0xae
 8001ada:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <ssd1306_SetDisplayOn+0x38>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fdd7 	bl	8001698 <ssd1306_WriteCommand>
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	240007a4 	.word	0x240007a4

08001af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_MspInit+0x30>)
 8001b00:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b04:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <HAL_MspInit+0x30>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_MspInit+0x30>)
 8001b10:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	58024400 	.word	0x58024400

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <NMI_Handler+0x4>

08001b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b3e:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <HardFault_Handler+0x28>)
 8001b40:	f000 fe53 	bl	80027ea <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	e002      	b.n	8001b50 <HardFault_Handler+0x1c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a03      	ldr	r2, [pc, #12]	@ (8001b60 <HardFault_Handler+0x2c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	ddf8      	ble.n	8001b4a <HardFault_Handler+0x16>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b58:	e7ef      	b.n	8001b3a <HardFault_Handler+0x6>
 8001b5a:	bf00      	nop
 8001b5c:	58020800 	.word	0x58020800
 8001b60:	000f423f 	.word	0x000f423f

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001baa:	f000 fa71 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <TIM2_IRQHandler+0x18>)
 8001bba:	f006 ff20 	bl	80089fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001bbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bc2:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <TIM2_IRQHandler+0x1c>)
 8001bc4:	f000 fe11 	bl	80027ea <HAL_GPIO_TogglePin>
 //HAL_Delay(1000);
  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	240007b0 	.word	0x240007b0
 8001bd0:	58020800 	.word	0x58020800

08001bd4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <SPI1_IRQHandler+0x10>)
 8001bda:	f001 fd0d 	bl	80035f8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	240002ac 	.word	0x240002ac

08001be8 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001bee:	f001 ff90 	bl	8003b12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	24001ce0 	.word	0x24001ce0

08001bfc <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001c02:	f001 ff86 	bl	8003b12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	24001ce0 	.word	0x24001ce0

08001c10 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <OTG_HS_IRQHandler+0x10>)
 8001c16:	f001 ff7c 	bl	8003b12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	24001ce0 	.word	0x24001ce0

08001c24 <SPDIF_RX_IRQHandler>:

/**
  * @brief This function handles SPDIF-RX global interrupt.
  */
void SPDIF_RX_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <SPDIF_RX_IRQHandler+0x10>)
 8001c2a:	f006 fdad 	bl	8008788 <HAL_SPDIFRX_IRQHandler>
  /* USER CODE BEGIN SPDIF_RX_IRQn 1 */

  /* USER CODE END SPDIF_RX_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	24000354 	.word	0x24000354

08001c38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e00a      	b.n	8001c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4a:	f3af 8000 	nop.w
 8001c4e:	4601      	mov	r1, r0
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf0      	blt.n	8001c4a <_read+0x12>
  }

  return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e009      	b.n	8001c98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf1      	blt.n	8001c84 <_write+0x12>
  }
  return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_close>:

int _close(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f00b fe36 	bl	800d9b4 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	24100000 	.word	0x24100000
 8001d74:	00001000 	.word	0x00001000
 8001d78:	240007ac 	.word	0x240007ac
 8001d7c:	24002530 	.word	0x24002530

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d84:	4b32      	ldr	r3, [pc, #200]	@ (8001e50 <SystemInit+0xd0>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a31      	ldr	r2, [pc, #196]	@ (8001e50 <SystemInit+0xd0>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d94:	4b2f      	ldr	r3, [pc, #188]	@ (8001e54 <SystemInit+0xd4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d807      	bhi.n	8001db0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e54 <SystemInit+0xd4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 030f 	bic.w	r3, r3, #15
 8001da8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e54 <SystemInit+0xd4>)
 8001daa:	f043 0303 	orr.w	r3, r3, #3
 8001dae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001db0:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <SystemInit+0xd8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <SystemInit+0xd8>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dbc:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <SystemInit+0xd8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <SystemInit+0xd8>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4924      	ldr	r1, [pc, #144]	@ (8001e58 <SystemInit+0xd8>)
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <SystemInit+0xdc>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dce:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <SystemInit+0xd4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dda:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <SystemInit+0xd4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 030f 	bic.w	r3, r3, #15
 8001de2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <SystemInit+0xd4>)
 8001de4:	f043 0303 	orr.w	r3, r3, #3
 8001de8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001dea:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <SystemInit+0xd8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <SystemInit+0xd8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <SystemInit+0xd8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <SystemInit+0xd8>)
 8001dfe:	4a18      	ldr	r2, [pc, #96]	@ (8001e60 <SystemInit+0xe0>)
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <SystemInit+0xd8>)
 8001e04:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <SystemInit+0xe4>)
 8001e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e08:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <SystemInit+0xd8>)
 8001e0a:	4a17      	ldr	r2, [pc, #92]	@ (8001e68 <SystemInit+0xe8>)
 8001e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <SystemInit+0xd8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e14:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <SystemInit+0xd8>)
 8001e16:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <SystemInit+0xe8>)
 8001e18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <SystemInit+0xd8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e20:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <SystemInit+0xd8>)
 8001e22:	4a11      	ldr	r2, [pc, #68]	@ (8001e68 <SystemInit+0xe8>)
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e26:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <SystemInit+0xd8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <SystemInit+0xd8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <SystemInit+0xd8>)
 8001e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e38:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <SystemInit+0xd8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <SystemInit+0xec>)
 8001e40:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	52002000 	.word	0x52002000
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e60:	02020200 	.word	0x02020200
 8001e64:	01ff0000 	.word	0x01ff0000
 8001e68:	01010280 	.word	0x01010280
 8001e6c:	52004000 	.word	0x52004000

08001e70 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001e90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6349205;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001ea4:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <MX_TIM2_Init+0x98>)
 8001ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eb4:	4813      	ldr	r0, [pc, #76]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001eb6:	f006 fd4b 	bl	8008950 <HAL_TIM_Base_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ec0:	f7ff face 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480c      	ldr	r0, [pc, #48]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001ed2:	f006 fe9b 	bl	8008c0c <HAL_TIM_ConfigClockSource>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001edc:	f7ff fac0 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_TIM2_Init+0x94>)
 8001eee:	f007 f8f5 	bl	80090dc <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ef8:	f7ff fab2 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	240007b0 	.word	0x240007b0
 8001f08:	0060e195 	.word	0x0060e195

08001f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1c:	d116      	bne.n	8001f4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <HAL_TIM_Base_MspInit+0x48>)
 8001f20:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001f24:	4a0b      	ldr	r2, [pc, #44]	@ (8001f54 <HAL_TIM_Base_MspInit+0x48>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_TIM_Base_MspInit+0x48>)
 8001f30:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	201c      	movs	r0, #28
 8001f42:	f000 f9c4 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f46:	201c      	movs	r0, #28
 8001f48:	f000 f9db 	bl	8002302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58024400 	.word	0x58024400

08001f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f5c:	f7ff ff10 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480c      	ldr	r0, [pc, #48]	@ (8001f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f62:	490d      	ldr	r1, [pc, #52]	@ (8001f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f64:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f78:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f00b fd1b 	bl	800d9c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8a:	f7ff f8e1 	bl	8001150 <main>
  bx  lr
 8001f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001f94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f98:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8001f9c:	0800f0dc 	.word	0x0800f0dc
  ldr r2, =_sbss
 8001fa0:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8001fa4:	24002530 	.word	0x24002530

08001fa8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb2:	2003      	movs	r0, #3
 8001fb4:	f000 f980 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001fb8:	f003 fd3c 	bl	8005a34 <HAL_RCC_GetSysClockFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <HAL_Init+0x68>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	4913      	ldr	r1, [pc, #76]	@ (8002018 <HAL_Init+0x6c>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_Init+0x68>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	4a0e      	ldr	r2, [pc, #56]	@ (8002018 <HAL_Init+0x6c>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	4a0b      	ldr	r2, [pc, #44]	@ (800201c <HAL_Init+0x70>)
 8001fee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8002020 <HAL_Init+0x74>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f814 	bl	8002024 <HAL_InitTick>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e002      	b.n	800200c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002006:	f7ff fd77 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	58024400 	.word	0x58024400
 8002018:	0800f088 	.word	0x0800f088
 800201c:	24000004 	.word	0x24000004
 8002020:	24000000 	.word	0x24000000

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800202c:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_InitTick+0x60>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e021      	b.n	800207c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002038:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <HAL_InitTick+0x64>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <HAL_InitTick+0x60>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f965 	bl	800231e <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 f92f 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	@ (800208c <HAL_InitTick+0x68>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2400000c 	.word	0x2400000c
 8002088:	24000000 	.word	0x24000000
 800208c:	24000008 	.word	0x24000008

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2400000c 	.word	0x2400000c
 80020b4:	240007fc 	.word	0x240007fc

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	240007fc 	.word	0x240007fc

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2400000c 	.word	0x2400000c

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <__NVIC_SetPriorityGrouping+0x40>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	4313      	orrs	r3, r2
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <__NVIC_SetPriorityGrouping+0x40>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00
 800215c:	05fa0000 	.word	0x05fa0000

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	@ (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff40 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff90 	bl	800220c <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5f 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff33 	bl	800217c <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa4 	bl	8002274 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800233c:	f3bf 8f5f 	dmb	sy
}
 8002340:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <HAL_MPU_Disable+0x28>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	4a06      	ldr	r2, [pc, #24]	@ (8002360 <HAL_MPU_Disable+0x28>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800234e:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_MPU_Disable+0x2c>)
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00
 8002364:	e000ed90 	.word	0xe000ed90

08002368 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002370:	4a0b      	ldr	r2, [pc, #44]	@ (80023a0 <HAL_MPU_Enable+0x38>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_MPU_Enable+0x3c>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	4a09      	ldr	r2, [pc, #36]	@ (80023a4 <HAL_MPU_Enable+0x3c>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002386:	f3bf 8f4f 	dsb	sy
}
 800238a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800238c:	f3bf 8f6f 	isb	sy
}
 8002390:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed90 	.word	0xe000ed90
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	785a      	ldrb	r2, [r3, #1]
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_MPU_ConfigRegion+0x7c>)
 80023b6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80023b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <HAL_MPU_ConfigRegion+0x7c>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	4a19      	ldr	r2, [pc, #100]	@ (8002424 <HAL_MPU_ConfigRegion+0x7c>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80023c4:	4a17      	ldr	r2, [pc, #92]	@ (8002424 <HAL_MPU_ConfigRegion+0x7c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7b1b      	ldrb	r3, [r3, #12]
 80023d0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7adb      	ldrb	r3, [r3, #11]
 80023d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7a9b      	ldrb	r3, [r3, #10]
 80023de:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7b5b      	ldrb	r3, [r3, #13]
 80023e6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7b9b      	ldrb	r3, [r3, #14]
 80023ee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7bdb      	ldrb	r3, [r3, #15]
 80023f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7a5b      	ldrb	r3, [r3, #9]
 80023fe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7a1b      	ldrb	r3, [r3, #8]
 8002406:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002408:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002410:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002412:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002414:	6113      	str	r3, [r2, #16]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed90 	.word	0xe000ed90

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002436:	4b89      	ldr	r3, [pc, #548]	@ (800265c <HAL_GPIO_Init+0x234>)
 8002438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800243a:	e194      	b.n	8002766 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8186 	beq.w	8002760 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d005      	beq.n	800246c <HAL_GPIO_Init+0x44>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d130      	bne.n	80024ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024a2:	2201      	movs	r2, #1
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 0201 	and.w	r2, r3, #1
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d017      	beq.n	800250a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d123      	bne.n	800255e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	08da      	lsrs	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3208      	adds	r2, #8
 800251e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	69b9      	ldr	r1, [r7, #24]
 800255a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0203 	and.w	r2, r3, #3
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80e0 	beq.w	8002760 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <HAL_GPIO_Init+0x238>)
 80025a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80025a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <HAL_GPIO_Init+0x238>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80025b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <HAL_GPIO_Init+0x238>)
 80025b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a29      	ldr	r2, [pc, #164]	@ (8002664 <HAL_GPIO_Init+0x23c>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a20      	ldr	r2, [pc, #128]	@ (8002668 <HAL_GPIO_Init+0x240>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d052      	beq.n	8002690 <HAL_GPIO_Init+0x268>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1f      	ldr	r2, [pc, #124]	@ (800266c <HAL_GPIO_Init+0x244>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d031      	beq.n	8002656 <HAL_GPIO_Init+0x22e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002670 <HAL_GPIO_Init+0x248>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02b      	beq.n	8002652 <HAL_GPIO_Init+0x22a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <HAL_GPIO_Init+0x24c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d025      	beq.n	800264e <HAL_GPIO_Init+0x226>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_GPIO_Init+0x250>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01f      	beq.n	800264a <HAL_GPIO_Init+0x222>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <HAL_GPIO_Init+0x254>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x21e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1a      	ldr	r2, [pc, #104]	@ (8002680 <HAL_GPIO_Init+0x258>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x21a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a19      	ldr	r2, [pc, #100]	@ (8002684 <HAL_GPIO_Init+0x25c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x216>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <HAL_GPIO_Init+0x260>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x212>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a17      	ldr	r2, [pc, #92]	@ (800268c <HAL_GPIO_Init+0x264>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x20e>
 8002632:	2309      	movs	r3, #9
 8002634:	e02d      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 8002636:	230a      	movs	r3, #10
 8002638:	e02b      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 800263a:	2308      	movs	r3, #8
 800263c:	e029      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 800263e:	2307      	movs	r3, #7
 8002640:	e027      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 8002642:	2306      	movs	r3, #6
 8002644:	e025      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 8002646:	2305      	movs	r3, #5
 8002648:	e023      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 800264a:	2304      	movs	r3, #4
 800264c:	e021      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 800264e:	2303      	movs	r3, #3
 8002650:	e01f      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 8002652:	2302      	movs	r3, #2
 8002654:	e01d      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 8002656:	2301      	movs	r3, #1
 8002658:	e01b      	b.n	8002692 <HAL_GPIO_Init+0x26a>
 800265a:	bf00      	nop
 800265c:	58000080 	.word	0x58000080
 8002660:	58024400 	.word	0x58024400
 8002664:	58000400 	.word	0x58000400
 8002668:	58020000 	.word	0x58020000
 800266c:	58020400 	.word	0x58020400
 8002670:	58020800 	.word	0x58020800
 8002674:	58020c00 	.word	0x58020c00
 8002678:	58021000 	.word	0x58021000
 800267c:	58021400 	.word	0x58021400
 8002680:	58021800 	.word	0x58021800
 8002684:	58021c00 	.word	0x58021c00
 8002688:	58022000 	.word	0x58022000
 800268c:	58022400 	.word	0x58022400
 8002690:	2300      	movs	r3, #0
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	f002 0203 	and.w	r2, r2, #3
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	4093      	lsls	r3, r2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a2:	4938      	ldr	r1, [pc, #224]	@ (8002784 <HAL_GPIO_Init+0x35c>)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002704:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3301      	adds	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	f47f ae63 	bne.w	800243c <HAL_GPIO_Init+0x14>
  }
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	3724      	adds	r7, #36	@ 0x24
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	58000400 	.word	0x58000400

08002788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e001      	b.n	80027aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
 80027c4:	4613      	mov	r3, r2
 80027c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80027d4:	e003      	b.n	80027de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027d6:	887b      	ldrh	r3, [r7, #2]
 80027d8:	041a      	lsls	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	619a      	str	r2, [r3, #24]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	041a      	lsls	r2, r3, #16
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43d9      	mvns	r1, r3
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	400b      	ands	r3, r1
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e08b      	b.n	800294a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe f8ac 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	@ 0x24
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	e006      	b.n	80028a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d108      	bne.n	80028c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	e007      	b.n	80028d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_I2C_Init+0x134>)
 80028de:	430b      	orrs	r3, r1
 80028e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69d9      	ldr	r1, [r3, #28]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	02008000 	.word	0x02008000

08002958 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	4608      	mov	r0, r1
 8002962:	4611      	mov	r1, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4603      	mov	r3, r0
 8002968:	817b      	strh	r3, [r7, #10]
 800296a:	460b      	mov	r3, r1
 800296c:	813b      	strh	r3, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b20      	cmp	r3, #32
 800297c:	f040 80f9 	bne.w	8002b72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_I2C_Mem_Write+0x34>
 8002986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002992:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0ed      	b.n	8002b74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_I2C_Mem_Write+0x4e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e0e6      	b.n	8002b74 <HAL_I2C_Mem_Write+0x21c>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ae:	f7ff fb83 	bl	80020b8 <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2319      	movs	r3, #25
 80029ba:	2201      	movs	r2, #1
 80029bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fa5b 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0d1      	b.n	8002b74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2221      	movs	r2, #33	@ 0x21
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2240      	movs	r2, #64	@ 0x40
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a3a      	ldr	r2, [r7, #32]
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f8:	88f8      	ldrh	r0, [r7, #6]
 80029fa:	893a      	ldrh	r2, [r7, #8]
 80029fc:	8979      	ldrh	r1, [r7, #10]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4603      	mov	r3, r0
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f9bf 	bl	8002d8c <I2C_RequestMemoryWrite>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0a9      	b.n	8002b74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2bff      	cmp	r3, #255	@ 0xff
 8002a28:	d90e      	bls.n	8002a48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	22ff      	movs	r2, #255	@ 0xff
 8002a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fbdf 	bl	8003204 <I2C_TransferConfig>
 8002a46:	e00f      	b.n	8002a68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fbce 	bl	8003204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fa5e 	bl	8002f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e07b      	b.n	8002b74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d034      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x1c8>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d130      	bne.n	8002b20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	@ 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f9d7 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e04d      	b.n	8002b74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2bff      	cmp	r3, #255	@ 0xff
 8002ae0:	d90e      	bls.n	8002b00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	22ff      	movs	r2, #255	@ 0xff
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fb83 	bl	8003204 <I2C_TransferConfig>
 8002afe:	e00f      	b.n	8002b20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	8979      	ldrh	r1, [r7, #10]
 8002b12:	2300      	movs	r3, #0
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fb72 	bl	8003204 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d19e      	bne.n	8002a68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fa44 	bl	8002fbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e01a      	b.n	8002b74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2220      	movs	r2, #32
 8002b44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <HAL_I2C_Mem_Write+0x224>)
 8002b52:	400b      	ands	r3, r1
 8002b54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
  }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	fe00e800 	.word	0xfe00e800

08002b80 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	@ 0x28
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	f040 80e9 	bne.w	8002d78 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e0df      	b.n	8002d7a <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2C_IsDeviceReady+0x48>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0d8      	b.n	8002d7a <HAL_I2C_IsDeviceReady+0x1fa>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2224      	movs	r2, #36	@ 0x24
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <HAL_I2C_IsDeviceReady+0x72>
 8002be6:	897b      	ldrh	r3, [r7, #10]
 8002be8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bec:	4b65      	ldr	r3, [pc, #404]	@ (8002d84 <HAL_I2C_IsDeviceReady+0x204>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	e004      	b.n	8002bfc <HAL_I2C_IsDeviceReady+0x7c>
 8002bf2:	897b      	ldrh	r3, [r7, #10]
 8002bf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bf8:	4b63      	ldr	r3, [pc, #396]	@ (8002d88 <HAL_I2C_IsDeviceReady+0x208>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002c02:	f7ff fa59 	bl	80020b8 <HAL_GetTick>
 8002c06:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c34:	e034      	b.n	8002ca0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d01a      	beq.n	8002c74 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7ff fa3b 	bl	80020b8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <HAL_I2C_IsDeviceReady+0xd4>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10f      	bne.n	8002c74 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e082      	b.n	8002d7a <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ca0:	7fbb      	ldrb	r3, [r7, #30]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <HAL_I2C_IsDeviceReady+0x12c>
 8002ca6:	7f7b      	ldrb	r3, [r7, #29]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0c4      	beq.n	8002c36 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d027      	beq.n	8002d0a <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f8d9 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d107      	bne.n	8002ce8 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ce6:	e026      	b.n	8002d36 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e023      	b.n	8002d36 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e037      	b.n	8002d7a <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2210      	movs	r2, #16
 8002d10:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2120      	movs	r1, #32
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f8ad 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e003      	b.n	8002d36 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d904      	bls.n	8002d4e <HAL_I2C_IsDeviceReady+0x1ce>
 8002d44:	7ffb      	ldrb	r3, [r7, #31]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	f63f af43 	bhi.w	8002bde <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	02002000 	.word	0x02002000
 8002d88:	02002800 	.word	0x02002800

08002d8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	813b      	strh	r3, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	4b20      	ldr	r3, [pc, #128]	@ (8002e30 <I2C_RequestMemoryWrite+0xa4>)
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fa25 	bl	8003204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f8b5 	bl	8002f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e02c      	b.n	8002e28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dde:	e015      	b.n	8002e0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	69b9      	ldr	r1, [r7, #24]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f89b 	bl	8002f2e <I2C_WaitOnTXISFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e012      	b.n	8002e28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e02:	893b      	ldrh	r3, [r7, #8]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2200      	movs	r2, #0
 8002e14:	2180      	movs	r1, #128	@ 0x80
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f830 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	80002000 	.word	0x80002000

08002e34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d103      	bne.n	8002e52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d007      	beq.n	8002e70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	619a      	str	r2, [r3, #24]
  }
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	e03b      	b.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f8d6 	bl	8003044 <I2C_IsErrorOccurred>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e041      	b.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d02d      	beq.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eaa:	f7ff f905 	bl	80020b8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d122      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d113      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d0b4      	beq.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f3a:	e033      	b.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f87f 	bl	8003044 <I2C_IsErrorOccurred>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e031      	b.n	8002fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d025      	beq.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7ff f8ae 	bl	80020b8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11a      	bne.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d013      	beq.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e007      	b.n	8002fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d1c4      	bne.n	8002f3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc8:	e02f      	b.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f838 	bl	8003044 <I2C_IsErrorOccurred>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e02d      	b.n	800303a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7ff f86b 	bl	80020b8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d11a      	bne.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d013      	beq.n	800302a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e007      	b.n	800303a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b20      	cmp	r3, #32
 8003036:	d1c8      	bne.n	8002fca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	@ 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d068      	beq.n	8003142 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2210      	movs	r2, #16
 8003076:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003078:	e049      	b.n	800310e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d045      	beq.n	800310e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7ff f819 	bl	80020b8 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_IsErrorOccurred+0x54>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d13a      	bne.n	800310e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ba:	d121      	bne.n	8003100 <I2C_IsErrorOccurred+0xbc>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030c2:	d01d      	beq.n	8003100 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d01a      	beq.n	8003100 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030da:	f7fe ffed 	bl	80020b8 <HAL_GetTick>
 80030de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e0:	e00e      	b.n	8003100 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030e2:	f7fe ffe9 	bl	80020b8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b19      	cmp	r3, #25
 80030ee:	d907      	bls.n	8003100 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	f043 0320 	orr.w	r3, r3, #32
 80030f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030fe:	e006      	b.n	800310e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b20      	cmp	r3, #32
 800310c:	d1e9      	bne.n	80030e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d003      	beq.n	8003124 <I2C_IsErrorOccurred+0xe0>
 800311c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0aa      	beq.n	800307a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2220      	movs	r2, #32
 8003132:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003186:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01c      	beq.n	80031f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff fe3b 	bl	8002e34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <I2C_IsErrorOccurred+0x1bc>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3728      	adds	r7, #40	@ 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	fe00e800 	.word	0xfe00e800

08003204 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	817b      	strh	r3, [r7, #10]
 8003212:	4613      	mov	r3, r2
 8003214:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800321c:	7a7b      	ldrb	r3, [r7, #9]
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003224:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	4313      	orrs	r3, r2
 800322e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003232:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	0d5b      	lsrs	r3, r3, #21
 800323e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003242:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <I2C_TransferConfig+0x60>)
 8003244:	430b      	orrs	r3, r1
 8003246:	43db      	mvns	r3, r3
 8003248:	ea02 0103 	and.w	r1, r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	03ff63ff 	.word	0x03ff63ff

08003268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b20      	cmp	r3, #32
 800327c:	d138      	bne.n	80032f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003288:	2302      	movs	r3, #2
 800328a:	e032      	b.n	80032f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	d139      	bne.n	8003388 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800331e:	2302      	movs	r3, #2
 8003320:	e033      	b.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2224      	movs	r2, #36	@ 0x24
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003350:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e000      	b.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003388:	2302      	movs	r3, #2
  }
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e11a      	b.n	80035e0 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fc10 	bl	8000be4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d008      	beq.n	800340c <HAL_I2S_Init+0x74>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d004      	beq.n	800340c <HAL_I2S_Init+0x74>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b0a      	cmp	r3, #10
 8003408:	f040 8094 	bne.w	8003534 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d067      	beq.n	80034e4 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800341c:	2302      	movs	r3, #2
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e001      	b.n	8003426 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003422:	2301      	movs	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b30      	cmp	r3, #48	@ 0x30
 800342c:	d003      	beq.n	8003436 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003432:	2bb0      	cmp	r3, #176	@ 0xb0
 8003434:	d102      	bne.n	800343c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8003436:	2301      	movs	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	e001      	b.n	8003440 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	@ (80035e8 <HAL_I2S_Init+0x250>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d107      	bne.n	800345a <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 800344a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	f003 fe6d 	bl	8007130 <HAL_RCCEx_GetPeriphCLKFreq>
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	e006      	b.n	8003468 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800345a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800345e:	f04f 0100 	mov.w	r1, #0
 8003462:	f003 fe65 	bl	8007130 <HAL_RCCEx_GetPeriphCLKFreq>
 8003466:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003470:	d113      	bne.n	800349a <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003472:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	3305      	adds	r3, #5
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e014      	b.n	80034c4 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800349a:	2220      	movs	r2, #32
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	fa22 f303 	lsr.w	r3, r2, r3
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	3305      	adds	r3, #5
 80034c2:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4a49      	ldr	r2, [pc, #292]	@ (80035ec <HAL_I2S_Init+0x254>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	08db      	lsrs	r3, r3, #3
 80034ce:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	e003      	b.n	80034ec <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80034e4:	2302      	movs	r3, #2
 80034e6:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_I2S_Init+0x160>
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d002      	beq.n	80034fe <HAL_I2S_Init+0x166>
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2bff      	cmp	r3, #255	@ 0xff
 80034fc:	d907      	bls.n	800350e <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003502:	f043 0210 	orr.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e068      	b.n	80035e0 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8003514:	2301      	movs	r3, #1
 8003516:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800351e:	4b34      	ldr	r3, [pc, #208]	@ (80035f0 <HAL_I2S_Init+0x258>)
 8003520:	4013      	ands	r3, r2
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	0411      	lsls	r1, r2, #16
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	0612      	lsls	r2, r2, #24
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	430b      	orrs	r3, r1
 8003532:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800353a:	4b2e      	ldr	r3, [pc, #184]	@ (80035f4 <HAL_I2S_Init+0x25c>)
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6851      	ldr	r1, [r2, #4]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68d2      	ldr	r2, [r2, #12]
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6992      	ldr	r2, [r2, #24]
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6a12      	ldr	r2, [r2, #32]
 8003558:	4311      	orrs	r1, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6912      	ldr	r2, [r2, #16]
 8003564:	430a      	orrs	r2, r1
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f640 72f8 	movw	r2, #4088	@ 0xff8
 800357a:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800358a:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d007      	beq.n	80035ba <HAL_I2S_Init+0x222>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d003      	beq.n	80035ba <HAL_I2S_Init+0x222>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b0a      	cmp	r3, #10
 80035b8:	d10a      	bne.n	80035d0 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	58001400 	.word	0x58001400
 80035ec:	cccccccd 	.word	0xcccccccd
 80035f0:	fe00ffff 	.word	0xfe00ffff
 80035f4:	fdff9040 	.word	0xfdff9040

080035f8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b04      	cmp	r3, #4
 8003622:	d12f      	bne.n	8003684 <HAL_I2S_IRQHandler+0x8c>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_I2S_IRQHandler+0x48>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d103      	bne.n	8003640 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01c      	beq.n	8003684 <HAL_I2S_IRQHandler+0x8c>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6919      	ldr	r1, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b62      	ldr	r3, [pc, #392]	@ (80037e0 <HAL_I2S_IRQHandler+0x1e8>)
 8003656:	400b      	ands	r3, r1
 8003658:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003668:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003676:	f043 0202 	orr.w	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8b2 	bl	80037e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b03      	cmp	r3, #3
 800368e:	d12f      	bne.n	80036f0 <HAL_I2S_IRQHandler+0xf8>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_I2S_IRQHandler+0xb4>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <HAL_I2S_IRQHandler+0xb4>
    {
      hi2s->TxISR(hi2s);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01c      	beq.n	80036f0 <HAL_I2S_IRQHandler+0xf8>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 72b1 	bic.w	r2, r2, #354	@ 0x162
 80036c4:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0220 	orr.w	r2, r2, #32
 80036d4:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f87c 	bl	80037e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d16c      	bne.n	80037d6 <HAL_I2S_IRQHandler+0x1de>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_I2S_IRQHandler+0x11e>
    {
      hi2s->TxISR(hi2s);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_I2S_IRQHandler+0x13a>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_I2S_IRQHandler+0x13a>
    {
      hi2s->RxISR(hi2s);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_I2S_IRQHandler+0x156>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <HAL_I2S_IRQHandler+0x156>
    {
      hi2s->TxISR(hi2s);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_I2S_IRQHandler+0x19a>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6919      	ldr	r1, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_I2S_IRQHandler+0x1ec>)
 8003764:	400b      	ands	r3, r1
 8003766:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0220 	orr.w	r2, r2, #32
 8003776:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f82b 	bl	80037e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01c      	beq.n	80037d6 <HAL_I2S_IRQHandler+0x1de>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6919      	ldr	r1, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b0f      	ldr	r3, [pc, #60]	@ (80037e4 <HAL_I2S_IRQHandler+0x1ec>)
 80037a8:	400b      	ands	r3, r1
 80037aa:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ba:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c8:	f043 0202 	orr.w	r2, r3, #2
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f809 	bl	80037e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d6:	bf00      	nop
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	fffffe9e 	.word	0xfffffe9e
 80037e4:	fffffe9c 	.word	0xfffffe9c

080037e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e037      	b.n	8003882 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7fc ff46 	bl	80006b8 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3304      	adds	r3, #4
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f005 fcfc 	bl	8009234 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	461a      	mov	r2, r3
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	f005 fd1e 	bl	8009288 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	461a      	mov	r2, r3
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	f005 fd33 	bl	80092c2 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0204 	orr.w	r2, r2, #4
 800386a:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800386c:	4b07      	ldr	r3, [pc, #28]	@ (800388c <HAL_NAND_Init+0x90>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a06      	ldr	r2, [pc, #24]	@ (800388c <HAL_NAND_Init+0x90>)
 8003872:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003876:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	52004000 	.word	0x52004000

08003890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0fe      	b.n	8003aa0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f009 fb82 	bl	800cfc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2203      	movs	r2, #3
 80038c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f005 ff26 	bl	800971a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7c1a      	ldrb	r2, [r3, #16]
 80038d6:	f88d 2000 	strb.w	r2, [sp]
 80038da:	3304      	adds	r3, #4
 80038dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038de:	f005 fdf7 	bl	80094d0 <USB_CoreInit>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0d5      	b.n	8003aa0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f005 ff1e 	bl	800973c <USB_SetCurrentMode>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e0c6      	b.n	8003aa0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	e04a      	b.n	80039ae <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003918:	7bfa      	ldrb	r2, [r7, #15]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	3315      	adds	r3, #21
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	3314      	adds	r3, #20
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	b298      	uxth	r0, r3
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	332e      	adds	r3, #46	@ 0x2e
 8003954:	4602      	mov	r2, r0
 8003956:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003958:	7bfa      	ldrb	r2, [r7, #15]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	3318      	adds	r3, #24
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	331c      	adds	r3, #28
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3320      	adds	r3, #32
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	3324      	adds	r3, #36	@ 0x24
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	3301      	adds	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	791b      	ldrb	r3, [r3, #4]
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d3af      	bcc.n	8003918 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e044      	b.n	8003a48 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	3301      	adds	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	791b      	ldrb	r3, [r3, #4]
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3b5      	bcc.n	80039be <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7c1a      	ldrb	r2, [r3, #16]
 8003a5a:	f88d 2000 	strb.w	r2, [sp]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a62:	f005 feb7 	bl	80097d4 <USB_DevInit>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e013      	b.n	8003aa0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7b1b      	ldrb	r3, [r3, #12]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d102      	bne.n	8003a94 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f001 f96e 	bl	8004d70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f006 fefa 	bl	800a892 <USB_DevDisconnect>

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_PCD_Start+0x1c>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e022      	b.n	8003b0a <HAL_PCD_Start+0x62>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f005 fe01 	bl	80096f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f006 fea8 	bl	800a850 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b12:	b590      	push	{r4, r7, lr}
 8003b14:	b08d      	sub	sp, #52	@ 0x34
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f006 ff66 	bl	800a9fa <USB_GetMode>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 84b9 	bne.w	80044a8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f006 feca 	bl	800a8d4 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 84af 	beq.w	80044a6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f006 feb7 	bl	800a8d4 <USB_ReadInterrupts>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d107      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f002 0202 	and.w	r2, r2, #2
 8003b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f006 fea5 	bl	800a8d4 <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d161      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0210 	bic.w	r2, r2, #16
 8003ba2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	0c5b      	lsrs	r3, r3, #17
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d124      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d035      	beq.n	8003c48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	6a38      	ldr	r0, [r7, #32]
 8003bf0:	f006 fcdc 	bl	800a5ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c00:	441a      	add	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c12:	441a      	add	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	615a      	str	r2, [r3, #20]
 8003c18:	e016      	b.n	8003c48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	0c5b      	lsrs	r3, r3, #17
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d110      	bne.n	8003c48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6a38      	ldr	r0, [r7, #32]
 8003c32:	f006 fcbb 	bl	800a5ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c42:	441a      	add	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0210 	orr.w	r2, r2, #16
 8003c56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f006 fe39 	bl	800a8d4 <USB_ReadInterrupts>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c6c:	f040 80a7 	bne.w	8003dbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f006 fe3e 	bl	800a8fa <USB_ReadDevAllOutEpInterrupt>
 8003c7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003c80:	e099      	b.n	8003db6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 808e 	beq.w	8003daa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f006 fe62 	bl	800a962 <USB_ReadDevOutEPInterrupt>
 8003c9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2301      	movs	r3, #1
 8003cba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fed0 	bl	8004a64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2308      	movs	r3, #8
 8003cde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 ffa6 	bl	8004c34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2310      	movs	r3, #16
 8003d02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d030      	beq.n	8003d70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d16:	2b80      	cmp	r3, #128	@ 0x80
 8003d18:	d109      	bne.n	8003d2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4413      	add	r3, r2
 8003d40:	3304      	adds	r3, #4
 8003d42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	78db      	ldrb	r3, [r3, #3]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d108      	bne.n	8003d5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f009 fa89 	bl	800d270 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	2320      	movs	r3, #32
 8003d8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da2:	461a      	mov	r2, r3
 8003da4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003da8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	3301      	adds	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f47f af62 	bne.w	8003c82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f006 fd86 	bl	800a8d4 <USB_ReadInterrupts>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dd2:	f040 80db 	bne.w	8003f8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f006 fda7 	bl	800a92e <USB_ReadDevAllInEpInterrupt>
 8003de0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003de6:	e0cd      	b.n	8003f84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80c2 	beq.w	8003f78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f006 fdcd 	bl	800a99e <USB_ReadDevInEPInterrupt>
 8003e04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d057      	beq.n	8003ec0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69f9      	ldr	r1, [r7, #28]
 8003e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e30:	4013      	ands	r3, r2
 8003e32:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e40:	461a      	mov	r2, r3
 8003e42:	2301      	movs	r3, #1
 8003e44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	799b      	ldrb	r3, [r3, #6]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d132      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3320      	adds	r3, #32
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4403      	add	r3, r0
 8003e6e:	331c      	adds	r3, #28
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4419      	add	r1, r3
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4403      	add	r3, r0
 8003e82:	3320      	adds	r3, #32
 8003e84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d113      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x3a2>
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3324      	adds	r3, #36	@ 0x24
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eac:	461a      	mov	r2, r3
 8003eae:	2101      	movs	r1, #1
 8003eb0:	f006 fdd6 	bl	800aa60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	4619      	mov	r1, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f009 f953 	bl	800d166 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2308      	movs	r3, #8
 8003eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2340      	movs	r3, #64	@ 0x40
 8003f12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d023      	beq.n	8003f66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f20:	6a38      	ldr	r0, [r7, #32]
 8003f22:	f005 fdb5 	bl	8009a90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	3310      	adds	r3, #16
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	3304      	adds	r3, #4
 8003f38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	78db      	ldrb	r3, [r3, #3]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d108      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2200      	movs	r2, #0
 8003f46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f009 f9a0 	bl	800d294 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f60:	461a      	mov	r2, r3
 8003f62:	2302      	movs	r3, #2
 8003f64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fcea 	bl	800494c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f47f af2e 	bne.w	8003de8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f006 fc9f 	bl	800a8d4 <USB_ReadInterrupts>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fa0:	d122      	bne.n	8003fe8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d108      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fc8:	2100      	movs	r1, #0
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fef4 	bl	8004db8 <HAL_PCDEx_LPM_Callback>
 8003fd0:	e002      	b.n	8003fd8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f009 f93e 	bl	800d254 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f006 fc71 	bl	800a8d4 <USB_ReadInterrupts>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ffc:	d112      	bne.n	8004024 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d102      	bne.n	8004014 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f009 f8fa 	bl	800d208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004022:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f006 fc53 	bl	800a8d4 <USB_ReadInterrupts>
 800402e:	4603      	mov	r3, r0
 8004030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004038:	d121      	bne.n	800407e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004048:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004050:	2b00      	cmp	r3, #0
 8004052:	d111      	bne.n	8004078 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	f003 020f 	and.w	r2, r3, #15
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800406e:	2101      	movs	r1, #1
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fea1 	bl	8004db8 <HAL_PCDEx_LPM_Callback>
 8004076:	e002      	b.n	800407e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f009 f8c5 	bl	800d208 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f006 fc26 	bl	800a8d4 <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004092:	f040 80b7 	bne.w	8004204 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2110      	movs	r1, #16
 80040b0:	4618      	mov	r0, r3
 80040b2:	f005 fced 	bl	8009a90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ba:	e046      	b.n	800414a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c8:	461a      	mov	r2, r3
 80040ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e0:	0151      	lsls	r1, r2, #5
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	440a      	add	r2, r1
 80040e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80040f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fc:	461a      	mov	r2, r3
 80040fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004102:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800411e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004122:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800413e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004142:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004146:	3301      	adds	r3, #1
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	791b      	ldrb	r3, [r3, #4]
 800414e:	461a      	mov	r2, r3
 8004150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004152:	4293      	cmp	r3, r2
 8004154:	d3b2      	bcc.n	80040bc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004164:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004168:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7bdb      	ldrb	r3, [r3, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004182:	f043 030b 	orr.w	r3, r3, #11
 8004186:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004198:	f043 030b 	orr.w	r3, r3, #11
 800419c:	6453      	str	r3, [r2, #68]	@ 0x44
 800419e:	e015      	b.n	80041cc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ae:	4619      	mov	r1, r3
 80041b0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80041b4:	4313      	orrs	r3, r2
 80041b6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041c6:	f043 030b 	orr.w	r3, r3, #11
 80041ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041ee:	461a      	mov	r2, r3
 80041f0:	f006 fc36 	bl	800aa60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f006 fb63 	bl	800a8d4 <USB_ReadInterrupts>
 800420e:	4603      	mov	r3, r0
 8004210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004218:	d123      	bne.n	8004262 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f006 fbfa 	bl	800aa18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f005 fcaa 	bl	8009b82 <USB_GetDevSpeed>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681c      	ldr	r4, [r3, #0]
 800423a:	f001 fd75 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 800423e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004244:	461a      	mov	r2, r3
 8004246:	4620      	mov	r0, r4
 8004248:	f005 f9b4 	bl	80095b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f008 ffb2 	bl	800d1b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004260:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f006 fb34 	bl	800a8d4 <USB_ReadInterrupts>
 800426c:	4603      	mov	r3, r0
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b08      	cmp	r3, #8
 8004274:	d10a      	bne.n	800428c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f008 ff8f 	bl	800d19a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f002 0208 	and.w	r2, r2, #8
 800428a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f006 fb1f 	bl	800a8d4 <USB_ReadInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429c:	2b80      	cmp	r3, #128	@ 0x80
 800429e:	d123      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ac:	2301      	movs	r3, #1
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b0:	e014      	b.n	80042dc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fb0a 	bl	80048ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	3301      	adds	r3, #1
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	791b      	ldrb	r3, [r3, #4]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d3e4      	bcc.n	80042b2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f006 faf1 	bl	800a8d4 <USB_ReadInterrupts>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042fc:	d13c      	bne.n	8004378 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042fe:	2301      	movs	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	e02b      	b.n	800435c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3318      	adds	r3, #24
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d115      	bne.n	8004356 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800432a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800432c:	2b00      	cmp	r3, #0
 800432e:	da12      	bge.n	8004356 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	3317      	adds	r3, #23
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800434c:	b2db      	uxtb	r3, r3
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 faca 	bl	80048ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	3301      	adds	r3, #1
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	791b      	ldrb	r3, [r3, #4]
 8004360:	461a      	mov	r2, r3
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	4293      	cmp	r3, r2
 8004366:	d3cd      	bcc.n	8004304 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004376:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f006 faa9 	bl	800a8d4 <USB_ReadInterrupts>
 8004382:	4603      	mov	r3, r0
 8004384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800438c:	d156      	bne.n	800443c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438e:	2301      	movs	r3, #1
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
 8004392:	e045      	b.n	8004420 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d12e      	bne.n	800441a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043be:	2b00      	cmp	r3, #0
 80043c0:	da2b      	bge.n	800441a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	0c1a      	lsrs	r2, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80043cc:	4053      	eors	r3, r2
 80043ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d121      	bne.n	800441a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004416:	6053      	str	r3, [r2, #4]
            break;
 8004418:	e008      	b.n	800442c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	3301      	adds	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	791b      	ldrb	r3, [r3, #4]
 8004424:	461a      	mov	r2, r3
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	4293      	cmp	r3, r2
 800442a:	d3b3      	bcc.n	8004394 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800443a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f006 fa47 	bl	800a8d4 <USB_ReadInterrupts>
 8004446:	4603      	mov	r3, r0
 8004448:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004450:	d10a      	bne.n	8004468 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f008 ff30 	bl	800d2b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f006 fa31 	bl	800a8d4 <USB_ReadInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d115      	bne.n	80044a8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f008 ff20 	bl	800d2d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	e000      	b.n	80044a8 <HAL_PCD_IRQHandler+0x996>
      return;
 80044a6:	bf00      	nop
    }
  }
}
 80044a8:	3734      	adds	r7, #52	@ 0x34
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd90      	pop	{r4, r7, pc}

080044ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_PCD_SetAddress+0x1a>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e012      	b.n	80044ee <HAL_PCD_SetAddress+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	4611      	mov	r1, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f006 f990 	bl	800a804 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	4608      	mov	r0, r1
 8004500:	4611      	mov	r1, r2
 8004502:	461a      	mov	r2, r3
 8004504:	4603      	mov	r3, r0
 8004506:	70fb      	strb	r3, [r7, #3]
 8004508:	460b      	mov	r3, r1
 800450a:	803b      	strh	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004518:	2b00      	cmp	r3, #0
 800451a:	da0f      	bge.n	800453c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3310      	adds	r3, #16
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	705a      	strb	r2, [r3, #1]
 800453a:	e00f      	b.n	800455c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	f003 020f 	and.w	r2, r3, #15
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	3304      	adds	r3, #4
 8004554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004568:	883b      	ldrh	r3, [r7, #0]
 800456a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	78ba      	ldrb	r2, [r7, #2]
 8004576:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800458a:	78bb      	ldrb	r3, [r7, #2]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d102      	bne.n	8004596 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_PCD_EP_Open+0xae>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e00e      	b.n	80045c2 <HAL_PCD_EP_Open+0xcc>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68f9      	ldr	r1, [r7, #12]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f005 fb0a 	bl	8009bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80045c0:	7afb      	ldrb	r3, [r7, #11]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	460b      	mov	r3, r1
 80045d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da0f      	bge.n	80045fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	3310      	adds	r3, #16
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	3304      	adds	r3, #4
 80045f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	705a      	strb	r2, [r3, #1]
 80045fc:	e00f      	b.n	800461e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	3304      	adds	r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_PCD_EP_Close+0x6e>
 8004634:	2302      	movs	r3, #2
 8004636:	e00e      	b.n	8004656 <HAL_PCD_EP_Close+0x8c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68f9      	ldr	r1, [r7, #12]
 8004646:	4618      	mov	r0, r3
 8004648:	f005 fb48 	bl	8009cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
 800466a:	460b      	mov	r3, r1
 800466c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800466e:	7afb      	ldrb	r3, [r7, #11]
 8004670:	f003 020f 	and.w	r2, r3, #15
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a0:	7afb      	ldrb	r3, [r7, #11]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	799b      	ldrb	r3, [r3, #6]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d102      	bne.n	80046ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	799b      	ldrb	r3, [r3, #6]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6979      	ldr	r1, [r7, #20]
 80046c6:	f005 fbe5 	bl	8009e94 <USB_EPStartXfer>

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	f003 020f 	and.w	r2, r3, #15
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80046f6:	681b      	ldr	r3, [r3, #0]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	607a      	str	r2, [r7, #4]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	460b      	mov	r3, r1
 8004712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004714:	7afb      	ldrb	r3, [r7, #11]
 8004716:	f003 020f 	and.w	r2, r3, #15
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	3310      	adds	r3, #16
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2201      	movs	r2, #1
 8004742:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004744:	7afb      	ldrb	r3, [r7, #11]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	b2da      	uxtb	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	799b      	ldrb	r3, [r3, #6]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d102      	bne.n	800475e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	799b      	ldrb	r3, [r3, #6]
 8004766:	461a      	mov	r2, r3
 8004768:	6979      	ldr	r1, [r7, #20]
 800476a:	f005 fb93 	bl	8009e94 <USB_EPStartXfer>

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	7912      	ldrb	r2, [r2, #4]
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e04f      	b.n	8004836 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800479a:	2b00      	cmp	r3, #0
 800479c:	da0f      	bge.n	80047be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800479e:	78fb      	ldrb	r3, [r7, #3]
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	3310      	adds	r3, #16
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	3304      	adds	r3, #4
 80047b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	705a      	strb	r2, [r3, #1]
 80047bc:	e00d      	b.n	80047da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	3304      	adds	r3, #4
 80047d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_PCD_EP_SetStall+0x82>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e01d      	b.n	8004836 <HAL_PCD_EP_SetStall+0xbe>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	4618      	mov	r0, r3
 800480a:	f005 ff27 	bl	800a65c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	7999      	ldrb	r1, [r3, #6]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004826:	461a      	mov	r2, r3
 8004828:	f006 f91a 	bl	800aa60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	7912      	ldrb	r2, [r2, #4]
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e042      	b.n	80048e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800485c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	da0f      	bge.n	8004884 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 020f 	and.w	r2, r3, #15
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	3310      	adds	r3, #16
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	4413      	add	r3, r2
 8004878:	3304      	adds	r3, #4
 800487a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	705a      	strb	r2, [r3, #1]
 8004882:	e00f      	b.n	80048a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	f003 020f 	and.w	r2, r3, #15
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	3304      	adds	r3, #4
 800489c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_PCD_EP_ClrStall+0x86>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e00e      	b.n	80048e2 <HAL_PCD_EP_ClrStall+0xa4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68f9      	ldr	r1, [r7, #12]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f005 ff30 	bl	800a738 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	da0c      	bge.n	8004918 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	3310      	adds	r3, #16
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	3304      	adds	r3, #4
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e00c      	b.n	8004932 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f003 020f 	and.w	r2, r3, #15
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4413      	add	r3, r2
 800492e:	3304      	adds	r3, #4
 8004930:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68f9      	ldr	r1, [r7, #12]
 8004938:	4618      	mov	r0, r3
 800493a:	f005 fd4f 	bl	800a3dc <USB_EPStopXfer>
 800493e:	4603      	mov	r3, r0
 8004940:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004942:	7afb      	ldrb	r3, [r7, #11]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	@ 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	3310      	adds	r3, #16
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4413      	add	r3, r2
 8004970:	3304      	adds	r3, #4
 8004972:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	429a      	cmp	r2, r3
 800497e:	d901      	bls.n	8004984 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e06b      	b.n	8004a5c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	429a      	cmp	r2, r3
 8004998:	d902      	bls.n	80049a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	3303      	adds	r3, #3
 80049a4:	089b      	lsrs	r3, r3, #2
 80049a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049a8:	e02a      	b.n	8004a00 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d902      	bls.n	80049c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3303      	adds	r3, #3
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68d9      	ldr	r1, [r3, #12]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4603      	mov	r3, r0
 80049e2:	6978      	ldr	r0, [r7, #20]
 80049e4:	f005 fda4 	bl	800a530 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	441a      	add	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	441a      	add	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d809      	bhi.n	8004a2a <PCD_WriteEmptyTxFifo+0xde>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	695a      	ldr	r2, [r3, #20]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d203      	bcs.n	8004a2a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1bf      	bne.n	80049aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d811      	bhi.n	8004a5a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	6939      	ldr	r1, [r7, #16]
 8004a52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a56:	4013      	ands	r3, r2
 8004a58:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	333c      	adds	r3, #60	@ 0x3c
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	799b      	ldrb	r3, [r3, #6]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d17b      	bne.n	8004b92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d015      	beq.n	8004ad0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4a61      	ldr	r2, [pc, #388]	@ (8004c2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	f240 80b9 	bls.w	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80b3 	beq.w	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004acc:	6093      	str	r3, [r2, #8]
 8004ace:	e0a7      	b.n	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	2320      	movs	r3, #32
 8004aea:	6093      	str	r3, [r2, #8]
 8004aec:	e098      	b.n	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 8093 	bne.w	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	4a4b      	ldr	r2, [pc, #300]	@ (8004c2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d90f      	bls.n	8004b22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b1e:	6093      	str	r3, [r2, #8]
 8004b20:	e07e      	b.n	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	4413      	add	r3, r2
 8004b34:	3304      	adds	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	0159      	lsls	r1, r3, #5
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	440b      	add	r3, r1
 8004b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b4e:	1ad2      	subs	r2, r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d114      	bne.n	8004b84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2101      	movs	r1, #1
 8004b70:	f005 ff76 	bl	800aa60 <USB_EP0_OutStart>
 8004b74:	e006      	b.n	8004b84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	441a      	add	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f008 fad0 	bl	800d130 <HAL_PCD_DataOutStageCallback>
 8004b90:	e046      	b.n	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	4a26      	ldr	r2, [pc, #152]	@ (8004c30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d124      	bne.n	8004be4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb6:	6093      	str	r3, [r2, #8]
 8004bb8:	e032      	b.n	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f008 faa7 	bl	800d130 <HAL_PCD_DataOutStageCallback>
 8004be2:	e01d      	b.n	8004c20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d114      	bne.n	8004c14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d108      	bne.n	8004c14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2100      	movs	r1, #0
 8004c10:	f005 ff26 	bl	800aa60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f008 fa88 	bl	800d130 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	4f54300a 	.word	0x4f54300a
 8004c30:	4f54310a 	.word	0x4f54310a

08004c34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	333c      	adds	r3, #60	@ 0x3c
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a15      	ldr	r2, [pc, #84]	@ (8004cbc <PCD_EP_OutSetupPacket_int+0x88>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d90e      	bls.n	8004c88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d009      	beq.n	8004c88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c80:	461a      	mov	r2, r3
 8004c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f008 fa3f 	bl	800d10c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	@ (8004cbc <PCD_EP_OutSetupPacket_int+0x88>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d90c      	bls.n	8004cb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	799b      	ldrb	r3, [r3, #6]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d108      	bne.n	8004cb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2101      	movs	r1, #1
 8004cac:	f005 fed8 	bl	800aa60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	4f54300a 	.word	0x4f54300a

08004cc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cde:	883b      	ldrh	r3, [r7, #0]
 8004ce0:	0419      	lsls	r1, r3, #16
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cec:	e028      	b.n	8004d40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	e00d      	b.n	8004d1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	3340      	adds	r3, #64	@ 0x40
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	4413      	add	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d3ec      	bcc.n	8004d02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d28:	883b      	ldrh	r3, [r7, #0]
 8004d2a:	0418      	lsls	r0, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	4302      	orrs	r2, r0
 8004d38:	3340      	adds	r3, #64	@ 0x40
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	887a      	ldrh	r2, [r7, #2]
 8004d60:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d9e:	4b05      	ldr	r3, [pc, #20]	@ (8004db4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	10000003 	.word	0x10000003

08004db8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004dd8:	4b19      	ldr	r3, [pc, #100]	@ (8004e40 <HAL_PWREx_ConfigSupply+0x70>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d00a      	beq.n	8004dfa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004de4:	4b16      	ldr	r3, [pc, #88]	@ (8004e40 <HAL_PWREx_ConfigSupply+0x70>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e01f      	b.n	8004e36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e01d      	b.n	8004e36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004dfa:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <HAL_PWREx_ConfigSupply+0x70>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f023 0207 	bic.w	r2, r3, #7
 8004e02:	490f      	ldr	r1, [pc, #60]	@ (8004e40 <HAL_PWREx_ConfigSupply+0x70>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e0a:	f7fd f955 	bl	80020b8 <HAL_GetTick>
 8004e0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e10:	e009      	b.n	8004e26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e12:	f7fd f951 	bl	80020b8 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e20:	d901      	bls.n	8004e26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e007      	b.n	8004e36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e26:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <HAL_PWREx_ConfigSupply+0x70>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e32:	d1ee      	bne.n	8004e12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	58024800 	.word	0x58024800

08004e44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004e48:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a04      	ldr	r2, [pc, #16]	@ (8004e60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e52:	60d3      	str	r3, [r2, #12]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	58024800 	.word	0x58024800

08004e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08c      	sub	sp, #48	@ 0x30
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f000 bc1f 	b.w	80056b6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80b3 	beq.w	8004fec <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e86:	4b95      	ldr	r3, [pc, #596]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e90:	4b92      	ldr	r3, [pc, #584]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d007      	beq.n	8004eac <HAL_RCC_OscConfig+0x48>
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9e:	2b18      	cmp	r3, #24
 8004ea0:	d112      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x64>
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d10d      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	4b8b      	ldr	r3, [pc, #556]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8098 	beq.w	8004fea <HAL_RCC_OscConfig+0x186>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 8093 	bne.w	8004fea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e3f6      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed0:	d106      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x7c>
 8004ed2:	4b82      	ldr	r3, [pc, #520]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a81      	ldr	r2, [pc, #516]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e058      	b.n	8004f92 <HAL_RCC_OscConfig+0x12e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d112      	bne.n	8004f0e <HAL_RCC_OscConfig+0xaa>
 8004ee8:	4b7c      	ldr	r3, [pc, #496]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a7b      	ldr	r2, [pc, #492]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	4b79      	ldr	r3, [pc, #484]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a78      	ldr	r2, [pc, #480]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004efa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a75      	ldr	r2, [pc, #468]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	e041      	b.n	8004f92 <HAL_RCC_OscConfig+0x12e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f16:	d112      	bne.n	8004f3e <HAL_RCC_OscConfig+0xda>
 8004f18:	4b70      	ldr	r3, [pc, #448]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a6f      	ldr	r2, [pc, #444]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4b6d      	ldr	r3, [pc, #436]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a6c      	ldr	r2, [pc, #432]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f2a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b6a      	ldr	r3, [pc, #424]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a69      	ldr	r2, [pc, #420]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e029      	b.n	8004f92 <HAL_RCC_OscConfig+0x12e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004f46:	d112      	bne.n	8004f6e <HAL_RCC_OscConfig+0x10a>
 8004f48:	4b64      	ldr	r3, [pc, #400]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a63      	ldr	r2, [pc, #396]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b61      	ldr	r3, [pc, #388]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a60      	ldr	r2, [pc, #384]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	4b5e      	ldr	r3, [pc, #376]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a5d      	ldr	r2, [pc, #372]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e011      	b.n	8004f92 <HAL_RCC_OscConfig+0x12e>
 8004f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a5a      	ldr	r2, [pc, #360]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b58      	ldr	r3, [pc, #352]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a57      	ldr	r2, [pc, #348]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	4b55      	ldr	r3, [pc, #340]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a54      	ldr	r2, [pc, #336]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004f8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d013      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9a:	f7fd f88d 	bl	80020b8 <HAL_GetTick>
 8004f9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa2:	f7fd f889 	bl	80020b8 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b64      	cmp	r3, #100	@ 0x64
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e380      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fb4:	4b49      	ldr	r3, [pc, #292]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x13e>
 8004fc0:	e014      	b.n	8004fec <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc2:	f7fd f879 	bl	80020b8 <HAL_GetTick>
 8004fc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fca:	f7fd f875 	bl	80020b8 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b64      	cmp	r3, #100	@ 0x64
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e36c      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <HAL_RCC_OscConfig+0x166>
 8004fe8:	e000      	b.n	8004fec <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 808c 	beq.w	8005112 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffa:	4b38      	ldr	r3, [pc, #224]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005002:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005004:	4b35      	ldr	r3, [pc, #212]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <HAL_RCC_OscConfig+0x1bc>
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	2b18      	cmp	r3, #24
 8005014:	d137      	bne.n	8005086 <HAL_RCC_OscConfig+0x222>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d132      	bne.n	8005086 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005020:	4b2e      	ldr	r3, [pc, #184]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_OscConfig+0x1d4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e33e      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005038:	4b28      	ldr	r3, [pc, #160]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 0219 	bic.w	r2, r3, #25
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4925      	ldr	r1, [pc, #148]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fd f835 	bl	80020b8 <HAL_GetTick>
 800504e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005052:	f7fd f831 	bl	80020b8 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e328      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005064:	4b1d      	ldr	r3, [pc, #116]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	061b      	lsls	r3, r3, #24
 800507e:	4917      	ldr	r1, [pc, #92]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005084:	e045      	b.n	8005112 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d028      	beq.n	80050e0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800508e:	4b13      	ldr	r3, [pc, #76]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f023 0219 	bic.w	r2, r3, #25
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4910      	ldr	r1, [pc, #64]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 800509c:	4313      	orrs	r3, r2
 800509e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd f80a 	bl	80020b8 <HAL_GetTick>
 80050a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a8:	f7fd f806 	bl	80020b8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e2fd      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050ba:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c6:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	4901      	ldr	r1, [pc, #4]	@ (80050dc <HAL_RCC_OscConfig+0x278>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]
 80050da:	e01a      	b.n	8005112 <HAL_RCC_OscConfig+0x2ae>
 80050dc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e0:	4b97      	ldr	r3, [pc, #604]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a96      	ldr	r2, [pc, #600]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fc ffe4 	bl	80020b8 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f4:	f7fc ffe0 	bl	80020b8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e2d7      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005106:	4b8e      	ldr	r3, [pc, #568]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	d06a      	beq.n	80051f4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511e:	4b88      	ldr	r3, [pc, #544]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005126:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005128:	4b85      	ldr	r3, [pc, #532]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 800512a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d007      	beq.n	8005144 <HAL_RCC_OscConfig+0x2e0>
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b18      	cmp	r3, #24
 8005138:	d11b      	bne.n	8005172 <HAL_RCC_OscConfig+0x30e>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d116      	bne.n	8005172 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005144:	4b7e      	ldr	r3, [pc, #504]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_OscConfig+0x2f8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2b80      	cmp	r3, #128	@ 0x80
 8005156:	d001      	beq.n	800515c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e2ac      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800515c:	4b78      	ldr	r3, [pc, #480]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	4975      	ldr	r1, [pc, #468]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 800516c:	4313      	orrs	r3, r2
 800516e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005170:	e040      	b.n	80051f4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d023      	beq.n	80051c2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800517a:	4b71      	ldr	r3, [pc, #452]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a70      	ldr	r2, [pc, #448]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fc ff97 	bl	80020b8 <HAL_GetTick>
 800518a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800518e:	f7fc ff93 	bl	80020b8 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e28a      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051a0:	4b67      	ldr	r3, [pc, #412]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051ac:	4b64      	ldr	r3, [pc, #400]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	4961      	ldr	r1, [pc, #388]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	60cb      	str	r3, [r1, #12]
 80051c0:	e018      	b.n	80051f4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80051c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80051c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ce:	f7fc ff73 	bl	80020b8 <HAL_GetTick>
 80051d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051d6:	f7fc ff6f 	bl	80020b8 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e266      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051e8:	4b55      	ldr	r3, [pc, #340]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f0      	bne.n	80051d6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d036      	beq.n	800526e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d019      	beq.n	800523c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005208:	4b4d      	ldr	r3, [pc, #308]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 800520a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520c:	4a4c      	ldr	r2, [pc, #304]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fc ff50 	bl	80020b8 <HAL_GetTick>
 8005218:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521c:	f7fc ff4c 	bl	80020b8 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e243      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800522e:	4b44      	ldr	r3, [pc, #272]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x3b8>
 800523a:	e018      	b.n	800526e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800523c:	4b40      	ldr	r3, [pc, #256]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 800523e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005240:	4a3f      	ldr	r2, [pc, #252]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fc ff36 	bl	80020b8 <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005250:	f7fc ff32 	bl	80020b8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e229      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005262:	4b37      	ldr	r3, [pc, #220]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d036      	beq.n	80052e8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d019      	beq.n	80052b6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005282:	4b2f      	ldr	r3, [pc, #188]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a2e      	ldr	r2, [pc, #184]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005288:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800528c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800528e:	f7fc ff13 	bl	80020b8 <HAL_GetTick>
 8005292:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005296:	f7fc ff0f 	bl	80020b8 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e206      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052a8:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x432>
 80052b4:	e018      	b.n	80052e8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052b6:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a21      	ldr	r2, [pc, #132]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80052bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052c2:	f7fc fef9 	bl	80020b8 <HAL_GetTick>
 80052c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052ca:	f7fc fef5 	bl	80020b8 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e1ec      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052dc:	4b18      	ldr	r3, [pc, #96]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f0      	bne.n	80052ca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80af 	beq.w	8005454 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052f6:	4b13      	ldr	r3, [pc, #76]	@ (8005344 <HAL_RCC_OscConfig+0x4e0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a12      	ldr	r2, [pc, #72]	@ (8005344 <HAL_RCC_OscConfig+0x4e0>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005300:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005302:	f7fc fed9 	bl	80020b8 <HAL_GetTick>
 8005306:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fc fed5 	bl	80020b8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b64      	cmp	r3, #100	@ 0x64
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e1cc      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800531c:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <HAL_RCC_OscConfig+0x4e0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10b      	bne.n	8005348 <HAL_RCC_OscConfig+0x4e4>
 8005330:	4b03      	ldr	r3, [pc, #12]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a02      	ldr	r2, [pc, #8]	@ (8005340 <HAL_RCC_OscConfig+0x4dc>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
 800533c:	e05b      	b.n	80053f6 <HAL_RCC_OscConfig+0x592>
 800533e:	bf00      	nop
 8005340:	58024400 	.word	0x58024400
 8005344:	58024800 	.word	0x58024800
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d112      	bne.n	8005376 <HAL_RCC_OscConfig+0x512>
 8005350:	4b9d      	ldr	r3, [pc, #628]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005354:	4a9c      	ldr	r2, [pc, #624]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	6713      	str	r3, [r2, #112]	@ 0x70
 800535c:	4b9a      	ldr	r3, [pc, #616]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005360:	4a99      	ldr	r2, [pc, #612]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005366:	6713      	str	r3, [r2, #112]	@ 0x70
 8005368:	4b97      	ldr	r3, [pc, #604]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536c:	4a96      	ldr	r2, [pc, #600]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800536e:	f023 0304 	bic.w	r3, r3, #4
 8005372:	6713      	str	r3, [r2, #112]	@ 0x70
 8005374:	e03f      	b.n	80053f6 <HAL_RCC_OscConfig+0x592>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b05      	cmp	r3, #5
 800537c:	d112      	bne.n	80053a4 <HAL_RCC_OscConfig+0x540>
 800537e:	4b92      	ldr	r3, [pc, #584]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005382:	4a91      	ldr	r2, [pc, #580]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005384:	f043 0304 	orr.w	r3, r3, #4
 8005388:	6713      	str	r3, [r2, #112]	@ 0x70
 800538a:	4b8f      	ldr	r3, [pc, #572]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538e:	4a8e      	ldr	r2, [pc, #568]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005394:	6713      	str	r3, [r2, #112]	@ 0x70
 8005396:	4b8c      	ldr	r3, [pc, #560]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539a:	4a8b      	ldr	r2, [pc, #556]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a2:	e028      	b.n	80053f6 <HAL_RCC_OscConfig+0x592>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b85      	cmp	r3, #133	@ 0x85
 80053aa:	d112      	bne.n	80053d2 <HAL_RCC_OscConfig+0x56e>
 80053ac:	4b86      	ldr	r3, [pc, #536]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	4a85      	ldr	r2, [pc, #532]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053b2:	f043 0304 	orr.w	r3, r3, #4
 80053b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b8:	4b83      	ldr	r3, [pc, #524]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053bc:	4a82      	ldr	r2, [pc, #520]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c4:	4b80      	ldr	r3, [pc, #512]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c8:	4a7f      	ldr	r2, [pc, #508]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d0:	e011      	b.n	80053f6 <HAL_RCC_OscConfig+0x592>
 80053d2:	4b7d      	ldr	r3, [pc, #500]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d6:	4a7c      	ldr	r2, [pc, #496]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053de:	4b7a      	ldr	r3, [pc, #488]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	4a79      	ldr	r2, [pc, #484]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053e4:	f023 0304 	bic.w	r3, r3, #4
 80053e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ea:	4b77      	ldr	r3, [pc, #476]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	4a76      	ldr	r2, [pc, #472]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80053f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d015      	beq.n	800542a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fc fe5b 	bl	80020b8 <HAL_GetTick>
 8005402:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005404:	e00a      	b.n	800541c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005406:	f7fc fe57 	bl	80020b8 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005414:	4293      	cmp	r3, r2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e14c      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800541c:	4b6a      	ldr	r3, [pc, #424]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ee      	beq.n	8005406 <HAL_RCC_OscConfig+0x5a2>
 8005428:	e014      	b.n	8005454 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542a:	f7fc fe45 	bl	80020b8 <HAL_GetTick>
 800542e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005430:	e00a      	b.n	8005448 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fc fe41 	bl	80020b8 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e136      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005448:	4b5f      	ldr	r3, [pc, #380]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1ee      	bne.n	8005432 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 812b 	beq.w	80056b4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800545e:	4b5a      	ldr	r3, [pc, #360]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005466:	2b18      	cmp	r3, #24
 8005468:	f000 80bb 	beq.w	80055e2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	2b02      	cmp	r3, #2
 8005472:	f040 8095 	bne.w	80055a0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005476:	4b54      	ldr	r3, [pc, #336]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a53      	ldr	r2, [pc, #332]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800547c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005482:	f7fc fe19 	bl	80020b8 <HAL_GetTick>
 8005486:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548a:	f7fc fe15 	bl	80020b8 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e10c      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800549c:	4b4a      	ldr	r3, [pc, #296]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f0      	bne.n	800548a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a8:	4b47      	ldr	r3, [pc, #284]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80054aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ac:	4b47      	ldr	r3, [pc, #284]	@ (80055cc <HAL_RCC_OscConfig+0x768>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054b8:	0112      	lsls	r2, r2, #4
 80054ba:	430a      	orrs	r2, r1
 80054bc:	4942      	ldr	r1, [pc, #264]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	628b      	str	r3, [r1, #40]	@ 0x28
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c6:	3b01      	subs	r3, #1
 80054c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d0:	3b01      	subs	r3, #1
 80054d2:	025b      	lsls	r3, r3, #9
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	3b01      	subs	r3, #1
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ea:	3b01      	subs	r3, #1
 80054ec:	061b      	lsls	r3, r3, #24
 80054ee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054f2:	4935      	ldr	r1, [pc, #212]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80054f8:	4b33      	ldr	r3, [pc, #204]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	4a32      	ldr	r2, [pc, #200]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005504:	4b30      	ldr	r3, [pc, #192]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005508:	4b31      	ldr	r3, [pc, #196]	@ (80055d0 <HAL_RCC_OscConfig+0x76c>)
 800550a:	4013      	ands	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005510:	00d2      	lsls	r2, r2, #3
 8005512:	492d      	ldr	r1, [pc, #180]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005514:	4313      	orrs	r3, r2
 8005516:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005518:	4b2b      	ldr	r3, [pc, #172]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	f023 020c 	bic.w	r2, r3, #12
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	4928      	ldr	r1, [pc, #160]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005526:	4313      	orrs	r3, r2
 8005528:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800552a:	4b27      	ldr	r3, [pc, #156]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	f023 0202 	bic.w	r2, r3, #2
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	4924      	ldr	r1, [pc, #144]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005538:	4313      	orrs	r3, r2
 800553a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800553c:	4b22      	ldr	r3, [pc, #136]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005548:	4b1f      	ldr	r3, [pc, #124]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800554a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554c:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800554e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005554:	4b1c      	ldr	r3, [pc, #112]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800555a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800555e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005560:	4b19      	ldr	r3, [pc, #100]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	4a18      	ldr	r2, [pc, #96]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800556c:	4b16      	ldr	r3, [pc, #88]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a15      	ldr	r2, [pc, #84]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fc fd9e 	bl	80020b8 <HAL_GetTick>
 800557c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005580:	f7fc fd9a 	bl	80020b8 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e091      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005592:	4b0d      	ldr	r3, [pc, #52]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x71c>
 800559e:	e089      	b.n	80056b4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a0:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a08      	ldr	r2, [pc, #32]	@ (80055c8 <HAL_RCC_OscConfig+0x764>)
 80055a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fc fd84 	bl	80020b8 <HAL_GetTick>
 80055b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055b2:	e00f      	b.n	80055d4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fc fd80 	bl	80020b8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d908      	bls.n	80055d4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e077      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
 80055cc:	fffffc0c 	.word	0xfffffc0c
 80055d0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055d4:	4b3a      	ldr	r3, [pc, #232]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e9      	bne.n	80055b4 <HAL_RCC_OscConfig+0x750>
 80055e0:	e068      	b.n	80056b4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055e2:	4b37      	ldr	r3, [pc, #220]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 80055e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055e8:	4b35      	ldr	r3, [pc, #212]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d031      	beq.n	800565a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f003 0203 	and.w	r2, r3, #3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005600:	429a      	cmp	r2, r3
 8005602:	d12a      	bne.n	800565a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005610:	429a      	cmp	r2, r3
 8005612:	d122      	bne.n	800565a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005620:	429a      	cmp	r2, r3
 8005622:	d11a      	bne.n	800565a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	0a5b      	lsrs	r3, r3, #9
 8005628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005630:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d111      	bne.n	800565a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	0c1b      	lsrs	r3, r3, #16
 800563a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005642:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005644:	429a      	cmp	r2, r3
 8005646:	d108      	bne.n	800565a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	0e1b      	lsrs	r3, r3, #24
 800564c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005654:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005656:	429a      	cmp	r2, r3
 8005658:	d001      	beq.n	800565e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e02b      	b.n	80056b6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800565e:	4b18      	ldr	r3, [pc, #96]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 8005660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005662:	08db      	lsrs	r3, r3, #3
 8005664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005668:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d01f      	beq.n	80056b4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005674:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	4a11      	ldr	r2, [pc, #68]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 800567a:	f023 0301 	bic.w	r3, r3, #1
 800567e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005680:	f7fc fd1a 	bl	80020b8 <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005686:	bf00      	nop
 8005688:	f7fc fd16 	bl	80020b8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	4293      	cmp	r3, r2
 8005692:	d0f9      	beq.n	8005688 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005694:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 8005696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <HAL_RCC_OscConfig+0x860>)
 800569a:	4013      	ands	r3, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056a0:	00d2      	lsls	r2, r2, #3
 80056a2:	4907      	ldr	r1, [pc, #28]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056a8:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	4a04      	ldr	r2, [pc, #16]	@ (80056c0 <HAL_RCC_OscConfig+0x85c>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3730      	adds	r7, #48	@ 0x30
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	58024400 	.word	0x58024400
 80056c4:	ffff0007 	.word	0xffff0007

080056c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e19c      	b.n	8005a16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005908 <HAL_RCC_ClockConfig+0x240>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d910      	bls.n	800570c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b87      	ldr	r3, [pc, #540]	@ (8005908 <HAL_RCC_ClockConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f023 020f 	bic.w	r2, r3, #15
 80056f2:	4985      	ldr	r1, [pc, #532]	@ (8005908 <HAL_RCC_ClockConfig+0x240>)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fa:	4b83      	ldr	r3, [pc, #524]	@ (8005908 <HAL_RCC_ClockConfig+0x240>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d001      	beq.n	800570c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e184      	b.n	8005a16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d010      	beq.n	800573a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	4b7b      	ldr	r3, [pc, #492]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005724:	429a      	cmp	r2, r3
 8005726:	d908      	bls.n	800573a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005728:	4b78      	ldr	r3, [pc, #480]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	4975      	ldr	r1, [pc, #468]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 8005736:	4313      	orrs	r3, r2
 8005738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d010      	beq.n	8005768 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	4b70      	ldr	r3, [pc, #448]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005752:	429a      	cmp	r2, r3
 8005754:	d908      	bls.n	8005768 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005756:	4b6d      	ldr	r3, [pc, #436]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	496a      	ldr	r1, [pc, #424]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 8005764:	4313      	orrs	r3, r2
 8005766:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d010      	beq.n	8005796 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	4b64      	ldr	r3, [pc, #400]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005780:	429a      	cmp	r2, r3
 8005782:	d908      	bls.n	8005796 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005784:	4b61      	ldr	r3, [pc, #388]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	495e      	ldr	r1, [pc, #376]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 8005792:	4313      	orrs	r3, r2
 8005794:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d010      	beq.n	80057c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	4b59      	ldr	r3, [pc, #356]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d908      	bls.n	80057c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057b2:	4b56      	ldr	r3, [pc, #344]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4953      	ldr	r1, [pc, #332]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d010      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	4b4d      	ldr	r3, [pc, #308]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	429a      	cmp	r2, r3
 80057de:	d908      	bls.n	80057f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e0:	4b4a      	ldr	r3, [pc, #296]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f023 020f 	bic.w	r2, r3, #15
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4947      	ldr	r1, [pc, #284]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d055      	beq.n	80058aa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80057fe:	4b43      	ldr	r3, [pc, #268]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	4940      	ldr	r1, [pc, #256]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800580c:	4313      	orrs	r3, r2
 800580e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d107      	bne.n	8005828 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005818:	4b3c      	ldr	r3, [pc, #240]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d121      	bne.n	8005868 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0f6      	b.n	8005a16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d107      	bne.n	8005840 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005830:	4b36      	ldr	r3, [pc, #216]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d115      	bne.n	8005868 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0ea      	b.n	8005a16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005848:	4b30      	ldr	r3, [pc, #192]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0de      	b.n	8005a16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005858:	4b2c      	ldr	r3, [pc, #176]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0d6      	b.n	8005a16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005868:	4b28      	ldr	r3, [pc, #160]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f023 0207 	bic.w	r2, r3, #7
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4925      	ldr	r1, [pc, #148]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 8005876:	4313      	orrs	r3, r2
 8005878:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587a:	f7fc fc1d 	bl	80020b8 <HAL_GetTick>
 800587e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005880:	e00a      	b.n	8005898 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005882:	f7fc fc19 	bl	80020b8 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e0be      	b.n	8005a16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005898:	4b1c      	ldr	r3, [pc, #112]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d1eb      	bne.n	8005882 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d010      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	4b14      	ldr	r3, [pc, #80]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d208      	bcs.n	80058d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c6:	4b11      	ldr	r3, [pc, #68]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f023 020f 	bic.w	r2, r3, #15
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	490e      	ldr	r1, [pc, #56]	@ (800590c <HAL_RCC_ClockConfig+0x244>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <HAL_RCC_ClockConfig+0x240>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 030f 	and.w	r3, r3, #15
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d214      	bcs.n	8005910 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b08      	ldr	r3, [pc, #32]	@ (8005908 <HAL_RCC_ClockConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 020f 	bic.w	r2, r3, #15
 80058ee:	4906      	ldr	r1, [pc, #24]	@ (8005908 <HAL_RCC_ClockConfig+0x240>)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b04      	ldr	r3, [pc, #16]	@ (8005908 <HAL_RCC_ClockConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e086      	b.n	8005a16 <HAL_RCC_ClockConfig+0x34e>
 8005908:	52002000 	.word	0x52002000
 800590c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	4b3f      	ldr	r3, [pc, #252]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005928:	429a      	cmp	r2, r3
 800592a:	d208      	bcs.n	800593e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800592c:	4b3c      	ldr	r3, [pc, #240]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	4939      	ldr	r1, [pc, #228]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 800593a:	4313      	orrs	r3, r2
 800593c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d010      	beq.n	800596c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695a      	ldr	r2, [r3, #20]
 800594e:	4b34      	ldr	r3, [pc, #208]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005956:	429a      	cmp	r2, r3
 8005958:	d208      	bcs.n	800596c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800595a:	4b31      	ldr	r3, [pc, #196]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	492e      	ldr	r1, [pc, #184]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 8005968:	4313      	orrs	r3, r2
 800596a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	d010      	beq.n	800599a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	4b28      	ldr	r3, [pc, #160]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005984:	429a      	cmp	r2, r3
 8005986:	d208      	bcs.n	800599a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005988:	4b25      	ldr	r3, [pc, #148]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	4922      	ldr	r1, [pc, #136]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 8005996:	4313      	orrs	r3, r2
 8005998:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d010      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d208      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	4917      	ldr	r1, [pc, #92]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80059c8:	f000 f834 	bl	8005a34 <HAL_RCC_GetSysClockFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	4912      	ldr	r1, [pc, #72]	@ (8005a24 <HAL_RCC_ClockConfig+0x35c>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80059e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a20 <HAL_RCC_ClockConfig+0x358>)
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005a24 <HAL_RCC_ClockConfig+0x35c>)
 80059f0:	5cd3      	ldrb	r3, [r2, r3]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
 80059fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005a28 <HAL_RCC_ClockConfig+0x360>)
 80059fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a00:	4a0a      	ldr	r2, [pc, #40]	@ (8005a2c <HAL_RCC_ClockConfig+0x364>)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a06:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <HAL_RCC_ClockConfig+0x368>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fc fb0a 	bl	8002024 <HAL_InitTick>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
 8005a24:	0800f088 	.word	0x0800f088
 8005a28:	24000004 	.word	0x24000004
 8005a2c:	24000000 	.word	0x24000000
 8005a30:	24000008 	.word	0x24000008

08005a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b089      	sub	sp, #36	@ 0x24
 8005a38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a3a:	4bb3      	ldr	r3, [pc, #716]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a42:	2b18      	cmp	r3, #24
 8005a44:	f200 8155 	bhi.w	8005cf2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005a48:	a201      	add	r2, pc, #4	@ (adr r2, 8005a50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005ab5 	.word	0x08005ab5
 8005a54:	08005cf3 	.word	0x08005cf3
 8005a58:	08005cf3 	.word	0x08005cf3
 8005a5c:	08005cf3 	.word	0x08005cf3
 8005a60:	08005cf3 	.word	0x08005cf3
 8005a64:	08005cf3 	.word	0x08005cf3
 8005a68:	08005cf3 	.word	0x08005cf3
 8005a6c:	08005cf3 	.word	0x08005cf3
 8005a70:	08005adb 	.word	0x08005adb
 8005a74:	08005cf3 	.word	0x08005cf3
 8005a78:	08005cf3 	.word	0x08005cf3
 8005a7c:	08005cf3 	.word	0x08005cf3
 8005a80:	08005cf3 	.word	0x08005cf3
 8005a84:	08005cf3 	.word	0x08005cf3
 8005a88:	08005cf3 	.word	0x08005cf3
 8005a8c:	08005cf3 	.word	0x08005cf3
 8005a90:	08005ae1 	.word	0x08005ae1
 8005a94:	08005cf3 	.word	0x08005cf3
 8005a98:	08005cf3 	.word	0x08005cf3
 8005a9c:	08005cf3 	.word	0x08005cf3
 8005aa0:	08005cf3 	.word	0x08005cf3
 8005aa4:	08005cf3 	.word	0x08005cf3
 8005aa8:	08005cf3 	.word	0x08005cf3
 8005aac:	08005cf3 	.word	0x08005cf3
 8005ab0:	08005ae7 	.word	0x08005ae7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ab4:	4b94      	ldr	r3, [pc, #592]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ac0:	4b91      	ldr	r3, [pc, #580]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	08db      	lsrs	r3, r3, #3
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	4a90      	ldr	r2, [pc, #576]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ad2:	e111      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ad4:	4b8d      	ldr	r3, [pc, #564]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ad6:	61bb      	str	r3, [r7, #24]
      break;
 8005ad8:	e10e      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005ada:	4b8d      	ldr	r3, [pc, #564]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005adc:	61bb      	str	r3, [r7, #24]
      break;
 8005ade:	e10b      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8005d14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ae2:	61bb      	str	r3, [r7, #24]
      break;
 8005ae4:	e108      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ae6:	4b88      	ldr	r3, [pc, #544]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005af0:	4b85      	ldr	r3, [pc, #532]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005afa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005afc:	4b82      	ldr	r3, [pc, #520]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b06:	4b80      	ldr	r3, [pc, #512]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0a:	08db      	lsrs	r3, r3, #3
 8005b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80e1 	beq.w	8005cec <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	f000 8083 	beq.w	8005c38 <HAL_RCC_GetSysClockFreq+0x204>
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	f200 80a1 	bhi.w	8005c7c <HAL_RCC_GetSysClockFreq+0x248>
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x114>
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d056      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b46:	e099      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b48:	4b6f      	ldr	r3, [pc, #444]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02d      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b54:	4b6c      	ldr	r3, [pc, #432]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	08db      	lsrs	r3, r3, #3
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	4a6b      	ldr	r2, [pc, #428]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
 8005b64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7e:	4b62      	ldr	r3, [pc, #392]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005baa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005bae:	e087      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc2:	4b51      	ldr	r3, [pc, #324]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bd6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bf2:	e065      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c06:	4b40      	ldr	r3, [pc, #256]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c36:	e043      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c7a:	e021      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005cc0:	4b11      	ldr	r3, [pc, #68]	@ (8005d08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	0a5b      	lsrs	r3, r3, #9
 8005cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cca:	3301      	adds	r3, #1
 8005ccc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce4:	ee17 3a90 	vmov	r3, s15
 8005ce8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005cea:	e005      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61bb      	str	r3, [r7, #24]
      break;
 8005cf0:	e002      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cf4:	61bb      	str	r3, [r7, #24]
      break;
 8005cf6:	bf00      	nop
  }

  return sysclockfreq;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3724      	adds	r7, #36	@ 0x24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	58024400 	.word	0x58024400
 8005d0c:	03d09000 	.word	0x03d09000
 8005d10:	003d0900 	.word	0x003d0900
 8005d14:	016e3600 	.word	0x016e3600
 8005d18:	46000000 	.word	0x46000000
 8005d1c:	4c742400 	.word	0x4c742400
 8005d20:	4a742400 	.word	0x4a742400
 8005d24:	4bb71b00 	.word	0x4bb71b00

08005d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005d2e:	f7ff fe81 	bl	8005a34 <HAL_RCC_GetSysClockFreq>
 8005d32:	4602      	mov	r2, r0
 8005d34:	4b10      	ldr	r3, [pc, #64]	@ (8005d78 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	0a1b      	lsrs	r3, r3, #8
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	490f      	ldr	r1, [pc, #60]	@ (8005d7c <HAL_RCC_GetHCLKFreq+0x54>)
 8005d40:	5ccb      	ldrb	r3, [r1, r3]
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d78 <HAL_RCC_GetHCLKFreq+0x50>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	4a09      	ldr	r2, [pc, #36]	@ (8005d7c <HAL_RCC_GetHCLKFreq+0x54>)
 8005d56:	5cd3      	ldrb	r3, [r2, r3]
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d62:	4a07      	ldr	r2, [pc, #28]	@ (8005d80 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d66:	4a07      	ldr	r2, [pc, #28]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d6c:	4b04      	ldr	r3, [pc, #16]	@ (8005d80 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	0800f088 	.word	0x0800f088
 8005d80:	24000004 	.word	0x24000004
 8005d84:	24000000 	.word	0x24000000

08005d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005d8c:	f7ff ffcc 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b06      	ldr	r3, [pc, #24]	@ (8005dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4904      	ldr	r1, [pc, #16]	@ (8005db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	58024400 	.word	0x58024400
 8005db0:	0800f088 	.word	0x0800f088

08005db4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db8:	b0c8      	sub	sp, #288	@ 0x120
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005dd8:	2500      	movs	r5, #0
 8005dda:	ea54 0305 	orrs.w	r3, r4, r5
 8005dde:	d049      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dea:	d02f      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005dec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005df0:	d828      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005df2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005df6:	d01a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005df8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dfc:	d822      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e06:	d007      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e08:	e01c      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	4aa6      	ldr	r2, [pc, #664]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e16:	e01a      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	2102      	movs	r1, #2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f002 fa6d 	bl	8008300 <RCCEx_PLL2_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e2c:	e00f      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e32:	3328      	adds	r3, #40	@ 0x28
 8005e34:	2102      	movs	r1, #2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f002 fb14 	bl	8008464 <RCCEx_PLL3_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e42:	e004      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e4a:	e000      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e56:	4b94      	ldr	r3, [pc, #592]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e64:	4a90      	ldr	r2, [pc, #576]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e66:	430b      	orrs	r3, r1
 8005e68:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e6a:	e003      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005e80:	f04f 0900 	mov.w	r9, #0
 8005e84:	ea58 0309 	orrs.w	r3, r8, r9
 8005e88:	d047      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d82a      	bhi.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005e94:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005eb1 	.word	0x08005eb1
 8005ea0:	08005ebf 	.word	0x08005ebf
 8005ea4:	08005ed5 	.word	0x08005ed5
 8005ea8:	08005ef3 	.word	0x08005ef3
 8005eac:	08005ef3 	.word	0x08005ef3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb0:	4b7d      	ldr	r3, [pc, #500]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	4a7c      	ldr	r2, [pc, #496]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ebc:	e01a      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f002 fa1a 	bl	8008300 <RCCEx_PLL2_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ed2:	e00f      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ed8:	3328      	adds	r3, #40	@ 0x28
 8005eda:	2100      	movs	r1, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f002 fac1 	bl	8008464 <RCCEx_PLL3_Config>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ee8:	e004      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005efc:	4b6a      	ldr	r3, [pc, #424]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f00:	f023 0107 	bic.w	r1, r3, #7
 8005f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0a:	4a67      	ldr	r2, [pc, #412]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f10:	e003      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005f26:	f04f 0b00 	mov.w	fp, #0
 8005f2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f2e:	d054      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f36:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005f3a:	d036      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005f3c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005f40:	d82f      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f46:	d032      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f4c:	d829      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f50:	d02f      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f54:	d825      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f56:	2b80      	cmp	r3, #128	@ 0x80
 8005f58:	d018      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005f5a:	2b80      	cmp	r3, #128	@ 0x80
 8005f5c:	d821      	bhi.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005f62:	2b40      	cmp	r3, #64	@ 0x40
 8005f64:	d007      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005f66:	e01c      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f68:	4b4f      	ldr	r3, [pc, #316]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005f74:	e01e      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f002 f9be 	bl	8008300 <RCCEx_PLL2_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005f8a:	e013      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f90:	3328      	adds	r3, #40	@ 0x28
 8005f92:	2100      	movs	r1, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f002 fa65 	bl	8008464 <RCCEx_PLL3_Config>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fa8:	e004      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005faa:	bf00      	nop
 8005fac:	e002      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005fae:	bf00      	nop
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fca:	4a37      	ldr	r2, [pc, #220]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fd0:	e003      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005fe6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fea:	2300      	movs	r3, #0
 8005fec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ff0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	d05c      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006000:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006004:	d03b      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006006:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800600a:	d834      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800600c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006010:	d037      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006016:	d82e      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006018:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800601c:	d033      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800601e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006022:	d828      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006028:	d01a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800602a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800602e:	d822      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006038:	d007      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800603a:	e01c      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603c:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	4a19      	ldr	r2, [pc, #100]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006048:	e01e      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800604a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800604e:	3308      	adds	r3, #8
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f002 f954 	bl	8008300 <RCCEx_PLL2_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800605e:	e013      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006064:	3328      	adds	r3, #40	@ 0x28
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f002 f9fb 	bl	8008464 <RCCEx_PLL3_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006074:	e008      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800607c:	e004      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800607e:	bf00      	nop
 8006080:	e002      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006082:	bf00      	nop
 8006084:	e000      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006088:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10d      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006094:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800609c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609e:	4a02      	ldr	r2, [pc, #8]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80060a4:	e006      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80060a6:	bf00      	nop
 80060a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80060c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80060c4:	2300      	movs	r3, #0
 80060c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80060ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80060ce:	460b      	mov	r3, r1
 80060d0:	4313      	orrs	r3, r2
 80060d2:	d03a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80060d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060da:	2b30      	cmp	r3, #48	@ 0x30
 80060dc:	d01f      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80060de:	2b30      	cmp	r3, #48	@ 0x30
 80060e0:	d819      	bhi.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d00c      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d815      	bhi.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d019      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d111      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f2:	4bae      	ldr	r3, [pc, #696]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	4aad      	ldr	r2, [pc, #692]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060fe:	e011      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006104:	3308      	adds	r3, #8
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f002 f8f9 	bl	8008300 <RCCEx_PLL2_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006114:	e006      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800611c:	e002      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800611e:	bf00      	nop
 8006120:	e000      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800612c:	4b9f      	ldr	r3, [pc, #636]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800612e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006130:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800613a:	4a9c      	ldr	r2, [pc, #624]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800613c:	430b      	orrs	r3, r1
 800613e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006140:	e003      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006142:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006146:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800614a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006156:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800615a:	2300      	movs	r3, #0
 800615c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006160:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	d051      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800616a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800616e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006174:	d035      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006176:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800617a:	d82e      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x426>
 800617c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006180:	d031      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006182:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006186:	d828      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618c:	d01a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006192:	d822      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619c:	d007      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800619e:	e01c      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a0:	4b82      	ldr	r3, [pc, #520]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	4a81      	ldr	r2, [pc, #516]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061ac:	e01c      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061b2:	3308      	adds	r3, #8
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f002 f8a2 	bl	8008300 <RCCEx_PLL2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061c2:	e011      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061c8:	3328      	adds	r3, #40	@ 0x28
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f002 f949 	bl	8008464 <RCCEx_PLL3_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061d8:	e006      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061e0:	e002      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80061e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061f0:	4b6e      	ldr	r3, [pc, #440]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061fe:	4a6b      	ldr	r2, [pc, #428]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006200:	430b      	orrs	r3, r1
 8006202:	6513      	str	r3, [r2, #80]	@ 0x50
 8006204:	e003      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800620a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800620e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800621a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800621e:	2300      	movs	r3, #0
 8006220:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006224:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006228:	460b      	mov	r3, r1
 800622a:	4313      	orrs	r3, r2
 800622c:	d053      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800622e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006238:	d033      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800623a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800623e:	d82c      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006240:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006244:	d02f      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800624a:	d826      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800624c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006250:	d02b      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006252:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006256:	d820      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800625c:	d012      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800625e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006262:	d81a      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d022      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d115      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800626e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006272:	3308      	adds	r3, #8
 8006274:	2101      	movs	r1, #1
 8006276:	4618      	mov	r0, r3
 8006278:	f002 f842 	bl	8008300 <RCCEx_PLL2_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006282:	e015      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006288:	3328      	adds	r3, #40	@ 0x28
 800628a:	2101      	movs	r1, #1
 800628c:	4618      	mov	r0, r3
 800628e:	f002 f8e9 	bl	8008464 <RCCEx_PLL3_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006298:	e00a      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80062a0:	e006      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80062a2:	bf00      	nop
 80062a4:	e004      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80062ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062b8:	4b3c      	ldr	r3, [pc, #240]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80062c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062c6:	4a39      	ldr	r2, [pc, #228]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80062cc:	e003      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062e6:	2300      	movs	r3, #0
 80062e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062ec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4313      	orrs	r3, r2
 80062f4:	d060      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006302:	d039      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006304:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006308:	d832      	bhi.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800630a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800630e:	d035      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006314:	d82c      	bhi.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631a:	d031      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800631c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006320:	d826      	bhi.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006322:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006326:	d02d      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006328:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800632c:	d820      	bhi.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800632e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006332:	d012      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006338:	d81a      	bhi.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d024      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800633e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006342:	d115      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006348:	3308      	adds	r3, #8
 800634a:	2101      	movs	r1, #1
 800634c:	4618      	mov	r0, r3
 800634e:	f001 ffd7 	bl	8008300 <RCCEx_PLL2_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006358:	e017      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800635a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800635e:	3328      	adds	r3, #40	@ 0x28
 8006360:	2101      	movs	r1, #1
 8006362:	4618      	mov	r0, r3
 8006364:	f002 f87e 	bl	8008464 <RCCEx_PLL3_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800636e:	e00c      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006376:	e008      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006378:	bf00      	nop
 800637a:	e006      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800637c:	bf00      	nop
 800637e:	e004      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006380:	bf00      	nop
 8006382:	e002      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006384:	bf00      	nop
 8006386:	e000      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10e      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006392:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006396:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800639a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800639e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063a2:	4a02      	ldr	r2, [pc, #8]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063a4:	430b      	orrs	r3, r1
 80063a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80063b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063c8:	2300      	movs	r3, #0
 80063ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063d2:	460b      	mov	r3, r1
 80063d4:	4313      	orrs	r3, r2
 80063d6:	d037      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80063d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e2:	d00e      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80063e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e8:	d816      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d018      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80063ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f2:	d111      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f4:	4bc4      	ldr	r3, [pc, #784]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	4ac3      	ldr	r2, [pc, #780]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006400:	e00f      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006406:	3308      	adds	r3, #8
 8006408:	2101      	movs	r1, #1
 800640a:	4618      	mov	r0, r3
 800640c:	f001 ff78 	bl	8008300 <RCCEx_PLL2_Config>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006416:	e004      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800641e:	e000      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006422:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800642a:	4bb7      	ldr	r3, [pc, #732]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800642c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006438:	4ab3      	ldr	r2, [pc, #716]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800643a:	430b      	orrs	r3, r1
 800643c:	6513      	str	r3, [r2, #80]	@ 0x50
 800643e:	e003      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006440:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006444:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006458:	2300      	movs	r3, #0
 800645a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800645e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006462:	460b      	mov	r3, r1
 8006464:	4313      	orrs	r3, r2
 8006466:	d039      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800646c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800646e:	2b03      	cmp	r3, #3
 8006470:	d81c      	bhi.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006472:	a201      	add	r2, pc, #4	@ (adr r2, 8006478 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	080064b5 	.word	0x080064b5
 800647c:	08006489 	.word	0x08006489
 8006480:	08006497 	.word	0x08006497
 8006484:	080064b5 	.word	0x080064b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006488:	4b9f      	ldr	r3, [pc, #636]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	4a9e      	ldr	r2, [pc, #632]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800648e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006494:	e00f      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800649a:	3308      	adds	r3, #8
 800649c:	2102      	movs	r1, #2
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 ff2e 	bl	8008300 <RCCEx_PLL2_Config>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80064aa:	e004      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064b2:	e000      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80064b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064be:	4b92      	ldr	r3, [pc, #584]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c2:	f023 0103 	bic.w	r1, r3, #3
 80064c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064cc:	4a8e      	ldr	r2, [pc, #568]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ce:	430b      	orrs	r3, r1
 80064d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064d2:	e003      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80064e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064ec:	2300      	movs	r3, #0
 80064ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064f6:	460b      	mov	r3, r1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f000 8099 	beq.w	8006630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064fe:	4b83      	ldr	r3, [pc, #524]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a82      	ldr	r2, [pc, #520]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006508:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800650a:	f7fb fdd5 	bl	80020b8 <HAL_GetTick>
 800650e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006512:	e00b      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006514:	f7fb fdd0 	bl	80020b8 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b64      	cmp	r3, #100	@ 0x64
 8006522:	d903      	bls.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800652a:	e005      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800652c:	4b77      	ldr	r3, [pc, #476]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ed      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800653c:	2b00      	cmp	r3, #0
 800653e:	d173      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006540:	4b71      	ldr	r3, [pc, #452]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006542:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800654c:	4053      	eors	r3, r2
 800654e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006552:	2b00      	cmp	r3, #0
 8006554:	d015      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006556:	4b6c      	ldr	r3, [pc, #432]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006562:	4b69      	ldr	r3, [pc, #420]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006566:	4a68      	ldr	r2, [pc, #416]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800656c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800656e:	4b66      	ldr	r3, [pc, #408]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006572:	4a65      	ldr	r2, [pc, #404]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006578:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800657a:	4a63      	ldr	r2, [pc, #396]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006580:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800658a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800658e:	d118      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fb fd92 	bl	80020b8 <HAL_GetTick>
 8006594:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006598:	e00d      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659a:	f7fb fd8d 	bl	80020b8 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80065a4:	1ad2      	subs	r2, r2, r3
 80065a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d903      	bls.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80065b4:	e005      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065b6:	4b54      	ldr	r3, [pc, #336]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0eb      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80065c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d129      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065da:	d10e      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x846>
 80065dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80065e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065ec:	091a      	lsrs	r2, r3, #4
 80065ee:	4b48      	ldr	r3, [pc, #288]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	4a45      	ldr	r2, [pc, #276]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6113      	str	r3, [r2, #16]
 80065f8:	e005      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80065fa:	4b43      	ldr	r3, [pc, #268]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	4a42      	ldr	r2, [pc, #264]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006600:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006604:	6113      	str	r3, [r2, #16]
 8006606:	4b40      	ldr	r3, [pc, #256]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006608:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800660a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800660e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006616:	4a3c      	ldr	r2, [pc, #240]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006618:	430b      	orrs	r3, r1
 800661a:	6713      	str	r3, [r2, #112]	@ 0x70
 800661c:	e008      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800661e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006622:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006626:	e003      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006628:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800662c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f002 0301 	and.w	r3, r2, #1
 800663c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006640:	2300      	movs	r3, #0
 8006642:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006646:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800664a:	460b      	mov	r3, r1
 800664c:	4313      	orrs	r3, r2
 800664e:	f000 8090 	beq.w	8006772 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800665a:	2b28      	cmp	r3, #40	@ 0x28
 800665c:	d870      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006749 	.word	0x08006749
 8006668:	08006741 	.word	0x08006741
 800666c:	08006741 	.word	0x08006741
 8006670:	08006741 	.word	0x08006741
 8006674:	08006741 	.word	0x08006741
 8006678:	08006741 	.word	0x08006741
 800667c:	08006741 	.word	0x08006741
 8006680:	08006741 	.word	0x08006741
 8006684:	08006715 	.word	0x08006715
 8006688:	08006741 	.word	0x08006741
 800668c:	08006741 	.word	0x08006741
 8006690:	08006741 	.word	0x08006741
 8006694:	08006741 	.word	0x08006741
 8006698:	08006741 	.word	0x08006741
 800669c:	08006741 	.word	0x08006741
 80066a0:	08006741 	.word	0x08006741
 80066a4:	0800672b 	.word	0x0800672b
 80066a8:	08006741 	.word	0x08006741
 80066ac:	08006741 	.word	0x08006741
 80066b0:	08006741 	.word	0x08006741
 80066b4:	08006741 	.word	0x08006741
 80066b8:	08006741 	.word	0x08006741
 80066bc:	08006741 	.word	0x08006741
 80066c0:	08006741 	.word	0x08006741
 80066c4:	08006749 	.word	0x08006749
 80066c8:	08006741 	.word	0x08006741
 80066cc:	08006741 	.word	0x08006741
 80066d0:	08006741 	.word	0x08006741
 80066d4:	08006741 	.word	0x08006741
 80066d8:	08006741 	.word	0x08006741
 80066dc:	08006741 	.word	0x08006741
 80066e0:	08006741 	.word	0x08006741
 80066e4:	08006749 	.word	0x08006749
 80066e8:	08006741 	.word	0x08006741
 80066ec:	08006741 	.word	0x08006741
 80066f0:	08006741 	.word	0x08006741
 80066f4:	08006741 	.word	0x08006741
 80066f8:	08006741 	.word	0x08006741
 80066fc:	08006741 	.word	0x08006741
 8006700:	08006741 	.word	0x08006741
 8006704:	08006749 	.word	0x08006749
 8006708:	58024400 	.word	0x58024400
 800670c:	58024800 	.word	0x58024800
 8006710:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006718:	3308      	adds	r3, #8
 800671a:	2101      	movs	r1, #1
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fdef 	bl	8008300 <RCCEx_PLL2_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006728:	e00f      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800672a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800672e:	3328      	adds	r3, #40	@ 0x28
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fe96 	bl	8008464 <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800673e:	e004      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006746:	e000      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006752:	4bc0      	ldr	r3, [pc, #768]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006756:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800675a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006762:	4abc      	ldr	r2, [pc, #752]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006764:	430b      	orrs	r3, r1
 8006766:	6553      	str	r3, [r2, #84]	@ 0x54
 8006768:	e003      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800676e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f002 0302 	and.w	r3, r2, #2
 800677e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006782:	2300      	movs	r3, #0
 8006784:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006788:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800678c:	460b      	mov	r3, r1
 800678e:	4313      	orrs	r3, r2
 8006790:	d043      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006792:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800679a:	2b05      	cmp	r3, #5
 800679c:	d824      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800679e:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067f1 	.word	0x080067f1
 80067a8:	080067bd 	.word	0x080067bd
 80067ac:	080067d3 	.word	0x080067d3
 80067b0:	080067f1 	.word	0x080067f1
 80067b4:	080067f1 	.word	0x080067f1
 80067b8:	080067f1 	.word	0x080067f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c0:	3308      	adds	r3, #8
 80067c2:	2101      	movs	r1, #1
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 fd9b 	bl	8008300 <RCCEx_PLL2_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067d0:	e00f      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067d6:	3328      	adds	r3, #40	@ 0x28
 80067d8:	2101      	movs	r1, #1
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fe42 	bl	8008464 <RCCEx_PLL3_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067e6:	e004      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067ee:	e000      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80067f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067fa:	4b96      	ldr	r3, [pc, #600]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	f023 0107 	bic.w	r1, r3, #7
 8006802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680a:	4a92      	ldr	r2, [pc, #584]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800680c:	430b      	orrs	r3, r1
 800680e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006810:	e003      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006812:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006816:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800681a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f002 0304 	and.w	r3, r2, #4
 8006826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800682a:	2300      	movs	r3, #0
 800682c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006830:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006834:	460b      	mov	r3, r1
 8006836:	4313      	orrs	r3, r2
 8006838:	d043      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800683a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800683e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006842:	2b05      	cmp	r3, #5
 8006844:	d824      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006846:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	08006899 	.word	0x08006899
 8006850:	08006865 	.word	0x08006865
 8006854:	0800687b 	.word	0x0800687b
 8006858:	08006899 	.word	0x08006899
 800685c:	08006899 	.word	0x08006899
 8006860:	08006899 	.word	0x08006899
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006868:	3308      	adds	r3, #8
 800686a:	2101      	movs	r1, #1
 800686c:	4618      	mov	r0, r3
 800686e:	f001 fd47 	bl	8008300 <RCCEx_PLL2_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006878:	e00f      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800687a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800687e:	3328      	adds	r3, #40	@ 0x28
 8006880:	2101      	movs	r1, #1
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fdee 	bl	8008464 <RCCEx_PLL3_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800688e:	e004      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006896:	e000      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800689a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a6:	f023 0107 	bic.w	r1, r3, #7
 80068aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068b2:	4a68      	ldr	r2, [pc, #416]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80068b8:	e003      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f002 0320 	and.w	r3, r2, #32
 80068ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068d2:	2300      	movs	r3, #0
 80068d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068dc:	460b      	mov	r3, r1
 80068de:	4313      	orrs	r3, r2
 80068e0:	d055      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80068e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068ee:	d033      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80068f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068f4:	d82c      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fa:	d02f      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80068fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006900:	d826      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006902:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006906:	d02b      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006908:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800690c:	d820      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800690e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006912:	d012      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006918:	d81a      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d022      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800691e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006922:	d115      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006928:	3308      	adds	r3, #8
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f001 fce7 	bl	8008300 <RCCEx_PLL2_Config>
 8006932:	4603      	mov	r3, r0
 8006934:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006938:	e015      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800693a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800693e:	3328      	adds	r3, #40	@ 0x28
 8006940:	2102      	movs	r1, #2
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fd8e 	bl	8008464 <RCCEx_PLL3_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800694e:	e00a      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006956:	e006      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006958:	bf00      	nop
 800695a:	e004      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800695c:	bf00      	nop
 800695e:	e002      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006960:	bf00      	nop
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006966:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800696e:	4b39      	ldr	r3, [pc, #228]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006972:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800697a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800697e:	4a35      	ldr	r2, [pc, #212]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006980:	430b      	orrs	r3, r1
 8006982:	6553      	str	r3, [r2, #84]	@ 0x54
 8006984:	e003      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006986:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800698a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800698e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800699a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800699e:	2300      	movs	r3, #0
 80069a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d058      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80069ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069ba:	d033      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80069bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069c0:	d82c      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80069c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c6:	d02f      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80069c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069cc:	d826      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80069ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069d2:	d02b      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80069d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069d8:	d820      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80069da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069de:	d012      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80069e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069e4:	d81a      	bhi.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d022      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80069ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ee:	d115      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069f4:	3308      	adds	r3, #8
 80069f6:	2100      	movs	r1, #0
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 fc81 	bl	8008300 <RCCEx_PLL2_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a04:	e015      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a0a:	3328      	adds	r3, #40	@ 0x28
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fd28 	bl	8008464 <RCCEx_PLL3_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a1a:	e00a      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a22:	e006      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006a24:	bf00      	nop
 8006a26:	e004      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006a28:	bf00      	nop
 8006a2a:	e002      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10e      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a3a:	4b06      	ldr	r3, [pc, #24]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a4a:	4a02      	ldr	r2, [pc, #8]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a50:	e006      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006a52:	bf00      	nop
 8006a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a70:	2300      	movs	r3, #0
 8006a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a76:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	d055      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a88:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a8c:	d033      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006a8e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a92:	d82c      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a98:	d02f      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9e:	d826      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006aa0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006aa4:	d02b      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006aa6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006aaa:	d820      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ab0:	d012      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006ab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ab6:	d81a      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d022      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac0:	d115      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 fc18 	bl	8008300 <RCCEx_PLL2_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ad6:	e015      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006adc:	3328      	adds	r3, #40	@ 0x28
 8006ade:	2102      	movs	r1, #2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 fcbf 	bl	8008464 <RCCEx_PLL3_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006aec:	e00a      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006af4:	e006      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006af6:	bf00      	nop
 8006af8:	e004      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006afa:	bf00      	nop
 8006afc:	e002      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b0c:	4ba1      	ldr	r3, [pc, #644]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b10:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b1c:	4a9d      	ldr	r2, [pc, #628]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b1e:	430b      	orrs	r3, r1
 8006b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b22:	e003      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f002 0308 	and.w	r3, r2, #8
 8006b38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b46:	460b      	mov	r3, r1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	d01e      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b58:	d10c      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b5e:	3328      	adds	r3, #40	@ 0x28
 8006b60:	2102      	movs	r1, #2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 fc7e 	bl	8008464 <RCCEx_PLL3_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b74:	4b87      	ldr	r3, [pc, #540]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b78:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b84:	4a83      	ldr	r2, [pc, #524]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b86:	430b      	orrs	r3, r1
 8006b88:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f002 0310 	and.w	r3, r2, #16
 8006b96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ba0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	d01e      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bb6:	d10c      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bbc:	3328      	adds	r3, #40	@ 0x28
 8006bbe:	2102      	movs	r1, #2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 fc4f 	bl	8008464 <RCCEx_PLL3_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bd2:	4b70      	ldr	r3, [pc, #448]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006be2:	4a6c      	ldr	r2, [pc, #432]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006be4:	430b      	orrs	r3, r1
 8006be6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006bf4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bfe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d03e      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c14:	d022      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006c16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c1a:	d81b      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c24:	d00b      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006c26:	e015      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 fb65 	bl	8008300 <RCCEx_PLL2_Config>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c3c:	e00f      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c42:	3328      	adds	r3, #40	@ 0x28
 8006c44:	2102      	movs	r1, #2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 fc0c 	bl	8008464 <RCCEx_PLL3_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c52:	e004      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c5a:	e000      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c66:	4b4b      	ldr	r3, [pc, #300]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c76:	4a47      	ldr	r2, [pc, #284]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c7c:	e003      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c94:	2300      	movs	r3, #0
 8006c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d03b      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006caa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cae:	d01f      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006cb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cb4:	d818      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cba:	d003      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006cbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cc0:	d007      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006cc2:	e011      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc4:	4b33      	ldr	r3, [pc, #204]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc8:	4a32      	ldr	r2, [pc, #200]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cd0:	e00f      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cd6:	3328      	adds	r3, #40	@ 0x28
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fbc2 	bl	8008464 <RCCEx_PLL3_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ce6:	e004      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006cee:	e000      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cfa:	4b26      	ldr	r3, [pc, #152]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cfe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0a:	4a22      	ldr	r2, [pc, #136]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d10:	e003      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006d26:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d28:	2300      	movs	r3, #0
 8006d2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d30:	460b      	mov	r3, r1
 8006d32:	4313      	orrs	r3, r2
 8006d34:	d034      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d44:	d007      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006d46:	e011      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d48:	4b12      	ldr	r3, [pc, #72]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	4a11      	ldr	r2, [pc, #68]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d54:	e00e      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	2102      	movs	r1, #2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 face 	bl	8008300 <RCCEx_PLL2_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d6a:	e003      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10d      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d7c:	4b05      	ldr	r3, [pc, #20]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8a:	4a02      	ldr	r2, [pc, #8]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d90:	e006      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006d92:	bf00      	nop
 8006d94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dae:	2300      	movs	r3, #0
 8006db0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006db2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006db6:	460b      	mov	r3, r1
 8006db8:	4313      	orrs	r3, r2
 8006dba:	d00c      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dc0:	3328      	adds	r3, #40	@ 0x28
 8006dc2:	2102      	movs	r1, #2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 fb4d 	bl	8008464 <RCCEx_PLL3_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006de2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006de4:	2300      	movs	r3, #0
 8006de6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006de8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006dec:	460b      	mov	r3, r1
 8006dee:	4313      	orrs	r3, r2
 8006df0:	d038      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dfe:	d018      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006e00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e04:	d811      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e0a:	d014      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e10:	d80b      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d011      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e1a:	d106      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e1c:	4bc3      	ldr	r3, [pc, #780]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e20:	4ac2      	ldr	r2, [pc, #776]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e28:	e008      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e30:	e004      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006e32:	bf00      	nop
 8006e34:	e002      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006e36:	bf00      	nop
 8006e38:	e000      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10b      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e44:	4bb9      	ldr	r3, [pc, #740]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e48:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e54:	4ab5      	ldr	r2, [pc, #724]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e56:	430b      	orrs	r3, r1
 8006e58:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e5a:	e003      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e72:	2300      	movs	r3, #0
 8006e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	d009      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e80:	4baa      	ldr	r3, [pc, #680]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e8e:	4aa7      	ldr	r2, [pc, #668]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e90:	430b      	orrs	r3, r1
 8006e92:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ea0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ea6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4313      	orrs	r3, r2
 8006eae:	d009      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006eb0:	4b9e      	ldr	r3, [pc, #632]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebe:	4a9b      	ldr	r2, [pc, #620]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ed6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006eda:	460b      	mov	r3, r1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	d009      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006ee0:	4b92      	ldr	r3, [pc, #584]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8006ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eee:	4a8f      	ldr	r2, [pc, #572]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f02:	2300      	movs	r3, #0
 8006f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f10:	4b86      	ldr	r3, [pc, #536]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	4a85      	ldr	r2, [pc, #532]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f1a:	6113      	str	r3, [r2, #16]
 8006f1c:	4b83      	ldr	r3, [pc, #524]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f1e:	6919      	ldr	r1, [r3, #16]
 8006f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006f28:	4a80      	ldr	r2, [pc, #512]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f44:	460b      	mov	r3, r1
 8006f46:	4313      	orrs	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f4a:	4b78      	ldr	r3, [pc, #480]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	4a74      	ldr	r2, [pc, #464]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f74:	460b      	mov	r3, r1
 8006f76:	4313      	orrs	r3, r2
 8006f78:	d00a      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f8a:	4a68      	ldr	r2, [pc, #416]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	d011      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 f9a3 	bl	8008300 <RCCEx_PLL2_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fcc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	2100      	movs	r1, #0
 8006fda:	6239      	str	r1, [r7, #32]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fe2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	d011      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f983 	bl	8008300 <RCCEx_PLL2_Config>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007000:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007008:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800700c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	2100      	movs	r1, #0
 800701a:	61b9      	str	r1, [r7, #24]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007026:	460b      	mov	r3, r1
 8007028:	4313      	orrs	r3, r2
 800702a:	d011      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800702c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007030:	3308      	adds	r3, #8
 8007032:	2102      	movs	r1, #2
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f963 	bl	8008300 <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007040:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800704c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	2100      	movs	r1, #0
 800705a:	6139      	str	r1, [r7, #16]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	d011      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800706c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007070:	3328      	adds	r3, #40	@ 0x28
 8007072:	2100      	movs	r1, #0
 8007074:	4618      	mov	r0, r3
 8007076:	f001 f9f5 	bl	8008464 <RCCEx_PLL3_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007080:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800708c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	2100      	movs	r1, #0
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80070a6:	460b      	mov	r3, r1
 80070a8:	4313      	orrs	r3, r2
 80070aa:	d011      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070b0:	3328      	adds	r3, #40	@ 0x28
 80070b2:	2101      	movs	r1, #1
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 f9d5 	bl	8008464 <RCCEx_PLL3_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80070c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80070d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	2100      	movs	r1, #0
 80070da:	6039      	str	r1, [r7, #0]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070e6:	460b      	mov	r3, r1
 80070e8:	4313      	orrs	r3, r2
 80070ea:	d011      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f0:	3328      	adds	r3, #40	@ 0x28
 80070f2:	2102      	movs	r1, #2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 f9b5 	bl	8008464 <RCCEx_PLL3_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007100:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007108:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800710c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007110:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	e000      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
}
 800711e:	4618      	mov	r0, r3
 8007120:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007124:	46bd      	mov	sp, r7
 8007126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800712a:	bf00      	nop
 800712c:	58024400 	.word	0x58024400

08007130 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b090      	sub	sp, #64	@ 0x40
 8007134:	af00      	add	r7, sp, #0
 8007136:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800713a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800713e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007142:	430b      	orrs	r3, r1
 8007144:	f040 8094 	bne.w	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007148:	4b97      	ldr	r3, [pc, #604]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800714a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	2b04      	cmp	r3, #4
 8007156:	f200 8087 	bhi.w	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800715a:	a201      	add	r2, pc, #4	@ (adr r2, 8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007175 	.word	0x08007175
 8007164:	0800719d 	.word	0x0800719d
 8007168:	080071c5 	.word	0x080071c5
 800716c:	08007261 	.word	0x08007261
 8007170:	080071ed 	.word	0x080071ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007174:	4b8c      	ldr	r3, [pc, #560]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007180:	d108      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007186:	4618      	mov	r0, r3
 8007188:	f000 ff68 	bl	800805c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007190:	f000 bc97 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007198:	f000 bc93 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800719c:	4b82      	ldr	r3, [pc, #520]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071a8:	d108      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071aa:	f107 0318 	add.w	r3, r7, #24
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fcac 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b8:	f000 bc83 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c0:	f000 bc7f 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071c4:	4b78      	ldr	r3, [pc, #480]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071d0:	d108      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071d2:	f107 030c 	add.w	r3, r7, #12
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fdec 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e0:	f000 bc6f 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e8:	f000 bc6b 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071ec:	4b6e      	ldr	r3, [pc, #440]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071f6:	4b6c      	ldr	r3, [pc, #432]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d10c      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007204:	2b00      	cmp	r3, #0
 8007206:	d109      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007208:	4b67      	ldr	r3, [pc, #412]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	08db      	lsrs	r3, r3, #3
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	4a66      	ldr	r2, [pc, #408]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800721a:	e01f      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800721c:	4b62      	ldr	r3, [pc, #392]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007228:	d106      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007230:	d102      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007232:	4b5f      	ldr	r3, [pc, #380]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007236:	e011      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007238:	4b5b      	ldr	r3, [pc, #364]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007244:	d106      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800724c:	d102      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800724e:	4b59      	ldr	r3, [pc, #356]	@ (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007252:	e003      	b.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007258:	f000 bc33 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800725c:	f000 bc31 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007260:	4b55      	ldr	r3, [pc, #340]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007264:	f000 bc2d 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800726c:	f000 bc29 	b.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007274:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007278:	430b      	orrs	r3, r1
 800727a:	f040 809f 	bne.w	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800727e:	4b4a      	ldr	r3, [pc, #296]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007282:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007286:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800728e:	d04d      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007296:	f200 8084 	bhi.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800729a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729c:	2bc0      	cmp	r3, #192	@ 0xc0
 800729e:	d07d      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80072a4:	d87d      	bhi.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	2b80      	cmp	r3, #128	@ 0x80
 80072aa:	d02d      	beq.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	2b80      	cmp	r3, #128	@ 0x80
 80072b0:	d877      	bhi.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	2b40      	cmp	r3, #64	@ 0x40
 80072bc:	d012      	beq.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80072be:	e070      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072c0:	4b39      	ldr	r3, [pc, #228]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072cc:	d107      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fec2 	bl	800805c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072dc:	e3f1      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e2:	e3ee      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072e4:	4b30      	ldr	r3, [pc, #192]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072f0:	d107      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072f2:	f107 0318 	add.w	r3, r7, #24
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fc08 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007300:	e3df      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007306:	e3dc      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007308:	4b27      	ldr	r3, [pc, #156]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007314:	d107      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007316:	f107 030c 	add.w	r3, r7, #12
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fd4a 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007324:	e3cd      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800732a:	e3ca      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800732c:	4b1e      	ldr	r3, [pc, #120]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800732e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007330:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007336:	4b1c      	ldr	r3, [pc, #112]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b04      	cmp	r3, #4
 8007340:	d10c      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007348:	4b17      	ldr	r3, [pc, #92]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	08db      	lsrs	r3, r3, #3
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	4a16      	ldr	r2, [pc, #88]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
 8007358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800735a:	e01e      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800735c:	4b12      	ldr	r3, [pc, #72]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007368:	d106      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800736a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007370:	d102      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007372:	4b0f      	ldr	r3, [pc, #60]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007376:	e010      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007378:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007384:	d106      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800738c:	d102      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800738e:	4b09      	ldr	r3, [pc, #36]	@ (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007392:	e002      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007398:	e393      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800739a:	e392      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800739c:	4b06      	ldr	r3, [pc, #24]	@ (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800739e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a0:	e38f      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a6:	e38c      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80073a8:	58024400 	.word	0x58024400
 80073ac:	03d09000 	.word	0x03d09000
 80073b0:	003d0900 	.word	0x003d0900
 80073b4:	016e3600 	.word	0x016e3600
 80073b8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80073bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80073c4:	430b      	orrs	r3, r1
 80073c6:	f040 809c 	bne.w	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80073ca:	4b9e      	ldr	r3, [pc, #632]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80073cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ce:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80073d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073da:	d054      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80073dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073e2:	f200 808b 	bhi.w	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073ec:	f000 8083 	beq.w	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073f6:	f200 8081 	bhi.w	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007400:	d02f      	beq.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007408:	d878      	bhi.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007416:	d012      	beq.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007418:	e070      	b.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800741a:	4b8a      	ldr	r3, [pc, #552]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007426:	d107      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007428:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fe15 	bl	800805c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007436:	e344      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800743c:	e341      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800743e:	4b81      	ldr	r3, [pc, #516]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800744a:	d107      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744c:	f107 0318 	add.w	r3, r7, #24
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fb5b 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800745a:	e332      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007460:	e32f      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007462:	4b78      	ldr	r3, [pc, #480]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800746a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800746e:	d107      	bne.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007470:	f107 030c 	add.w	r3, r7, #12
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fc9d 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800747e:	e320      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007484:	e31d      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007486:	4b6f      	ldr	r3, [pc, #444]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007490:	4b6c      	ldr	r3, [pc, #432]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b04      	cmp	r3, #4
 800749a:	d10c      	bne.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800749c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d109      	bne.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074a2:	4b68      	ldr	r3, [pc, #416]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	08db      	lsrs	r3, r3, #3
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	4a66      	ldr	r2, [pc, #408]	@ (8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80074ae:	fa22 f303 	lsr.w	r3, r2, r3
 80074b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074b4:	e01e      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074b6:	4b63      	ldr	r3, [pc, #396]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074c2:	d106      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80074c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ca:	d102      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074cc:	4b5f      	ldr	r3, [pc, #380]	@ (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d0:	e010      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074d2:	4b5c      	ldr	r3, [pc, #368]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074de:	d106      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80074e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074e6:	d102      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074e8:	4b59      	ldr	r3, [pc, #356]	@ (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80074ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ec:	e002      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80074f2:	e2e6      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80074f4:	e2e5      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80074f6:	4b57      	ldr	r3, [pc, #348]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074fa:	e2e2      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007500:	e2df      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007506:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800750a:	430b      	orrs	r3, r1
 800750c:	f040 80a7 	bne.w	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007510:	4b4c      	ldr	r3, [pc, #304]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007514:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007518:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800751a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007520:	d055      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007528:	f200 8096 	bhi.w	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007532:	f000 8084 	beq.w	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8007536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007538:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800753c:	f200 808c 	bhi.w	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007546:	d030      	beq.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8007548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800754e:	f200 8083 	bhi.w	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800755e:	d012      	beq.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8007560:	e07a      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007562:	4b38      	ldr	r3, [pc, #224]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800756a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800756e:	d107      	bne.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fd71 	bl	800805c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800757e:	e2a0      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007584:	e29d      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007586:	4b2f      	ldr	r3, [pc, #188]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800758e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007592:	d107      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007594:	f107 0318 	add.w	r3, r7, #24
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fab7 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075a2:	e28e      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a8:	e28b      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075aa:	4b26      	ldr	r3, [pc, #152]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b6:	d107      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075b8:	f107 030c 	add.w	r3, r7, #12
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fbf9 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c6:	e27c      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075cc:	e279      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80075d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d10c      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80075e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075ea:	4b16      	ldr	r3, [pc, #88]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	08db      	lsrs	r3, r3, #3
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	4a14      	ldr	r2, [pc, #80]	@ (8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80075f6:	fa22 f303 	lsr.w	r3, r2, r3
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075fc:	e01e      	b.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075fe:	4b11      	ldr	r3, [pc, #68]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800760a:	d106      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007612:	d102      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007614:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007618:	e010      	b.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800761a:	4b0a      	ldr	r3, [pc, #40]	@ (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007626:	d106      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762e:	d102      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007630:	4b07      	ldr	r3, [pc, #28]	@ (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007634:	e002      	b.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800763a:	e242      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800763c:	e241      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800763e:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007642:	e23e      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007644:	58024400 	.word	0x58024400
 8007648:	03d09000 	.word	0x03d09000
 800764c:	003d0900 	.word	0x003d0900
 8007650:	016e3600 	.word	0x016e3600
 8007654:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800765c:	e231      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800765e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007662:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007666:	430b      	orrs	r3, r1
 8007668:	f040 8085 	bne.w	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800766c:	4b9c      	ldr	r3, [pc, #624]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800766e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007670:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007674:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800767c:	d06b      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800767e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007684:	d874      	bhi.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800768c:	d056      	beq.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007694:	d86c      	bhi.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800769c:	d03b      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076a4:	d864      	bhi.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076ac:	d021      	beq.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076b4:	d85c      	bhi.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c2:	d004      	beq.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80076c4:	e054      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80076c6:	f7fe fb5f 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 80076ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076cc:	e1f9      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076ce:	4b84      	ldr	r3, [pc, #528]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076da:	d107      	bne.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076dc:	f107 0318 	add.w	r3, r7, #24
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fa13 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ea:	e1ea      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f0:	e1e7      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076f2:	4b7b      	ldr	r3, [pc, #492]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076fe:	d107      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fb55 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800770e:	e1d8      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007714:	e1d5      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007716:	4b72      	ldr	r3, [pc, #456]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0304 	and.w	r3, r3, #4
 800771e:	2b04      	cmp	r3, #4
 8007720:	d109      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007722:	4b6f      	ldr	r3, [pc, #444]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	08db      	lsrs	r3, r3, #3
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	4a6d      	ldr	r2, [pc, #436]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800772e:	fa22 f303 	lsr.w	r3, r2, r3
 8007732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007734:	e1c5      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800773a:	e1c2      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800773c:	4b68      	ldr	r3, [pc, #416]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007748:	d102      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800774a:	4b67      	ldr	r3, [pc, #412]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800774c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800774e:	e1b8      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007754:	e1b5      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007756:	4b62      	ldr	r3, [pc, #392]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800775e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007762:	d102      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8007764:	4b61      	ldr	r3, [pc, #388]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007768:	e1ab      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776e:	e1a8      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007774:	e1a5      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800777e:	430b      	orrs	r3, r1
 8007780:	d173      	bne.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007782:	4b57      	ldr	r3, [pc, #348]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007786:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800778a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800778c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007792:	d02f      	beq.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800779a:	d863      	bhi.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a8:	d012      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80077aa:	e05b      	b.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077ac:	4b4c      	ldr	r3, [pc, #304]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077b8:	d107      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ba:	f107 0318 	add.w	r3, r7, #24
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f9a4 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077c8:	e17b      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ce:	e178      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077d0:	4b43      	ldr	r3, [pc, #268]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077dc:	d107      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077de:	f107 030c 	add.w	r3, r7, #12
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fae6 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077ec:	e169      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f2:	e166      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077f4:	4b3a      	ldr	r3, [pc, #232]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80077f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077fe:	4b38      	ldr	r3, [pc, #224]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b04      	cmp	r3, #4
 8007808:	d10c      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800780a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780c:	2b00      	cmp	r3, #0
 800780e:	d109      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007810:	4b33      	ldr	r3, [pc, #204]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	08db      	lsrs	r3, r3, #3
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	4a32      	ldr	r2, [pc, #200]	@ (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
 8007820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007822:	e01e      	b.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007824:	4b2e      	ldr	r3, [pc, #184]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007830:	d106      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8007832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007838:	d102      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800783a:	4b2b      	ldr	r3, [pc, #172]	@ (80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800783c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800783e:	e010      	b.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007840:	4b27      	ldr	r3, [pc, #156]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800784c:	d106      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800784e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007854:	d102      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007856:	4b25      	ldr	r3, [pc, #148]	@ (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800785a:	e002      	b.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007860:	e12f      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007862:	e12e      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007868:	e12b      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800786a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800786e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007872:	430b      	orrs	r3, r1
 8007874:	d13c      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007876:	4b1a      	ldr	r3, [pc, #104]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800787a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800787e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	2b00      	cmp	r3, #0
 8007884:	d004      	beq.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800788c:	d012      	beq.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800788e:	e023      	b.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007890:	4b13      	ldr	r3, [pc, #76]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800789c:	d107      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800789e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fbda 	bl	800805c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ac:	e109      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b2:	e106      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078b4:	4b0a      	ldr	r3, [pc, #40]	@ (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078c0:	d107      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078c2:	f107 0318 	add.w	r3, r7, #24
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f920 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d0:	e0f7      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d6:	e0f4      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078dc:	e0f1      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80078de:	bf00      	nop
 80078e0:	58024400 	.word	0x58024400
 80078e4:	03d09000 	.word	0x03d09000
 80078e8:	003d0900 	.word	0x003d0900
 80078ec:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80078f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80078f8:	430b      	orrs	r3, r1
 80078fa:	f040 8091 	bne.w	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80078fe:	4b73      	ldr	r3, [pc, #460]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007902:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007906:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800790e:	f000 8081 	beq.w	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007914:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007918:	d87f      	bhi.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007920:	d06b      	beq.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007928:	d877      	bhi.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800792a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007930:	d056      	beq.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8007932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007938:	d86f      	bhi.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007940:	d03b      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007948:	d867      	bhi.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007950:	d021      	beq.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007958:	d85f      	bhi.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	2b00      	cmp	r3, #0
 800795e:	d004      	beq.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007966:	d004      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007968:	e057      	b.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800796a:	f000 f8b9 	bl	8007ae0 <HAL_RCCEx_GetD3PCLK1Freq>
 800796e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007970:	e0a7      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007972:	4b56      	ldr	r3, [pc, #344]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800797a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797e:	d107      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007980:	f107 0318 	add.w	r3, r7, #24
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f8c1 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800798e:	e098      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007994:	e095      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007996:	4b4d      	ldr	r3, [pc, #308]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800799e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a2:	d107      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fa03 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079b2:	e086      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079b8:	e083      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ba:	4b44      	ldr	r3, [pc, #272]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d109      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079c6:	4b41      	ldr	r3, [pc, #260]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	08db      	lsrs	r3, r3, #3
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	4a3f      	ldr	r2, [pc, #252]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80079d2:	fa22 f303 	lsr.w	r3, r2, r3
 80079d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079d8:	e073      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079de:	e070      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80079e0:	4b3a      	ldr	r3, [pc, #232]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079ec:	d102      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80079ee:	4b39      	ldr	r3, [pc, #228]	@ (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079f2:	e066      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079f8:	e063      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80079fa:	4b34      	ldr	r3, [pc, #208]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a06:	d102      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007a08:	4b33      	ldr	r3, [pc, #204]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a0c:	e059      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a12:	e056      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a14:	4b31      	ldr	r3, [pc, #196]	@ (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8007a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a18:	e053      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a1e:	e050      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a24:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	d148      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007a2c:	4b27      	ldr	r3, [pc, #156]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a3c:	d02a      	beq.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a44:	d838      	bhi.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a52:	d00d      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007a54:	e030      	b.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a56:	4b1d      	ldr	r3, [pc, #116]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a62:	d102      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8007a64:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a68:	e02b      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6e:	e028      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a70:	4b16      	ldr	r3, [pc, #88]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a7c:	d107      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 faea 	bl	800805c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8c:	e019      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a92:	e016      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a94:	4b0d      	ldr	r3, [pc, #52]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aa0:	d107      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa2:	f107 0318 	add.w	r3, r7, #24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 f830 	bl	8007b0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ab0:	e007      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab6:	e004      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007abc:	e001      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3740      	adds	r7, #64	@ 0x40
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	58024400 	.word	0x58024400
 8007ad0:	03d09000 	.word	0x03d09000
 8007ad4:	003d0900 	.word	0x003d0900
 8007ad8:	016e3600 	.word	0x016e3600
 8007adc:	00bb8000 	.word	0x00bb8000

08007ae0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007ae4:	f7fe f920 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	4b06      	ldr	r3, [pc, #24]	@ (8007b04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	091b      	lsrs	r3, r3, #4
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	4904      	ldr	r1, [pc, #16]	@ (8007b08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007af6:	5ccb      	ldrb	r3, [r1, r3]
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	58024400 	.word	0x58024400
 8007b08:	0800f088 	.word	0x0800f088

08007b0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b089      	sub	sp, #36	@ 0x24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b14:	4ba1      	ldr	r3, [pc, #644]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b1e:	4b9f      	ldr	r3, [pc, #636]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b22:	0b1b      	lsrs	r3, r3, #12
 8007b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b2a:	4b9c      	ldr	r3, [pc, #624]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2e:	091b      	lsrs	r3, r3, #4
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007b36:	4b99      	ldr	r3, [pc, #612]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3a:	08db      	lsrs	r3, r3, #3
 8007b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	fb02 f303 	mul.w	r3, r2, r3
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8111 	beq.w	8007d7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	f000 8083 	beq.w	8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	f200 80a1 	bhi.w	8007cac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d056      	beq.n	8007c24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b76:	e099      	b.n	8007cac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b78:	4b88      	ldr	r3, [pc, #544]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d02d      	beq.n	8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b84:	4b85      	ldr	r3, [pc, #532]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	08db      	lsrs	r3, r3, #3
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	4a84      	ldr	r2, [pc, #528]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
 8007b94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	ee07 3a90 	vmov	s15, r3
 8007b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bae:	4b7b      	ldr	r3, [pc, #492]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007bde:	e087      	b.n	8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c22:	e065      	b.n	8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c36:	4b59      	ldr	r3, [pc, #356]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c66:	e043      	b.n	8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7a:	4b48      	ldr	r3, [pc, #288]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007caa:	e021      	b.n	8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cbe:	4b37      	ldr	r3, [pc, #220]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf4:	0a5b      	lsrs	r3, r3, #9
 8007cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d16:	ee17 2a90 	vmov	r2, s15
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	0c1b      	lsrs	r3, r3, #16
 8007d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d28:	ee07 3a90 	vmov	s15, r3
 8007d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d44:	ee17 2a90 	vmov	r2, s15
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007d4c:	4b13      	ldr	r3, [pc, #76]	@ (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d50:	0e1b      	lsrs	r3, r3, #24
 8007d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d72:	ee17 2a90 	vmov	r2, s15
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d7a:	e008      	b.n	8007d8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	609a      	str	r2, [r3, #8]
}
 8007d8e:	bf00      	nop
 8007d90:	3724      	adds	r7, #36	@ 0x24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	58024400 	.word	0x58024400
 8007da0:	03d09000 	.word	0x03d09000
 8007da4:	46000000 	.word	0x46000000
 8007da8:	4c742400 	.word	0x4c742400
 8007dac:	4a742400 	.word	0x4a742400
 8007db0:	4bb71b00 	.word	0x4bb71b00

08007db4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b089      	sub	sp, #36	@ 0x24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dbc:	4ba1      	ldr	r3, [pc, #644]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007dc6:	4b9f      	ldr	r3, [pc, #636]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dca:	0d1b      	lsrs	r3, r3, #20
 8007dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007dde:	4b99      	ldr	r3, [pc, #612]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de2:	08db      	lsrs	r3, r3, #3
 8007de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	fb02 f303 	mul.w	r3, r2, r3
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8111 	beq.w	8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	f000 8083 	beq.w	8007f10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	f200 80a1 	bhi.w	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d056      	beq.n	8007ecc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e1e:	e099      	b.n	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e20:	4b88      	ldr	r3, [pc, #544]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02d      	beq.n	8007e88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e2c:	4b85      	ldr	r3, [pc, #532]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	4a84      	ldr	r2, [pc, #528]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007e38:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e56:	4b7b      	ldr	r3, [pc, #492]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800804c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e86:	e087      	b.n	8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800804c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eca:	e065      	b.n	8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ede:	4b59      	ldr	r3, [pc, #356]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800804c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f0e:	e043      	b.n	8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f22:	4b48      	ldr	r3, [pc, #288]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800804c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f52:	e021      	b.n	8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f66:	4b37      	ldr	r3, [pc, #220]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800804c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007f98:	4b2a      	ldr	r3, [pc, #168]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	0a5b      	lsrs	r3, r3, #9
 8007f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fbe:	ee17 2a90 	vmov	r2, s15
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fca:	0c1b      	lsrs	r3, r3, #16
 8007fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fec:	ee17 2a90 	vmov	r2, s15
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007ff4:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff8:	0e1b      	lsrs	r3, r3, #24
 8007ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800800a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800800e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801a:	ee17 2a90 	vmov	r2, s15
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008022:	e008      	b.n	8008036 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	609a      	str	r2, [r3, #8]
}
 8008036:	bf00      	nop
 8008038:	3724      	adds	r7, #36	@ 0x24
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	58024400 	.word	0x58024400
 8008048:	03d09000 	.word	0x03d09000
 800804c:	46000000 	.word	0x46000000
 8008050:	4c742400 	.word	0x4c742400
 8008054:	4a742400 	.word	0x4a742400
 8008058:	4bb71b00 	.word	0x4bb71b00

0800805c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800805c:	b480      	push	{r7}
 800805e:	b089      	sub	sp, #36	@ 0x24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008064:	4ba0      	ldr	r3, [pc, #640]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800806e:	4b9e      	ldr	r3, [pc, #632]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008078:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800807a:	4b9b      	ldr	r3, [pc, #620]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008084:	4b98      	ldr	r3, [pc, #608]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008088:	08db      	lsrs	r3, r3, #3
 800808a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	fb02 f303 	mul.w	r3, r2, r3
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 8111 	beq.w	80082ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	f000 8083 	beq.w	80081b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	f200 80a1 	bhi.w	80081fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d056      	beq.n	8008172 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80080c4:	e099      	b.n	80081fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080c6:	4b88      	ldr	r3, [pc, #544]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d02d      	beq.n	800812e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080d2:	4b85      	ldr	r3, [pc, #532]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	08db      	lsrs	r3, r3, #3
 80080d8:	f003 0303 	and.w	r3, r3, #3
 80080dc:	4a83      	ldr	r2, [pc, #524]	@ (80082ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80080de:	fa22 f303 	lsr.w	r3, r2, r3
 80080e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	ee07 3a90 	vmov	s15, r3
 80080f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080fc:	4b7a      	ldr	r3, [pc, #488]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008110:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80082f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800811c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008128:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800812c:	e087      	b.n	800823e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	ee07 3a90 	vmov	s15, r3
 8008134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008138:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800813c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008140:	4b69      	ldr	r3, [pc, #420]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008150:	ed97 6a03 	vldr	s12, [r7, #12]
 8008154:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80082f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008170:	e065      	b.n	800823e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	ee07 3a90 	vmov	s15, r3
 8008178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80082f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008184:	4b58      	ldr	r3, [pc, #352]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818c:	ee07 3a90 	vmov	s15, r3
 8008190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008194:	ed97 6a03 	vldr	s12, [r7, #12]
 8008198:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80082f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800819c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081b4:	e043      	b.n	800823e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	ee07 3a90 	vmov	s15, r3
 80081bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80082fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80081c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c8:	4b47      	ldr	r3, [pc, #284]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80081dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80082f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081f8:	e021      	b.n	800823e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008204:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80082f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820c:	4b36      	ldr	r3, [pc, #216]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008214:	ee07 3a90 	vmov	s15, r3
 8008218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008220:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80082f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008238:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800823c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800823e:	4b2a      	ldr	r3, [pc, #168]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008242:	0a5b      	lsrs	r3, r3, #9
 8008244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008250:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008258:	edd7 6a07 	vldr	s13, [r7, #28]
 800825c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008264:	ee17 2a90 	vmov	r2, s15
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800826c:	4b1e      	ldr	r3, [pc, #120]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800826e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008270:	0c1b      	lsrs	r3, r3, #16
 8008272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008286:	edd7 6a07 	vldr	s13, [r7, #28]
 800828a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008292:	ee17 2a90 	vmov	r2, s15
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800829a:	4b13      	ldr	r3, [pc, #76]	@ (80082e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800829c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829e:	0e1b      	lsrs	r3, r3, #24
 80082a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082c0:	ee17 2a90 	vmov	r2, s15
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80082c8:	e008      	b.n	80082dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	609a      	str	r2, [r3, #8]
}
 80082dc:	bf00      	nop
 80082de:	3724      	adds	r7, #36	@ 0x24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	58024400 	.word	0x58024400
 80082ec:	03d09000 	.word	0x03d09000
 80082f0:	46000000 	.word	0x46000000
 80082f4:	4c742400 	.word	0x4c742400
 80082f8:	4a742400 	.word	0x4a742400
 80082fc:	4bb71b00 	.word	0x4bb71b00

08008300 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800830e:	4b53      	ldr	r3, [pc, #332]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	2b03      	cmp	r3, #3
 8008318:	d101      	bne.n	800831e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e099      	b.n	8008452 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800831e:	4b4f      	ldr	r3, [pc, #316]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a4e      	ldr	r2, [pc, #312]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008324:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832a:	f7f9 fec5 	bl	80020b8 <HAL_GetTick>
 800832e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008330:	e008      	b.n	8008344 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008332:	f7f9 fec1 	bl	80020b8 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e086      	b.n	8008452 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008344:	4b45      	ldr	r3, [pc, #276]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1f0      	bne.n	8008332 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008350:	4b42      	ldr	r3, [pc, #264]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008354:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	493f      	ldr	r1, [pc, #252]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008360:	4313      	orrs	r3, r2
 8008362:	628b      	str	r3, [r1, #40]	@ 0x28
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	3b01      	subs	r3, #1
 800836a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	3b01      	subs	r3, #1
 8008374:	025b      	lsls	r3, r3, #9
 8008376:	b29b      	uxth	r3, r3
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	3b01      	subs	r3, #1
 8008380:	041b      	lsls	r3, r3, #16
 8008382:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	3b01      	subs	r3, #1
 800838e:	061b      	lsls	r3, r3, #24
 8008390:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008394:	4931      	ldr	r1, [pc, #196]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800839a:	4b30      	ldr	r3, [pc, #192]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	492d      	ldr	r1, [pc, #180]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083ac:	4b2b      	ldr	r3, [pc, #172]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	f023 0220 	bic.w	r2, r3, #32
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	4928      	ldr	r1, [pc, #160]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083be:	4b27      	ldr	r3, [pc, #156]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c2:	4a26      	ldr	r2, [pc, #152]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083c4:	f023 0310 	bic.w	r3, r3, #16
 80083c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083ca:	4b24      	ldr	r3, [pc, #144]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ce:	4b24      	ldr	r3, [pc, #144]	@ (8008460 <RCCEx_PLL2_Config+0x160>)
 80083d0:	4013      	ands	r3, r2
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	69d2      	ldr	r2, [r2, #28]
 80083d6:	00d2      	lsls	r2, r2, #3
 80083d8:	4920      	ldr	r1, [pc, #128]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083de:	4b1f      	ldr	r3, [pc, #124]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e2:	4a1e      	ldr	r2, [pc, #120]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083e4:	f043 0310 	orr.w	r3, r3, #16
 80083e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083f0:	4b1a      	ldr	r3, [pc, #104]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	4a19      	ldr	r2, [pc, #100]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 80083f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80083fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083fc:	e00f      	b.n	800841e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d106      	bne.n	8008412 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008404:	4b15      	ldr	r3, [pc, #84]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	4a14      	ldr	r2, [pc, #80]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 800840a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800840e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008410:	e005      	b.n	800841e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008412:	4b12      	ldr	r3, [pc, #72]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008416:	4a11      	ldr	r2, [pc, #68]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008418:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800841c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800841e:	4b0f      	ldr	r3, [pc, #60]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a0e      	ldr	r2, [pc, #56]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008424:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842a:	f7f9 fe45 	bl	80020b8 <HAL_GetTick>
 800842e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008430:	e008      	b.n	8008444 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008432:	f7f9 fe41 	bl	80020b8 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e006      	b.n	8008452 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008444:	4b05      	ldr	r3, [pc, #20]	@ (800845c <RCCEx_PLL2_Config+0x15c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f0      	beq.n	8008432 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008450:	7bfb      	ldrb	r3, [r7, #15]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	58024400 	.word	0x58024400
 8008460:	ffff0007 	.word	0xffff0007

08008464 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008472:	4b53      	ldr	r3, [pc, #332]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	2b03      	cmp	r3, #3
 800847c:	d101      	bne.n	8008482 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e099      	b.n	80085b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008482:	4b4f      	ldr	r3, [pc, #316]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a4e      	ldr	r2, [pc, #312]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800848c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800848e:	f7f9 fe13 	bl	80020b8 <HAL_GetTick>
 8008492:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008494:	e008      	b.n	80084a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008496:	f7f9 fe0f 	bl	80020b8 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d901      	bls.n	80084a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e086      	b.n	80085b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084a8:	4b45      	ldr	r3, [pc, #276]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f0      	bne.n	8008496 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084b4:	4b42      	ldr	r3, [pc, #264]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80084b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	051b      	lsls	r3, r3, #20
 80084c2:	493f      	ldr	r1, [pc, #252]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	025b      	lsls	r3, r3, #9
 80084da:	b29b      	uxth	r3, r3
 80084dc:	431a      	orrs	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	041b      	lsls	r3, r3, #16
 80084e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	061b      	lsls	r3, r3, #24
 80084f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80084f8:	4931      	ldr	r1, [pc, #196]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084fe:	4b30      	ldr	r3, [pc, #192]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	492d      	ldr	r1, [pc, #180]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800850c:	4313      	orrs	r3, r2
 800850e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008510:	4b2b      	ldr	r3, [pc, #172]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008514:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	4928      	ldr	r1, [pc, #160]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800851e:	4313      	orrs	r3, r2
 8008520:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008522:	4b27      	ldr	r3, [pc, #156]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008526:	4a26      	ldr	r2, [pc, #152]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800852c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800852e:	4b24      	ldr	r3, [pc, #144]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008532:	4b24      	ldr	r3, [pc, #144]	@ (80085c4 <RCCEx_PLL3_Config+0x160>)
 8008534:	4013      	ands	r3, r2
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	69d2      	ldr	r2, [r2, #28]
 800853a:	00d2      	lsls	r2, r2, #3
 800853c:	4920      	ldr	r1, [pc, #128]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800853e:	4313      	orrs	r3, r2
 8008540:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008542:	4b1f      	ldr	r3, [pc, #124]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008546:	4a1e      	ldr	r2, [pc, #120]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800854c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d106      	bne.n	8008562 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008554:	4b1a      	ldr	r3, [pc, #104]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008558:	4a19      	ldr	r2, [pc, #100]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800855a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800855e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008560:	e00f      	b.n	8008582 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d106      	bne.n	8008576 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008568:	4b15      	ldr	r3, [pc, #84]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800856a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856c:	4a14      	ldr	r2, [pc, #80]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800856e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008574:	e005      	b.n	8008582 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008576:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857a:	4a11      	ldr	r2, [pc, #68]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 800857c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008580:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008582:	4b0f      	ldr	r3, [pc, #60]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a0e      	ldr	r2, [pc, #56]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 8008588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800858c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800858e:	f7f9 fd93 	bl	80020b8 <HAL_GetTick>
 8008592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008594:	e008      	b.n	80085a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008596:	f7f9 fd8f 	bl	80020b8 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d901      	bls.n	80085a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e006      	b.n	80085b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085a8:	4b05      	ldr	r3, [pc, #20]	@ (80085c0 <RCCEx_PLL3_Config+0x15c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0f0      	beq.n	8008596 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	58024400 	.word	0x58024400
 80085c4:	ffff0007 	.word	0xffff0007

080085c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e02b      	b.n	8008634 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7f8 f86b 	bl	80006cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f000 fe77 	bl	80092fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	461a      	mov	r2, r3
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	f000 fecb 	bl	80093b4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800861e:	4b07      	ldr	r3, [pc, #28]	@ (800863c <HAL_SDRAM_Init+0x74>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a06      	ldr	r2, [pc, #24]	@ (800863c <HAL_SDRAM_Init+0x74>)
 8008624:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008628:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	52004000 	.word	0x52004000

08008640 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008652:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d101      	bne.n	800865e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800865a:	2302      	movs	r3, #2
 800865c:	e021      	b.n	80086a2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d002      	beq.n	800866a <HAL_SDRAM_SendCommand+0x2a>
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b05      	cmp	r3, #5
 8008668:	d118      	bne.n	800869c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2202      	movs	r2, #2
 800866e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 ff04 	bl	8009488 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d104      	bne.n	8008692 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2205      	movs	r2, #5
 800868c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008690:	e006      	b.n	80086a0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800869a:	e001      	b.n	80086a0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e000      	b.n	80086a2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e05e      	b.n	800877c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7f8 ff6e 	bl	80015b4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0203 	bic.w	r2, r2, #3
 80086ee:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4b22      	ldr	r3, [pc, #136]	@ (8008784 <HAL_SPDIFRX_Init+0xd8>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008708:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800870e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008714:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800871a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008720:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008726:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800872c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8008732:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8008738:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008746:	2b01      	cmp	r3, #1
 8008748:	d103      	bne.n	8008752 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008750:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008758:	2b01      	cmp	r3, #1
 800875a:	d103      	bne.n	8008764 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008762:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	ffc88407 	.word	0xffc88407

08008788 <HAL_SPDIFRX_IRQHandler>:
  * @brief  This function handles SPDIFRX interrupt request.
  * @param  hspdif SPDIFRX handle
  * @retval HAL status
  */
void HAL_SPDIFRX_IRQHandler(SPDIFRX_HandleTypeDef *hspdif)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t itFlag   = hspdif->Instance->SR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	60fb      	str	r3, [r7, #12]
  uint32_t itSource = hspdif->Instance->IMR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	60bb      	str	r3, [r7, #8]

  /* SPDIFRX in mode Data Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00b      	beq.n	80087c2 <HAL_SPDIFRX_IRQHandler+0x3a>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d006      	beq.n	80087c2 <HAL_SPDIFRX_IRQHandler+0x3a>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2201      	movs	r2, #1
 80087ba:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveDataFlow_IT(hspdif);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f861 	bl	8008884 <SPDIFRX_ReceiveDataFlow_IT>
  }

  /* SPDIFRX in mode Control Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <HAL_SPDIFRX_IRQHandler+0x5c>
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d006      	beq.n	80087e4 <HAL_SPDIFRX_IRQHandler+0x5c>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2202      	movs	r2, #2
 80087dc:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveControlFlow_IT(hspdif);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f883 	bl	80088ea <SPDIFRX_ReceiveControlFlow_IT>
  }

  /* SPDIFRX Overrun error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0308 	and.w	r3, r3, #8
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d011      	beq.n	8008812 <HAL_SPDIFRX_IRQHandler+0x8a>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f003 0308 	and.w	r3, r3, #8
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00c      	beq.n	8008812 <HAL_SPDIFRX_IRQHandler+0x8a>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2208      	movs	r2, #8
 80087fe:	60da      	str	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008804:	f043 0202 	orr.w	r2, r3, #2
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f82f 	bl	8008870 <HAL_SPDIFRX_ErrorCallback>
  }

  /* SPDIFRX Parity error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f003 0304 	and.w	r3, r3, #4
 8008818:	2b00      	cmp	r3, #0
 800881a:	d011      	beq.n	8008840 <HAL_SPDIFRX_IRQHandler+0xb8>
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00c      	beq.n	8008840 <HAL_SPDIFRX_IRQHandler+0xb8>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2204      	movs	r2, #4
 800882c:	60da      	str	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008832:	f043 0204 	orr.w	r2, r3, #4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f818 	bl	8008870 <HAL_SPDIFRX_ErrorCallback>
  }
}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_SPDIFRX_RxCpltCallback>:
  * @brief Rx Transfer (Data flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_RxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_SPDIFRX_CxCpltCallback>:
  * @brief Rx Transfer (Control flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_CxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_SPDIFRX_ErrorCallback>:
  * @brief SPDIFRX error callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_ErrorCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_ErrorCallback could be implemented in the user file
  */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <SPDIFRX_ReceiveDataFlow_IT>:
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008894:	6912      	ldr	r2, [r2, #16]
 8008896:	601a      	str	r2, [r3, #0]
  hspdif->pRxBuffPtr++;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspdif->RxXferCount--;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	875a      	strh	r2, [r3, #58]	@ 0x3a

  if (hspdif->RxXferCount == 0U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d113      	bne.n	80088e2 <SPDIFRX_ReceiveDataFlow_IT+0x5e>
  {
    /* Disable RXNE/PE and OVR interrupts */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6859      	ldr	r1, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80088c8:	400b      	ands	r3, r1
 80088ca:	6053      	str	r3, [r2, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->RxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_RxCpltCallback(hspdif);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff ffb3 	bl	8008848 <HAL_SPDIFRX_RxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 80088e2:	bf00      	nop
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <SPDIFRX_ReceiveControlFlow_IT>:
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088fa:	6952      	ldr	r2, [r2, #20]
 80088fc:	601a      	str	r2, [r3, #0]
  hspdif->pCsBuffPtr++;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008902:	1d1a      	adds	r2, r3, #4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	635a      	str	r2, [r3, #52]	@ 0x34
  hspdif->CsXferCount--;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800890c:	b29b      	uxth	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspdif->CsXferCount == 0U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d113      	bne.n	8008948 <SPDIFRX_ReceiveControlFlow_IT+0x5e>
  {
    /* Disable CSRNE interrupt */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6859      	ldr	r1, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800892e:	400b      	ands	r3, r1
 8008930:	6053      	str	r3, [r2, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->CxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_CxCpltCallback(hspdif);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff ff8a 	bl	800885c <HAL_SPDIFRX_CxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e049      	b.n	80089f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7f9 fac8 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f000 fa66 	bl	8008e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d020      	beq.n	8008a62 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01b      	beq.n	8008a62 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f06f 0202 	mvn.w	r2, #2
 8008a32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	f003 0303 	and.w	r3, r3, #3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f9eb 	bl	8008e24 <HAL_TIM_IC_CaptureCallback>
 8008a4e:	e005      	b.n	8008a5c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f9dd 	bl	8008e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9ee 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d020      	beq.n	8008aae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d01b      	beq.n	8008aae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f06f 0204 	mvn.w	r2, #4
 8008a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f9c5 	bl	8008e24 <HAL_TIM_IC_CaptureCallback>
 8008a9a:	e005      	b.n	8008aa8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f9b7 	bl	8008e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f9c8 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	f003 0308 	and.w	r3, r3, #8
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d020      	beq.n	8008afa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01b      	beq.n	8008afa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f06f 0208 	mvn.w	r2, #8
 8008aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f99f 	bl	8008e24 <HAL_TIM_IC_CaptureCallback>
 8008ae6:	e005      	b.n	8008af4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f991 	bl	8008e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f9a2 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d020      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01b      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f06f 0210 	mvn.w	r2, #16
 8008b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f979 	bl	8008e24 <HAL_TIM_IC_CaptureCallback>
 8008b32:	e005      	b.n	8008b40 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f96b 	bl	8008e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f97c 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00c      	beq.n	8008b6a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d007      	beq.n	8008b6a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f06f 0201 	mvn.w	r2, #1
 8008b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f949 	bl	8008dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d007      	beq.n	8008b98 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fb3a 	bl	800920c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00c      	beq.n	8008bbc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d007      	beq.n	8008bbc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fb32 	bl	8009220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00c      	beq.n	8008be0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d007      	beq.n	8008be0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f936 	bl	8008e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00c      	beq.n	8008c04 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d007      	beq.n	8008c04 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f06f 0220 	mvn.w	r2, #32
 8008bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fafa 	bl	80091f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_ConfigClockSource+0x1c>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e0dc      	b.n	8008de2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	4b6a      	ldr	r3, [pc, #424]	@ (8008dec <HAL_TIM_ConfigClockSource+0x1e0>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a64      	ldr	r2, [pc, #400]	@ (8008df0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	f000 80a9 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c64:	4a62      	ldr	r2, [pc, #392]	@ (8008df0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	f200 80ae 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c6c:	4a61      	ldr	r2, [pc, #388]	@ (8008df4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f000 80a1 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c74:	4a5f      	ldr	r2, [pc, #380]	@ (8008df4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	f200 80a6 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8008df8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	f000 8099 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c84:	4a5c      	ldr	r2, [pc, #368]	@ (8008df8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	f200 809e 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c90:	f000 8091 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c98:	f200 8096 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ca0:	f000 8089 	beq.w	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ca4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ca8:	f200 808e 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cb0:	d03e      	beq.n	8008d30 <HAL_TIM_ConfigClockSource+0x124>
 8008cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cb6:	f200 8087 	bhi.w	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cbe:	f000 8086 	beq.w	8008dce <HAL_TIM_ConfigClockSource+0x1c2>
 8008cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc6:	d87f      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cc8:	2b70      	cmp	r3, #112	@ 0x70
 8008cca:	d01a      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0xf6>
 8008ccc:	2b70      	cmp	r3, #112	@ 0x70
 8008cce:	d87b      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cd0:	2b60      	cmp	r3, #96	@ 0x60
 8008cd2:	d050      	beq.n	8008d76 <HAL_TIM_ConfigClockSource+0x16a>
 8008cd4:	2b60      	cmp	r3, #96	@ 0x60
 8008cd6:	d877      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cd8:	2b50      	cmp	r3, #80	@ 0x50
 8008cda:	d03c      	beq.n	8008d56 <HAL_TIM_ConfigClockSource+0x14a>
 8008cdc:	2b50      	cmp	r3, #80	@ 0x50
 8008cde:	d873      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ce0:	2b40      	cmp	r3, #64	@ 0x40
 8008ce2:	d058      	beq.n	8008d96 <HAL_TIM_ConfigClockSource+0x18a>
 8008ce4:	2b40      	cmp	r3, #64	@ 0x40
 8008ce6:	d86f      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ce8:	2b30      	cmp	r3, #48	@ 0x30
 8008cea:	d064      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008cec:	2b30      	cmp	r3, #48	@ 0x30
 8008cee:	d86b      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d060      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	d867      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d05c      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008cfc:	2b10      	cmp	r3, #16
 8008cfe:	d05a      	beq.n	8008db6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008d00:	e062      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d12:	f000 f9c3 	bl	800909c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	609a      	str	r2, [r3, #8]
      break;
 8008d2e:	e04f      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d40:	f000 f9ac 	bl	800909c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d52:	609a      	str	r2, [r3, #8]
      break;
 8008d54:	e03c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d62:	461a      	mov	r2, r3
 8008d64:	f000 f91c 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2150      	movs	r1, #80	@ 0x50
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 f976 	bl	8009060 <TIM_ITRx_SetConfig>
      break;
 8008d74:	e02c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d82:	461a      	mov	r2, r3
 8008d84:	f000 f93b 	bl	8008ffe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2160      	movs	r1, #96	@ 0x60
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 f966 	bl	8009060 <TIM_ITRx_SetConfig>
      break;
 8008d94:	e01c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008da2:	461a      	mov	r2, r3
 8008da4:	f000 f8fc 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2140      	movs	r1, #64	@ 0x40
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f956 	bl	8009060 <TIM_ITRx_SetConfig>
      break;
 8008db4:	e00c      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	f000 f94d 	bl	8009060 <TIM_ITRx_SetConfig>
      break;
 8008dc6:	e003      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	73fb      	strb	r3, [r7, #15]
      break;
 8008dcc:	e000      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	ffceff88 	.word	0xffceff88
 8008df0:	00100040 	.word	0x00100040
 8008df4:	00100030 	.word	0x00100030
 8008df8:	00100020 	.word	0x00100020

08008dfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a43      	ldr	r2, [pc, #268]	@ (8008f80 <TIM_Base_SetConfig+0x120>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d013      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7e:	d00f      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a40      	ldr	r2, [pc, #256]	@ (8008f84 <TIM_Base_SetConfig+0x124>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00b      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8008f88 <TIM_Base_SetConfig+0x128>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d007      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a3e      	ldr	r2, [pc, #248]	@ (8008f8c <TIM_Base_SetConfig+0x12c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d003      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8008f90 <TIM_Base_SetConfig+0x130>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d108      	bne.n	8008eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a32      	ldr	r2, [pc, #200]	@ (8008f80 <TIM_Base_SetConfig+0x120>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01f      	beq.n	8008efa <TIM_Base_SetConfig+0x9a>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ec0:	d01b      	beq.n	8008efa <TIM_Base_SetConfig+0x9a>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8008f84 <TIM_Base_SetConfig+0x124>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d017      	beq.n	8008efa <TIM_Base_SetConfig+0x9a>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8008f88 <TIM_Base_SetConfig+0x128>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d013      	beq.n	8008efa <TIM_Base_SetConfig+0x9a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8008f8c <TIM_Base_SetConfig+0x12c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d00f      	beq.n	8008efa <TIM_Base_SetConfig+0x9a>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a2c      	ldr	r2, [pc, #176]	@ (8008f90 <TIM_Base_SetConfig+0x130>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d00b      	beq.n	8008efa <TIM_Base_SetConfig+0x9a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8008f94 <TIM_Base_SetConfig+0x134>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d007      	beq.n	8008efa <TIM_Base_SetConfig+0x9a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a2a      	ldr	r2, [pc, #168]	@ (8008f98 <TIM_Base_SetConfig+0x138>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d003      	beq.n	8008efa <TIM_Base_SetConfig+0x9a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a29      	ldr	r2, [pc, #164]	@ (8008f9c <TIM_Base_SetConfig+0x13c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d108      	bne.n	8008f0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a14      	ldr	r2, [pc, #80]	@ (8008f80 <TIM_Base_SetConfig+0x120>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00f      	beq.n	8008f52 <TIM_Base_SetConfig+0xf2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a16      	ldr	r2, [pc, #88]	@ (8008f90 <TIM_Base_SetConfig+0x130>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00b      	beq.n	8008f52 <TIM_Base_SetConfig+0xf2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a15      	ldr	r2, [pc, #84]	@ (8008f94 <TIM_Base_SetConfig+0x134>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d007      	beq.n	8008f52 <TIM_Base_SetConfig+0xf2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a14      	ldr	r2, [pc, #80]	@ (8008f98 <TIM_Base_SetConfig+0x138>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d003      	beq.n	8008f52 <TIM_Base_SetConfig+0xf2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a13      	ldr	r2, [pc, #76]	@ (8008f9c <TIM_Base_SetConfig+0x13c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d103      	bne.n	8008f5a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	691a      	ldr	r2, [r3, #16]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f043 0204 	orr.w	r2, r3, #4
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	601a      	str	r2, [r3, #0]
}
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	40010000 	.word	0x40010000
 8008f84:	40000400 	.word	0x40000400
 8008f88:	40000800 	.word	0x40000800
 8008f8c:	40000c00 	.word	0x40000c00
 8008f90:	40010400 	.word	0x40010400
 8008f94:	40014000 	.word	0x40014000
 8008f98:	40014400 	.word	0x40014400
 8008f9c:	40014800 	.word	0x40014800

08008fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f023 0201 	bic.w	r2, r3, #1
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f023 030a 	bic.w	r3, r3, #10
 8008fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b087      	sub	sp, #28
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	f023 0210 	bic.w	r2, r3, #16
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	031b      	lsls	r3, r3, #12
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	4313      	orrs	r3, r2
 8009032:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800903a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	4313      	orrs	r3, r2
 8009044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	621a      	str	r2, [r3, #32]
}
 8009052:	bf00      	nop
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
	...

08009060 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4b09      	ldr	r3, [pc, #36]	@ (8009098 <TIM_ITRx_SetConfig+0x38>)
 8009074:	4013      	ands	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4313      	orrs	r3, r2
 800907e:	f043 0307 	orr.w	r3, r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	609a      	str	r2, [r3, #8]
}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	ffcfff8f 	.word	0xffcfff8f

0800909c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	021a      	lsls	r2, r3, #8
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	431a      	orrs	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	609a      	str	r2, [r3, #8]
}
 80090d0:	bf00      	nop
 80090d2:	371c      	adds	r7, #28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e06d      	b.n	80091d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a30      	ldr	r2, [pc, #192]	@ (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d004      	beq.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a2f      	ldr	r2, [pc, #188]	@ (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d108      	bne.n	800913a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800912e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009140:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a20      	ldr	r2, [pc, #128]	@ (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d022      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009166:	d01d      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a1d      	ldr	r2, [pc, #116]	@ (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d018      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a1c      	ldr	r2, [pc, #112]	@ (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d013      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a1a      	ldr	r2, [pc, #104]	@ (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d00e      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a15      	ldr	r2, [pc, #84]	@ (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d009      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a16      	ldr	r2, [pc, #88]	@ (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d004      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a15      	ldr	r2, [pc, #84]	@ (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d10c      	bne.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	40010000 	.word	0x40010000
 80091e0:	40010400 	.word	0x40010400
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00
 80091f0:	40001800 	.word	0x40001800
 80091f4:	40014000 	.word	0x40014000

080091f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	4b10      	ldr	r3, [pc, #64]	@ (8009284 <FMC_NAND_Init+0x50>)
 8009244:	4013      	ands	r3, r2
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	6851      	ldr	r1, [r2, #4]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	6892      	ldr	r2, [r2, #8]
 800924e:	4311      	orrs	r1, r2
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	68d2      	ldr	r2, [r2, #12]
 8009254:	4311      	orrs	r1, r2
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	6912      	ldr	r2, [r2, #16]
 800925a:	4311      	orrs	r1, r2
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	6952      	ldr	r2, [r2, #20]
 8009260:	0252      	lsls	r2, r2, #9
 8009262:	4311      	orrs	r1, r2
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	6992      	ldr	r2, [r2, #24]
 8009268:	0352      	lsls	r2, r2, #13
 800926a:	430a      	orrs	r2, r1
 800926c:	4313      	orrs	r3, r2
 800926e:	f043 0208 	orr.w	r2, r3, #8
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	fff00189 	.word	0xfff00189

08009288 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800929e:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 80092a6:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 80092ae:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b085      	sub	sp, #20
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 80092d8:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80092e0:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 80092e8:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d121      	bne.n	8009352 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b27      	ldr	r3, [pc, #156]	@ (80093b0 <FMC_SDRAM_Init+0xb4>)
 8009314:	4013      	ands	r3, r2
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	6851      	ldr	r1, [r2, #4]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	6892      	ldr	r2, [r2, #8]
 800931e:	4311      	orrs	r1, r2
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	68d2      	ldr	r2, [r2, #12]
 8009324:	4311      	orrs	r1, r2
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	6912      	ldr	r2, [r2, #16]
 800932a:	4311      	orrs	r1, r2
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	6952      	ldr	r2, [r2, #20]
 8009330:	4311      	orrs	r1, r2
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	6992      	ldr	r2, [r2, #24]
 8009336:	4311      	orrs	r1, r2
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	69d2      	ldr	r2, [r2, #28]
 800933c:	4311      	orrs	r1, r2
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	6a12      	ldr	r2, [r2, #32]
 8009342:	4311      	orrs	r1, r2
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009348:	430a      	orrs	r2, r1
 800934a:	431a      	orrs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	e026      	b.n	80093a0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	69d9      	ldr	r1, [r3, #28]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	4319      	orrs	r1, r3
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009368:	430b      	orrs	r3, r1
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	4b0e      	ldr	r3, [pc, #56]	@ (80093b0 <FMC_SDRAM_Init+0xb4>)
 8009376:	4013      	ands	r3, r2
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	6851      	ldr	r1, [r2, #4]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	6892      	ldr	r2, [r2, #8]
 8009380:	4311      	orrs	r1, r2
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	68d2      	ldr	r2, [r2, #12]
 8009386:	4311      	orrs	r1, r2
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	6912      	ldr	r2, [r2, #16]
 800938c:	4311      	orrs	r1, r2
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	6952      	ldr	r2, [r2, #20]
 8009392:	4311      	orrs	r1, r2
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	6992      	ldr	r2, [r2, #24]
 8009398:	430a      	orrs	r2, r1
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	ffff8000 	.word	0xffff8000

080093b4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d128      	bne.n	8009418 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	1e59      	subs	r1, r3, #1
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	3b01      	subs	r3, #1
 80093da:	011b      	lsls	r3, r3, #4
 80093dc:	4319      	orrs	r1, r3
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	4319      	orrs	r1, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	3b01      	subs	r3, #1
 80093ee:	031b      	lsls	r3, r3, #12
 80093f0:	4319      	orrs	r1, r3
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	041b      	lsls	r3, r3, #16
 80093fa:	4319      	orrs	r1, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	3b01      	subs	r3, #1
 8009402:	051b      	lsls	r3, r3, #20
 8009404:	4319      	orrs	r1, r3
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	3b01      	subs	r3, #1
 800940c:	061b      	lsls	r3, r3, #24
 800940e:	430b      	orrs	r3, r1
 8009410:	431a      	orrs	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	609a      	str	r2, [r3, #8]
 8009416:	e02d      	b.n	8009474 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	4b19      	ldr	r3, [pc, #100]	@ (8009484 <FMC_SDRAM_Timing_Init+0xd0>)
 800941e:	4013      	ands	r3, r2
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	68d2      	ldr	r2, [r2, #12]
 8009424:	3a01      	subs	r2, #1
 8009426:	0311      	lsls	r1, r2, #12
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	6952      	ldr	r2, [r2, #20]
 800942c:	3a01      	subs	r2, #1
 800942e:	0512      	lsls	r2, r2, #20
 8009430:	430a      	orrs	r2, r1
 8009432:	431a      	orrs	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	1e59      	subs	r1, r3, #1
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	3b01      	subs	r3, #1
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	4319      	orrs	r1, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	3b01      	subs	r3, #1
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	4319      	orrs	r1, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	3b01      	subs	r3, #1
 8009460:	041b      	lsls	r3, r3, #16
 8009462:	4319      	orrs	r1, r3
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	3b01      	subs	r3, #1
 800946a:	061b      	lsls	r3, r3, #24
 800946c:	430b      	orrs	r3, r1
 800946e:	431a      	orrs	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	ff0f0fff 	.word	0xff0f0fff

08009488 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	691a      	ldr	r2, [r3, #16]
 8009498:	4b0c      	ldr	r3, [pc, #48]	@ (80094cc <FMC_SDRAM_SendCommand+0x44>)
 800949a:	4013      	ands	r3, r2
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	6811      	ldr	r1, [r2, #0]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	6852      	ldr	r2, [r2, #4]
 80094a4:	4311      	orrs	r1, r2
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	6892      	ldr	r2, [r2, #8]
 80094aa:	3a01      	subs	r2, #1
 80094ac:	0152      	lsls	r2, r2, #5
 80094ae:	4311      	orrs	r1, r2
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	68d2      	ldr	r2, [r2, #12]
 80094b4:	0252      	lsls	r2, r2, #9
 80094b6:	430a      	orrs	r2, r1
 80094b8:	431a      	orrs	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	ffc00000 	.word	0xffc00000

080094d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094d0:	b084      	sub	sp, #16
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	f107 001c 	add.w	r0, r7, #28
 80094de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d121      	bne.n	800952e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	4b2c      	ldr	r3, [pc, #176]	@ (80095ac <USB_CoreInit+0xdc>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800950e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009512:	2b01      	cmp	r3, #1
 8009514:	d105      	bne.n	8009522 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fafa 	bl	800ab1c <USB_CoreReset>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
 800952c:	e01b      	b.n	8009566 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 faee 	bl	800ab1c <USB_CoreReset>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009544:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009550:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	639a      	str	r2, [r3, #56]	@ 0x38
 8009558:	e005      	b.n	8009566 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009566:	7fbb      	ldrb	r3, [r7, #30]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d116      	bne.n	800959a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800957a:	4b0d      	ldr	r3, [pc, #52]	@ (80095b0 <USB_CoreInit+0xe0>)
 800957c:	4313      	orrs	r3, r2
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f043 0206 	orr.w	r2, r3, #6
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f043 0220 	orr.w	r2, r3, #32
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095a6:	b004      	add	sp, #16
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	ffbdffbf 	.word	0xffbdffbf
 80095b0:	03ee0000 	.word	0x03ee0000

080095b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b087      	sub	sp, #28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	4613      	mov	r3, r2
 80095c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d165      	bne.n	8009694 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4a41      	ldr	r2, [pc, #260]	@ (80096d0 <USB_SetTurnaroundTime+0x11c>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d906      	bls.n	80095de <USB_SetTurnaroundTime+0x2a>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4a40      	ldr	r2, [pc, #256]	@ (80096d4 <USB_SetTurnaroundTime+0x120>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d202      	bcs.n	80095de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095d8:	230f      	movs	r3, #15
 80095da:	617b      	str	r3, [r7, #20]
 80095dc:	e062      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	4a3c      	ldr	r2, [pc, #240]	@ (80096d4 <USB_SetTurnaroundTime+0x120>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d306      	bcc.n	80095f4 <USB_SetTurnaroundTime+0x40>
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	4a3b      	ldr	r2, [pc, #236]	@ (80096d8 <USB_SetTurnaroundTime+0x124>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d202      	bcs.n	80095f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095ee:	230e      	movs	r3, #14
 80095f0:	617b      	str	r3, [r7, #20]
 80095f2:	e057      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	4a38      	ldr	r2, [pc, #224]	@ (80096d8 <USB_SetTurnaroundTime+0x124>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d306      	bcc.n	800960a <USB_SetTurnaroundTime+0x56>
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	4a37      	ldr	r2, [pc, #220]	@ (80096dc <USB_SetTurnaroundTime+0x128>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d202      	bcs.n	800960a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009604:	230d      	movs	r3, #13
 8009606:	617b      	str	r3, [r7, #20]
 8009608:	e04c      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	4a33      	ldr	r2, [pc, #204]	@ (80096dc <USB_SetTurnaroundTime+0x128>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d306      	bcc.n	8009620 <USB_SetTurnaroundTime+0x6c>
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	4a32      	ldr	r2, [pc, #200]	@ (80096e0 <USB_SetTurnaroundTime+0x12c>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d802      	bhi.n	8009620 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800961a:	230c      	movs	r3, #12
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	e041      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4a2f      	ldr	r2, [pc, #188]	@ (80096e0 <USB_SetTurnaroundTime+0x12c>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d906      	bls.n	8009636 <USB_SetTurnaroundTime+0x82>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	4a2e      	ldr	r2, [pc, #184]	@ (80096e4 <USB_SetTurnaroundTime+0x130>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d802      	bhi.n	8009636 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009630:	230b      	movs	r3, #11
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	e036      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4a2a      	ldr	r2, [pc, #168]	@ (80096e4 <USB_SetTurnaroundTime+0x130>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d906      	bls.n	800964c <USB_SetTurnaroundTime+0x98>
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	4a29      	ldr	r2, [pc, #164]	@ (80096e8 <USB_SetTurnaroundTime+0x134>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d802      	bhi.n	800964c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009646:	230a      	movs	r3, #10
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e02b      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4a26      	ldr	r2, [pc, #152]	@ (80096e8 <USB_SetTurnaroundTime+0x134>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d906      	bls.n	8009662 <USB_SetTurnaroundTime+0xae>
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4a25      	ldr	r2, [pc, #148]	@ (80096ec <USB_SetTurnaroundTime+0x138>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d202      	bcs.n	8009662 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800965c:	2309      	movs	r3, #9
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e020      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	4a21      	ldr	r2, [pc, #132]	@ (80096ec <USB_SetTurnaroundTime+0x138>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d306      	bcc.n	8009678 <USB_SetTurnaroundTime+0xc4>
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	4a20      	ldr	r2, [pc, #128]	@ (80096f0 <USB_SetTurnaroundTime+0x13c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d802      	bhi.n	8009678 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009672:	2308      	movs	r3, #8
 8009674:	617b      	str	r3, [r7, #20]
 8009676:	e015      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4a1d      	ldr	r2, [pc, #116]	@ (80096f0 <USB_SetTurnaroundTime+0x13c>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d906      	bls.n	800968e <USB_SetTurnaroundTime+0xda>
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4a1c      	ldr	r2, [pc, #112]	@ (80096f4 <USB_SetTurnaroundTime+0x140>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d202      	bcs.n	800968e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009688:	2307      	movs	r3, #7
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	e00a      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800968e:	2306      	movs	r3, #6
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	e007      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800969a:	2309      	movs	r3, #9
 800969c:	617b      	str	r3, [r7, #20]
 800969e:	e001      	b.n	80096a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80096a0:	2309      	movs	r3, #9
 80096a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	68da      	ldr	r2, [r3, #12]
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	029b      	lsls	r3, r3, #10
 80096b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80096bc:	431a      	orrs	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	371c      	adds	r7, #28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	00d8acbf 	.word	0x00d8acbf
 80096d4:	00e4e1c0 	.word	0x00e4e1c0
 80096d8:	00f42400 	.word	0x00f42400
 80096dc:	01067380 	.word	0x01067380
 80096e0:	011a499f 	.word	0x011a499f
 80096e4:	01312cff 	.word	0x01312cff
 80096e8:	014ca43f 	.word	0x014ca43f
 80096ec:	016e3600 	.word	0x016e3600
 80096f0:	01a6ab1f 	.word	0x01a6ab1f
 80096f4:	01e84800 	.word	0x01e84800

080096f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f043 0201 	orr.w	r2, r3, #1
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f023 0201 	bic.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d115      	bne.n	800978a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800976a:	200a      	movs	r0, #10
 800976c:	f7f8 fcb0 	bl	80020d0 <HAL_Delay>
      ms += 10U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	330a      	adds	r3, #10
 8009774:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 f93f 	bl	800a9fa <USB_GetMode>
 800977c:	4603      	mov	r3, r0
 800977e:	2b01      	cmp	r3, #1
 8009780:	d01e      	beq.n	80097c0 <USB_SetCurrentMode+0x84>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2bc7      	cmp	r3, #199	@ 0xc7
 8009786:	d9f0      	bls.n	800976a <USB_SetCurrentMode+0x2e>
 8009788:	e01a      	b.n	80097c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d115      	bne.n	80097bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800979c:	200a      	movs	r0, #10
 800979e:	f7f8 fc97 	bl	80020d0 <HAL_Delay>
      ms += 10U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	330a      	adds	r3, #10
 80097a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 f926 	bl	800a9fa <USB_GetMode>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <USB_SetCurrentMode+0x84>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80097b8:	d9f0      	bls.n	800979c <USB_SetCurrentMode+0x60>
 80097ba:	e001      	b.n	80097c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e005      	b.n	80097cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80097c4:	d101      	bne.n	80097ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e000      	b.n	80097cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097d4:	b084      	sub	sp, #16
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b086      	sub	sp, #24
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80097e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097ee:	2300      	movs	r3, #0
 80097f0:	613b      	str	r3, [r7, #16]
 80097f2:	e009      	b.n	8009808 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	3340      	adds	r3, #64	@ 0x40
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	2200      	movs	r2, #0
 8009800:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	3301      	adds	r3, #1
 8009806:	613b      	str	r3, [r7, #16]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	2b0e      	cmp	r3, #14
 800980c:	d9f2      	bls.n	80097f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800980e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009812:	2b00      	cmp	r3, #0
 8009814:	d11c      	bne.n	8009850 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009824:	f043 0302 	orr.w	r3, r3, #2
 8009828:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	e005      	b.n	800985c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009854:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009862:	461a      	mov	r2, r3
 8009864:	2300      	movs	r3, #0
 8009866:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009868:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800986c:	2b01      	cmp	r3, #1
 800986e:	d10d      	bne.n	800988c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009874:	2b00      	cmp	r3, #0
 8009876:	d104      	bne.n	8009882 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009878:	2100      	movs	r1, #0
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f968 	bl	8009b50 <USB_SetDevSpeed>
 8009880:	e008      	b.n	8009894 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009882:	2101      	movs	r1, #1
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f963 	bl	8009b50 <USB_SetDevSpeed>
 800988a:	e003      	b.n	8009894 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800988c:	2103      	movs	r1, #3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f95e 	bl	8009b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009894:	2110      	movs	r1, #16
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f8fa 	bl	8009a90 <USB_FlushTxFifo>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f924 	bl	8009af4 <USB_FlushRxFifo>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098bc:	461a      	mov	r2, r3
 80098be:	2300      	movs	r3, #0
 80098c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c8:	461a      	mov	r2, r3
 80098ca:	2300      	movs	r3, #0
 80098cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d4:	461a      	mov	r2, r3
 80098d6:	2300      	movs	r3, #0
 80098d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098da:	2300      	movs	r3, #0
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	e043      	b.n	8009968 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098f6:	d118      	bne.n	800992a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10a      	bne.n	8009914 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800990a:	461a      	mov	r2, r3
 800990c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	e013      	b.n	800993c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009920:	461a      	mov	r2, r3
 8009922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	e008      	b.n	800993c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009936:	461a      	mov	r2, r3
 8009938:	2300      	movs	r3, #0
 800993a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009948:	461a      	mov	r2, r3
 800994a:	2300      	movs	r3, #0
 800994c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800995a:	461a      	mov	r2, r3
 800995c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	3301      	adds	r3, #1
 8009966:	613b      	str	r3, [r7, #16]
 8009968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800996c:	461a      	mov	r2, r3
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	4293      	cmp	r3, r2
 8009972:	d3b5      	bcc.n	80098e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009974:	2300      	movs	r3, #0
 8009976:	613b      	str	r3, [r7, #16]
 8009978:	e043      	b.n	8009a02 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	4413      	add	r3, r2
 8009982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800998c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009990:	d118      	bne.n	80099c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a4:	461a      	mov	r2, r3
 80099a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	e013      	b.n	80099d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ba:	461a      	mov	r2, r3
 80099bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	e008      	b.n	80099d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d0:	461a      	mov	r2, r3
 80099d2:	2300      	movs	r3, #0
 80099d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e2:	461a      	mov	r2, r3
 80099e4:	2300      	movs	r3, #0
 80099e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f4:	461a      	mov	r2, r3
 80099f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	3301      	adds	r3, #1
 8009a00:	613b      	str	r3, [r7, #16]
 8009a02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a06:	461a      	mov	r2, r3
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d3b5      	bcc.n	800997a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d105      	bne.n	8009a44 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	f043 0210 	orr.w	r2, r3, #16
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699a      	ldr	r2, [r3, #24]
 8009a48:	4b0f      	ldr	r3, [pc, #60]	@ (8009a88 <USB_DevInit+0x2b4>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	f043 0208 	orr.w	r2, r3, #8
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d105      	bne.n	8009a78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699a      	ldr	r2, [r3, #24]
 8009a70:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <USB_DevInit+0x2b8>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a84:	b004      	add	sp, #16
 8009a86:	4770      	bx	lr
 8009a88:	803c3800 	.word	0x803c3800
 8009a8c:	40000004 	.word	0x40000004

08009a90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009aaa:	d901      	bls.n	8009ab0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e01b      	b.n	8009ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	daf2      	bge.n	8009a9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	019b      	lsls	r3, r3, #6
 8009ac0:	f043 0220 	orr.w	r2, r3, #32
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3301      	adds	r3, #1
 8009acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ad4:	d901      	bls.n	8009ada <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e006      	b.n	8009ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	d0f0      	beq.n	8009ac8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3301      	adds	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b0c:	d901      	bls.n	8009b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e018      	b.n	8009b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	daf2      	bge.n	8009b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2210      	movs	r2, #16
 8009b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3301      	adds	r3, #1
 8009b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b30:	d901      	bls.n	8009b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e006      	b.n	8009b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f003 0310 	and.w	r3, r3, #16
 8009b3e:	2b10      	cmp	r3, #16
 8009b40:	d0f0      	beq.n	8009b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	78fb      	ldrb	r3, [r7, #3]
 8009b6a:	68f9      	ldr	r1, [r7, #12]
 8009b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b70:	4313      	orrs	r3, r2
 8009b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b087      	sub	sp, #28
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f003 0306 	and.w	r3, r3, #6
 8009b9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d102      	bne.n	8009ba8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	75fb      	strb	r3, [r7, #23]
 8009ba6:	e00a      	b.n	8009bbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d002      	beq.n	8009bb4 <USB_GetDevSpeed+0x32>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b06      	cmp	r3, #6
 8009bb2:	d102      	bne.n	8009bba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	75fb      	strb	r3, [r7, #23]
 8009bb8:	e001      	b.n	8009bbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009bba:	230f      	movs	r3, #15
 8009bbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	785b      	ldrb	r3, [r3, #1]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d139      	bne.n	8009c5c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bee:	69da      	ldr	r2, [r3, #28]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	f003 030f 	and.w	r3, r3, #15
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	68f9      	ldr	r1, [r7, #12]
 8009c02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c06:	4313      	orrs	r3, r2
 8009c08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d153      	bne.n	8009cc8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	791b      	ldrb	r3, [r3, #4]
 8009c3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	059b      	lsls	r3, r3, #22
 8009c42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c44:	431a      	orrs	r2, r3
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	0159      	lsls	r1, r3, #5
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	440b      	add	r3, r1
 8009c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c52:	4619      	mov	r1, r3
 8009c54:	4b20      	ldr	r3, [pc, #128]	@ (8009cd8 <USB_ActivateEndpoint+0x10c>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	600b      	str	r3, [r1, #0]
 8009c5a:	e035      	b.n	8009cc8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	f003 030f 	and.w	r3, r3, #15
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c72:	041b      	lsls	r3, r3, #16
 8009c74:	68f9      	ldr	r1, [r7, #12]
 8009c76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d119      	bne.n	8009cc8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	791b      	ldrb	r3, [r3, #4]
 8009cae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cb0:	430b      	orrs	r3, r1
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	0159      	lsls	r1, r3, #5
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	440b      	add	r3, r1
 8009cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4b05      	ldr	r3, [pc, #20]	@ (8009cd8 <USB_ActivateEndpoint+0x10c>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	10008000 	.word	0x10008000

08009cdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d161      	bne.n	8009dbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d0e:	d11f      	bne.n	8009d50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	f003 030f 	and.w	r3, r3, #15
 8009d60:	2101      	movs	r1, #1
 8009d62:	fa01 f303 	lsl.w	r3, r1, r3
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	43db      	mvns	r3, r3
 8009d6a:	68f9      	ldr	r1, [r7, #12]
 8009d6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d70:	4013      	ands	r3, r2
 8009d72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	f003 030f 	and.w	r3, r3, #15
 8009d84:	2101      	movs	r1, #1
 8009d86:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	43db      	mvns	r3, r3
 8009d8e:	68f9      	ldr	r1, [r7, #12]
 8009d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d94:	4013      	ands	r3, r2
 8009d96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	0159      	lsls	r1, r3, #5
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	440b      	add	r3, r1
 8009dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db2:	4619      	mov	r1, r3
 8009db4:	4b35      	ldr	r3, [pc, #212]	@ (8009e8c <USB_DeactivateEndpoint+0x1b0>)
 8009db6:	4013      	ands	r3, r2
 8009db8:	600b      	str	r3, [r1, #0]
 8009dba:	e060      	b.n	8009e7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dd2:	d11f      	bne.n	8009e14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009df2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	0151      	lsls	r1, r2, #5
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	440a      	add	r2, r1
 8009e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	f003 030f 	and.w	r3, r3, #15
 8009e24:	2101      	movs	r1, #1
 8009e26:	fa01 f303 	lsl.w	r3, r1, r3
 8009e2a:	041b      	lsls	r3, r3, #16
 8009e2c:	43db      	mvns	r3, r3
 8009e2e:	68f9      	ldr	r1, [r7, #12]
 8009e30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e34:	4013      	ands	r3, r2
 8009e36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e3e:	69da      	ldr	r2, [r3, #28]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	f003 030f 	and.w	r3, r3, #15
 8009e48:	2101      	movs	r1, #1
 8009e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4e:	041b      	lsls	r3, r3, #16
 8009e50:	43db      	mvns	r3, r3
 8009e52:	68f9      	ldr	r1, [r7, #12]
 8009e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e58:	4013      	ands	r3, r2
 8009e5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	0159      	lsls	r1, r3, #5
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	440b      	add	r3, r1
 8009e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e76:	4619      	mov	r1, r3
 8009e78:	4b05      	ldr	r3, [pc, #20]	@ (8009e90 <USB_DeactivateEndpoint+0x1b4>)
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	ec337800 	.word	0xec337800
 8009e90:	eff37800 	.word	0xeff37800

08009e94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	@ 0x28
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	785b      	ldrb	r3, [r3, #1]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	f040 8185 	bne.w	800a1c0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d132      	bne.n	8009f24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	0159      	lsls	r1, r3, #5
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	440b      	add	r3, r1
 8009ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4ba7      	ldr	r3, [pc, #668]	@ (800a178 <USB_EPStartXfer+0x2e4>)
 8009edc:	4013      	ands	r3, r2
 8009ede:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	0151      	lsls	r1, r2, #5
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	440a      	add	r2, r1
 8009ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009efa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f0c:	691a      	ldr	r2, [r3, #16]
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	0159      	lsls	r1, r3, #5
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	440b      	add	r3, r1
 8009f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4b97      	ldr	r3, [pc, #604]	@ (800a17c <USB_EPStartXfer+0x2e8>)
 8009f1e:	4013      	ands	r3, r2
 8009f20:	610b      	str	r3, [r1, #16]
 8009f22:	e097      	b.n	800a054 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	0159      	lsls	r1, r3, #5
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	440b      	add	r3, r1
 8009f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4b8e      	ldr	r3, [pc, #568]	@ (800a17c <USB_EPStartXfer+0x2e8>)
 8009f42:	4013      	ands	r3, r2
 8009f44:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f52:	691a      	ldr	r2, [r3, #16]
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	0159      	lsls	r1, r3, #5
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	440b      	add	r3, r1
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f60:	4619      	mov	r1, r3
 8009f62:	4b85      	ldr	r3, [pc, #532]	@ (800a178 <USB_EPStartXfer+0x2e4>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d11a      	bne.n	8009fa4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	691a      	ldr	r2, [r3, #16]
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d903      	bls.n	8009f82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	0151      	lsls	r1, r2, #5
 8009f94:	69fa      	ldr	r2, [r7, #28]
 8009f96:	440a      	add	r2, r1
 8009f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fa0:	6113      	str	r3, [r2, #16]
 8009fa2:	e044      	b.n	800a02e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	691a      	ldr	r2, [r3, #16]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	4413      	add	r3, r2
 8009fae:	1e5a      	subs	r2, r3, #1
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc6:	691a      	ldr	r2, [r3, #16]
 8009fc8:	8afb      	ldrh	r3, [r7, #22]
 8009fca:	04d9      	lsls	r1, r3, #19
 8009fcc:	4b6c      	ldr	r3, [pc, #432]	@ (800a180 <USB_EPStartXfer+0x2ec>)
 8009fce:	400b      	ands	r3, r1
 8009fd0:	69b9      	ldr	r1, [r7, #24]
 8009fd2:	0148      	lsls	r0, r1, #5
 8009fd4:	69f9      	ldr	r1, [r7, #28]
 8009fd6:	4401      	add	r1, r0
 8009fd8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	791b      	ldrb	r3, [r3, #4]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d122      	bne.n	800a02e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a002:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a006:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a014:	691a      	ldr	r2, [r3, #16]
 800a016:	8afb      	ldrh	r3, [r7, #22]
 800a018:	075b      	lsls	r3, r3, #29
 800a01a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a01e:	69b9      	ldr	r1, [r7, #24]
 800a020:	0148      	lsls	r0, r1, #5
 800a022:	69f9      	ldr	r1, [r7, #28]
 800a024:	4401      	add	r1, r0
 800a026:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a02a:	4313      	orrs	r3, r2
 800a02c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03a:	691a      	ldr	r2, [r3, #16]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a044:	69b9      	ldr	r1, [r7, #24]
 800a046:	0148      	lsls	r0, r1, #5
 800a048:	69f9      	ldr	r1, [r7, #28]
 800a04a:	4401      	add	r1, r0
 800a04c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a050:	4313      	orrs	r3, r2
 800a052:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d14b      	bne.n	800a0f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d009      	beq.n	800a076 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a06e:	461a      	mov	r2, r3
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	791b      	ldrb	r3, [r3, #4]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d128      	bne.n	800a0d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d110      	bne.n	800a0b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	4413      	add	r3, r2
 800a096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	69ba      	ldr	r2, [r7, #24]
 800a09e:	0151      	lsls	r1, r2, #5
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	440a      	add	r2, r1
 800a0a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	e00f      	b.n	800a0d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69ba      	ldr	r2, [r7, #24]
 800a0c0:	0151      	lsls	r1, r2, #5
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	440a      	add	r2, r1
 800a0c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	e169      	b.n	800a3c6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	015a      	lsls	r2, r3, #5
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	0151      	lsls	r1, r2, #5
 800a104:	69fa      	ldr	r2, [r7, #28]
 800a106:	440a      	add	r2, r1
 800a108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a10c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a110:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	791b      	ldrb	r3, [r3, #4]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d015      	beq.n	800a146 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 8151 	beq.w	800a3c6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a12a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f003 030f 	and.w	r3, r3, #15
 800a134:	2101      	movs	r1, #1
 800a136:	fa01 f303 	lsl.w	r3, r1, r3
 800a13a:	69f9      	ldr	r1, [r7, #28]
 800a13c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a140:	4313      	orrs	r3, r2
 800a142:	634b      	str	r3, [r1, #52]	@ 0x34
 800a144:	e13f      	b.n	800a3c6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a152:	2b00      	cmp	r3, #0
 800a154:	d116      	bne.n	800a184 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	0151      	lsls	r1, r2, #5
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	440a      	add	r2, r1
 800a16c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a170:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	e015      	b.n	800a1a4 <USB_EPStartXfer+0x310>
 800a178:	e007ffff 	.word	0xe007ffff
 800a17c:	fff80000 	.word	0xfff80000
 800a180:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	0151      	lsls	r1, r2, #5
 800a196:	69fa      	ldr	r2, [r7, #28]
 800a198:	440a      	add	r2, r1
 800a19a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a19e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	68d9      	ldr	r1, [r3, #12]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	781a      	ldrb	r2, [r3, #0]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	b298      	uxth	r0, r3
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 f9b9 	bl	800a530 <USB_WritePacket>
 800a1be:	e102      	b.n	800a3c6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	015a      	lsls	r2, r3, #5
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1cc:	691a      	ldr	r2, [r3, #16]
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	0159      	lsls	r1, r3, #5
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	440b      	add	r3, r1
 800a1d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4b7c      	ldr	r3, [pc, #496]	@ (800a3d0 <USB_EPStartXfer+0x53c>)
 800a1de:	4013      	ands	r3, r2
 800a1e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ee:	691a      	ldr	r2, [r3, #16]
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	0159      	lsls	r1, r3, #5
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	440b      	add	r3, r1
 800a1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4b75      	ldr	r3, [pc, #468]	@ (800a3d4 <USB_EPStartXfer+0x540>)
 800a200:	4013      	ands	r3, r2
 800a202:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d12f      	bne.n	800a26a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	689a      	ldr	r2, [r3, #8]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a238:	69b9      	ldr	r1, [r7, #24]
 800a23a:	0148      	lsls	r0, r1, #5
 800a23c:	69f9      	ldr	r1, [r7, #28]
 800a23e:	4401      	add	r1, r0
 800a240:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a244:	4313      	orrs	r3, r2
 800a246:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	0151      	lsls	r1, r2, #5
 800a25a:	69fa      	ldr	r2, [r7, #28]
 800a25c:	440a      	add	r2, r1
 800a25e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a262:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a266:	6113      	str	r3, [r2, #16]
 800a268:	e05f      	b.n	800a32a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d123      	bne.n	800a2ba <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	015a      	lsls	r2, r3, #5
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	4413      	add	r3, r2
 800a27a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27e:	691a      	ldr	r2, [r3, #16]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a288:	69b9      	ldr	r1, [r7, #24]
 800a28a:	0148      	lsls	r0, r1, #5
 800a28c:	69f9      	ldr	r1, [r7, #28]
 800a28e:	4401      	add	r1, r0
 800a290:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a294:	4313      	orrs	r3, r2
 800a296:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	0151      	lsls	r1, r2, #5
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	440a      	add	r2, r1
 800a2ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2b6:	6113      	str	r3, [r2, #16]
 800a2b8:	e037      	b.n	800a32a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	691a      	ldr	r2, [r3, #16]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	1e5a      	subs	r2, r3, #1
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ce:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	8afa      	ldrh	r2, [r7, #22]
 800a2d6:	fb03 f202 	mul.w	r2, r3, r2
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ea:	691a      	ldr	r2, [r3, #16]
 800a2ec:	8afb      	ldrh	r3, [r7, #22]
 800a2ee:	04d9      	lsls	r1, r3, #19
 800a2f0:	4b39      	ldr	r3, [pc, #228]	@ (800a3d8 <USB_EPStartXfer+0x544>)
 800a2f2:	400b      	ands	r3, r1
 800a2f4:	69b9      	ldr	r1, [r7, #24]
 800a2f6:	0148      	lsls	r0, r1, #5
 800a2f8:	69f9      	ldr	r1, [r7, #28]
 800a2fa:	4401      	add	r1, r0
 800a2fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a300:	4313      	orrs	r3, r2
 800a302:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a310:	691a      	ldr	r2, [r3, #16]
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a31a:	69b9      	ldr	r1, [r7, #24]
 800a31c:	0148      	lsls	r0, r1, #5
 800a31e:	69f9      	ldr	r1, [r7, #28]
 800a320:	4401      	add	r1, r0
 800a322:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a326:	4313      	orrs	r3, r2
 800a328:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d10d      	bne.n	800a34c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d009      	beq.n	800a34c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	68d9      	ldr	r1, [r3, #12]
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a348:	460a      	mov	r2, r1
 800a34a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	791b      	ldrb	r3, [r3, #4]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d128      	bne.n	800a3a6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a360:	2b00      	cmp	r3, #0
 800a362:	d110      	bne.n	800a386 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	69ba      	ldr	r2, [r7, #24]
 800a374:	0151      	lsls	r1, r2, #5
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	440a      	add	r2, r1
 800a37a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a37e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	e00f      	b.n	800a3a6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	69ba      	ldr	r2, [r7, #24]
 800a396:	0151      	lsls	r1, r2, #5
 800a398:	69fa      	ldr	r2, [r7, #28]
 800a39a:	440a      	add	r2, r1
 800a39c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3a4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	0151      	lsls	r1, r2, #5
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	440a      	add	r2, r1
 800a3bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3720      	adds	r7, #32
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	fff80000 	.word	0xfff80000
 800a3d4:	e007ffff 	.word	0xe007ffff
 800a3d8:	1ff80000 	.word	0x1ff80000

0800a3dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	785b      	ldrb	r3, [r3, #1]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d14a      	bne.n	800a490 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a40e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a412:	f040 8086 	bne.w	800a522 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	015a      	lsls	r2, r3, #5
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	4413      	add	r3, r2
 800a420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	7812      	ldrb	r2, [r2, #0]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a434:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a438:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	0151      	lsls	r1, r2, #5
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	440a      	add	r2, r1
 800a454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a458:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a45c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3301      	adds	r3, #1
 800a462:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d902      	bls.n	800a474 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	75fb      	strb	r3, [r7, #23]
          break;
 800a472:	e056      	b.n	800a522 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a48c:	d0e7      	beq.n	800a45e <USB_EPStopXfer+0x82>
 800a48e:	e048      	b.n	800a522 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	015a      	lsls	r2, r3, #5
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	4413      	add	r3, r2
 800a49a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4a8:	d13b      	bne.n	800a522 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	7812      	ldrb	r2, [r2, #0]
 800a4be:	0151      	lsls	r1, r2, #5
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	440a      	add	r2, r1
 800a4c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	7812      	ldrb	r2, [r2, #0]
 800a4e2:	0151      	lsls	r1, r2, #5
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d902      	bls.n	800a508 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	75fb      	strb	r3, [r7, #23]
          break;
 800a506:	e00c      	b.n	800a522 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4413      	add	r3, r2
 800a512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a51c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a520:	d0e7      	beq.n	800a4f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a522:	7dfb      	ldrb	r3, [r7, #23]
}
 800a524:	4618      	mov	r0, r3
 800a526:	371c      	adds	r7, #28
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a530:	b480      	push	{r7}
 800a532:	b089      	sub	sp, #36	@ 0x24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4611      	mov	r1, r2
 800a53c:	461a      	mov	r2, r3
 800a53e:	460b      	mov	r3, r1
 800a540:	71fb      	strb	r3, [r7, #7]
 800a542:	4613      	mov	r3, r2
 800a544:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a54e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d123      	bne.n	800a59e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a556:	88bb      	ldrh	r3, [r7, #4]
 800a558:	3303      	adds	r3, #3
 800a55a:	089b      	lsrs	r3, r3, #2
 800a55c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a55e:	2300      	movs	r3, #0
 800a560:	61bb      	str	r3, [r7, #24]
 800a562:	e018      	b.n	800a596 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	031a      	lsls	r2, r3, #12
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a570:	461a      	mov	r2, r3
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	3301      	adds	r3, #1
 800a57c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	3301      	adds	r3, #1
 800a582:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	3301      	adds	r3, #1
 800a588:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	3301      	adds	r3, #1
 800a58e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	3301      	adds	r3, #1
 800a594:	61bb      	str	r3, [r7, #24]
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d3e2      	bcc.n	800a564 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3724      	adds	r7, #36	@ 0x24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b08b      	sub	sp, #44	@ 0x2c
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5c2:	88fb      	ldrh	r3, [r7, #6]
 800a5c4:	089b      	lsrs	r3, r3, #2
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5ca:	88fb      	ldrh	r3, [r7, #6]
 800a5cc:	f003 0303 	and.w	r3, r3, #3
 800a5d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	623b      	str	r3, [r7, #32]
 800a5d6:	e014      	b.n	800a602 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	3301      	adds	r3, #1
 800a600:	623b      	str	r3, [r7, #32]
 800a602:	6a3a      	ldr	r2, [r7, #32]
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	429a      	cmp	r2, r3
 800a608:	d3e6      	bcc.n	800a5d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a60a:	8bfb      	ldrh	r3, [r7, #30]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d01e      	beq.n	800a64e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a61a:	461a      	mov	r2, r3
 800a61c:	f107 0310 	add.w	r3, r7, #16
 800a620:	6812      	ldr	r2, [r2, #0]
 800a622:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	fa22 f303 	lsr.w	r3, r2, r3
 800a630:	b2da      	uxtb	r2, r3
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a634:	701a      	strb	r2, [r3, #0]
      i++;
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	3301      	adds	r3, #1
 800a63a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	3301      	adds	r3, #1
 800a640:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a642:	8bfb      	ldrh	r3, [r7, #30]
 800a644:	3b01      	subs	r3, #1
 800a646:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a648:	8bfb      	ldrh	r3, [r7, #30]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1ea      	bne.n	800a624 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a650:	4618      	mov	r0, r3
 800a652:	372c      	adds	r7, #44	@ 0x2c
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	785b      	ldrb	r3, [r3, #1]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d12c      	bne.n	800a6d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	db12      	blt.n	800a6b0 <USB_EPSetStall+0x54>
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00f      	beq.n	800a6b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	0151      	lsls	r1, r2, #5
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	440a      	add	r2, r1
 800a6a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	0151      	lsls	r1, r2, #5
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	440a      	add	r2, r1
 800a6c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	e02b      	b.n	800a72a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	db12      	blt.n	800a70a <USB_EPSetStall+0xae>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00f      	beq.n	800a70a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	0151      	lsls	r1, r2, #5
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	440a      	add	r2, r1
 800a700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a704:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a708:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	4413      	add	r3, r2
 800a712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	0151      	lsls	r1, r2, #5
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	440a      	add	r2, r1
 800a720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a724:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a728:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	785b      	ldrb	r3, [r3, #1]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d128      	bne.n	800a7a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	0151      	lsls	r1, r2, #5
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	440a      	add	r2, r1
 800a76a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a76e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a772:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	791b      	ldrb	r3, [r3, #4]
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d003      	beq.n	800a784 <USB_EPClearStall+0x4c>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	791b      	ldrb	r3, [r3, #4]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d138      	bne.n	800a7f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a79e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	e027      	b.n	800a7f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	0151      	lsls	r1, r2, #5
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	440a      	add	r2, r1
 800a7bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	791b      	ldrb	r3, [r3, #4]
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d003      	beq.n	800a7d6 <USB_EPClearStall+0x9e>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	791b      	ldrb	r3, [r3, #4]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d10f      	bne.n	800a7f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	0151      	lsls	r1, r2, #5
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	440a      	add	r2, r1
 800a7ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a822:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a826:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	011b      	lsls	r3, r3, #4
 800a834:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a838:	68f9      	ldr	r1, [r7, #12]
 800a83a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a83e:	4313      	orrs	r3, r2
 800a840:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a86a:	f023 0303 	bic.w	r3, r3, #3
 800a86e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a87e:	f023 0302 	bic.w	r3, r3, #2
 800a882:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a892:	b480      	push	{r7}
 800a894:	b085      	sub	sp, #20
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8ac:	f023 0303 	bic.w	r3, r3, #3
 800a8b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8c0:	f043 0302 	orr.w	r3, r3, #2
 800a8c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	695b      	ldr	r3, [r3, #20]
 800a8e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a916:	69db      	ldr	r3, [r3, #28]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	4013      	ands	r3, r2
 800a91c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	0c1b      	lsrs	r3, r3, #16
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	4013      	ands	r3, r2
 800a950:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	b29b      	uxth	r3, r3
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a962:	b480      	push	{r7}
 800a964:	b085      	sub	sp, #20
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	460b      	mov	r3, r1
 800a96c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a972:	78fb      	ldrb	r3, [r7, #3]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	4013      	ands	r3, r2
 800a98e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a990:	68bb      	ldr	r3, [r7, #8]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b087      	sub	sp, #28
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9c2:	78fb      	ldrb	r3, [r7, #3]
 800a9c4:	f003 030f 	and.w	r3, r3, #15
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ce:	01db      	lsls	r3, r3, #7
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	f003 0301 	and.w	r3, r3, #1
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
	...

0800aa18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa32:	4619      	mov	r1, r3
 800aa34:	4b09      	ldr	r3, [pc, #36]	@ (800aa5c <USB_ActivateSetup+0x44>)
 800aa36:	4013      	ands	r3, r2
 800aa38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	fffff800 	.word	0xfffff800

0800aa60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	333c      	adds	r3, #60	@ 0x3c
 800aa76:	3304      	adds	r3, #4
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	4a26      	ldr	r2, [pc, #152]	@ (800ab18 <USB_EP0_OutStart+0xb8>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d90a      	bls.n	800aa9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa94:	d101      	bne.n	800aa9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	e037      	b.n	800ab0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac8:	f043 0318 	orr.w	r3, r3, #24
 800aacc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aadc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aae0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aae2:	7afb      	ldrb	r3, [r7, #11]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d10f      	bne.n	800ab08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaee:	461a      	mov	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ab06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	4f54300a 	.word	0x4f54300a

0800ab1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab34:	d901      	bls.n	800ab3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e01b      	b.n	800ab72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	daf2      	bge.n	800ab28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	f043 0201 	orr.w	r2, r3, #1
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3301      	adds	r3, #1
 800ab56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab5e:	d901      	bls.n	800ab64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e006      	b.n	800ab72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d0f0      	beq.n	800ab52 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
	...

0800ab80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ab90:	f002 fd3e 	bl	800d610 <USBD_static_malloc>
 800ab94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d109      	bne.n	800abb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32b0      	adds	r2, #176	@ 0xb0
 800aba6:	2100      	movs	r1, #0
 800aba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abac:	2302      	movs	r3, #2
 800abae:	e0d4      	b.n	800ad5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abb0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800abb4:	2100      	movs	r1, #0
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f002 fead 	bl	800d916 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	32b0      	adds	r2, #176	@ 0xb0
 800abc6:	68f9      	ldr	r1, [r7, #12]
 800abc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	32b0      	adds	r2, #176	@ 0xb0
 800abd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	7c1b      	ldrb	r3, [r3, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d138      	bne.n	800ac5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abe8:	4b5e      	ldr	r3, [pc, #376]	@ (800ad64 <USBD_CDC_Init+0x1e4>)
 800abea:	7819      	ldrb	r1, [r3, #0]
 800abec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abf0:	2202      	movs	r2, #2
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f002 fbe9 	bl	800d3ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abf8:	4b5a      	ldr	r3, [pc, #360]	@ (800ad64 <USBD_CDC_Init+0x1e4>)
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	f003 020f 	and.w	r2, r3, #15
 800ac00:	6879      	ldr	r1, [r7, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	440b      	add	r3, r1
 800ac0c:	3324      	adds	r3, #36	@ 0x24
 800ac0e:	2201      	movs	r2, #1
 800ac10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac12:	4b55      	ldr	r3, [pc, #340]	@ (800ad68 <USBD_CDC_Init+0x1e8>)
 800ac14:	7819      	ldrb	r1, [r3, #0]
 800ac16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f002 fbd4 	bl	800d3ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac22:	4b51      	ldr	r3, [pc, #324]	@ (800ad68 <USBD_CDC_Init+0x1e8>)
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	f003 020f 	and.w	r2, r3, #15
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	440b      	add	r3, r1
 800ac36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac3e:	4b4b      	ldr	r3, [pc, #300]	@ (800ad6c <USBD_CDC_Init+0x1ec>)
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	f003 020f 	and.w	r2, r3, #15
 800ac46:	6879      	ldr	r1, [r7, #4]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	440b      	add	r3, r1
 800ac52:	3326      	adds	r3, #38	@ 0x26
 800ac54:	2210      	movs	r2, #16
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	e035      	b.n	800acc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac5a:	4b42      	ldr	r3, [pc, #264]	@ (800ad64 <USBD_CDC_Init+0x1e4>)
 800ac5c:	7819      	ldrb	r1, [r3, #0]
 800ac5e:	2340      	movs	r3, #64	@ 0x40
 800ac60:	2202      	movs	r2, #2
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f002 fbb1 	bl	800d3ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac68:	4b3e      	ldr	r3, [pc, #248]	@ (800ad64 <USBD_CDC_Init+0x1e4>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f003 020f 	and.w	r2, r3, #15
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	3324      	adds	r3, #36	@ 0x24
 800ac7e:	2201      	movs	r2, #1
 800ac80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac82:	4b39      	ldr	r3, [pc, #228]	@ (800ad68 <USBD_CDC_Init+0x1e8>)
 800ac84:	7819      	ldrb	r1, [r3, #0]
 800ac86:	2340      	movs	r3, #64	@ 0x40
 800ac88:	2202      	movs	r2, #2
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f002 fb9d 	bl	800d3ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac90:	4b35      	ldr	r3, [pc, #212]	@ (800ad68 <USBD_CDC_Init+0x1e8>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	f003 020f 	and.w	r2, r3, #15
 800ac98:	6879      	ldr	r1, [r7, #4]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	440b      	add	r3, r1
 800aca4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aca8:	2201      	movs	r2, #1
 800acaa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800acac:	4b2f      	ldr	r3, [pc, #188]	@ (800ad6c <USBD_CDC_Init+0x1ec>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	f003 020f 	and.w	r2, r3, #15
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	440b      	add	r3, r1
 800acc0:	3326      	adds	r3, #38	@ 0x26
 800acc2:	2210      	movs	r2, #16
 800acc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acc6:	4b29      	ldr	r3, [pc, #164]	@ (800ad6c <USBD_CDC_Init+0x1ec>)
 800acc8:	7819      	ldrb	r1, [r3, #0]
 800acca:	2308      	movs	r3, #8
 800accc:	2203      	movs	r2, #3
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f002 fb7b 	bl	800d3ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800acd4:	4b25      	ldr	r3, [pc, #148]	@ (800ad6c <USBD_CDC_Init+0x1ec>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	f003 020f 	and.w	r2, r3, #15
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	440b      	add	r3, r1
 800ace8:	3324      	adds	r3, #36	@ 0x24
 800acea:	2201      	movs	r2, #1
 800acec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	33b0      	adds	r3, #176	@ 0xb0
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad24:	2302      	movs	r3, #2
 800ad26:	e018      	b.n	800ad5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	7c1b      	ldrb	r3, [r3, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10a      	bne.n	800ad46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad30:	4b0d      	ldr	r3, [pc, #52]	@ (800ad68 <USBD_CDC_Init+0x1e8>)
 800ad32:	7819      	ldrb	r1, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f002 fc32 	bl	800d5a8 <USBD_LL_PrepareReceive>
 800ad44:	e008      	b.n	800ad58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad46:	4b08      	ldr	r3, [pc, #32]	@ (800ad68 <USBD_CDC_Init+0x1e8>)
 800ad48:	7819      	ldrb	r1, [r3, #0]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad50:	2340      	movs	r3, #64	@ 0x40
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f002 fc28 	bl	800d5a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	24000097 	.word	0x24000097
 800ad68:	24000098 	.word	0x24000098
 800ad6c:	24000099 	.word	0x24000099

0800ad70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad7c:	4b3a      	ldr	r3, [pc, #232]	@ (800ae68 <USBD_CDC_DeInit+0xf8>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f002 fb47 	bl	800d416 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad88:	4b37      	ldr	r3, [pc, #220]	@ (800ae68 <USBD_CDC_DeInit+0xf8>)
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	f003 020f 	and.w	r2, r3, #15
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	4613      	mov	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	440b      	add	r3, r1
 800ad9c:	3324      	adds	r3, #36	@ 0x24
 800ad9e:	2200      	movs	r2, #0
 800ada0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ada2:	4b32      	ldr	r3, [pc, #200]	@ (800ae6c <USBD_CDC_DeInit+0xfc>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f002 fb34 	bl	800d416 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800adae:	4b2f      	ldr	r3, [pc, #188]	@ (800ae6c <USBD_CDC_DeInit+0xfc>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	f003 020f 	and.w	r2, r3, #15
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	4613      	mov	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	440b      	add	r3, r1
 800adc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800adc6:	2200      	movs	r2, #0
 800adc8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800adca:	4b29      	ldr	r3, [pc, #164]	@ (800ae70 <USBD_CDC_DeInit+0x100>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f002 fb20 	bl	800d416 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800add6:	4b26      	ldr	r3, [pc, #152]	@ (800ae70 <USBD_CDC_DeInit+0x100>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	f003 020f 	and.w	r2, r3, #15
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	440b      	add	r3, r1
 800adea:	3324      	adds	r3, #36	@ 0x24
 800adec:	2200      	movs	r2, #0
 800adee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800adf0:	4b1f      	ldr	r3, [pc, #124]	@ (800ae70 <USBD_CDC_DeInit+0x100>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	f003 020f 	and.w	r2, r3, #15
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	440b      	add	r3, r1
 800ae04:	3326      	adds	r3, #38	@ 0x26
 800ae06:	2200      	movs	r2, #0
 800ae08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	32b0      	adds	r2, #176	@ 0xb0
 800ae14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d01f      	beq.n	800ae5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	33b0      	adds	r3, #176	@ 0xb0
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	32b0      	adds	r2, #176	@ 0xb0
 800ae3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f002 fbf4 	bl	800d62c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	32b0      	adds	r2, #176	@ 0xb0
 800ae4e:	2100      	movs	r1, #0
 800ae50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	24000097 	.word	0x24000097
 800ae6c:	24000098 	.word	0x24000098
 800ae70:	24000099 	.word	0x24000099

0800ae74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	32b0      	adds	r2, #176	@ 0xb0
 800ae88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e0bf      	b.n	800b024 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d050      	beq.n	800af52 <USBD_CDC_Setup+0xde>
 800aeb0:	2b20      	cmp	r3, #32
 800aeb2:	f040 80af 	bne.w	800b014 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	88db      	ldrh	r3, [r3, #6]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d03a      	beq.n	800af34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	b25b      	sxtb	r3, r3
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	da1b      	bge.n	800af00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	33b0      	adds	r3, #176	@ 0xb0
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aede:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aee0:	683a      	ldr	r2, [r7, #0]
 800aee2:	88d2      	ldrh	r2, [r2, #6]
 800aee4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	88db      	ldrh	r3, [r3, #6]
 800aeea:	2b07      	cmp	r3, #7
 800aeec:	bf28      	it	cs
 800aeee:	2307      	movcs	r3, #7
 800aef0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	89fa      	ldrh	r2, [r7, #14]
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f001 fdd9 	bl	800cab0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aefe:	e090      	b.n	800b022 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	785a      	ldrb	r2, [r3, #1]
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	88db      	ldrh	r3, [r3, #6]
 800af0e:	2b3f      	cmp	r3, #63	@ 0x3f
 800af10:	d803      	bhi.n	800af1a <USBD_CDC_Setup+0xa6>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	88db      	ldrh	r3, [r3, #6]
 800af16:	b2da      	uxtb	r2, r3
 800af18:	e000      	b.n	800af1c <USBD_CDC_Setup+0xa8>
 800af1a:	2240      	movs	r2, #64	@ 0x40
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af22:	6939      	ldr	r1, [r7, #16]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af2a:	461a      	mov	r2, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 fdeb 	bl	800cb08 <USBD_CtlPrepareRx>
      break;
 800af32:	e076      	b.n	800b022 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	33b0      	adds	r3, #176	@ 0xb0
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	7850      	ldrb	r0, [r2, #1]
 800af4a:	2200      	movs	r2, #0
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	4798      	blx	r3
      break;
 800af50:	e067      	b.n	800b022 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	785b      	ldrb	r3, [r3, #1]
 800af56:	2b0b      	cmp	r3, #11
 800af58:	d851      	bhi.n	800affe <USBD_CDC_Setup+0x18a>
 800af5a:	a201      	add	r2, pc, #4	@ (adr r2, 800af60 <USBD_CDC_Setup+0xec>)
 800af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af60:	0800af91 	.word	0x0800af91
 800af64:	0800b00d 	.word	0x0800b00d
 800af68:	0800afff 	.word	0x0800afff
 800af6c:	0800afff 	.word	0x0800afff
 800af70:	0800afff 	.word	0x0800afff
 800af74:	0800afff 	.word	0x0800afff
 800af78:	0800afff 	.word	0x0800afff
 800af7c:	0800afff 	.word	0x0800afff
 800af80:	0800afff 	.word	0x0800afff
 800af84:	0800afff 	.word	0x0800afff
 800af88:	0800afbb 	.word	0x0800afbb
 800af8c:	0800afe5 	.word	0x0800afe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d107      	bne.n	800afac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af9c:	f107 030a 	add.w	r3, r7, #10
 800afa0:	2202      	movs	r2, #2
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f001 fd83 	bl	800cab0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afaa:	e032      	b.n	800b012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f001 fd01 	bl	800c9b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800afb4:	2303      	movs	r3, #3
 800afb6:	75fb      	strb	r3, [r7, #23]
          break;
 800afb8:	e02b      	b.n	800b012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d107      	bne.n	800afd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afc6:	f107 030d 	add.w	r3, r7, #13
 800afca:	2201      	movs	r2, #1
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f001 fd6e 	bl	800cab0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afd4:	e01d      	b.n	800b012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f001 fcec 	bl	800c9b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800afde:	2303      	movs	r3, #3
 800afe0:	75fb      	strb	r3, [r7, #23]
          break;
 800afe2:	e016      	b.n	800b012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b03      	cmp	r3, #3
 800afee:	d00f      	beq.n	800b010 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f001 fcdf 	bl	800c9b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800aff8:	2303      	movs	r3, #3
 800affa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800affc:	e008      	b.n	800b010 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 fcd8 	bl	800c9b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b006:	2303      	movs	r3, #3
 800b008:	75fb      	strb	r3, [r7, #23]
          break;
 800b00a:	e002      	b.n	800b012 <USBD_CDC_Setup+0x19e>
          break;
 800b00c:	bf00      	nop
 800b00e:	e008      	b.n	800b022 <USBD_CDC_Setup+0x1ae>
          break;
 800b010:	bf00      	nop
      }
      break;
 800b012:	e006      	b.n	800b022 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f001 fccd 	bl	800c9b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b01c:	2303      	movs	r3, #3
 800b01e:	75fb      	strb	r3, [r7, #23]
      break;
 800b020:	bf00      	nop
  }

  return (uint8_t)ret;
 800b022:	7dfb      	ldrb	r3, [r7, #23]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3718      	adds	r7, #24
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b03e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	32b0      	adds	r2, #176	@ 0xb0
 800b04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b052:	2303      	movs	r3, #3
 800b054:	e065      	b.n	800b122 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	32b0      	adds	r2, #176	@ 0xb0
 800b060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b064:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b066:	78fb      	ldrb	r3, [r7, #3]
 800b068:	f003 020f 	and.w	r2, r3, #15
 800b06c:	6879      	ldr	r1, [r7, #4]
 800b06e:	4613      	mov	r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4413      	add	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	440b      	add	r3, r1
 800b078:	3318      	adds	r3, #24
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d02f      	beq.n	800b0e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b080:	78fb      	ldrb	r3, [r7, #3]
 800b082:	f003 020f 	and.w	r2, r3, #15
 800b086:	6879      	ldr	r1, [r7, #4]
 800b088:	4613      	mov	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4413      	add	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	440b      	add	r3, r1
 800b092:	3318      	adds	r3, #24
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	78fb      	ldrb	r3, [r7, #3]
 800b098:	f003 010f 	and.w	r1, r3, #15
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	00db      	lsls	r3, r3, #3
 800b0a2:	440b      	add	r3, r1
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4403      	add	r3, r0
 800b0a8:	331c      	adds	r3, #28
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0b0:	fb01 f303 	mul.w	r3, r1, r3
 800b0b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d112      	bne.n	800b0e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0ba:	78fb      	ldrb	r3, [r7, #3]
 800b0bc:	f003 020f 	and.w	r2, r3, #15
 800b0c0:	6879      	ldr	r1, [r7, #4]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	440b      	add	r3, r1
 800b0cc:	3318      	adds	r3, #24
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0d2:	78f9      	ldrb	r1, [r7, #3]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f002 fa44 	bl	800d566 <USBD_LL_Transmit>
 800b0de:	e01f      	b.n	800b120 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	33b0      	adds	r3, #176	@ 0xb0
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d010      	beq.n	800b120 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	33b0      	adds	r3, #176	@ 0xb0
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b11c:	78fa      	ldrb	r2, [r7, #3]
 800b11e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b084      	sub	sp, #16
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	460b      	mov	r3, r1
 800b134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	32b0      	adds	r2, #176	@ 0xb0
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	32b0      	adds	r2, #176	@ 0xb0
 800b150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b158:	2303      	movs	r3, #3
 800b15a:	e01a      	b.n	800b192 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b15c:	78fb      	ldrb	r3, [r7, #3]
 800b15e:	4619      	mov	r1, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f002 fa42 	bl	800d5ea <USBD_LL_GetRxDataSize>
 800b166:	4602      	mov	r2, r0
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	33b0      	adds	r3, #176	@ 0xb0
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b18c:	4611      	mov	r1, r2
 800b18e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b084      	sub	sp, #16
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	32b0      	adds	r2, #176	@ 0xb0
 800b1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e024      	b.n	800b206 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	33b0      	adds	r3, #176	@ 0xb0
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d019      	beq.n	800b204 <USBD_CDC_EP0_RxReady+0x6a>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b1d6:	2bff      	cmp	r3, #255	@ 0xff
 800b1d8:	d014      	beq.n	800b204 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	33b0      	adds	r3, #176	@ 0xb0
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	22ff      	movs	r2, #255	@ 0xff
 800b200:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
	...

0800b210 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b218:	2182      	movs	r1, #130	@ 0x82
 800b21a:	4818      	ldr	r0, [pc, #96]	@ (800b27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b21c:	f000 fd6b 	bl	800bcf6 <USBD_GetEpDesc>
 800b220:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b222:	2101      	movs	r1, #1
 800b224:	4815      	ldr	r0, [pc, #84]	@ (800b27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b226:	f000 fd66 	bl	800bcf6 <USBD_GetEpDesc>
 800b22a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b22c:	2181      	movs	r1, #129	@ 0x81
 800b22e:	4813      	ldr	r0, [pc, #76]	@ (800b27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b230:	f000 fd61 	bl	800bcf6 <USBD_GetEpDesc>
 800b234:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	2210      	movs	r2, #16
 800b240:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d006      	beq.n	800b256 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b250:	711a      	strb	r2, [r3, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d006      	beq.n	800b26a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b264:	711a      	strb	r2, [r3, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2243      	movs	r2, #67	@ 0x43
 800b26e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b270:	4b02      	ldr	r3, [pc, #8]	@ (800b27c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	24000054 	.word	0x24000054

0800b280 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b288:	2182      	movs	r1, #130	@ 0x82
 800b28a:	4818      	ldr	r0, [pc, #96]	@ (800b2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b28c:	f000 fd33 	bl	800bcf6 <USBD_GetEpDesc>
 800b290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b292:	2101      	movs	r1, #1
 800b294:	4815      	ldr	r0, [pc, #84]	@ (800b2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b296:	f000 fd2e 	bl	800bcf6 <USBD_GetEpDesc>
 800b29a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b29c:	2181      	movs	r1, #129	@ 0x81
 800b29e:	4813      	ldr	r0, [pc, #76]	@ (800b2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2a0:	f000 fd29 	bl	800bcf6 <USBD_GetEpDesc>
 800b2a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2210      	movs	r2, #16
 800b2b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d006      	beq.n	800b2c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	711a      	strb	r2, [r3, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f042 0202 	orr.w	r2, r2, #2
 800b2c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d006      	beq.n	800b2da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	711a      	strb	r2, [r3, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f042 0202 	orr.w	r2, r2, #2
 800b2d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2243      	movs	r2, #67	@ 0x43
 800b2de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2e0:	4b02      	ldr	r3, [pc, #8]	@ (800b2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	24000054 	.word	0x24000054

0800b2f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2f8:	2182      	movs	r1, #130	@ 0x82
 800b2fa:	4818      	ldr	r0, [pc, #96]	@ (800b35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2fc:	f000 fcfb 	bl	800bcf6 <USBD_GetEpDesc>
 800b300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b302:	2101      	movs	r1, #1
 800b304:	4815      	ldr	r0, [pc, #84]	@ (800b35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b306:	f000 fcf6 	bl	800bcf6 <USBD_GetEpDesc>
 800b30a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b30c:	2181      	movs	r1, #129	@ 0x81
 800b30e:	4813      	ldr	r0, [pc, #76]	@ (800b35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b310:	f000 fcf1 	bl	800bcf6 <USBD_GetEpDesc>
 800b314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2210      	movs	r2, #16
 800b320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d006      	beq.n	800b336 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b330:	711a      	strb	r2, [r3, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b344:	711a      	strb	r2, [r3, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2243      	movs	r2, #67	@ 0x43
 800b34e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b350:	4b02      	ldr	r3, [pc, #8]	@ (800b35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b352:	4618      	mov	r0, r3
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	24000054 	.word	0x24000054

0800b360 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	220a      	movs	r2, #10
 800b36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b36e:	4b03      	ldr	r3, [pc, #12]	@ (800b37c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	24000010 	.word	0x24000010

0800b380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b390:	2303      	movs	r3, #3
 800b392:	e009      	b.n	800b3a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	33b0      	adds	r3, #176	@ 0xb0
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	32b0      	adds	r2, #176	@ 0xb0
 800b3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	e008      	b.n	800b3ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	371c      	adds	r7, #28
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	32b0      	adds	r2, #176	@ 0xb0
 800b40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b410:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b418:	2303      	movs	r3, #3
 800b41a:	e004      	b.n	800b426 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
	...

0800b434 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	32b0      	adds	r2, #176	@ 0xb0
 800b446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b44c:	2301      	movs	r3, #1
 800b44e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b456:	2303      	movs	r3, #3
 800b458:	e025      	b.n	800b4a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b460:	2b00      	cmp	r3, #0
 800b462:	d11f      	bne.n	800b4a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2201      	movs	r2, #1
 800b468:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b46c:	4b10      	ldr	r3, [pc, #64]	@ (800b4b0 <USBD_CDC_TransmitPacket+0x7c>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	f003 020f 	and.w	r2, r3, #15
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4403      	add	r3, r0
 800b486:	3318      	adds	r3, #24
 800b488:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b48a:	4b09      	ldr	r3, [pc, #36]	@ (800b4b0 <USBD_CDC_TransmitPacket+0x7c>)
 800b48c:	7819      	ldrb	r1, [r3, #0]
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f002 f863 	bl	800d566 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	24000097 	.word	0x24000097

0800b4b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32b0      	adds	r2, #176	@ 0xb0
 800b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	32b0      	adds	r2, #176	@ 0xb0
 800b4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e018      	b.n	800b514 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	7c1b      	ldrb	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10a      	bne.n	800b500 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b51c <USBD_CDC_ReceivePacket+0x68>)
 800b4ec:	7819      	ldrb	r1, [r3, #0]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f002 f855 	bl	800d5a8 <USBD_LL_PrepareReceive>
 800b4fe:	e008      	b.n	800b512 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b500:	4b06      	ldr	r3, [pc, #24]	@ (800b51c <USBD_CDC_ReceivePacket+0x68>)
 800b502:	7819      	ldrb	r1, [r3, #0]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b50a:	2340      	movs	r3, #64	@ 0x40
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f002 f84b 	bl	800d5a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	24000098 	.word	0x24000098

0800b520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800b534:	4817      	ldr	r0, [pc, #92]	@ (800b594 <USBD_Init+0x74>)
 800b536:	f002 f971 	bl	800d81c <iprintf>
 800b53a:	4817      	ldr	r0, [pc, #92]	@ (800b598 <USBD_Init+0x78>)
 800b53c:	f002 f96e 	bl	800d81c <iprintf>
 800b540:	200a      	movs	r0, #10
 800b542:	f002 f97d 	bl	800d840 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b546:	2303      	movs	r3, #3
 800b548:	e01f      	b.n	800b58a <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d003      	beq.n	800b570 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	79fa      	ldrb	r2, [r7, #7]
 800b57c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f001 feb6 	bl	800d2f0 <USBD_LL_Init>
 800b584:	4603      	mov	r3, r0
 800b586:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b588:	7dfb      	ldrb	r3, [r7, #23]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3718      	adds	r7, #24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	0800ea0c 	.word	0x0800ea0c
 800b598:	0800ea14 	.word	0x0800ea14

0800b59c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800b5b0:	481a      	ldr	r0, [pc, #104]	@ (800b61c <USBD_RegisterClass+0x80>)
 800b5b2:	f002 f933 	bl	800d81c <iprintf>
 800b5b6:	481a      	ldr	r0, [pc, #104]	@ (800b620 <USBD_RegisterClass+0x84>)
 800b5b8:	f002 f930 	bl	800d81c <iprintf>
 800b5bc:	200a      	movs	r0, #10
 800b5be:	f002 f93f 	bl	800d840 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e025      	b.n	800b612 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	32ae      	adds	r2, #174	@ 0xae
 800b5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00f      	beq.n	800b602 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	32ae      	adds	r2, #174	@ 0xae
 800b5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f2:	f107 020e 	add.w	r2, r7, #14
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	4798      	blx	r3
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	0800ea0c 	.word	0x0800ea0c
 800b620:	0800ea2c 	.word	0x0800ea2c

0800b624 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f001 feb1 	bl	800d394 <USBD_LL_Start>
 800b632:	4603      	mov	r3, r0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b644:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b646:	4618      	mov	r0, r3
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	460b      	mov	r3, r1
 800b65c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d009      	beq.n	800b680 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	4611      	mov	r1, r2
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	4798      	blx	r3
 800b67c:	4603      	mov	r3, r0
 800b67e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b680:	7bfb      	ldrb	r3, [r7, #15]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	78fa      	ldrb	r2, [r7, #3]
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	4798      	blx	r3
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6ce:	6839      	ldr	r1, [r7, #0]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f001 f936 	bl	800c942 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6f2:	f003 031f 	and.w	r3, r3, #31
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d01a      	beq.n	800b730 <USBD_LL_SetupStage+0x72>
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d822      	bhi.n	800b744 <USBD_LL_SetupStage+0x86>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <USBD_LL_SetupStage+0x4a>
 800b702:	2b01      	cmp	r3, #1
 800b704:	d00a      	beq.n	800b71c <USBD_LL_SetupStage+0x5e>
 800b706:	e01d      	b.n	800b744 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fb63 	bl	800bddc <USBD_StdDevReq>
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]
      break;
 800b71a:	e020      	b.n	800b75e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fbcb 	bl	800bec0 <USBD_StdItfReq>
 800b72a:	4603      	mov	r3, r0
 800b72c:	73fb      	strb	r3, [r7, #15]
      break;
 800b72e:	e016      	b.n	800b75e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fc2d 	bl	800bf98 <USBD_StdEPReq>
 800b73e:	4603      	mov	r3, r0
 800b740:	73fb      	strb	r3, [r7, #15]
      break;
 800b742:	e00c      	b.n	800b75e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b74a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 fe7e 	bl	800d454 <USBD_LL_StallEP>
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]
      break;
 800b75c:	bf00      	nop
  }

  return ret;
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	460b      	mov	r3, r1
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d16e      	bne.n	800b85e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b786:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b78e:	2b03      	cmp	r3, #3
 800b790:	f040 8098 	bne.w	800b8c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	689a      	ldr	r2, [r3, #8]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d913      	bls.n	800b7c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	689a      	ldr	r2, [r3, #8]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	1ad2      	subs	r2, r2, r3
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	68da      	ldr	r2, [r3, #12]
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	bf28      	it	cs
 800b7ba:	4613      	movcs	r3, r2
 800b7bc:	461a      	mov	r2, r3
 800b7be:	6879      	ldr	r1, [r7, #4]
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f001 f9be 	bl	800cb42 <USBD_CtlContinueRx>
 800b7c6:	e07d      	b.n	800b8c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7ce:	f003 031f 	and.w	r3, r3, #31
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d014      	beq.n	800b800 <USBD_LL_DataOutStage+0x98>
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d81d      	bhi.n	800b816 <USBD_LL_DataOutStage+0xae>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <USBD_LL_DataOutStage+0x7c>
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d003      	beq.n	800b7ea <USBD_LL_DataOutStage+0x82>
 800b7e2:	e018      	b.n	800b816 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e8:	e018      	b.n	800b81c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 fa64 	bl	800bcc2 <USBD_CoreFindIF>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b7fe:	e00d      	b.n	800b81c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b806:	b2db      	uxtb	r3, r3
 800b808:	4619      	mov	r1, r3
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f000 fa66 	bl	800bcdc <USBD_CoreFindEP>
 800b810:	4603      	mov	r3, r0
 800b812:	75bb      	strb	r3, [r7, #22]
            break;
 800b814:	e002      	b.n	800b81c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	75bb      	strb	r3, [r7, #22]
            break;
 800b81a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b81c:	7dbb      	ldrb	r3, [r7, #22]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d119      	bne.n	800b856 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d113      	bne.n	800b856 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b82e:	7dba      	ldrb	r2, [r7, #22]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	32ae      	adds	r2, #174	@ 0xae
 800b834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00b      	beq.n	800b856 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b83e:	7dba      	ldrb	r2, [r7, #22]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b846:	7dba      	ldrb	r2, [r7, #22]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	32ae      	adds	r2, #174	@ 0xae
 800b84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f001 f984 	bl	800cb64 <USBD_CtlSendStatus>
 800b85c:	e032      	b.n	800b8c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b85e:	7afb      	ldrb	r3, [r7, #11]
 800b860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b864:	b2db      	uxtb	r3, r3
 800b866:	4619      	mov	r1, r3
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 fa37 	bl	800bcdc <USBD_CoreFindEP>
 800b86e:	4603      	mov	r3, r0
 800b870:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b872:	7dbb      	ldrb	r3, [r7, #22]
 800b874:	2bff      	cmp	r3, #255	@ 0xff
 800b876:	d025      	beq.n	800b8c4 <USBD_LL_DataOutStage+0x15c>
 800b878:	7dbb      	ldrb	r3, [r7, #22]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d122      	bne.n	800b8c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b03      	cmp	r3, #3
 800b888:	d117      	bne.n	800b8ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b88a:	7dba      	ldrb	r2, [r7, #22]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	32ae      	adds	r2, #174	@ 0xae
 800b890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00f      	beq.n	800b8ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b89a:	7dba      	ldrb	r2, [r7, #22]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8a2:	7dba      	ldrb	r2, [r7, #22]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	32ae      	adds	r2, #174	@ 0xae
 800b8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	7afa      	ldrb	r2, [r7, #11]
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	4798      	blx	r3
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
 800b8c2:	e000      	b.n	800b8c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b086      	sub	sp, #24
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	60f8      	str	r0, [r7, #12]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	607a      	str	r2, [r7, #4]
 800b8da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8dc:	7afb      	ldrb	r3, [r7, #11]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d16f      	bne.n	800b9c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3314      	adds	r3, #20
 800b8e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d15a      	bne.n	800b9a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	689a      	ldr	r2, [r3, #8]
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d914      	bls.n	800b928 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	689a      	ldr	r2, [r3, #8]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	1ad2      	subs	r2, r2, r3
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	461a      	mov	r2, r3
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f001 f8e6 	bl	800cae6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b91a:	2300      	movs	r3, #0
 800b91c:	2200      	movs	r2, #0
 800b91e:	2100      	movs	r1, #0
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f001 fe41 	bl	800d5a8 <USBD_LL_PrepareReceive>
 800b926:	e03f      	b.n	800b9a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	68da      	ldr	r2, [r3, #12]
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	429a      	cmp	r2, r3
 800b932:	d11c      	bne.n	800b96e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d316      	bcc.n	800b96e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d20f      	bcs.n	800b96e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b94e:	2200      	movs	r2, #0
 800b950:	2100      	movs	r1, #0
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f001 f8c7 	bl	800cae6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b960:	2300      	movs	r3, #0
 800b962:	2200      	movs	r2, #0
 800b964:	2100      	movs	r1, #0
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f001 fe1e 	bl	800d5a8 <USBD_LL_PrepareReceive>
 800b96c:	e01c      	b.n	800b9a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b03      	cmp	r3, #3
 800b978:	d10f      	bne.n	800b99a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d009      	beq.n	800b99a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b99a:	2180      	movs	r1, #128	@ 0x80
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f001 fd59 	bl	800d454 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f001 f8f1 	bl	800cb8a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d03a      	beq.n	800ba28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f7ff fe42 	bl	800b63c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b9c0:	e032      	b.n	800ba28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9c2:	7afb      	ldrb	r3, [r7, #11]
 800b9c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 f985 	bl	800bcdc <USBD_CoreFindEP>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9d6:	7dfb      	ldrb	r3, [r7, #23]
 800b9d8:	2bff      	cmp	r3, #255	@ 0xff
 800b9da:	d025      	beq.n	800ba28 <USBD_LL_DataInStage+0x15a>
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d122      	bne.n	800ba28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d11c      	bne.n	800ba28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9ee:	7dfa      	ldrb	r2, [r7, #23]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	32ae      	adds	r2, #174	@ 0xae
 800b9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d014      	beq.n	800ba28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9fe:	7dfa      	ldrb	r2, [r7, #23]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba06:	7dfa      	ldrb	r2, [r7, #23]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	32ae      	adds	r2, #174	@ 0xae
 800ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	7afa      	ldrb	r2, [r7, #11]
 800ba14:	4611      	mov	r1, r2
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	4798      	blx	r3
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba1e:	7dbb      	ldrb	r3, [r7, #22]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba24:	7dbb      	ldrb	r3, [r7, #22]
 800ba26:	e000      	b.n	800ba2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d014      	beq.n	800ba98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00e      	beq.n	800ba98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	6852      	ldr	r2, [r2, #4]
 800ba86:	b2d2      	uxtb	r2, r2
 800ba88:	4611      	mov	r1, r2
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	4798      	blx	r3
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba94:	2303      	movs	r3, #3
 800ba96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba98:	2340      	movs	r3, #64	@ 0x40
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f001 fc93 	bl	800d3ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2240      	movs	r2, #64	@ 0x40
 800bab0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bab4:	2340      	movs	r3, #64	@ 0x40
 800bab6:	2200      	movs	r2, #0
 800bab8:	2180      	movs	r1, #128	@ 0x80
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f001 fc85 	bl	800d3ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2240      	movs	r2, #64	@ 0x40
 800baca:	621a      	str	r2, [r3, #32]

  return ret;
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	460b      	mov	r3, r1
 800bae0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	78fa      	ldrb	r2, [r7, #3]
 800bae6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	d006      	beq.n	800bb18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2204      	movs	r2, #4
 800bb1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d106      	bne.n	800bb50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d110      	bne.n	800bb94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00b      	beq.n	800bb94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d005      	beq.n	800bb94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	460b      	mov	r3, r1
 800bba8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	32ae      	adds	r2, #174	@ 0xae
 800bbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e01c      	b.n	800bbfa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b03      	cmp	r3, #3
 800bbca:	d115      	bne.n	800bbf8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	32ae      	adds	r2, #174	@ 0xae
 800bbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	32ae      	adds	r2, #174	@ 0xae
 800bbea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbee:	6a1b      	ldr	r3, [r3, #32]
 800bbf0:	78fa      	ldrb	r2, [r7, #3]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b082      	sub	sp, #8
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	32ae      	adds	r2, #174	@ 0xae
 800bc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e01c      	b.n	800bc5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d115      	bne.n	800bc5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	32ae      	adds	r2, #174	@ 0xae
 800bc3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00b      	beq.n	800bc5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	32ae      	adds	r2, #174	@ 0xae
 800bc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc54:	78fa      	ldrb	r2, [r7, #3]
 800bc56:	4611      	mov	r1, r2
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00e      	beq.n	800bcb8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	6852      	ldr	r2, [r2, #4]
 800bca6:	b2d2      	uxtb	r2, r2
 800bca8:	4611      	mov	r1, r2
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	4798      	blx	r3
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcc2:	b480      	push	{r7}
 800bcc4:	b083      	sub	sp, #12
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	460b      	mov	r3, r1
 800bccc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bce8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b086      	sub	sp, #24
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	885b      	ldrh	r3, [r3, #2]
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	7812      	ldrb	r2, [r2, #0]
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d91f      	bls.n	800bd5c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd22:	e013      	b.n	800bd4c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd24:	f107 030a 	add.w	r3, r7, #10
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6978      	ldr	r0, [r7, #20]
 800bd2c:	f000 f81b 	bl	800bd66 <USBD_GetNextDesc>
 800bd30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	d108      	bne.n	800bd4c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	789b      	ldrb	r3, [r3, #2]
 800bd42:	78fa      	ldrb	r2, [r7, #3]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d008      	beq.n	800bd5a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	885b      	ldrh	r3, [r3, #2]
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	897b      	ldrh	r3, [r7, #10]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d8e5      	bhi.n	800bd24 <USBD_GetEpDesc+0x2e>
 800bd58:	e000      	b.n	800bd5c <USBD_GetEpDesc+0x66>
          break;
 800bd5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd5c:	693b      	ldr	r3, [r7, #16]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b085      	sub	sp, #20
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	881b      	ldrh	r3, [r3, #0]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	7812      	ldrb	r2, [r2, #0]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd90:	68fb      	ldr	r3, [r7, #12]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b087      	sub	sp, #28
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdbc:	8a3b      	ldrh	r3, [r7, #16]
 800bdbe:	021b      	lsls	r3, r3, #8
 800bdc0:	b21a      	sxth	r2, r3
 800bdc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	b21b      	sxth	r3, r3
 800bdca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdcc:	89fb      	ldrh	r3, [r7, #14]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	371c      	adds	r7, #28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
	...

0800bddc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdf2:	2b40      	cmp	r3, #64	@ 0x40
 800bdf4:	d005      	beq.n	800be02 <USBD_StdDevReq+0x26>
 800bdf6:	2b40      	cmp	r3, #64	@ 0x40
 800bdf8:	d857      	bhi.n	800beaa <USBD_StdDevReq+0xce>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00f      	beq.n	800be1e <USBD_StdDevReq+0x42>
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d153      	bne.n	800beaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	32ae      	adds	r2, #174	@ 0xae
 800be0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
      break;
 800be1c:	e04a      	b.n	800beb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b09      	cmp	r3, #9
 800be24:	d83b      	bhi.n	800be9e <USBD_StdDevReq+0xc2>
 800be26:	a201      	add	r2, pc, #4	@ (adr r2, 800be2c <USBD_StdDevReq+0x50>)
 800be28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2c:	0800be81 	.word	0x0800be81
 800be30:	0800be95 	.word	0x0800be95
 800be34:	0800be9f 	.word	0x0800be9f
 800be38:	0800be8b 	.word	0x0800be8b
 800be3c:	0800be9f 	.word	0x0800be9f
 800be40:	0800be5f 	.word	0x0800be5f
 800be44:	0800be55 	.word	0x0800be55
 800be48:	0800be9f 	.word	0x0800be9f
 800be4c:	0800be77 	.word	0x0800be77
 800be50:	0800be69 	.word	0x0800be69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa3c 	bl	800c2d4 <USBD_GetDescriptor>
          break;
 800be5c:	e024      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fbcb 	bl	800c5fc <USBD_SetAddress>
          break;
 800be66:	e01f      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fc0a 	bl	800c684 <USBD_SetConfig>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]
          break;
 800be74:	e018      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fcad 	bl	800c7d8 <USBD_GetConfig>
          break;
 800be7e:	e013      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fcde 	bl	800c844 <USBD_GetStatus>
          break;
 800be88:	e00e      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fd0d 	bl	800c8ac <USBD_SetFeature>
          break;
 800be92:	e009      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fd31 	bl	800c8fe <USBD_ClrFeature>
          break;
 800be9c:	e004      	b.n	800bea8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fd88 	bl	800c9b6 <USBD_CtlError>
          break;
 800bea6:	bf00      	nop
      }
      break;
 800bea8:	e004      	b.n	800beb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fd82 	bl	800c9b6 <USBD_CtlError>
      break;
 800beb2:	bf00      	nop
  }

  return ret;
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop

0800bec0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bed6:	2b40      	cmp	r3, #64	@ 0x40
 800bed8:	d005      	beq.n	800bee6 <USBD_StdItfReq+0x26>
 800beda:	2b40      	cmp	r3, #64	@ 0x40
 800bedc:	d852      	bhi.n	800bf84 <USBD_StdItfReq+0xc4>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <USBD_StdItfReq+0x26>
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d14e      	bne.n	800bf84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beec:	b2db      	uxtb	r3, r3
 800beee:	3b01      	subs	r3, #1
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d840      	bhi.n	800bf76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	889b      	ldrh	r3, [r3, #4]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b01      	cmp	r3, #1
 800befc:	d836      	bhi.n	800bf6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	889b      	ldrh	r3, [r3, #4]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	4619      	mov	r1, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff fedb 	bl	800bcc2 <USBD_CoreFindIF>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	2bff      	cmp	r3, #255	@ 0xff
 800bf14:	d01d      	beq.n	800bf52 <USBD_StdItfReq+0x92>
 800bf16:	7bbb      	ldrb	r3, [r7, #14]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d11a      	bne.n	800bf52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf1c:	7bba      	ldrb	r2, [r7, #14]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	32ae      	adds	r2, #174	@ 0xae
 800bf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00f      	beq.n	800bf4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf2c:	7bba      	ldrb	r2, [r7, #14]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf34:	7bba      	ldrb	r2, [r7, #14]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	32ae      	adds	r2, #174	@ 0xae
 800bf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	4798      	blx	r3
 800bf46:	4603      	mov	r3, r0
 800bf48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf4a:	e004      	b.n	800bf56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf4c:	2303      	movs	r3, #3
 800bf4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf50:	e001      	b.n	800bf56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf52:	2303      	movs	r3, #3
 800bf54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	88db      	ldrh	r3, [r3, #6]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d110      	bne.n	800bf80 <USBD_StdItfReq+0xc0>
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10d      	bne.n	800bf80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fdfd 	bl	800cb64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf6a:	e009      	b.n	800bf80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fd21 	bl	800c9b6 <USBD_CtlError>
          break;
 800bf74:	e004      	b.n	800bf80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fd1c 	bl	800c9b6 <USBD_CtlError>
          break;
 800bf7e:	e000      	b.n	800bf82 <USBD_StdItfReq+0xc2>
          break;
 800bf80:	bf00      	nop
      }
      break;
 800bf82:	e004      	b.n	800bf8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fd15 	bl	800c9b6 <USBD_CtlError>
      break;
 800bf8c:	bf00      	nop
  }

  return ret;
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	889b      	ldrh	r3, [r3, #4]
 800bfaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfb4:	2b40      	cmp	r3, #64	@ 0x40
 800bfb6:	d007      	beq.n	800bfc8 <USBD_StdEPReq+0x30>
 800bfb8:	2b40      	cmp	r3, #64	@ 0x40
 800bfba:	f200 817f 	bhi.w	800c2bc <USBD_StdEPReq+0x324>
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d02a      	beq.n	800c018 <USBD_StdEPReq+0x80>
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	f040 817a 	bne.w	800c2bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7ff fe85 	bl	800bcdc <USBD_CoreFindEP>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfd6:	7b7b      	ldrb	r3, [r7, #13]
 800bfd8:	2bff      	cmp	r3, #255	@ 0xff
 800bfda:	f000 8174 	beq.w	800c2c6 <USBD_StdEPReq+0x32e>
 800bfde:	7b7b      	ldrb	r3, [r7, #13]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f040 8170 	bne.w	800c2c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfe6:	7b7a      	ldrb	r2, [r7, #13]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfee:	7b7a      	ldrb	r2, [r7, #13]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	32ae      	adds	r2, #174	@ 0xae
 800bff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8163 	beq.w	800c2c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c000:	7b7a      	ldrb	r2, [r7, #13]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	32ae      	adds	r2, #174	@ 0xae
 800c006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	4798      	blx	r3
 800c012:	4603      	mov	r3, r0
 800c014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c016:	e156      	b.n	800c2c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	785b      	ldrb	r3, [r3, #1]
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d008      	beq.n	800c032 <USBD_StdEPReq+0x9a>
 800c020:	2b03      	cmp	r3, #3
 800c022:	f300 8145 	bgt.w	800c2b0 <USBD_StdEPReq+0x318>
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 809b 	beq.w	800c162 <USBD_StdEPReq+0x1ca>
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d03c      	beq.n	800c0aa <USBD_StdEPReq+0x112>
 800c030:	e13e      	b.n	800c2b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d002      	beq.n	800c044 <USBD_StdEPReq+0xac>
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d016      	beq.n	800c070 <USBD_StdEPReq+0xd8>
 800c042:	e02c      	b.n	800c09e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00d      	beq.n	800c066 <USBD_StdEPReq+0xce>
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b80      	cmp	r3, #128	@ 0x80
 800c04e:	d00a      	beq.n	800c066 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f001 f9fd 	bl	800d454 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c05a:	2180      	movs	r1, #128	@ 0x80
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f001 f9f9 	bl	800d454 <USBD_LL_StallEP>
 800c062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c064:	e020      	b.n	800c0a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fca4 	bl	800c9b6 <USBD_CtlError>
              break;
 800c06e:	e01b      	b.n	800c0a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	885b      	ldrh	r3, [r3, #2]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10e      	bne.n	800c096 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00b      	beq.n	800c096 <USBD_StdEPReq+0xfe>
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	2b80      	cmp	r3, #128	@ 0x80
 800c082:	d008      	beq.n	800c096 <USBD_StdEPReq+0xfe>
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	88db      	ldrh	r3, [r3, #6]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d104      	bne.n	800c096 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 f9df 	bl	800d454 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fd64 	bl	800cb64 <USBD_CtlSendStatus>

              break;
 800c09c:	e004      	b.n	800c0a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fc88 	bl	800c9b6 <USBD_CtlError>
              break;
 800c0a6:	bf00      	nop
          }
          break;
 800c0a8:	e107      	b.n	800c2ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d002      	beq.n	800c0bc <USBD_StdEPReq+0x124>
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d016      	beq.n	800c0e8 <USBD_StdEPReq+0x150>
 800c0ba:	e04b      	b.n	800c154 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00d      	beq.n	800c0de <USBD_StdEPReq+0x146>
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b80      	cmp	r3, #128	@ 0x80
 800c0c6:	d00a      	beq.n	800c0de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f001 f9c1 	bl	800d454 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0d2:	2180      	movs	r1, #128	@ 0x80
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 f9bd 	bl	800d454 <USBD_LL_StallEP>
 800c0da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0dc:	e040      	b.n	800c160 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc68 	bl	800c9b6 <USBD_CtlError>
              break;
 800c0e6:	e03b      	b.n	800c160 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	885b      	ldrh	r3, [r3, #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d136      	bne.n	800c15e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 f9c7 	bl	800d492 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fd2d 	bl	800cb64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff fde4 	bl	800bcdc <USBD_CoreFindEP>
 800c114:	4603      	mov	r3, r0
 800c116:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c118:	7b7b      	ldrb	r3, [r7, #13]
 800c11a:	2bff      	cmp	r3, #255	@ 0xff
 800c11c:	d01f      	beq.n	800c15e <USBD_StdEPReq+0x1c6>
 800c11e:	7b7b      	ldrb	r3, [r7, #13]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11c      	bne.n	800c15e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c124:	7b7a      	ldrb	r2, [r7, #13]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c12c:	7b7a      	ldrb	r2, [r7, #13]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	32ae      	adds	r2, #174	@ 0xae
 800c132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d010      	beq.n	800c15e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c13c:	7b7a      	ldrb	r2, [r7, #13]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	32ae      	adds	r2, #174	@ 0xae
 800c142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c152:	e004      	b.n	800c15e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fc2d 	bl	800c9b6 <USBD_CtlError>
              break;
 800c15c:	e000      	b.n	800c160 <USBD_StdEPReq+0x1c8>
              break;
 800c15e:	bf00      	nop
          }
          break;
 800c160:	e0ab      	b.n	800c2ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d002      	beq.n	800c174 <USBD_StdEPReq+0x1dc>
 800c16e:	2b03      	cmp	r3, #3
 800c170:	d032      	beq.n	800c1d8 <USBD_StdEPReq+0x240>
 800c172:	e097      	b.n	800c2a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <USBD_StdEPReq+0x1f2>
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b80      	cmp	r3, #128	@ 0x80
 800c17e:	d004      	beq.n	800c18a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fc17 	bl	800c9b6 <USBD_CtlError>
                break;
 800c188:	e091      	b.n	800c2ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c18a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	da0b      	bge.n	800c1aa <USBD_StdEPReq+0x212>
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	3310      	adds	r3, #16
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	e00b      	b.n	800c1c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1aa:	7bbb      	ldrb	r3, [r7, #14]
 800c1ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	4413      	add	r3, r2
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 fc6d 	bl	800cab0 <USBD_CtlSendData>
              break;
 800c1d6:	e06a      	b.n	800c2ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	da11      	bge.n	800c204 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	f003 020f 	and.w	r2, r3, #15
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	440b      	add	r3, r1
 800c1f2:	3324      	adds	r3, #36	@ 0x24
 800c1f4:	881b      	ldrh	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d117      	bne.n	800c22a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fbda 	bl	800c9b6 <USBD_CtlError>
                  break;
 800c202:	e054      	b.n	800c2ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c204:	7bbb      	ldrb	r3, [r7, #14]
 800c206:	f003 020f 	and.w	r2, r3, #15
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	4613      	mov	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	440b      	add	r3, r1
 800c216:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c21a:	881b      	ldrh	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d104      	bne.n	800c22a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fbc7 	bl	800c9b6 <USBD_CtlError>
                  break;
 800c228:	e041      	b.n	800c2ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c22a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	da0b      	bge.n	800c24a <USBD_StdEPReq+0x2b2>
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	3310      	adds	r3, #16
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	3304      	adds	r3, #4
 800c248:	e00b      	b.n	800c262 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	4413      	add	r3, r2
 800c260:	3304      	adds	r3, #4
 800c262:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c264:	7bbb      	ldrb	r3, [r7, #14]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d002      	beq.n	800c270 <USBD_StdEPReq+0x2d8>
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	2b80      	cmp	r3, #128	@ 0x80
 800c26e:	d103      	bne.n	800c278 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	e00e      	b.n	800c296 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c278:	7bbb      	ldrb	r3, [r7, #14]
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f001 f927 	bl	800d4d0 <USBD_LL_IsStallEP>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2201      	movs	r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e002      	b.n	800c296 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2202      	movs	r2, #2
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fc07 	bl	800cab0 <USBD_CtlSendData>
              break;
 800c2a2:	e004      	b.n	800c2ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fb85 	bl	800c9b6 <USBD_CtlError>
              break;
 800c2ac:	bf00      	nop
          }
          break;
 800c2ae:	e004      	b.n	800c2ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fb7f 	bl	800c9b6 <USBD_CtlError>
          break;
 800c2b8:	bf00      	nop
      }
      break;
 800c2ba:	e005      	b.n	800c2c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fb79 	bl	800c9b6 <USBD_CtlError>
      break;
 800c2c4:	e000      	b.n	800c2c8 <USBD_StdEPReq+0x330>
      break;
 800c2c6:	bf00      	nop
  }

  return ret;
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	885b      	ldrh	r3, [r3, #2]
 800c2ee:	0a1b      	lsrs	r3, r3, #8
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	2b0e      	cmp	r3, #14
 800c2f6:	f200 8152 	bhi.w	800c59e <USBD_GetDescriptor+0x2ca>
 800c2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c300 <USBD_GetDescriptor+0x2c>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c371 	.word	0x0800c371
 800c304:	0800c389 	.word	0x0800c389
 800c308:	0800c3c9 	.word	0x0800c3c9
 800c30c:	0800c59f 	.word	0x0800c59f
 800c310:	0800c59f 	.word	0x0800c59f
 800c314:	0800c53f 	.word	0x0800c53f
 800c318:	0800c56b 	.word	0x0800c56b
 800c31c:	0800c59f 	.word	0x0800c59f
 800c320:	0800c59f 	.word	0x0800c59f
 800c324:	0800c59f 	.word	0x0800c59f
 800c328:	0800c59f 	.word	0x0800c59f
 800c32c:	0800c59f 	.word	0x0800c59f
 800c330:	0800c59f 	.word	0x0800c59f
 800c334:	0800c59f 	.word	0x0800c59f
 800c338:	0800c33d 	.word	0x0800c33d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	7c12      	ldrb	r2, [r2, #16]
 800c354:	f107 0108 	add.w	r1, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c35e:	e126      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fb27 	bl	800c9b6 <USBD_CtlError>
        err++;
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	3301      	adds	r3, #1
 800c36c:	72fb      	strb	r3, [r7, #11]
      break;
 800c36e:	e11e      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
      break;
 800c386:	e112      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	7c1b      	ldrb	r3, [r3, #16]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10d      	bne.n	800c3ac <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c398:	f107 0208 	add.w	r2, r7, #8
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3
 800c3a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3aa:	e100      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b4:	f107 0208 	add.w	r2, r7, #8
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	4798      	blx	r3
 800c3bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	701a      	strb	r2, [r3, #0]
      break;
 800c3c6:	e0f2      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	885b      	ldrh	r3, [r3, #2]
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	f200 80ac 	bhi.w	800c52c <USBD_GetDescriptor+0x258>
 800c3d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c3dc <USBD_GetDescriptor+0x108>)
 800c3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3da:	bf00      	nop
 800c3dc:	0800c3f5 	.word	0x0800c3f5
 800c3e0:	0800c429 	.word	0x0800c429
 800c3e4:	0800c45d 	.word	0x0800c45d
 800c3e8:	0800c491 	.word	0x0800c491
 800c3ec:	0800c4c5 	.word	0x0800c4c5
 800c3f0:	0800c4f9 	.word	0x0800c4f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	7c12      	ldrb	r2, [r2, #16]
 800c40c:	f107 0108 	add.w	r1, r7, #8
 800c410:	4610      	mov	r0, r2
 800c412:	4798      	blx	r3
 800c414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c416:	e091      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 facb 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	3301      	adds	r3, #1
 800c424:	72fb      	strb	r3, [r7, #11]
          break;
 800c426:	e089      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	7c12      	ldrb	r2, [r2, #16]
 800c440:	f107 0108 	add.w	r1, r7, #8
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c44a:	e077      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fab1 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c454:	7afb      	ldrb	r3, [r7, #11]
 800c456:	3301      	adds	r3, #1
 800c458:	72fb      	strb	r3, [r7, #11]
          break;
 800c45a:	e06f      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	7c12      	ldrb	r2, [r2, #16]
 800c474:	f107 0108 	add.w	r1, r7, #8
 800c478:	4610      	mov	r0, r2
 800c47a:	4798      	blx	r3
 800c47c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c47e:	e05d      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa97 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c488:	7afb      	ldrb	r3, [r7, #11]
 800c48a:	3301      	adds	r3, #1
 800c48c:	72fb      	strb	r3, [r7, #11]
          break;
 800c48e:	e055      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00b      	beq.n	800c4b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	7c12      	ldrb	r2, [r2, #16]
 800c4a8:	f107 0108 	add.w	r1, r7, #8
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4798      	blx	r3
 800c4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4b2:	e043      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fa7d 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4c2:	e03b      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00b      	beq.n	800c4e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	7c12      	ldrb	r2, [r2, #16]
 800c4dc:	f107 0108 	add.w	r1, r7, #8
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	4798      	blx	r3
 800c4e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4e6:	e029      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa63 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4f6:	e021      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	7c12      	ldrb	r2, [r2, #16]
 800c510:	f107 0108 	add.w	r1, r7, #8
 800c514:	4610      	mov	r0, r2
 800c516:	4798      	blx	r3
 800c518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c51a:	e00f      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa49 	bl	800c9b6 <USBD_CtlError>
            err++;
 800c524:	7afb      	ldrb	r3, [r7, #11]
 800c526:	3301      	adds	r3, #1
 800c528:	72fb      	strb	r3, [r7, #11]
          break;
 800c52a:	e007      	b.n	800c53c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fa41 	bl	800c9b6 <USBD_CtlError>
          err++;
 800c534:	7afb      	ldrb	r3, [r7, #11]
 800c536:	3301      	adds	r3, #1
 800c538:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c53a:	bf00      	nop
      }
      break;
 800c53c:	e037      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	7c1b      	ldrb	r3, [r3, #16]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c54e:	f107 0208 	add.w	r2, r7, #8
 800c552:	4610      	mov	r0, r2
 800c554:	4798      	blx	r3
 800c556:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c558:	e029      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fa2a 	bl	800c9b6 <USBD_CtlError>
        err++;
 800c562:	7afb      	ldrb	r3, [r7, #11]
 800c564:	3301      	adds	r3, #1
 800c566:	72fb      	strb	r3, [r7, #11]
      break;
 800c568:	e021      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7c1b      	ldrb	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10d      	bne.n	800c58e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c57a:	f107 0208 	add.w	r2, r7, #8
 800c57e:	4610      	mov	r0, r2
 800c580:	4798      	blx	r3
 800c582:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	3301      	adds	r3, #1
 800c588:	2207      	movs	r2, #7
 800c58a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c58c:	e00f      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa10 	bl	800c9b6 <USBD_CtlError>
        err++;
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	3301      	adds	r3, #1
 800c59a:	72fb      	strb	r3, [r7, #11]
      break;
 800c59c:	e007      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fa08 	bl	800c9b6 <USBD_CtlError>
      err++;
 800c5a6:	7afb      	ldrb	r3, [r7, #11]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ac:	bf00      	nop
  }

  if (err != 0U)
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d11e      	bne.n	800c5f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	88db      	ldrh	r3, [r3, #6]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d016      	beq.n	800c5ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5bc:	893b      	ldrh	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00e      	beq.n	800c5e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	88da      	ldrh	r2, [r3, #6]
 800c5c6:	893b      	ldrh	r3, [r7, #8]
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	bf28      	it	cs
 800c5cc:	4613      	movcs	r3, r2
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5d2:	893b      	ldrh	r3, [r7, #8]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68f9      	ldr	r1, [r7, #12]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fa69 	bl	800cab0 <USBD_CtlSendData>
 800c5de:	e009      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f9e7 	bl	800c9b6 <USBD_CtlError>
 800c5e8:	e004      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 faba 	bl	800cb64 <USBD_CtlSendStatus>
 800c5f0:	e000      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    return;
 800c5f2:	bf00      	nop
  }
}
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop

0800c5fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	889b      	ldrh	r3, [r3, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d131      	bne.n	800c672 <USBD_SetAddress+0x76>
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	88db      	ldrh	r3, [r3, #6]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d12d      	bne.n	800c672 <USBD_SetAddress+0x76>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	885b      	ldrh	r3, [r3, #2]
 800c61a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c61c:	d829      	bhi.n	800c672 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	885b      	ldrh	r3, [r3, #2]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c628:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b03      	cmp	r3, #3
 800c634:	d104      	bne.n	800c640 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f9bc 	bl	800c9b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63e:	e01d      	b.n	800c67c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7bfa      	ldrb	r2, [r7, #15]
 800c644:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c648:	7bfb      	ldrb	r3, [r7, #15]
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 ff6b 	bl	800d528 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa86 	bl	800cb64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d004      	beq.n	800c668 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2202      	movs	r2, #2
 800c662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c666:	e009      	b.n	800c67c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c670:	e004      	b.n	800c67c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f99e 	bl	800c9b6 <USBD_CtlError>
  }
}
 800c67a:	bf00      	nop
 800c67c:	bf00      	nop
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	885b      	ldrh	r3, [r3, #2]
 800c696:	b2da      	uxtb	r2, r3
 800c698:	4b4e      	ldr	r3, [pc, #312]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c69a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c69c:	4b4d      	ldr	r3, [pc, #308]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d905      	bls.n	800c6b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f985 	bl	800c9b6 <USBD_CtlError>
    return USBD_FAIL;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e08c      	b.n	800c7ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d002      	beq.n	800c6c2 <USBD_SetConfig+0x3e>
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d029      	beq.n	800c714 <USBD_SetConfig+0x90>
 800c6c0:	e075      	b.n	800c7ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6c2:	4b44      	ldr	r3, [pc, #272]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d020      	beq.n	800c70c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6ca:	4b42      	ldr	r3, [pc, #264]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6d4:	4b3f      	ldr	r3, [pc, #252]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7fe ffb9 	bl	800b652 <USBD_SetClassConfig>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d008      	beq.n	800c6fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f962 	bl	800c9b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6fa:	e065      	b.n	800c7c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fa31 	bl	800cb64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2203      	movs	r2, #3
 800c706:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c70a:	e05d      	b.n	800c7c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fa29 	bl	800cb64 <USBD_CtlSendStatus>
      break;
 800c712:	e059      	b.n	800c7c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c714:	4b2f      	ldr	r3, [pc, #188]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d112      	bne.n	800c742 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c724:	4b2b      	ldr	r3, [pc, #172]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c72e:	4b29      	ldr	r3, [pc, #164]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	4619      	mov	r1, r3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7fe ffa8 	bl	800b68a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fa12 	bl	800cb64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c740:	e042      	b.n	800c7c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c742:	4b24      	ldr	r3, [pc, #144]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d02a      	beq.n	800c7a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	b2db      	uxtb	r3, r3
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7fe ff96 	bl	800b68a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c75e:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c768:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7fe ff6f 	bl	800b652 <USBD_SetClassConfig>
 800c774:	4603      	mov	r3, r0
 800c776:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c778:	7bfb      	ldrb	r3, [r7, #15]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00f      	beq.n	800c79e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f918 	bl	800c9b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	4619      	mov	r1, r3
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7fe ff7b 	bl	800b68a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2202      	movs	r2, #2
 800c798:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c79c:	e014      	b.n	800c7c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f9e0 	bl	800cb64 <USBD_CtlSendStatus>
      break;
 800c7a4:	e010      	b.n	800c7c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f9dc 	bl	800cb64 <USBD_CtlSendStatus>
      break;
 800c7ac:	e00c      	b.n	800c7c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7ae:	6839      	ldr	r1, [r7, #0]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f900 	bl	800c9b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7b6:	4b07      	ldr	r3, [pc, #28]	@ (800c7d4 <USBD_SetConfig+0x150>)
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7fe ff64 	bl	800b68a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c6:	bf00      	nop
  }

  return ret;
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	24000800 	.word	0x24000800

0800c7d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	88db      	ldrh	r3, [r3, #6]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d004      	beq.n	800c7f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f8e2 	bl	800c9b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7f2:	e023      	b.n	800c83c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	dc02      	bgt.n	800c806 <USBD_GetConfig+0x2e>
 800c800:	2b00      	cmp	r3, #0
 800c802:	dc03      	bgt.n	800c80c <USBD_GetConfig+0x34>
 800c804:	e015      	b.n	800c832 <USBD_GetConfig+0x5a>
 800c806:	2b03      	cmp	r3, #3
 800c808:	d00b      	beq.n	800c822 <USBD_GetConfig+0x4a>
 800c80a:	e012      	b.n	800c832 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3308      	adds	r3, #8
 800c816:	2201      	movs	r2, #1
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f948 	bl	800cab0 <USBD_CtlSendData>
        break;
 800c820:	e00c      	b.n	800c83c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	3304      	adds	r3, #4
 800c826:	2201      	movs	r2, #1
 800c828:	4619      	mov	r1, r3
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 f940 	bl	800cab0 <USBD_CtlSendData>
        break;
 800c830:	e004      	b.n	800c83c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f8be 	bl	800c9b6 <USBD_CtlError>
        break;
 800c83a:	bf00      	nop
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c854:	b2db      	uxtb	r3, r3
 800c856:	3b01      	subs	r3, #1
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d81e      	bhi.n	800c89a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	88db      	ldrh	r3, [r3, #6]
 800c860:	2b02      	cmp	r3, #2
 800c862:	d004      	beq.n	800c86e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f8a5 	bl	800c9b6 <USBD_CtlError>
        break;
 800c86c:	e01a      	b.n	800c8a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d005      	beq.n	800c88a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	f043 0202 	orr.w	r2, r3, #2
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	330c      	adds	r3, #12
 800c88e:	2202      	movs	r2, #2
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f90c 	bl	800cab0 <USBD_CtlSendData>
      break;
 800c898:	e004      	b.n	800c8a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 f88a 	bl	800c9b6 <USBD_CtlError>
      break;
 800c8a2:	bf00      	nop
  }
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	885b      	ldrh	r3, [r3, #2]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d107      	bne.n	800c8ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f94c 	bl	800cb64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8cc:	e013      	b.n	800c8f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	885b      	ldrh	r3, [r3, #2]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d10b      	bne.n	800c8ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	889b      	ldrh	r3, [r3, #4]
 800c8da:	0a1b      	lsrs	r3, r3, #8
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f93c 	bl	800cb64 <USBD_CtlSendStatus>
}
 800c8ec:	e003      	b.n	800c8f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f860 	bl	800c9b6 <USBD_CtlError>
}
 800c8f6:	bf00      	nop
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b082      	sub	sp, #8
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	3b01      	subs	r3, #1
 800c912:	2b02      	cmp	r3, #2
 800c914:	d80b      	bhi.n	800c92e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	885b      	ldrh	r3, [r3, #2]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d10c      	bne.n	800c938 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 f91c 	bl	800cb64 <USBD_CtlSendStatus>
      }
      break;
 800c92c:	e004      	b.n	800c938 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f840 	bl	800c9b6 <USBD_CtlError>
      break;
 800c936:	e000      	b.n	800c93a <USBD_ClrFeature+0x3c>
      break;
 800c938:	bf00      	nop
  }
}
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	781a      	ldrb	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	3301      	adds	r3, #1
 800c95c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f7ff fa16 	bl	800bd9e <SWAPBYTE>
 800c972:	4603      	mov	r3, r0
 800c974:	461a      	mov	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3301      	adds	r3, #1
 800c97e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3301      	adds	r3, #1
 800c984:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f7ff fa09 	bl	800bd9e <SWAPBYTE>
 800c98c:	4603      	mov	r3, r0
 800c98e:	461a      	mov	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3301      	adds	r3, #1
 800c998:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3301      	adds	r3, #1
 800c99e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f7ff f9fc 	bl	800bd9e <SWAPBYTE>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	80da      	strh	r2, [r3, #6]
}
 800c9ae:	bf00      	nop
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9c0:	2180      	movs	r1, #128	@ 0x80
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fd46 	bl	800d454 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fd42 	bl	800d454 <USBD_LL_StallEP>
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d042      	beq.n	800ca74 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c9f2:	6938      	ldr	r0, [r7, #16]
 800c9f4:	f000 f842 	bl	800ca7c <USBD_GetLen>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca02:	d808      	bhi.n	800ca16 <USBD_GetString+0x3e>
 800ca04:	6938      	ldr	r0, [r7, #16]
 800ca06:	f000 f839 	bl	800ca7c <USBD_GetLen>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	005b      	lsls	r3, r3, #1
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	e001      	b.n	800ca1a <USBD_GetString+0x42>
 800ca16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	4413      	add	r3, r2
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	7812      	ldrb	r2, [r2, #0]
 800ca28:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca30:	7dfb      	ldrb	r3, [r7, #23]
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	4413      	add	r3, r2
 800ca36:	2203      	movs	r2, #3
 800ca38:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca40:	e013      	b.n	800ca6a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	4413      	add	r3, r2
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	7812      	ldrb	r2, [r2, #0]
 800ca4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	3301      	adds	r3, #1
 800ca52:	613b      	str	r3, [r7, #16]
    idx++;
 800ca54:	7dfb      	ldrb	r3, [r7, #23]
 800ca56:	3301      	adds	r3, #1
 800ca58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca5a:	7dfb      	ldrb	r3, [r7, #23]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	4413      	add	r3, r2
 800ca60:	2200      	movs	r2, #0
 800ca62:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	3301      	adds	r3, #1
 800ca68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1e7      	bne.n	800ca42 <USBD_GetString+0x6a>
 800ca72:	e000      	b.n	800ca76 <USBD_GetString+0x9e>
    return;
 800ca74:	bf00      	nop
  }
}
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca8c:	e005      	b.n	800ca9a <USBD_GetLen+0x1e>
  {
    len++;
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	3301      	adds	r3, #1
 800ca92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	3301      	adds	r3, #1
 800ca98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1f5      	bne.n	800ca8e <USBD_GetLen+0x12>
  }

  return len;
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2202      	movs	r2, #2
 800cac0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	2100      	movs	r1, #0
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f000 fd45 	bl	800d566 <USBD_LL_Transmit>

  return USBD_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	2100      	movs	r1, #0
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 fd34 	bl	800d566 <USBD_LL_Transmit>

  return USBD_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2203      	movs	r2, #3
 800cb18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	2100      	movs	r1, #0
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f000 fd38 	bl	800d5a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b084      	sub	sp, #16
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	2100      	movs	r1, #0
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f000 fd27 	bl	800d5a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2204      	movs	r2, #4
 800cb70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb74:	2300      	movs	r3, #0
 800cb76:	2200      	movs	r2, #0
 800cb78:	2100      	movs	r1, #0
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fcf3 	bl	800d566 <USBD_LL_Transmit>

  return USBD_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2205      	movs	r2, #5
 800cb96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2100      	movs	r1, #0
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fd01 	bl	800d5a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	4913      	ldr	r1, [pc, #76]	@ (800cc04 <MX_USB_DEVICE_Init+0x54>)
 800cbb8:	4813      	ldr	r0, [pc, #76]	@ (800cc08 <MX_USB_DEVICE_Init+0x58>)
 800cbba:	f7fe fcb1 	bl	800b520 <USBD_Init>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbc4:	f7f4 fc4c 	bl	8001460 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800cbc8:	4910      	ldr	r1, [pc, #64]	@ (800cc0c <MX_USB_DEVICE_Init+0x5c>)
 800cbca:	480f      	ldr	r0, [pc, #60]	@ (800cc08 <MX_USB_DEVICE_Init+0x58>)
 800cbcc:	f7fe fce6 	bl	800b59c <USBD_RegisterClass>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d001      	beq.n	800cbda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbd6:	f7f4 fc43 	bl	8001460 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800cbda:	490d      	ldr	r1, [pc, #52]	@ (800cc10 <MX_USB_DEVICE_Init+0x60>)
 800cbdc:	480a      	ldr	r0, [pc, #40]	@ (800cc08 <MX_USB_DEVICE_Init+0x58>)
 800cbde:	f7fe fbcf 	bl	800b380 <USBD_CDC_RegisterInterface>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbe8:	f7f4 fc3a 	bl	8001460 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800cbec:	4806      	ldr	r0, [pc, #24]	@ (800cc08 <MX_USB_DEVICE_Init+0x58>)
 800cbee:	f7fe fd19 	bl	800b624 <USBD_Start>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbf8:	f7f4 fc32 	bl	8001460 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cbfc:	f7f8 f922 	bl	8004e44 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc00:	bf00      	nop
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	240000b0 	.word	0x240000b0
 800cc08:	24000804 	.word	0x24000804
 800cc0c:	2400001c 	.word	0x2400001c
 800cc10:	2400009c 	.word	0x2400009c

0800cc14 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800cc18:	2200      	movs	r2, #0
 800cc1a:	4905      	ldr	r1, [pc, #20]	@ (800cc30 <CDC_Init_HS+0x1c>)
 800cc1c:	4805      	ldr	r0, [pc, #20]	@ (800cc34 <CDC_Init_HS+0x20>)
 800cc1e:	f7fe fbc9 	bl	800b3b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800cc22:	4905      	ldr	r1, [pc, #20]	@ (800cc38 <CDC_Init_HS+0x24>)
 800cc24:	4803      	ldr	r0, [pc, #12]	@ (800cc34 <CDC_Init_HS+0x20>)
 800cc26:	f7fe fbe7 	bl	800b3f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc2a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	240012e0 	.word	0x240012e0
 800cc34:	24000804 	.word	0x24000804
 800cc38:	24000ae0 	.word	0x24000ae0

0800cc3c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800cc40:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	6039      	str	r1, [r7, #0]
 800cc56:	71fb      	strb	r3, [r7, #7]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800cc5c:	79fb      	ldrb	r3, [r7, #7]
 800cc5e:	2b23      	cmp	r3, #35	@ 0x23
 800cc60:	d84a      	bhi.n	800ccf8 <CDC_Control_HS+0xac>
 800cc62:	a201      	add	r2, pc, #4	@ (adr r2, 800cc68 <CDC_Control_HS+0x1c>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800ccf9 	.word	0x0800ccf9
 800cc6c:	0800ccf9 	.word	0x0800ccf9
 800cc70:	0800ccf9 	.word	0x0800ccf9
 800cc74:	0800ccf9 	.word	0x0800ccf9
 800cc78:	0800ccf9 	.word	0x0800ccf9
 800cc7c:	0800ccf9 	.word	0x0800ccf9
 800cc80:	0800ccf9 	.word	0x0800ccf9
 800cc84:	0800ccf9 	.word	0x0800ccf9
 800cc88:	0800ccf9 	.word	0x0800ccf9
 800cc8c:	0800ccf9 	.word	0x0800ccf9
 800cc90:	0800ccf9 	.word	0x0800ccf9
 800cc94:	0800ccf9 	.word	0x0800ccf9
 800cc98:	0800ccf9 	.word	0x0800ccf9
 800cc9c:	0800ccf9 	.word	0x0800ccf9
 800cca0:	0800ccf9 	.word	0x0800ccf9
 800cca4:	0800ccf9 	.word	0x0800ccf9
 800cca8:	0800ccf9 	.word	0x0800ccf9
 800ccac:	0800ccf9 	.word	0x0800ccf9
 800ccb0:	0800ccf9 	.word	0x0800ccf9
 800ccb4:	0800ccf9 	.word	0x0800ccf9
 800ccb8:	0800ccf9 	.word	0x0800ccf9
 800ccbc:	0800ccf9 	.word	0x0800ccf9
 800ccc0:	0800ccf9 	.word	0x0800ccf9
 800ccc4:	0800ccf9 	.word	0x0800ccf9
 800ccc8:	0800ccf9 	.word	0x0800ccf9
 800cccc:	0800ccf9 	.word	0x0800ccf9
 800ccd0:	0800ccf9 	.word	0x0800ccf9
 800ccd4:	0800ccf9 	.word	0x0800ccf9
 800ccd8:	0800ccf9 	.word	0x0800ccf9
 800ccdc:	0800ccf9 	.word	0x0800ccf9
 800cce0:	0800ccf9 	.word	0x0800ccf9
 800cce4:	0800ccf9 	.word	0x0800ccf9
 800cce8:	0800ccf9 	.word	0x0800ccf9
 800ccec:	0800ccf9 	.word	0x0800ccf9
 800ccf0:	0800ccf9 	.word	0x0800ccf9
 800ccf4:	0800ccf9 	.word	0x0800ccf9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccf8:	bf00      	nop
  }

  return (USBD_OK);
 800ccfa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800cd12:	6879      	ldr	r1, [r7, #4]
 800cd14:	4805      	ldr	r0, [pc, #20]	@ (800cd2c <CDC_Receive_HS+0x24>)
 800cd16:	f7fe fb6f 	bl	800b3f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800cd1a:	4804      	ldr	r0, [pc, #16]	@ (800cd2c <CDC_Receive_HS+0x24>)
 800cd1c:	f7fe fbca 	bl	800b4b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd20:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	24000804 	.word	0x24000804

0800cd30 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800cd40:	4b0d      	ldr	r3, [pc, #52]	@ (800cd78 <CDC_Transmit_HS+0x48>)
 800cd42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800cd52:	2301      	movs	r3, #1
 800cd54:	e00b      	b.n	800cd6e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800cd56:	887b      	ldrh	r3, [r7, #2]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6879      	ldr	r1, [r7, #4]
 800cd5c:	4806      	ldr	r0, [pc, #24]	@ (800cd78 <CDC_Transmit_HS+0x48>)
 800cd5e:	f7fe fb29 	bl	800b3b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800cd62:	4805      	ldr	r0, [pc, #20]	@ (800cd78 <CDC_Transmit_HS+0x48>)
 800cd64:	f7fe fb66 	bl	800b434 <USBD_CDC_TransmitPacket>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800cd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	24000804 	.word	0x24000804

0800cd7c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b087      	sub	sp, #28
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	4613      	mov	r3, r2
 800cd88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800cd8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	371c      	adds	r7, #28
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
	...

0800cda0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	6039      	str	r1, [r7, #0]
 800cdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2212      	movs	r2, #18
 800cdb0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800cdb2:	4b03      	ldr	r3, [pc, #12]	@ (800cdc0 <USBD_HS_DeviceDescriptor+0x20>)
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	240000d0 	.word	0x240000d0

0800cdc4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	2204      	movs	r2, #4
 800cdd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdd6:	4b03      	ldr	r3, [pc, #12]	@ (800cde4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr
 800cde4:	240000e4 	.word	0x240000e4

0800cde8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	6039      	str	r1, [r7, #0]
 800cdf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdf4:	79fb      	ldrb	r3, [r7, #7]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d105      	bne.n	800ce06 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	4907      	ldr	r1, [pc, #28]	@ (800ce1c <USBD_HS_ProductStrDescriptor+0x34>)
 800cdfe:	4808      	ldr	r0, [pc, #32]	@ (800ce20 <USBD_HS_ProductStrDescriptor+0x38>)
 800ce00:	f7ff fdea 	bl	800c9d8 <USBD_GetString>
 800ce04:	e004      	b.n	800ce10 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	4904      	ldr	r1, [pc, #16]	@ (800ce1c <USBD_HS_ProductStrDescriptor+0x34>)
 800ce0a:	4805      	ldr	r0, [pc, #20]	@ (800ce20 <USBD_HS_ProductStrDescriptor+0x38>)
 800ce0c:	f7ff fde4 	bl	800c9d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce10:	4b02      	ldr	r3, [pc, #8]	@ (800ce1c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	24001ae0 	.word	0x24001ae0
 800ce20:	0800ea44 	.word	0x0800ea44

0800ce24 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	6039      	str	r1, [r7, #0]
 800ce2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce30:	683a      	ldr	r2, [r7, #0]
 800ce32:	4904      	ldr	r1, [pc, #16]	@ (800ce44 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ce34:	4804      	ldr	r0, [pc, #16]	@ (800ce48 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ce36:	f7ff fdcf 	bl	800c9d8 <USBD_GetString>
  return USBD_StrDesc;
 800ce3a:	4b02      	ldr	r3, [pc, #8]	@ (800ce44 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	24001ae0 	.word	0x24001ae0
 800ce48:	0800ea5c 	.word	0x0800ea5c

0800ce4c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	6039      	str	r1, [r7, #0]
 800ce56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	221a      	movs	r2, #26
 800ce5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce5e:	f000 f843 	bl	800cee8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ce62:	4b02      	ldr	r3, [pc, #8]	@ (800ce6c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	240000e8 	.word	0x240000e8

0800ce70 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	6039      	str	r1, [r7, #0]
 800ce7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce7c:	79fb      	ldrb	r3, [r7, #7]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d105      	bne.n	800ce8e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ce82:	683a      	ldr	r2, [r7, #0]
 800ce84:	4907      	ldr	r1, [pc, #28]	@ (800cea4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ce86:	4808      	ldr	r0, [pc, #32]	@ (800cea8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ce88:	f7ff fda6 	bl	800c9d8 <USBD_GetString>
 800ce8c:	e004      	b.n	800ce98 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	4904      	ldr	r1, [pc, #16]	@ (800cea4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ce92:	4805      	ldr	r0, [pc, #20]	@ (800cea8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ce94:	f7ff fda0 	bl	800c9d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce98:	4b02      	ldr	r3, [pc, #8]	@ (800cea4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	24001ae0 	.word	0x24001ae0
 800cea8:	0800ea70 	.word	0x0800ea70

0800ceac <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	6039      	str	r1, [r7, #0]
 800ceb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d105      	bne.n	800ceca <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	4907      	ldr	r1, [pc, #28]	@ (800cee0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800cec2:	4808      	ldr	r0, [pc, #32]	@ (800cee4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800cec4:	f7ff fd88 	bl	800c9d8 <USBD_GetString>
 800cec8:	e004      	b.n	800ced4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	4904      	ldr	r1, [pc, #16]	@ (800cee0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800cece:	4805      	ldr	r0, [pc, #20]	@ (800cee4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ced0:	f7ff fd82 	bl	800c9d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ced4:	4b02      	ldr	r3, [pc, #8]	@ (800cee0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	24001ae0 	.word	0x24001ae0
 800cee4:	0800ea7c 	.word	0x0800ea7c

0800cee8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ceee:	4b0f      	ldr	r3, [pc, #60]	@ (800cf2c <Get_SerialNum+0x44>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cef4:	4b0e      	ldr	r3, [pc, #56]	@ (800cf30 <Get_SerialNum+0x48>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cefa:	4b0e      	ldr	r3, [pc, #56]	@ (800cf34 <Get_SerialNum+0x4c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4413      	add	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d009      	beq.n	800cf22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf0e:	2208      	movs	r2, #8
 800cf10:	4909      	ldr	r1, [pc, #36]	@ (800cf38 <Get_SerialNum+0x50>)
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 f814 	bl	800cf40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf18:	2204      	movs	r2, #4
 800cf1a:	4908      	ldr	r1, [pc, #32]	@ (800cf3c <Get_SerialNum+0x54>)
 800cf1c:	68b8      	ldr	r0, [r7, #8]
 800cf1e:	f000 f80f 	bl	800cf40 <IntToUnicode>
  }
}
 800cf22:	bf00      	nop
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	08fff800 	.word	0x08fff800
 800cf30:	08fff804 	.word	0x08fff804
 800cf34:	08fff808 	.word	0x08fff808
 800cf38:	240000ea 	.word	0x240000ea
 800cf3c:	240000fa 	.word	0x240000fa

0800cf40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b087      	sub	sp, #28
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf52:	2300      	movs	r3, #0
 800cf54:	75fb      	strb	r3, [r7, #23]
 800cf56:	e027      	b.n	800cfa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	0f1b      	lsrs	r3, r3, #28
 800cf5c:	2b09      	cmp	r3, #9
 800cf5e:	d80b      	bhi.n	800cf78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	0f1b      	lsrs	r3, r3, #28
 800cf64:	b2da      	uxtb	r2, r3
 800cf66:	7dfb      	ldrb	r3, [r7, #23]
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	440b      	add	r3, r1
 800cf70:	3230      	adds	r2, #48	@ 0x30
 800cf72:	b2d2      	uxtb	r2, r2
 800cf74:	701a      	strb	r2, [r3, #0]
 800cf76:	e00a      	b.n	800cf8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	0f1b      	lsrs	r3, r3, #28
 800cf7c:	b2da      	uxtb	r2, r3
 800cf7e:	7dfb      	ldrb	r3, [r7, #23]
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	4619      	mov	r1, r3
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	440b      	add	r3, r1
 800cf88:	3237      	adds	r2, #55	@ 0x37
 800cf8a:	b2d2      	uxtb	r2, r2
 800cf8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	011b      	lsls	r3, r3, #4
 800cf92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	3301      	adds	r3, #1
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	75fb      	strb	r3, [r7, #23]
 800cfa8:	7dfa      	ldrb	r2, [r7, #23]
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d3d3      	bcc.n	800cf58 <IntToUnicode+0x18>
  }
}
 800cfb0:	bf00      	nop
 800cfb2:	bf00      	nop
 800cfb4:	371c      	adds	r7, #28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
	...

0800cfc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b0ba      	sub	sp, #232	@ 0xe8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]
 800cfd0:	605a      	str	r2, [r3, #4]
 800cfd2:	609a      	str	r2, [r3, #8]
 800cfd4:	60da      	str	r2, [r3, #12]
 800cfd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cfd8:	f107 0310 	add.w	r3, r7, #16
 800cfdc:	22c0      	movs	r2, #192	@ 0xc0
 800cfde:	2100      	movs	r1, #0
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 fc98 	bl	800d916 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a45      	ldr	r2, [pc, #276]	@ (800d100 <HAL_PCD_MspInit+0x140>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	f040 8082 	bne.w	800d0f6 <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cff2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800cff6:	f04f 0300 	mov.w	r3, #0
 800cffa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cffe:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800d002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d006:	f107 0310 	add.w	r3, r7, #16
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7f8 fed2 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800d016:	f7f4 fa23 	bl	8001460 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d01a:	f7f7 ff13 	bl	8004e44 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d01e:	4b39      	ldr	r3, [pc, #228]	@ (800d104 <HAL_PCD_MspInit+0x144>)
 800d020:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d024:	4a37      	ldr	r2, [pc, #220]	@ (800d104 <HAL_PCD_MspInit+0x144>)
 800d026:	f043 0301 	orr.w	r3, r3, #1
 800d02a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800d02e:	4b35      	ldr	r3, [pc, #212]	@ (800d104 <HAL_PCD_MspInit+0x144>)
 800d030:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d034:	f003 0301 	and.w	r3, r3, #1
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d03c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d040:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d044:	2300      	movs	r3, #0
 800d046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d050:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d054:	4619      	mov	r1, r3
 800d056:	482c      	ldr	r0, [pc, #176]	@ (800d108 <HAL_PCD_MspInit+0x148>)
 800d058:	f7f5 f9e6 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d05c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d060:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d064:	2302      	movs	r3, #2
 800d066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d070:	2300      	movs	r3, #0
 800d072:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d076:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d07a:	4619      	mov	r1, r3
 800d07c:	4822      	ldr	r0, [pc, #136]	@ (800d108 <HAL_PCD_MspInit+0x148>)
 800d07e:	f7f5 f9d3 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800d082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d08a:	2302      	movs	r3, #2
 800d08c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d090:	2301      	movs	r3, #1
 800d092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d096:	2300      	movs	r3, #0
 800d098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d09c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	4819      	ldr	r0, [pc, #100]	@ (800d108 <HAL_PCD_MspInit+0x148>)
 800d0a4:	f7f5 f9c0 	bl	8002428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d0a8:	4b16      	ldr	r3, [pc, #88]	@ (800d104 <HAL_PCD_MspInit+0x144>)
 800d0aa:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800d0ae:	4a15      	ldr	r2, [pc, #84]	@ (800d104 <HAL_PCD_MspInit+0x144>)
 800d0b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d0b4:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800d0b8:	4b12      	ldr	r3, [pc, #72]	@ (800d104 <HAL_PCD_MspInit+0x144>)
 800d0ba:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800d0be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0c2:	60bb      	str	r3, [r7, #8]
 800d0c4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	204a      	movs	r0, #74	@ 0x4a
 800d0cc:	f7f5 f8ff 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800d0d0:	204a      	movs	r0, #74	@ 0x4a
 800d0d2:	f7f5 f916 	bl	8002302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	2100      	movs	r1, #0
 800d0da:	204b      	movs	r0, #75	@ 0x4b
 800d0dc:	f7f5 f8f7 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800d0e0:	204b      	movs	r0, #75	@ 0x4b
 800d0e2:	f7f5 f90e 	bl	8002302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	204d      	movs	r0, #77	@ 0x4d
 800d0ec:	f7f5 f8ef 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d0f0:	204d      	movs	r0, #77	@ 0x4d
 800d0f2:	f7f5 f906 	bl	8002302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d0f6:	bf00      	nop
 800d0f8:	37e8      	adds	r7, #232	@ 0xe8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	40040000 	.word	0x40040000
 800d104:	58024400 	.word	0x58024400
 800d108:	58020000 	.word	0x58020000

0800d10c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d120:	4619      	mov	r1, r3
 800d122:	4610      	mov	r0, r2
 800d124:	f7fe facb 	bl	800b6be <USBD_LL_SetupStage>
}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	460b      	mov	r3, r1
 800d13a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	6879      	ldr	r1, [r7, #4]
 800d146:	4613      	mov	r3, r2
 800d148:	00db      	lsls	r3, r3, #3
 800d14a:	4413      	add	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	440b      	add	r3, r1
 800d150:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	4619      	mov	r1, r3
 800d15a:	f7fe fb05 	bl	800b768 <USBD_LL_DataOutStage>
}
 800d15e:	bf00      	nop
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b082      	sub	sp, #8
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	460b      	mov	r3, r1
 800d170:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d178:	78fa      	ldrb	r2, [r7, #3]
 800d17a:	6879      	ldr	r1, [r7, #4]
 800d17c:	4613      	mov	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	440b      	add	r3, r1
 800d186:	3320      	adds	r3, #32
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	78fb      	ldrb	r3, [r7, #3]
 800d18c:	4619      	mov	r1, r3
 800d18e:	f7fe fb9e 	bl	800b8ce <USBD_LL_DataInStage>
}
 800d192:	bf00      	nop
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b082      	sub	sp, #8
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fe fcd8 	bl	800bb5e <USBD_LL_SOF>
}
 800d1ae:	bf00      	nop
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	79db      	ldrb	r3, [r3, #7]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d102      	bne.n	800d1d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	73fb      	strb	r3, [r7, #15]
 800d1ce:	e008      	b.n	800d1e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	79db      	ldrb	r3, [r3, #7]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d102      	bne.n	800d1de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	73fb      	strb	r3, [r7, #15]
 800d1dc:	e001      	b.n	800d1e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d1de:	f7f4 f93f 	bl	8001460 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1e8:	7bfa      	ldrb	r2, [r7, #15]
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fe fc72 	bl	800bad6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe fc1a 	bl	800ba32 <USBD_LL_Reset>
}
 800d1fe:	bf00      	nop
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
	...

0800d208 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fc6d 	bl	800baf6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	6812      	ldr	r2, [r2, #0]
 800d22a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d22e:	f043 0301 	orr.w	r3, r3, #1
 800d232:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7adb      	ldrb	r3, [r3, #11]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d005      	beq.n	800d248 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d23c:	4b04      	ldr	r3, [pc, #16]	@ (800d250 <HAL_PCD_SuspendCallback+0x48>)
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	4a03      	ldr	r2, [pc, #12]	@ (800d250 <HAL_PCD_SuspendCallback+0x48>)
 800d242:	f043 0306 	orr.w	r3, r3, #6
 800d246:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d248:	bf00      	nop
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	e000ed00 	.word	0xe000ed00

0800d254 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe fc63 	bl	800bb2e <USBD_LL_Resume>
}
 800d268:	bf00      	nop
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d282:	78fa      	ldrb	r2, [r7, #3]
 800d284:	4611      	mov	r1, r2
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe fcbb 	bl	800bc02 <USBD_LL_IsoOUTIncomplete>
}
 800d28c:	bf00      	nop
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	460b      	mov	r3, r1
 800d29e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2a6:	78fa      	ldrb	r2, [r7, #3]
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fe fc77 	bl	800bb9e <USBD_LL_IsoINIncomplete>
}
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fe fccd 	bl	800bc66 <USBD_LL_DevConnected>
}
 800d2cc:	bf00      	nop
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fe fcca 	bl	800bc7c <USBD_LL_DevDisconnected>
}
 800d2e8:	bf00      	nop
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d140      	bne.n	800d382 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d300:	4a22      	ldr	r2, [pc, #136]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a20      	ldr	r2, [pc, #128]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d30c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d310:	4b1e      	ldr	r3, [pc, #120]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d312:	4a1f      	ldr	r2, [pc, #124]	@ (800d390 <USBD_LL_Init+0xa0>)
 800d314:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800d316:	4b1d      	ldr	r3, [pc, #116]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d318:	2209      	movs	r2, #9
 800d31a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800d31c:	4b1b      	ldr	r3, [pc, #108]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d31e:	2202      	movs	r2, #2
 800d320:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d322:	4b1a      	ldr	r3, [pc, #104]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d324:	2200      	movs	r2, #0
 800d326:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d328:	4b18      	ldr	r3, [pc, #96]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d32a:	2202      	movs	r2, #2
 800d32c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d32e:	4b17      	ldr	r3, [pc, #92]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d330:	2200      	movs	r2, #0
 800d332:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d334:	4b15      	ldr	r3, [pc, #84]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d336:	2200      	movs	r2, #0
 800d338:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d33a:	4b14      	ldr	r3, [pc, #80]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800d340:	4b12      	ldr	r3, [pc, #72]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d342:	2201      	movs	r2, #1
 800d344:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d346:	4b11      	ldr	r3, [pc, #68]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d348:	2200      	movs	r2, #0
 800d34a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d34c:	4b0f      	ldr	r3, [pc, #60]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d34e:	2200      	movs	r2, #0
 800d350:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d352:	480e      	ldr	r0, [pc, #56]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d354:	f7f6 fa9c 	bl	8003890 <HAL_PCD_Init>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d35e:	f7f4 f87f 	bl	8001460 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d362:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d366:	4809      	ldr	r0, [pc, #36]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d368:	f7f7 fcf1 	bl	8004d4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d36c:	2280      	movs	r2, #128	@ 0x80
 800d36e:	2100      	movs	r1, #0
 800d370:	4806      	ldr	r0, [pc, #24]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d372:	f7f7 fca5 	bl	8004cc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d376:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800d37a:	2101      	movs	r1, #1
 800d37c:	4803      	ldr	r0, [pc, #12]	@ (800d38c <USBD_LL_Init+0x9c>)
 800d37e:	f7f7 fc9f 	bl	8004cc0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	24001ce0 	.word	0x24001ce0
 800d390:	40040000 	.word	0x40040000

0800d394 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7f6 fb7c 	bl	8003aa8 <HAL_PCD_Start>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 f942 	bl	800d640 <USBD_Get_USB_Status>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b084      	sub	sp, #16
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	4608      	mov	r0, r1
 800d3d4:	4611      	mov	r1, r2
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4603      	mov	r3, r0
 800d3da:	70fb      	strb	r3, [r7, #3]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	70bb      	strb	r3, [r7, #2]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d3f2:	78bb      	ldrb	r3, [r7, #2]
 800d3f4:	883a      	ldrh	r2, [r7, #0]
 800d3f6:	78f9      	ldrb	r1, [r7, #3]
 800d3f8:	f7f7 f87d 	bl	80044f6 <HAL_PCD_EP_Open>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	4618      	mov	r0, r3
 800d404:	f000 f91c 	bl	800d640 <USBD_Get_USB_Status>
 800d408:	4603      	mov	r3, r0
 800d40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	460b      	mov	r3, r1
 800d420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d426:	2300      	movs	r3, #0
 800d428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d430:	78fa      	ldrb	r2, [r7, #3]
 800d432:	4611      	mov	r1, r2
 800d434:	4618      	mov	r0, r3
 800d436:	f7f7 f8c8 	bl	80045ca <HAL_PCD_EP_Close>
 800d43a:	4603      	mov	r3, r0
 800d43c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
 800d440:	4618      	mov	r0, r3
 800d442:	f000 f8fd 	bl	800d640 <USBD_Get_USB_Status>
 800d446:	4603      	mov	r3, r0
 800d448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d46e:	78fa      	ldrb	r2, [r7, #3]
 800d470:	4611      	mov	r1, r2
 800d472:	4618      	mov	r0, r3
 800d474:	f7f7 f980 	bl	8004778 <HAL_PCD_EP_SetStall>
 800d478:	4603      	mov	r3, r0
 800d47a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d47c:	7bfb      	ldrb	r3, [r7, #15]
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 f8de 	bl	800d640 <USBD_Get_USB_Status>
 800d484:	4603      	mov	r3, r0
 800d486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d488:	7bbb      	ldrb	r3, [r7, #14]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b084      	sub	sp, #16
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	460b      	mov	r3, r1
 800d49c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4ac:	78fa      	ldrb	r2, [r7, #3]
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7f7 f9c4 	bl	800483e <HAL_PCD_EP_ClrStall>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f000 f8bf 	bl	800d640 <USBD_Get_USB_Status>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	460b      	mov	r3, r1
 800d4da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da0b      	bge.n	800d504 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4ec:	78fb      	ldrb	r3, [r7, #3]
 800d4ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d4f2:	68f9      	ldr	r1, [r7, #12]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	4413      	add	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	440b      	add	r3, r1
 800d4fe:	3316      	adds	r3, #22
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	e00b      	b.n	800d51c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d504:	78fb      	ldrb	r3, [r7, #3]
 800d506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d50a:	68f9      	ldr	r1, [r7, #12]
 800d50c:	4613      	mov	r3, r2
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	4413      	add	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	440b      	add	r3, r1
 800d516:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d51a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3714      	adds	r7, #20
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d542:	78fa      	ldrb	r2, [r7, #3]
 800d544:	4611      	mov	r1, r2
 800d546:	4618      	mov	r0, r3
 800d548:	f7f6 ffb1 	bl	80044ae <HAL_PCD_SetAddress>
 800d54c:	4603      	mov	r3, r0
 800d54e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d550:	7bfb      	ldrb	r3, [r7, #15]
 800d552:	4618      	mov	r0, r3
 800d554:	f000 f874 	bl	800d640 <USBD_Get_USB_Status>
 800d558:	4603      	mov	r3, r0
 800d55a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d55c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b086      	sub	sp, #24
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	603b      	str	r3, [r7, #0]
 800d572:	460b      	mov	r3, r1
 800d574:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d57a:	2300      	movs	r3, #0
 800d57c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d584:	7af9      	ldrb	r1, [r7, #11]
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	f7f7 f8bb 	bl	8004704 <HAL_PCD_EP_Transmit>
 800d58e:	4603      	mov	r3, r0
 800d590:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d592:	7dfb      	ldrb	r3, [r7, #23]
 800d594:	4618      	mov	r0, r3
 800d596:	f000 f853 	bl	800d640 <USBD_Get_USB_Status>
 800d59a:	4603      	mov	r3, r0
 800d59c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d59e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3718      	adds	r7, #24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	607a      	str	r2, [r7, #4]
 800d5b2:	603b      	str	r3, [r7, #0]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d5c6:	7af9      	ldrb	r1, [r7, #11]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	f7f7 f847 	bl	800465e <HAL_PCD_EP_Receive>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d4:	7dfb      	ldrb	r3, [r7, #23]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f000 f832 	bl	800d640 <USBD_Get_USB_Status>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b082      	sub	sp, #8
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5fc:	78fa      	ldrb	r2, [r7, #3]
 800d5fe:	4611      	mov	r1, r2
 800d600:	4618      	mov	r0, r3
 800d602:	f7f7 f867 	bl	80046d4 <HAL_PCD_EP_GetRxCount>
 800d606:	4603      	mov	r3, r0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d618:	4b03      	ldr	r3, [pc, #12]	@ (800d628 <USBD_static_malloc+0x18>)
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	240021c4 	.word	0x240021c4

0800d62c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d64a:	2300      	movs	r3, #0
 800d64c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d64e:	79fb      	ldrb	r3, [r7, #7]
 800d650:	2b03      	cmp	r3, #3
 800d652:	d817      	bhi.n	800d684 <USBD_Get_USB_Status+0x44>
 800d654:	a201      	add	r2, pc, #4	@ (adr r2, 800d65c <USBD_Get_USB_Status+0x1c>)
 800d656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65a:	bf00      	nop
 800d65c:	0800d66d 	.word	0x0800d66d
 800d660:	0800d673 	.word	0x0800d673
 800d664:	0800d679 	.word	0x0800d679
 800d668:	0800d67f 	.word	0x0800d67f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	73fb      	strb	r3, [r7, #15]
    break;
 800d670:	e00b      	b.n	800d68a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d672:	2303      	movs	r3, #3
 800d674:	73fb      	strb	r3, [r7, #15]
    break;
 800d676:	e008      	b.n	800d68a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d678:	2301      	movs	r3, #1
 800d67a:	73fb      	strb	r3, [r7, #15]
    break;
 800d67c:	e005      	b.n	800d68a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d67e:	2303      	movs	r3, #3
 800d680:	73fb      	strb	r3, [r7, #15]
    break;
 800d682:	e002      	b.n	800d68a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d684:	2303      	movs	r3, #3
 800d686:	73fb      	strb	r3, [r7, #15]
    break;
 800d688:	bf00      	nop
  }
  return usb_status;
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3714      	adds	r7, #20
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <std>:
 800d698:	2300      	movs	r3, #0
 800d69a:	b510      	push	{r4, lr}
 800d69c:	4604      	mov	r4, r0
 800d69e:	e9c0 3300 	strd	r3, r3, [r0]
 800d6a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6a6:	6083      	str	r3, [r0, #8]
 800d6a8:	8181      	strh	r1, [r0, #12]
 800d6aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800d6ac:	81c2      	strh	r2, [r0, #14]
 800d6ae:	6183      	str	r3, [r0, #24]
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	2208      	movs	r2, #8
 800d6b4:	305c      	adds	r0, #92	@ 0x5c
 800d6b6:	f000 f92e 	bl	800d916 <memset>
 800d6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d6f0 <std+0x58>)
 800d6bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800d6be:	4b0d      	ldr	r3, [pc, #52]	@ (800d6f4 <std+0x5c>)
 800d6c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d6c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d6f8 <std+0x60>)
 800d6c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6fc <std+0x64>)
 800d6c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d700 <std+0x68>)
 800d6cc:	6224      	str	r4, [r4, #32]
 800d6ce:	429c      	cmp	r4, r3
 800d6d0:	d006      	beq.n	800d6e0 <std+0x48>
 800d6d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d6d6:	4294      	cmp	r4, r2
 800d6d8:	d002      	beq.n	800d6e0 <std+0x48>
 800d6da:	33d0      	adds	r3, #208	@ 0xd0
 800d6dc:	429c      	cmp	r4, r3
 800d6de:	d105      	bne.n	800d6ec <std+0x54>
 800d6e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6e8:	f000 b98e 	b.w	800da08 <__retarget_lock_init_recursive>
 800d6ec:	bd10      	pop	{r4, pc}
 800d6ee:	bf00      	nop
 800d6f0:	0800d891 	.word	0x0800d891
 800d6f4:	0800d8b3 	.word	0x0800d8b3
 800d6f8:	0800d8eb 	.word	0x0800d8eb
 800d6fc:	0800d90f 	.word	0x0800d90f
 800d700:	240023e4 	.word	0x240023e4

0800d704 <stdio_exit_handler>:
 800d704:	4a02      	ldr	r2, [pc, #8]	@ (800d710 <stdio_exit_handler+0xc>)
 800d706:	4903      	ldr	r1, [pc, #12]	@ (800d714 <stdio_exit_handler+0x10>)
 800d708:	4803      	ldr	r0, [pc, #12]	@ (800d718 <stdio_exit_handler+0x14>)
 800d70a:	f000 b869 	b.w	800d7e0 <_fwalk_sglue>
 800d70e:	bf00      	nop
 800d710:	24000104 	.word	0x24000104
 800d714:	0800e575 	.word	0x0800e575
 800d718:	24000114 	.word	0x24000114

0800d71c <cleanup_stdio>:
 800d71c:	6841      	ldr	r1, [r0, #4]
 800d71e:	4b0c      	ldr	r3, [pc, #48]	@ (800d750 <cleanup_stdio+0x34>)
 800d720:	4299      	cmp	r1, r3
 800d722:	b510      	push	{r4, lr}
 800d724:	4604      	mov	r4, r0
 800d726:	d001      	beq.n	800d72c <cleanup_stdio+0x10>
 800d728:	f000 ff24 	bl	800e574 <_fflush_r>
 800d72c:	68a1      	ldr	r1, [r4, #8]
 800d72e:	4b09      	ldr	r3, [pc, #36]	@ (800d754 <cleanup_stdio+0x38>)
 800d730:	4299      	cmp	r1, r3
 800d732:	d002      	beq.n	800d73a <cleanup_stdio+0x1e>
 800d734:	4620      	mov	r0, r4
 800d736:	f000 ff1d 	bl	800e574 <_fflush_r>
 800d73a:	68e1      	ldr	r1, [r4, #12]
 800d73c:	4b06      	ldr	r3, [pc, #24]	@ (800d758 <cleanup_stdio+0x3c>)
 800d73e:	4299      	cmp	r1, r3
 800d740:	d004      	beq.n	800d74c <cleanup_stdio+0x30>
 800d742:	4620      	mov	r0, r4
 800d744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d748:	f000 bf14 	b.w	800e574 <_fflush_r>
 800d74c:	bd10      	pop	{r4, pc}
 800d74e:	bf00      	nop
 800d750:	240023e4 	.word	0x240023e4
 800d754:	2400244c 	.word	0x2400244c
 800d758:	240024b4 	.word	0x240024b4

0800d75c <global_stdio_init.part.0>:
 800d75c:	b510      	push	{r4, lr}
 800d75e:	4b0b      	ldr	r3, [pc, #44]	@ (800d78c <global_stdio_init.part.0+0x30>)
 800d760:	4c0b      	ldr	r4, [pc, #44]	@ (800d790 <global_stdio_init.part.0+0x34>)
 800d762:	4a0c      	ldr	r2, [pc, #48]	@ (800d794 <global_stdio_init.part.0+0x38>)
 800d764:	601a      	str	r2, [r3, #0]
 800d766:	4620      	mov	r0, r4
 800d768:	2200      	movs	r2, #0
 800d76a:	2104      	movs	r1, #4
 800d76c:	f7ff ff94 	bl	800d698 <std>
 800d770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d774:	2201      	movs	r2, #1
 800d776:	2109      	movs	r1, #9
 800d778:	f7ff ff8e 	bl	800d698 <std>
 800d77c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d780:	2202      	movs	r2, #2
 800d782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d786:	2112      	movs	r1, #18
 800d788:	f7ff bf86 	b.w	800d698 <std>
 800d78c:	2400251c 	.word	0x2400251c
 800d790:	240023e4 	.word	0x240023e4
 800d794:	0800d705 	.word	0x0800d705

0800d798 <__sfp_lock_acquire>:
 800d798:	4801      	ldr	r0, [pc, #4]	@ (800d7a0 <__sfp_lock_acquire+0x8>)
 800d79a:	f000 b936 	b.w	800da0a <__retarget_lock_acquire_recursive>
 800d79e:	bf00      	nop
 800d7a0:	24002525 	.word	0x24002525

0800d7a4 <__sfp_lock_release>:
 800d7a4:	4801      	ldr	r0, [pc, #4]	@ (800d7ac <__sfp_lock_release+0x8>)
 800d7a6:	f000 b931 	b.w	800da0c <__retarget_lock_release_recursive>
 800d7aa:	bf00      	nop
 800d7ac:	24002525 	.word	0x24002525

0800d7b0 <__sinit>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	f7ff fff0 	bl	800d798 <__sfp_lock_acquire>
 800d7b8:	6a23      	ldr	r3, [r4, #32]
 800d7ba:	b11b      	cbz	r3, 800d7c4 <__sinit+0x14>
 800d7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7c0:	f7ff bff0 	b.w	800d7a4 <__sfp_lock_release>
 800d7c4:	4b04      	ldr	r3, [pc, #16]	@ (800d7d8 <__sinit+0x28>)
 800d7c6:	6223      	str	r3, [r4, #32]
 800d7c8:	4b04      	ldr	r3, [pc, #16]	@ (800d7dc <__sinit+0x2c>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1f5      	bne.n	800d7bc <__sinit+0xc>
 800d7d0:	f7ff ffc4 	bl	800d75c <global_stdio_init.part.0>
 800d7d4:	e7f2      	b.n	800d7bc <__sinit+0xc>
 800d7d6:	bf00      	nop
 800d7d8:	0800d71d 	.word	0x0800d71d
 800d7dc:	2400251c 	.word	0x2400251c

0800d7e0 <_fwalk_sglue>:
 800d7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	4688      	mov	r8, r1
 800d7e8:	4614      	mov	r4, r2
 800d7ea:	2600      	movs	r6, #0
 800d7ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7f0:	f1b9 0901 	subs.w	r9, r9, #1
 800d7f4:	d505      	bpl.n	800d802 <_fwalk_sglue+0x22>
 800d7f6:	6824      	ldr	r4, [r4, #0]
 800d7f8:	2c00      	cmp	r4, #0
 800d7fa:	d1f7      	bne.n	800d7ec <_fwalk_sglue+0xc>
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d802:	89ab      	ldrh	r3, [r5, #12]
 800d804:	2b01      	cmp	r3, #1
 800d806:	d907      	bls.n	800d818 <_fwalk_sglue+0x38>
 800d808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d80c:	3301      	adds	r3, #1
 800d80e:	d003      	beq.n	800d818 <_fwalk_sglue+0x38>
 800d810:	4629      	mov	r1, r5
 800d812:	4638      	mov	r0, r7
 800d814:	47c0      	blx	r8
 800d816:	4306      	orrs	r6, r0
 800d818:	3568      	adds	r5, #104	@ 0x68
 800d81a:	e7e9      	b.n	800d7f0 <_fwalk_sglue+0x10>

0800d81c <iprintf>:
 800d81c:	b40f      	push	{r0, r1, r2, r3}
 800d81e:	b507      	push	{r0, r1, r2, lr}
 800d820:	4906      	ldr	r1, [pc, #24]	@ (800d83c <iprintf+0x20>)
 800d822:	ab04      	add	r3, sp, #16
 800d824:	6808      	ldr	r0, [r1, #0]
 800d826:	f853 2b04 	ldr.w	r2, [r3], #4
 800d82a:	6881      	ldr	r1, [r0, #8]
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	f000 fb77 	bl	800df20 <_vfiprintf_r>
 800d832:	b003      	add	sp, #12
 800d834:	f85d eb04 	ldr.w	lr, [sp], #4
 800d838:	b004      	add	sp, #16
 800d83a:	4770      	bx	lr
 800d83c:	24000110 	.word	0x24000110

0800d840 <putchar>:
 800d840:	4b02      	ldr	r3, [pc, #8]	@ (800d84c <putchar+0xc>)
 800d842:	4601      	mov	r1, r0
 800d844:	6818      	ldr	r0, [r3, #0]
 800d846:	6882      	ldr	r2, [r0, #8]
 800d848:	f000 bebc 	b.w	800e5c4 <_putc_r>
 800d84c:	24000110 	.word	0x24000110

0800d850 <siprintf>:
 800d850:	b40e      	push	{r1, r2, r3}
 800d852:	b500      	push	{lr}
 800d854:	b09c      	sub	sp, #112	@ 0x70
 800d856:	ab1d      	add	r3, sp, #116	@ 0x74
 800d858:	9002      	str	r0, [sp, #8]
 800d85a:	9006      	str	r0, [sp, #24]
 800d85c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d860:	4809      	ldr	r0, [pc, #36]	@ (800d888 <siprintf+0x38>)
 800d862:	9107      	str	r1, [sp, #28]
 800d864:	9104      	str	r1, [sp, #16]
 800d866:	4909      	ldr	r1, [pc, #36]	@ (800d88c <siprintf+0x3c>)
 800d868:	f853 2b04 	ldr.w	r2, [r3], #4
 800d86c:	9105      	str	r1, [sp, #20]
 800d86e:	6800      	ldr	r0, [r0, #0]
 800d870:	9301      	str	r3, [sp, #4]
 800d872:	a902      	add	r1, sp, #8
 800d874:	f000 fa2e 	bl	800dcd4 <_svfiprintf_r>
 800d878:	9b02      	ldr	r3, [sp, #8]
 800d87a:	2200      	movs	r2, #0
 800d87c:	701a      	strb	r2, [r3, #0]
 800d87e:	b01c      	add	sp, #112	@ 0x70
 800d880:	f85d eb04 	ldr.w	lr, [sp], #4
 800d884:	b003      	add	sp, #12
 800d886:	4770      	bx	lr
 800d888:	24000110 	.word	0x24000110
 800d88c:	ffff0208 	.word	0xffff0208

0800d890 <__sread>:
 800d890:	b510      	push	{r4, lr}
 800d892:	460c      	mov	r4, r1
 800d894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d898:	f000 f868 	bl	800d96c <_read_r>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	bfab      	itete	ge
 800d8a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d8a4:	181b      	addge	r3, r3, r0
 800d8a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d8aa:	bfac      	ite	ge
 800d8ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d8ae:	81a3      	strhlt	r3, [r4, #12]
 800d8b0:	bd10      	pop	{r4, pc}

0800d8b2 <__swrite>:
 800d8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	898b      	ldrh	r3, [r1, #12]
 800d8ba:	05db      	lsls	r3, r3, #23
 800d8bc:	4605      	mov	r5, r0
 800d8be:	460c      	mov	r4, r1
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	d505      	bpl.n	800d8d0 <__swrite+0x1e>
 800d8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f000 f83c 	bl	800d948 <_lseek_r>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	4632      	mov	r2, r6
 800d8de:	463b      	mov	r3, r7
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e6:	f000 b853 	b.w	800d990 <_write_r>

0800d8ea <__sseek>:
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f2:	f000 f829 	bl	800d948 <_lseek_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	bf15      	itete	ne
 800d8fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d8fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d906:	81a3      	strheq	r3, [r4, #12]
 800d908:	bf18      	it	ne
 800d90a:	81a3      	strhne	r3, [r4, #12]
 800d90c:	bd10      	pop	{r4, pc}

0800d90e <__sclose>:
 800d90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d912:	f000 b809 	b.w	800d928 <_close_r>

0800d916 <memset>:
 800d916:	4402      	add	r2, r0
 800d918:	4603      	mov	r3, r0
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d100      	bne.n	800d920 <memset+0xa>
 800d91e:	4770      	bx	lr
 800d920:	f803 1b01 	strb.w	r1, [r3], #1
 800d924:	e7f9      	b.n	800d91a <memset+0x4>
	...

0800d928 <_close_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d06      	ldr	r5, [pc, #24]	@ (800d944 <_close_r+0x1c>)
 800d92c:	2300      	movs	r3, #0
 800d92e:	4604      	mov	r4, r0
 800d930:	4608      	mov	r0, r1
 800d932:	602b      	str	r3, [r5, #0]
 800d934:	f7f4 f9b9 	bl	8001caa <_close>
 800d938:	1c43      	adds	r3, r0, #1
 800d93a:	d102      	bne.n	800d942 <_close_r+0x1a>
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	b103      	cbz	r3, 800d942 <_close_r+0x1a>
 800d940:	6023      	str	r3, [r4, #0]
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	24002520 	.word	0x24002520

0800d948 <_lseek_r>:
 800d948:	b538      	push	{r3, r4, r5, lr}
 800d94a:	4d07      	ldr	r5, [pc, #28]	@ (800d968 <_lseek_r+0x20>)
 800d94c:	4604      	mov	r4, r0
 800d94e:	4608      	mov	r0, r1
 800d950:	4611      	mov	r1, r2
 800d952:	2200      	movs	r2, #0
 800d954:	602a      	str	r2, [r5, #0]
 800d956:	461a      	mov	r2, r3
 800d958:	f7f4 f9ce 	bl	8001cf8 <_lseek>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d102      	bne.n	800d966 <_lseek_r+0x1e>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	b103      	cbz	r3, 800d966 <_lseek_r+0x1e>
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	bd38      	pop	{r3, r4, r5, pc}
 800d968:	24002520 	.word	0x24002520

0800d96c <_read_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4d07      	ldr	r5, [pc, #28]	@ (800d98c <_read_r+0x20>)
 800d970:	4604      	mov	r4, r0
 800d972:	4608      	mov	r0, r1
 800d974:	4611      	mov	r1, r2
 800d976:	2200      	movs	r2, #0
 800d978:	602a      	str	r2, [r5, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	f7f4 f95c 	bl	8001c38 <_read>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d102      	bne.n	800d98a <_read_r+0x1e>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b103      	cbz	r3, 800d98a <_read_r+0x1e>
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	24002520 	.word	0x24002520

0800d990 <_write_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4d07      	ldr	r5, [pc, #28]	@ (800d9b0 <_write_r+0x20>)
 800d994:	4604      	mov	r4, r0
 800d996:	4608      	mov	r0, r1
 800d998:	4611      	mov	r1, r2
 800d99a:	2200      	movs	r2, #0
 800d99c:	602a      	str	r2, [r5, #0]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	f7f4 f967 	bl	8001c72 <_write>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d102      	bne.n	800d9ae <_write_r+0x1e>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	b103      	cbz	r3, 800d9ae <_write_r+0x1e>
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}
 800d9b0:	24002520 	.word	0x24002520

0800d9b4 <__errno>:
 800d9b4:	4b01      	ldr	r3, [pc, #4]	@ (800d9bc <__errno+0x8>)
 800d9b6:	6818      	ldr	r0, [r3, #0]
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	24000110 	.word	0x24000110

0800d9c0 <__libc_init_array>:
 800d9c0:	b570      	push	{r4, r5, r6, lr}
 800d9c2:	4d0d      	ldr	r5, [pc, #52]	@ (800d9f8 <__libc_init_array+0x38>)
 800d9c4:	4c0d      	ldr	r4, [pc, #52]	@ (800d9fc <__libc_init_array+0x3c>)
 800d9c6:	1b64      	subs	r4, r4, r5
 800d9c8:	10a4      	asrs	r4, r4, #2
 800d9ca:	2600      	movs	r6, #0
 800d9cc:	42a6      	cmp	r6, r4
 800d9ce:	d109      	bne.n	800d9e4 <__libc_init_array+0x24>
 800d9d0:	4d0b      	ldr	r5, [pc, #44]	@ (800da00 <__libc_init_array+0x40>)
 800d9d2:	4c0c      	ldr	r4, [pc, #48]	@ (800da04 <__libc_init_array+0x44>)
 800d9d4:	f000 ffa2 	bl	800e91c <_init>
 800d9d8:	1b64      	subs	r4, r4, r5
 800d9da:	10a4      	asrs	r4, r4, #2
 800d9dc:	2600      	movs	r6, #0
 800d9de:	42a6      	cmp	r6, r4
 800d9e0:	d105      	bne.n	800d9ee <__libc_init_array+0x2e>
 800d9e2:	bd70      	pop	{r4, r5, r6, pc}
 800d9e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9e8:	4798      	blx	r3
 800d9ea:	3601      	adds	r6, #1
 800d9ec:	e7ee      	b.n	800d9cc <__libc_init_array+0xc>
 800d9ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9f2:	4798      	blx	r3
 800d9f4:	3601      	adds	r6, #1
 800d9f6:	e7f2      	b.n	800d9de <__libc_init_array+0x1e>
 800d9f8:	0800f0d4 	.word	0x0800f0d4
 800d9fc:	0800f0d4 	.word	0x0800f0d4
 800da00:	0800f0d4 	.word	0x0800f0d4
 800da04:	0800f0d8 	.word	0x0800f0d8

0800da08 <__retarget_lock_init_recursive>:
 800da08:	4770      	bx	lr

0800da0a <__retarget_lock_acquire_recursive>:
 800da0a:	4770      	bx	lr

0800da0c <__retarget_lock_release_recursive>:
 800da0c:	4770      	bx	lr

0800da0e <memcpy>:
 800da0e:	440a      	add	r2, r1
 800da10:	4291      	cmp	r1, r2
 800da12:	f100 33ff 	add.w	r3, r0, #4294967295
 800da16:	d100      	bne.n	800da1a <memcpy+0xc>
 800da18:	4770      	bx	lr
 800da1a:	b510      	push	{r4, lr}
 800da1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da24:	4291      	cmp	r1, r2
 800da26:	d1f9      	bne.n	800da1c <memcpy+0xe>
 800da28:	bd10      	pop	{r4, pc}
	...

0800da2c <_free_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4605      	mov	r5, r0
 800da30:	2900      	cmp	r1, #0
 800da32:	d041      	beq.n	800dab8 <_free_r+0x8c>
 800da34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da38:	1f0c      	subs	r4, r1, #4
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	bfb8      	it	lt
 800da3e:	18e4      	addlt	r4, r4, r3
 800da40:	f000 f8e0 	bl	800dc04 <__malloc_lock>
 800da44:	4a1d      	ldr	r2, [pc, #116]	@ (800dabc <_free_r+0x90>)
 800da46:	6813      	ldr	r3, [r2, #0]
 800da48:	b933      	cbnz	r3, 800da58 <_free_r+0x2c>
 800da4a:	6063      	str	r3, [r4, #4]
 800da4c:	6014      	str	r4, [r2, #0]
 800da4e:	4628      	mov	r0, r5
 800da50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da54:	f000 b8dc 	b.w	800dc10 <__malloc_unlock>
 800da58:	42a3      	cmp	r3, r4
 800da5a:	d908      	bls.n	800da6e <_free_r+0x42>
 800da5c:	6820      	ldr	r0, [r4, #0]
 800da5e:	1821      	adds	r1, r4, r0
 800da60:	428b      	cmp	r3, r1
 800da62:	bf01      	itttt	eq
 800da64:	6819      	ldreq	r1, [r3, #0]
 800da66:	685b      	ldreq	r3, [r3, #4]
 800da68:	1809      	addeq	r1, r1, r0
 800da6a:	6021      	streq	r1, [r4, #0]
 800da6c:	e7ed      	b.n	800da4a <_free_r+0x1e>
 800da6e:	461a      	mov	r2, r3
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	b10b      	cbz	r3, 800da78 <_free_r+0x4c>
 800da74:	42a3      	cmp	r3, r4
 800da76:	d9fa      	bls.n	800da6e <_free_r+0x42>
 800da78:	6811      	ldr	r1, [r2, #0]
 800da7a:	1850      	adds	r0, r2, r1
 800da7c:	42a0      	cmp	r0, r4
 800da7e:	d10b      	bne.n	800da98 <_free_r+0x6c>
 800da80:	6820      	ldr	r0, [r4, #0]
 800da82:	4401      	add	r1, r0
 800da84:	1850      	adds	r0, r2, r1
 800da86:	4283      	cmp	r3, r0
 800da88:	6011      	str	r1, [r2, #0]
 800da8a:	d1e0      	bne.n	800da4e <_free_r+0x22>
 800da8c:	6818      	ldr	r0, [r3, #0]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	6053      	str	r3, [r2, #4]
 800da92:	4408      	add	r0, r1
 800da94:	6010      	str	r0, [r2, #0]
 800da96:	e7da      	b.n	800da4e <_free_r+0x22>
 800da98:	d902      	bls.n	800daa0 <_free_r+0x74>
 800da9a:	230c      	movs	r3, #12
 800da9c:	602b      	str	r3, [r5, #0]
 800da9e:	e7d6      	b.n	800da4e <_free_r+0x22>
 800daa0:	6820      	ldr	r0, [r4, #0]
 800daa2:	1821      	adds	r1, r4, r0
 800daa4:	428b      	cmp	r3, r1
 800daa6:	bf04      	itt	eq
 800daa8:	6819      	ldreq	r1, [r3, #0]
 800daaa:	685b      	ldreq	r3, [r3, #4]
 800daac:	6063      	str	r3, [r4, #4]
 800daae:	bf04      	itt	eq
 800dab0:	1809      	addeq	r1, r1, r0
 800dab2:	6021      	streq	r1, [r4, #0]
 800dab4:	6054      	str	r4, [r2, #4]
 800dab6:	e7ca      	b.n	800da4e <_free_r+0x22>
 800dab8:	bd38      	pop	{r3, r4, r5, pc}
 800daba:	bf00      	nop
 800dabc:	2400252c 	.word	0x2400252c

0800dac0 <sbrk_aligned>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	4e0f      	ldr	r6, [pc, #60]	@ (800db00 <sbrk_aligned+0x40>)
 800dac4:	460c      	mov	r4, r1
 800dac6:	6831      	ldr	r1, [r6, #0]
 800dac8:	4605      	mov	r5, r0
 800daca:	b911      	cbnz	r1, 800dad2 <sbrk_aligned+0x12>
 800dacc:	f000 fe5c 	bl	800e788 <_sbrk_r>
 800dad0:	6030      	str	r0, [r6, #0]
 800dad2:	4621      	mov	r1, r4
 800dad4:	4628      	mov	r0, r5
 800dad6:	f000 fe57 	bl	800e788 <_sbrk_r>
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	d103      	bne.n	800dae6 <sbrk_aligned+0x26>
 800dade:	f04f 34ff 	mov.w	r4, #4294967295
 800dae2:	4620      	mov	r0, r4
 800dae4:	bd70      	pop	{r4, r5, r6, pc}
 800dae6:	1cc4      	adds	r4, r0, #3
 800dae8:	f024 0403 	bic.w	r4, r4, #3
 800daec:	42a0      	cmp	r0, r4
 800daee:	d0f8      	beq.n	800dae2 <sbrk_aligned+0x22>
 800daf0:	1a21      	subs	r1, r4, r0
 800daf2:	4628      	mov	r0, r5
 800daf4:	f000 fe48 	bl	800e788 <_sbrk_r>
 800daf8:	3001      	adds	r0, #1
 800dafa:	d1f2      	bne.n	800dae2 <sbrk_aligned+0x22>
 800dafc:	e7ef      	b.n	800dade <sbrk_aligned+0x1e>
 800dafe:	bf00      	nop
 800db00:	24002528 	.word	0x24002528

0800db04 <_malloc_r>:
 800db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db08:	1ccd      	adds	r5, r1, #3
 800db0a:	f025 0503 	bic.w	r5, r5, #3
 800db0e:	3508      	adds	r5, #8
 800db10:	2d0c      	cmp	r5, #12
 800db12:	bf38      	it	cc
 800db14:	250c      	movcc	r5, #12
 800db16:	2d00      	cmp	r5, #0
 800db18:	4606      	mov	r6, r0
 800db1a:	db01      	blt.n	800db20 <_malloc_r+0x1c>
 800db1c:	42a9      	cmp	r1, r5
 800db1e:	d904      	bls.n	800db2a <_malloc_r+0x26>
 800db20:	230c      	movs	r3, #12
 800db22:	6033      	str	r3, [r6, #0]
 800db24:	2000      	movs	r0, #0
 800db26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc00 <_malloc_r+0xfc>
 800db2e:	f000 f869 	bl	800dc04 <__malloc_lock>
 800db32:	f8d8 3000 	ldr.w	r3, [r8]
 800db36:	461c      	mov	r4, r3
 800db38:	bb44      	cbnz	r4, 800db8c <_malloc_r+0x88>
 800db3a:	4629      	mov	r1, r5
 800db3c:	4630      	mov	r0, r6
 800db3e:	f7ff ffbf 	bl	800dac0 <sbrk_aligned>
 800db42:	1c43      	adds	r3, r0, #1
 800db44:	4604      	mov	r4, r0
 800db46:	d158      	bne.n	800dbfa <_malloc_r+0xf6>
 800db48:	f8d8 4000 	ldr.w	r4, [r8]
 800db4c:	4627      	mov	r7, r4
 800db4e:	2f00      	cmp	r7, #0
 800db50:	d143      	bne.n	800dbda <_malloc_r+0xd6>
 800db52:	2c00      	cmp	r4, #0
 800db54:	d04b      	beq.n	800dbee <_malloc_r+0xea>
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	4639      	mov	r1, r7
 800db5a:	4630      	mov	r0, r6
 800db5c:	eb04 0903 	add.w	r9, r4, r3
 800db60:	f000 fe12 	bl	800e788 <_sbrk_r>
 800db64:	4581      	cmp	r9, r0
 800db66:	d142      	bne.n	800dbee <_malloc_r+0xea>
 800db68:	6821      	ldr	r1, [r4, #0]
 800db6a:	1a6d      	subs	r5, r5, r1
 800db6c:	4629      	mov	r1, r5
 800db6e:	4630      	mov	r0, r6
 800db70:	f7ff ffa6 	bl	800dac0 <sbrk_aligned>
 800db74:	3001      	adds	r0, #1
 800db76:	d03a      	beq.n	800dbee <_malloc_r+0xea>
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	442b      	add	r3, r5
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	f8d8 3000 	ldr.w	r3, [r8]
 800db82:	685a      	ldr	r2, [r3, #4]
 800db84:	bb62      	cbnz	r2, 800dbe0 <_malloc_r+0xdc>
 800db86:	f8c8 7000 	str.w	r7, [r8]
 800db8a:	e00f      	b.n	800dbac <_malloc_r+0xa8>
 800db8c:	6822      	ldr	r2, [r4, #0]
 800db8e:	1b52      	subs	r2, r2, r5
 800db90:	d420      	bmi.n	800dbd4 <_malloc_r+0xd0>
 800db92:	2a0b      	cmp	r2, #11
 800db94:	d917      	bls.n	800dbc6 <_malloc_r+0xc2>
 800db96:	1961      	adds	r1, r4, r5
 800db98:	42a3      	cmp	r3, r4
 800db9a:	6025      	str	r5, [r4, #0]
 800db9c:	bf18      	it	ne
 800db9e:	6059      	strne	r1, [r3, #4]
 800dba0:	6863      	ldr	r3, [r4, #4]
 800dba2:	bf08      	it	eq
 800dba4:	f8c8 1000 	streq.w	r1, [r8]
 800dba8:	5162      	str	r2, [r4, r5]
 800dbaa:	604b      	str	r3, [r1, #4]
 800dbac:	4630      	mov	r0, r6
 800dbae:	f000 f82f 	bl	800dc10 <__malloc_unlock>
 800dbb2:	f104 000b 	add.w	r0, r4, #11
 800dbb6:	1d23      	adds	r3, r4, #4
 800dbb8:	f020 0007 	bic.w	r0, r0, #7
 800dbbc:	1ac2      	subs	r2, r0, r3
 800dbbe:	bf1c      	itt	ne
 800dbc0:	1a1b      	subne	r3, r3, r0
 800dbc2:	50a3      	strne	r3, [r4, r2]
 800dbc4:	e7af      	b.n	800db26 <_malloc_r+0x22>
 800dbc6:	6862      	ldr	r2, [r4, #4]
 800dbc8:	42a3      	cmp	r3, r4
 800dbca:	bf0c      	ite	eq
 800dbcc:	f8c8 2000 	streq.w	r2, [r8]
 800dbd0:	605a      	strne	r2, [r3, #4]
 800dbd2:	e7eb      	b.n	800dbac <_malloc_r+0xa8>
 800dbd4:	4623      	mov	r3, r4
 800dbd6:	6864      	ldr	r4, [r4, #4]
 800dbd8:	e7ae      	b.n	800db38 <_malloc_r+0x34>
 800dbda:	463c      	mov	r4, r7
 800dbdc:	687f      	ldr	r7, [r7, #4]
 800dbde:	e7b6      	b.n	800db4e <_malloc_r+0x4a>
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	42a3      	cmp	r3, r4
 800dbe6:	d1fb      	bne.n	800dbe0 <_malloc_r+0xdc>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	6053      	str	r3, [r2, #4]
 800dbec:	e7de      	b.n	800dbac <_malloc_r+0xa8>
 800dbee:	230c      	movs	r3, #12
 800dbf0:	6033      	str	r3, [r6, #0]
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	f000 f80c 	bl	800dc10 <__malloc_unlock>
 800dbf8:	e794      	b.n	800db24 <_malloc_r+0x20>
 800dbfa:	6005      	str	r5, [r0, #0]
 800dbfc:	e7d6      	b.n	800dbac <_malloc_r+0xa8>
 800dbfe:	bf00      	nop
 800dc00:	2400252c 	.word	0x2400252c

0800dc04 <__malloc_lock>:
 800dc04:	4801      	ldr	r0, [pc, #4]	@ (800dc0c <__malloc_lock+0x8>)
 800dc06:	f7ff bf00 	b.w	800da0a <__retarget_lock_acquire_recursive>
 800dc0a:	bf00      	nop
 800dc0c:	24002524 	.word	0x24002524

0800dc10 <__malloc_unlock>:
 800dc10:	4801      	ldr	r0, [pc, #4]	@ (800dc18 <__malloc_unlock+0x8>)
 800dc12:	f7ff befb 	b.w	800da0c <__retarget_lock_release_recursive>
 800dc16:	bf00      	nop
 800dc18:	24002524 	.word	0x24002524

0800dc1c <__ssputs_r>:
 800dc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc20:	688e      	ldr	r6, [r1, #8]
 800dc22:	461f      	mov	r7, r3
 800dc24:	42be      	cmp	r6, r7
 800dc26:	680b      	ldr	r3, [r1, #0]
 800dc28:	4682      	mov	sl, r0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	4690      	mov	r8, r2
 800dc2e:	d82d      	bhi.n	800dc8c <__ssputs_r+0x70>
 800dc30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc38:	d026      	beq.n	800dc88 <__ssputs_r+0x6c>
 800dc3a:	6965      	ldr	r5, [r4, #20]
 800dc3c:	6909      	ldr	r1, [r1, #16]
 800dc3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc42:	eba3 0901 	sub.w	r9, r3, r1
 800dc46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc4a:	1c7b      	adds	r3, r7, #1
 800dc4c:	444b      	add	r3, r9
 800dc4e:	106d      	asrs	r5, r5, #1
 800dc50:	429d      	cmp	r5, r3
 800dc52:	bf38      	it	cc
 800dc54:	461d      	movcc	r5, r3
 800dc56:	0553      	lsls	r3, r2, #21
 800dc58:	d527      	bpl.n	800dcaa <__ssputs_r+0x8e>
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	f7ff ff52 	bl	800db04 <_malloc_r>
 800dc60:	4606      	mov	r6, r0
 800dc62:	b360      	cbz	r0, 800dcbe <__ssputs_r+0xa2>
 800dc64:	6921      	ldr	r1, [r4, #16]
 800dc66:	464a      	mov	r2, r9
 800dc68:	f7ff fed1 	bl	800da0e <memcpy>
 800dc6c:	89a3      	ldrh	r3, [r4, #12]
 800dc6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc76:	81a3      	strh	r3, [r4, #12]
 800dc78:	6126      	str	r6, [r4, #16]
 800dc7a:	6165      	str	r5, [r4, #20]
 800dc7c:	444e      	add	r6, r9
 800dc7e:	eba5 0509 	sub.w	r5, r5, r9
 800dc82:	6026      	str	r6, [r4, #0]
 800dc84:	60a5      	str	r5, [r4, #8]
 800dc86:	463e      	mov	r6, r7
 800dc88:	42be      	cmp	r6, r7
 800dc8a:	d900      	bls.n	800dc8e <__ssputs_r+0x72>
 800dc8c:	463e      	mov	r6, r7
 800dc8e:	6820      	ldr	r0, [r4, #0]
 800dc90:	4632      	mov	r2, r6
 800dc92:	4641      	mov	r1, r8
 800dc94:	f000 fd5e 	bl	800e754 <memmove>
 800dc98:	68a3      	ldr	r3, [r4, #8]
 800dc9a:	1b9b      	subs	r3, r3, r6
 800dc9c:	60a3      	str	r3, [r4, #8]
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	4433      	add	r3, r6
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	2000      	movs	r0, #0
 800dca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcaa:	462a      	mov	r2, r5
 800dcac:	f000 fd7c 	bl	800e7a8 <_realloc_r>
 800dcb0:	4606      	mov	r6, r0
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d1e0      	bne.n	800dc78 <__ssputs_r+0x5c>
 800dcb6:	6921      	ldr	r1, [r4, #16]
 800dcb8:	4650      	mov	r0, sl
 800dcba:	f7ff feb7 	bl	800da2c <_free_r>
 800dcbe:	230c      	movs	r3, #12
 800dcc0:	f8ca 3000 	str.w	r3, [sl]
 800dcc4:	89a3      	ldrh	r3, [r4, #12]
 800dcc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcca:	81a3      	strh	r3, [r4, #12]
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd0:	e7e9      	b.n	800dca6 <__ssputs_r+0x8a>
	...

0800dcd4 <_svfiprintf_r>:
 800dcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd8:	4698      	mov	r8, r3
 800dcda:	898b      	ldrh	r3, [r1, #12]
 800dcdc:	061b      	lsls	r3, r3, #24
 800dcde:	b09d      	sub	sp, #116	@ 0x74
 800dce0:	4607      	mov	r7, r0
 800dce2:	460d      	mov	r5, r1
 800dce4:	4614      	mov	r4, r2
 800dce6:	d510      	bpl.n	800dd0a <_svfiprintf_r+0x36>
 800dce8:	690b      	ldr	r3, [r1, #16]
 800dcea:	b973      	cbnz	r3, 800dd0a <_svfiprintf_r+0x36>
 800dcec:	2140      	movs	r1, #64	@ 0x40
 800dcee:	f7ff ff09 	bl	800db04 <_malloc_r>
 800dcf2:	6028      	str	r0, [r5, #0]
 800dcf4:	6128      	str	r0, [r5, #16]
 800dcf6:	b930      	cbnz	r0, 800dd06 <_svfiprintf_r+0x32>
 800dcf8:	230c      	movs	r3, #12
 800dcfa:	603b      	str	r3, [r7, #0]
 800dcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dd00:	b01d      	add	sp, #116	@ 0x74
 800dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd06:	2340      	movs	r3, #64	@ 0x40
 800dd08:	616b      	str	r3, [r5, #20]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd0e:	2320      	movs	r3, #32
 800dd10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd14:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd18:	2330      	movs	r3, #48	@ 0x30
 800dd1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800deb8 <_svfiprintf_r+0x1e4>
 800dd1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd22:	f04f 0901 	mov.w	r9, #1
 800dd26:	4623      	mov	r3, r4
 800dd28:	469a      	mov	sl, r3
 800dd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd2e:	b10a      	cbz	r2, 800dd34 <_svfiprintf_r+0x60>
 800dd30:	2a25      	cmp	r2, #37	@ 0x25
 800dd32:	d1f9      	bne.n	800dd28 <_svfiprintf_r+0x54>
 800dd34:	ebba 0b04 	subs.w	fp, sl, r4
 800dd38:	d00b      	beq.n	800dd52 <_svfiprintf_r+0x7e>
 800dd3a:	465b      	mov	r3, fp
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	4629      	mov	r1, r5
 800dd40:	4638      	mov	r0, r7
 800dd42:	f7ff ff6b 	bl	800dc1c <__ssputs_r>
 800dd46:	3001      	adds	r0, #1
 800dd48:	f000 80a7 	beq.w	800de9a <_svfiprintf_r+0x1c6>
 800dd4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd4e:	445a      	add	r2, fp
 800dd50:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd52:	f89a 3000 	ldrb.w	r3, [sl]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 809f 	beq.w	800de9a <_svfiprintf_r+0x1c6>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd66:	f10a 0a01 	add.w	sl, sl, #1
 800dd6a:	9304      	str	r3, [sp, #16]
 800dd6c:	9307      	str	r3, [sp, #28]
 800dd6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd72:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd74:	4654      	mov	r4, sl
 800dd76:	2205      	movs	r2, #5
 800dd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd7c:	484e      	ldr	r0, [pc, #312]	@ (800deb8 <_svfiprintf_r+0x1e4>)
 800dd7e:	f7f2 fab7 	bl	80002f0 <memchr>
 800dd82:	9a04      	ldr	r2, [sp, #16]
 800dd84:	b9d8      	cbnz	r0, 800ddbe <_svfiprintf_r+0xea>
 800dd86:	06d0      	lsls	r0, r2, #27
 800dd88:	bf44      	itt	mi
 800dd8a:	2320      	movmi	r3, #32
 800dd8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd90:	0711      	lsls	r1, r2, #28
 800dd92:	bf44      	itt	mi
 800dd94:	232b      	movmi	r3, #43	@ 0x2b
 800dd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd9a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dda0:	d015      	beq.n	800ddce <_svfiprintf_r+0xfa>
 800dda2:	9a07      	ldr	r2, [sp, #28]
 800dda4:	4654      	mov	r4, sl
 800dda6:	2000      	movs	r0, #0
 800dda8:	f04f 0c0a 	mov.w	ip, #10
 800ddac:	4621      	mov	r1, r4
 800ddae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddb2:	3b30      	subs	r3, #48	@ 0x30
 800ddb4:	2b09      	cmp	r3, #9
 800ddb6:	d94b      	bls.n	800de50 <_svfiprintf_r+0x17c>
 800ddb8:	b1b0      	cbz	r0, 800dde8 <_svfiprintf_r+0x114>
 800ddba:	9207      	str	r2, [sp, #28]
 800ddbc:	e014      	b.n	800dde8 <_svfiprintf_r+0x114>
 800ddbe:	eba0 0308 	sub.w	r3, r0, r8
 800ddc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	9304      	str	r3, [sp, #16]
 800ddca:	46a2      	mov	sl, r4
 800ddcc:	e7d2      	b.n	800dd74 <_svfiprintf_r+0xa0>
 800ddce:	9b03      	ldr	r3, [sp, #12]
 800ddd0:	1d19      	adds	r1, r3, #4
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	9103      	str	r1, [sp, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	bfbb      	ittet	lt
 800ddda:	425b      	neglt	r3, r3
 800dddc:	f042 0202 	orrlt.w	r2, r2, #2
 800dde0:	9307      	strge	r3, [sp, #28]
 800dde2:	9307      	strlt	r3, [sp, #28]
 800dde4:	bfb8      	it	lt
 800dde6:	9204      	strlt	r2, [sp, #16]
 800dde8:	7823      	ldrb	r3, [r4, #0]
 800ddea:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddec:	d10a      	bne.n	800de04 <_svfiprintf_r+0x130>
 800ddee:	7863      	ldrb	r3, [r4, #1]
 800ddf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddf2:	d132      	bne.n	800de5a <_svfiprintf_r+0x186>
 800ddf4:	9b03      	ldr	r3, [sp, #12]
 800ddf6:	1d1a      	adds	r2, r3, #4
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	9203      	str	r2, [sp, #12]
 800ddfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de00:	3402      	adds	r4, #2
 800de02:	9305      	str	r3, [sp, #20]
 800de04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dec8 <_svfiprintf_r+0x1f4>
 800de08:	7821      	ldrb	r1, [r4, #0]
 800de0a:	2203      	movs	r2, #3
 800de0c:	4650      	mov	r0, sl
 800de0e:	f7f2 fa6f 	bl	80002f0 <memchr>
 800de12:	b138      	cbz	r0, 800de24 <_svfiprintf_r+0x150>
 800de14:	9b04      	ldr	r3, [sp, #16]
 800de16:	eba0 000a 	sub.w	r0, r0, sl
 800de1a:	2240      	movs	r2, #64	@ 0x40
 800de1c:	4082      	lsls	r2, r0
 800de1e:	4313      	orrs	r3, r2
 800de20:	3401      	adds	r4, #1
 800de22:	9304      	str	r3, [sp, #16]
 800de24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de28:	4824      	ldr	r0, [pc, #144]	@ (800debc <_svfiprintf_r+0x1e8>)
 800de2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de2e:	2206      	movs	r2, #6
 800de30:	f7f2 fa5e 	bl	80002f0 <memchr>
 800de34:	2800      	cmp	r0, #0
 800de36:	d036      	beq.n	800dea6 <_svfiprintf_r+0x1d2>
 800de38:	4b21      	ldr	r3, [pc, #132]	@ (800dec0 <_svfiprintf_r+0x1ec>)
 800de3a:	bb1b      	cbnz	r3, 800de84 <_svfiprintf_r+0x1b0>
 800de3c:	9b03      	ldr	r3, [sp, #12]
 800de3e:	3307      	adds	r3, #7
 800de40:	f023 0307 	bic.w	r3, r3, #7
 800de44:	3308      	adds	r3, #8
 800de46:	9303      	str	r3, [sp, #12]
 800de48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de4a:	4433      	add	r3, r6
 800de4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de4e:	e76a      	b.n	800dd26 <_svfiprintf_r+0x52>
 800de50:	fb0c 3202 	mla	r2, ip, r2, r3
 800de54:	460c      	mov	r4, r1
 800de56:	2001      	movs	r0, #1
 800de58:	e7a8      	b.n	800ddac <_svfiprintf_r+0xd8>
 800de5a:	2300      	movs	r3, #0
 800de5c:	3401      	adds	r4, #1
 800de5e:	9305      	str	r3, [sp, #20]
 800de60:	4619      	mov	r1, r3
 800de62:	f04f 0c0a 	mov.w	ip, #10
 800de66:	4620      	mov	r0, r4
 800de68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de6c:	3a30      	subs	r2, #48	@ 0x30
 800de6e:	2a09      	cmp	r2, #9
 800de70:	d903      	bls.n	800de7a <_svfiprintf_r+0x1a6>
 800de72:	2b00      	cmp	r3, #0
 800de74:	d0c6      	beq.n	800de04 <_svfiprintf_r+0x130>
 800de76:	9105      	str	r1, [sp, #20]
 800de78:	e7c4      	b.n	800de04 <_svfiprintf_r+0x130>
 800de7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800de7e:	4604      	mov	r4, r0
 800de80:	2301      	movs	r3, #1
 800de82:	e7f0      	b.n	800de66 <_svfiprintf_r+0x192>
 800de84:	ab03      	add	r3, sp, #12
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	462a      	mov	r2, r5
 800de8a:	4b0e      	ldr	r3, [pc, #56]	@ (800dec4 <_svfiprintf_r+0x1f0>)
 800de8c:	a904      	add	r1, sp, #16
 800de8e:	4638      	mov	r0, r7
 800de90:	f3af 8000 	nop.w
 800de94:	1c42      	adds	r2, r0, #1
 800de96:	4606      	mov	r6, r0
 800de98:	d1d6      	bne.n	800de48 <_svfiprintf_r+0x174>
 800de9a:	89ab      	ldrh	r3, [r5, #12]
 800de9c:	065b      	lsls	r3, r3, #25
 800de9e:	f53f af2d 	bmi.w	800dcfc <_svfiprintf_r+0x28>
 800dea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dea4:	e72c      	b.n	800dd00 <_svfiprintf_r+0x2c>
 800dea6:	ab03      	add	r3, sp, #12
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	462a      	mov	r2, r5
 800deac:	4b05      	ldr	r3, [pc, #20]	@ (800dec4 <_svfiprintf_r+0x1f0>)
 800deae:	a904      	add	r1, sp, #16
 800deb0:	4638      	mov	r0, r7
 800deb2:	f000 f9bb 	bl	800e22c <_printf_i>
 800deb6:	e7ed      	b.n	800de94 <_svfiprintf_r+0x1c0>
 800deb8:	0800f098 	.word	0x0800f098
 800debc:	0800f0a2 	.word	0x0800f0a2
 800dec0:	00000000 	.word	0x00000000
 800dec4:	0800dc1d 	.word	0x0800dc1d
 800dec8:	0800f09e 	.word	0x0800f09e

0800decc <__sfputc_r>:
 800decc:	6893      	ldr	r3, [r2, #8]
 800dece:	3b01      	subs	r3, #1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	b410      	push	{r4}
 800ded4:	6093      	str	r3, [r2, #8]
 800ded6:	da08      	bge.n	800deea <__sfputc_r+0x1e>
 800ded8:	6994      	ldr	r4, [r2, #24]
 800deda:	42a3      	cmp	r3, r4
 800dedc:	db01      	blt.n	800dee2 <__sfputc_r+0x16>
 800dede:	290a      	cmp	r1, #10
 800dee0:	d103      	bne.n	800deea <__sfputc_r+0x1e>
 800dee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dee6:	f000 bba1 	b.w	800e62c <__swbuf_r>
 800deea:	6813      	ldr	r3, [r2, #0]
 800deec:	1c58      	adds	r0, r3, #1
 800deee:	6010      	str	r0, [r2, #0]
 800def0:	7019      	strb	r1, [r3, #0]
 800def2:	4608      	mov	r0, r1
 800def4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800def8:	4770      	bx	lr

0800defa <__sfputs_r>:
 800defa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800defc:	4606      	mov	r6, r0
 800defe:	460f      	mov	r7, r1
 800df00:	4614      	mov	r4, r2
 800df02:	18d5      	adds	r5, r2, r3
 800df04:	42ac      	cmp	r4, r5
 800df06:	d101      	bne.n	800df0c <__sfputs_r+0x12>
 800df08:	2000      	movs	r0, #0
 800df0a:	e007      	b.n	800df1c <__sfputs_r+0x22>
 800df0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df10:	463a      	mov	r2, r7
 800df12:	4630      	mov	r0, r6
 800df14:	f7ff ffda 	bl	800decc <__sfputc_r>
 800df18:	1c43      	adds	r3, r0, #1
 800df1a:	d1f3      	bne.n	800df04 <__sfputs_r+0xa>
 800df1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df20 <_vfiprintf_r>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	460d      	mov	r5, r1
 800df26:	b09d      	sub	sp, #116	@ 0x74
 800df28:	4614      	mov	r4, r2
 800df2a:	4698      	mov	r8, r3
 800df2c:	4606      	mov	r6, r0
 800df2e:	b118      	cbz	r0, 800df38 <_vfiprintf_r+0x18>
 800df30:	6a03      	ldr	r3, [r0, #32]
 800df32:	b90b      	cbnz	r3, 800df38 <_vfiprintf_r+0x18>
 800df34:	f7ff fc3c 	bl	800d7b0 <__sinit>
 800df38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df3a:	07d9      	lsls	r1, r3, #31
 800df3c:	d405      	bmi.n	800df4a <_vfiprintf_r+0x2a>
 800df3e:	89ab      	ldrh	r3, [r5, #12]
 800df40:	059a      	lsls	r2, r3, #22
 800df42:	d402      	bmi.n	800df4a <_vfiprintf_r+0x2a>
 800df44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df46:	f7ff fd60 	bl	800da0a <__retarget_lock_acquire_recursive>
 800df4a:	89ab      	ldrh	r3, [r5, #12]
 800df4c:	071b      	lsls	r3, r3, #28
 800df4e:	d501      	bpl.n	800df54 <_vfiprintf_r+0x34>
 800df50:	692b      	ldr	r3, [r5, #16]
 800df52:	b99b      	cbnz	r3, 800df7c <_vfiprintf_r+0x5c>
 800df54:	4629      	mov	r1, r5
 800df56:	4630      	mov	r0, r6
 800df58:	f000 fba6 	bl	800e6a8 <__swsetup_r>
 800df5c:	b170      	cbz	r0, 800df7c <_vfiprintf_r+0x5c>
 800df5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df60:	07dc      	lsls	r4, r3, #31
 800df62:	d504      	bpl.n	800df6e <_vfiprintf_r+0x4e>
 800df64:	f04f 30ff 	mov.w	r0, #4294967295
 800df68:	b01d      	add	sp, #116	@ 0x74
 800df6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6e:	89ab      	ldrh	r3, [r5, #12]
 800df70:	0598      	lsls	r0, r3, #22
 800df72:	d4f7      	bmi.n	800df64 <_vfiprintf_r+0x44>
 800df74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df76:	f7ff fd49 	bl	800da0c <__retarget_lock_release_recursive>
 800df7a:	e7f3      	b.n	800df64 <_vfiprintf_r+0x44>
 800df7c:	2300      	movs	r3, #0
 800df7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800df80:	2320      	movs	r3, #32
 800df82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df86:	f8cd 800c 	str.w	r8, [sp, #12]
 800df8a:	2330      	movs	r3, #48	@ 0x30
 800df8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e13c <_vfiprintf_r+0x21c>
 800df90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df94:	f04f 0901 	mov.w	r9, #1
 800df98:	4623      	mov	r3, r4
 800df9a:	469a      	mov	sl, r3
 800df9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfa0:	b10a      	cbz	r2, 800dfa6 <_vfiprintf_r+0x86>
 800dfa2:	2a25      	cmp	r2, #37	@ 0x25
 800dfa4:	d1f9      	bne.n	800df9a <_vfiprintf_r+0x7a>
 800dfa6:	ebba 0b04 	subs.w	fp, sl, r4
 800dfaa:	d00b      	beq.n	800dfc4 <_vfiprintf_r+0xa4>
 800dfac:	465b      	mov	r3, fp
 800dfae:	4622      	mov	r2, r4
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f7ff ffa1 	bl	800defa <__sfputs_r>
 800dfb8:	3001      	adds	r0, #1
 800dfba:	f000 80a7 	beq.w	800e10c <_vfiprintf_r+0x1ec>
 800dfbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfc0:	445a      	add	r2, fp
 800dfc2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfc4:	f89a 3000 	ldrb.w	r3, [sl]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f000 809f 	beq.w	800e10c <_vfiprintf_r+0x1ec>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfd8:	f10a 0a01 	add.w	sl, sl, #1
 800dfdc:	9304      	str	r3, [sp, #16]
 800dfde:	9307      	str	r3, [sp, #28]
 800dfe0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfe4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfe6:	4654      	mov	r4, sl
 800dfe8:	2205      	movs	r2, #5
 800dfea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfee:	4853      	ldr	r0, [pc, #332]	@ (800e13c <_vfiprintf_r+0x21c>)
 800dff0:	f7f2 f97e 	bl	80002f0 <memchr>
 800dff4:	9a04      	ldr	r2, [sp, #16]
 800dff6:	b9d8      	cbnz	r0, 800e030 <_vfiprintf_r+0x110>
 800dff8:	06d1      	lsls	r1, r2, #27
 800dffa:	bf44      	itt	mi
 800dffc:	2320      	movmi	r3, #32
 800dffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e002:	0713      	lsls	r3, r2, #28
 800e004:	bf44      	itt	mi
 800e006:	232b      	movmi	r3, #43	@ 0x2b
 800e008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e00c:	f89a 3000 	ldrb.w	r3, [sl]
 800e010:	2b2a      	cmp	r3, #42	@ 0x2a
 800e012:	d015      	beq.n	800e040 <_vfiprintf_r+0x120>
 800e014:	9a07      	ldr	r2, [sp, #28]
 800e016:	4654      	mov	r4, sl
 800e018:	2000      	movs	r0, #0
 800e01a:	f04f 0c0a 	mov.w	ip, #10
 800e01e:	4621      	mov	r1, r4
 800e020:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e024:	3b30      	subs	r3, #48	@ 0x30
 800e026:	2b09      	cmp	r3, #9
 800e028:	d94b      	bls.n	800e0c2 <_vfiprintf_r+0x1a2>
 800e02a:	b1b0      	cbz	r0, 800e05a <_vfiprintf_r+0x13a>
 800e02c:	9207      	str	r2, [sp, #28]
 800e02e:	e014      	b.n	800e05a <_vfiprintf_r+0x13a>
 800e030:	eba0 0308 	sub.w	r3, r0, r8
 800e034:	fa09 f303 	lsl.w	r3, r9, r3
 800e038:	4313      	orrs	r3, r2
 800e03a:	9304      	str	r3, [sp, #16]
 800e03c:	46a2      	mov	sl, r4
 800e03e:	e7d2      	b.n	800dfe6 <_vfiprintf_r+0xc6>
 800e040:	9b03      	ldr	r3, [sp, #12]
 800e042:	1d19      	adds	r1, r3, #4
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	9103      	str	r1, [sp, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	bfbb      	ittet	lt
 800e04c:	425b      	neglt	r3, r3
 800e04e:	f042 0202 	orrlt.w	r2, r2, #2
 800e052:	9307      	strge	r3, [sp, #28]
 800e054:	9307      	strlt	r3, [sp, #28]
 800e056:	bfb8      	it	lt
 800e058:	9204      	strlt	r2, [sp, #16]
 800e05a:	7823      	ldrb	r3, [r4, #0]
 800e05c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e05e:	d10a      	bne.n	800e076 <_vfiprintf_r+0x156>
 800e060:	7863      	ldrb	r3, [r4, #1]
 800e062:	2b2a      	cmp	r3, #42	@ 0x2a
 800e064:	d132      	bne.n	800e0cc <_vfiprintf_r+0x1ac>
 800e066:	9b03      	ldr	r3, [sp, #12]
 800e068:	1d1a      	adds	r2, r3, #4
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	9203      	str	r2, [sp, #12]
 800e06e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e072:	3402      	adds	r4, #2
 800e074:	9305      	str	r3, [sp, #20]
 800e076:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e14c <_vfiprintf_r+0x22c>
 800e07a:	7821      	ldrb	r1, [r4, #0]
 800e07c:	2203      	movs	r2, #3
 800e07e:	4650      	mov	r0, sl
 800e080:	f7f2 f936 	bl	80002f0 <memchr>
 800e084:	b138      	cbz	r0, 800e096 <_vfiprintf_r+0x176>
 800e086:	9b04      	ldr	r3, [sp, #16]
 800e088:	eba0 000a 	sub.w	r0, r0, sl
 800e08c:	2240      	movs	r2, #64	@ 0x40
 800e08e:	4082      	lsls	r2, r0
 800e090:	4313      	orrs	r3, r2
 800e092:	3401      	adds	r4, #1
 800e094:	9304      	str	r3, [sp, #16]
 800e096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e09a:	4829      	ldr	r0, [pc, #164]	@ (800e140 <_vfiprintf_r+0x220>)
 800e09c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0a0:	2206      	movs	r2, #6
 800e0a2:	f7f2 f925 	bl	80002f0 <memchr>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d03f      	beq.n	800e12a <_vfiprintf_r+0x20a>
 800e0aa:	4b26      	ldr	r3, [pc, #152]	@ (800e144 <_vfiprintf_r+0x224>)
 800e0ac:	bb1b      	cbnz	r3, 800e0f6 <_vfiprintf_r+0x1d6>
 800e0ae:	9b03      	ldr	r3, [sp, #12]
 800e0b0:	3307      	adds	r3, #7
 800e0b2:	f023 0307 	bic.w	r3, r3, #7
 800e0b6:	3308      	adds	r3, #8
 800e0b8:	9303      	str	r3, [sp, #12]
 800e0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0bc:	443b      	add	r3, r7
 800e0be:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0c0:	e76a      	b.n	800df98 <_vfiprintf_r+0x78>
 800e0c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	2001      	movs	r0, #1
 800e0ca:	e7a8      	b.n	800e01e <_vfiprintf_r+0xfe>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	3401      	adds	r4, #1
 800e0d0:	9305      	str	r3, [sp, #20]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	f04f 0c0a 	mov.w	ip, #10
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0de:	3a30      	subs	r2, #48	@ 0x30
 800e0e0:	2a09      	cmp	r2, #9
 800e0e2:	d903      	bls.n	800e0ec <_vfiprintf_r+0x1cc>
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d0c6      	beq.n	800e076 <_vfiprintf_r+0x156>
 800e0e8:	9105      	str	r1, [sp, #20]
 800e0ea:	e7c4      	b.n	800e076 <_vfiprintf_r+0x156>
 800e0ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e7f0      	b.n	800e0d8 <_vfiprintf_r+0x1b8>
 800e0f6:	ab03      	add	r3, sp, #12
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	462a      	mov	r2, r5
 800e0fc:	4b12      	ldr	r3, [pc, #72]	@ (800e148 <_vfiprintf_r+0x228>)
 800e0fe:	a904      	add	r1, sp, #16
 800e100:	4630      	mov	r0, r6
 800e102:	f3af 8000 	nop.w
 800e106:	4607      	mov	r7, r0
 800e108:	1c78      	adds	r0, r7, #1
 800e10a:	d1d6      	bne.n	800e0ba <_vfiprintf_r+0x19a>
 800e10c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e10e:	07d9      	lsls	r1, r3, #31
 800e110:	d405      	bmi.n	800e11e <_vfiprintf_r+0x1fe>
 800e112:	89ab      	ldrh	r3, [r5, #12]
 800e114:	059a      	lsls	r2, r3, #22
 800e116:	d402      	bmi.n	800e11e <_vfiprintf_r+0x1fe>
 800e118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e11a:	f7ff fc77 	bl	800da0c <__retarget_lock_release_recursive>
 800e11e:	89ab      	ldrh	r3, [r5, #12]
 800e120:	065b      	lsls	r3, r3, #25
 800e122:	f53f af1f 	bmi.w	800df64 <_vfiprintf_r+0x44>
 800e126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e128:	e71e      	b.n	800df68 <_vfiprintf_r+0x48>
 800e12a:	ab03      	add	r3, sp, #12
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	462a      	mov	r2, r5
 800e130:	4b05      	ldr	r3, [pc, #20]	@ (800e148 <_vfiprintf_r+0x228>)
 800e132:	a904      	add	r1, sp, #16
 800e134:	4630      	mov	r0, r6
 800e136:	f000 f879 	bl	800e22c <_printf_i>
 800e13a:	e7e4      	b.n	800e106 <_vfiprintf_r+0x1e6>
 800e13c:	0800f098 	.word	0x0800f098
 800e140:	0800f0a2 	.word	0x0800f0a2
 800e144:	00000000 	.word	0x00000000
 800e148:	0800defb 	.word	0x0800defb
 800e14c:	0800f09e 	.word	0x0800f09e

0800e150 <_printf_common>:
 800e150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e154:	4616      	mov	r6, r2
 800e156:	4698      	mov	r8, r3
 800e158:	688a      	ldr	r2, [r1, #8]
 800e15a:	690b      	ldr	r3, [r1, #16]
 800e15c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e160:	4293      	cmp	r3, r2
 800e162:	bfb8      	it	lt
 800e164:	4613      	movlt	r3, r2
 800e166:	6033      	str	r3, [r6, #0]
 800e168:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e16c:	4607      	mov	r7, r0
 800e16e:	460c      	mov	r4, r1
 800e170:	b10a      	cbz	r2, 800e176 <_printf_common+0x26>
 800e172:	3301      	adds	r3, #1
 800e174:	6033      	str	r3, [r6, #0]
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	0699      	lsls	r1, r3, #26
 800e17a:	bf42      	ittt	mi
 800e17c:	6833      	ldrmi	r3, [r6, #0]
 800e17e:	3302      	addmi	r3, #2
 800e180:	6033      	strmi	r3, [r6, #0]
 800e182:	6825      	ldr	r5, [r4, #0]
 800e184:	f015 0506 	ands.w	r5, r5, #6
 800e188:	d106      	bne.n	800e198 <_printf_common+0x48>
 800e18a:	f104 0a19 	add.w	sl, r4, #25
 800e18e:	68e3      	ldr	r3, [r4, #12]
 800e190:	6832      	ldr	r2, [r6, #0]
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	42ab      	cmp	r3, r5
 800e196:	dc26      	bgt.n	800e1e6 <_printf_common+0x96>
 800e198:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e19c:	6822      	ldr	r2, [r4, #0]
 800e19e:	3b00      	subs	r3, #0
 800e1a0:	bf18      	it	ne
 800e1a2:	2301      	movne	r3, #1
 800e1a4:	0692      	lsls	r2, r2, #26
 800e1a6:	d42b      	bmi.n	800e200 <_printf_common+0xb0>
 800e1a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1ac:	4641      	mov	r1, r8
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	47c8      	blx	r9
 800e1b2:	3001      	adds	r0, #1
 800e1b4:	d01e      	beq.n	800e1f4 <_printf_common+0xa4>
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	6922      	ldr	r2, [r4, #16]
 800e1ba:	f003 0306 	and.w	r3, r3, #6
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	bf02      	ittt	eq
 800e1c2:	68e5      	ldreq	r5, [r4, #12]
 800e1c4:	6833      	ldreq	r3, [r6, #0]
 800e1c6:	1aed      	subeq	r5, r5, r3
 800e1c8:	68a3      	ldr	r3, [r4, #8]
 800e1ca:	bf0c      	ite	eq
 800e1cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1d0:	2500      	movne	r5, #0
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	bfc4      	itt	gt
 800e1d6:	1a9b      	subgt	r3, r3, r2
 800e1d8:	18ed      	addgt	r5, r5, r3
 800e1da:	2600      	movs	r6, #0
 800e1dc:	341a      	adds	r4, #26
 800e1de:	42b5      	cmp	r5, r6
 800e1e0:	d11a      	bne.n	800e218 <_printf_common+0xc8>
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	e008      	b.n	800e1f8 <_printf_common+0xa8>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	4652      	mov	r2, sl
 800e1ea:	4641      	mov	r1, r8
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	47c8      	blx	r9
 800e1f0:	3001      	adds	r0, #1
 800e1f2:	d103      	bne.n	800e1fc <_printf_common+0xac>
 800e1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fc:	3501      	adds	r5, #1
 800e1fe:	e7c6      	b.n	800e18e <_printf_common+0x3e>
 800e200:	18e1      	adds	r1, r4, r3
 800e202:	1c5a      	adds	r2, r3, #1
 800e204:	2030      	movs	r0, #48	@ 0x30
 800e206:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e20a:	4422      	add	r2, r4
 800e20c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e210:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e214:	3302      	adds	r3, #2
 800e216:	e7c7      	b.n	800e1a8 <_printf_common+0x58>
 800e218:	2301      	movs	r3, #1
 800e21a:	4622      	mov	r2, r4
 800e21c:	4641      	mov	r1, r8
 800e21e:	4638      	mov	r0, r7
 800e220:	47c8      	blx	r9
 800e222:	3001      	adds	r0, #1
 800e224:	d0e6      	beq.n	800e1f4 <_printf_common+0xa4>
 800e226:	3601      	adds	r6, #1
 800e228:	e7d9      	b.n	800e1de <_printf_common+0x8e>
	...

0800e22c <_printf_i>:
 800e22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	7e0f      	ldrb	r7, [r1, #24]
 800e232:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e234:	2f78      	cmp	r7, #120	@ 0x78
 800e236:	4691      	mov	r9, r2
 800e238:	4680      	mov	r8, r0
 800e23a:	460c      	mov	r4, r1
 800e23c:	469a      	mov	sl, r3
 800e23e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e242:	d807      	bhi.n	800e254 <_printf_i+0x28>
 800e244:	2f62      	cmp	r7, #98	@ 0x62
 800e246:	d80a      	bhi.n	800e25e <_printf_i+0x32>
 800e248:	2f00      	cmp	r7, #0
 800e24a:	f000 80d2 	beq.w	800e3f2 <_printf_i+0x1c6>
 800e24e:	2f58      	cmp	r7, #88	@ 0x58
 800e250:	f000 80b9 	beq.w	800e3c6 <_printf_i+0x19a>
 800e254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e258:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e25c:	e03a      	b.n	800e2d4 <_printf_i+0xa8>
 800e25e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e262:	2b15      	cmp	r3, #21
 800e264:	d8f6      	bhi.n	800e254 <_printf_i+0x28>
 800e266:	a101      	add	r1, pc, #4	@ (adr r1, 800e26c <_printf_i+0x40>)
 800e268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e26c:	0800e2c5 	.word	0x0800e2c5
 800e270:	0800e2d9 	.word	0x0800e2d9
 800e274:	0800e255 	.word	0x0800e255
 800e278:	0800e255 	.word	0x0800e255
 800e27c:	0800e255 	.word	0x0800e255
 800e280:	0800e255 	.word	0x0800e255
 800e284:	0800e2d9 	.word	0x0800e2d9
 800e288:	0800e255 	.word	0x0800e255
 800e28c:	0800e255 	.word	0x0800e255
 800e290:	0800e255 	.word	0x0800e255
 800e294:	0800e255 	.word	0x0800e255
 800e298:	0800e3d9 	.word	0x0800e3d9
 800e29c:	0800e303 	.word	0x0800e303
 800e2a0:	0800e393 	.word	0x0800e393
 800e2a4:	0800e255 	.word	0x0800e255
 800e2a8:	0800e255 	.word	0x0800e255
 800e2ac:	0800e3fb 	.word	0x0800e3fb
 800e2b0:	0800e255 	.word	0x0800e255
 800e2b4:	0800e303 	.word	0x0800e303
 800e2b8:	0800e255 	.word	0x0800e255
 800e2bc:	0800e255 	.word	0x0800e255
 800e2c0:	0800e39b 	.word	0x0800e39b
 800e2c4:	6833      	ldr	r3, [r6, #0]
 800e2c6:	1d1a      	adds	r2, r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	6032      	str	r2, [r6, #0]
 800e2cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e09d      	b.n	800e414 <_printf_i+0x1e8>
 800e2d8:	6833      	ldr	r3, [r6, #0]
 800e2da:	6820      	ldr	r0, [r4, #0]
 800e2dc:	1d19      	adds	r1, r3, #4
 800e2de:	6031      	str	r1, [r6, #0]
 800e2e0:	0606      	lsls	r6, r0, #24
 800e2e2:	d501      	bpl.n	800e2e8 <_printf_i+0xbc>
 800e2e4:	681d      	ldr	r5, [r3, #0]
 800e2e6:	e003      	b.n	800e2f0 <_printf_i+0xc4>
 800e2e8:	0645      	lsls	r5, r0, #25
 800e2ea:	d5fb      	bpl.n	800e2e4 <_printf_i+0xb8>
 800e2ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e2f0:	2d00      	cmp	r5, #0
 800e2f2:	da03      	bge.n	800e2fc <_printf_i+0xd0>
 800e2f4:	232d      	movs	r3, #45	@ 0x2d
 800e2f6:	426d      	negs	r5, r5
 800e2f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2fc:	4859      	ldr	r0, [pc, #356]	@ (800e464 <_printf_i+0x238>)
 800e2fe:	230a      	movs	r3, #10
 800e300:	e011      	b.n	800e326 <_printf_i+0xfa>
 800e302:	6821      	ldr	r1, [r4, #0]
 800e304:	6833      	ldr	r3, [r6, #0]
 800e306:	0608      	lsls	r0, r1, #24
 800e308:	f853 5b04 	ldr.w	r5, [r3], #4
 800e30c:	d402      	bmi.n	800e314 <_printf_i+0xe8>
 800e30e:	0649      	lsls	r1, r1, #25
 800e310:	bf48      	it	mi
 800e312:	b2ad      	uxthmi	r5, r5
 800e314:	2f6f      	cmp	r7, #111	@ 0x6f
 800e316:	4853      	ldr	r0, [pc, #332]	@ (800e464 <_printf_i+0x238>)
 800e318:	6033      	str	r3, [r6, #0]
 800e31a:	bf14      	ite	ne
 800e31c:	230a      	movne	r3, #10
 800e31e:	2308      	moveq	r3, #8
 800e320:	2100      	movs	r1, #0
 800e322:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e326:	6866      	ldr	r6, [r4, #4]
 800e328:	60a6      	str	r6, [r4, #8]
 800e32a:	2e00      	cmp	r6, #0
 800e32c:	bfa2      	ittt	ge
 800e32e:	6821      	ldrge	r1, [r4, #0]
 800e330:	f021 0104 	bicge.w	r1, r1, #4
 800e334:	6021      	strge	r1, [r4, #0]
 800e336:	b90d      	cbnz	r5, 800e33c <_printf_i+0x110>
 800e338:	2e00      	cmp	r6, #0
 800e33a:	d04b      	beq.n	800e3d4 <_printf_i+0x1a8>
 800e33c:	4616      	mov	r6, r2
 800e33e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e342:	fb03 5711 	mls	r7, r3, r1, r5
 800e346:	5dc7      	ldrb	r7, [r0, r7]
 800e348:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e34c:	462f      	mov	r7, r5
 800e34e:	42bb      	cmp	r3, r7
 800e350:	460d      	mov	r5, r1
 800e352:	d9f4      	bls.n	800e33e <_printf_i+0x112>
 800e354:	2b08      	cmp	r3, #8
 800e356:	d10b      	bne.n	800e370 <_printf_i+0x144>
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	07df      	lsls	r7, r3, #31
 800e35c:	d508      	bpl.n	800e370 <_printf_i+0x144>
 800e35e:	6923      	ldr	r3, [r4, #16]
 800e360:	6861      	ldr	r1, [r4, #4]
 800e362:	4299      	cmp	r1, r3
 800e364:	bfde      	ittt	le
 800e366:	2330      	movle	r3, #48	@ 0x30
 800e368:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e36c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e370:	1b92      	subs	r2, r2, r6
 800e372:	6122      	str	r2, [r4, #16]
 800e374:	f8cd a000 	str.w	sl, [sp]
 800e378:	464b      	mov	r3, r9
 800e37a:	aa03      	add	r2, sp, #12
 800e37c:	4621      	mov	r1, r4
 800e37e:	4640      	mov	r0, r8
 800e380:	f7ff fee6 	bl	800e150 <_printf_common>
 800e384:	3001      	adds	r0, #1
 800e386:	d14a      	bne.n	800e41e <_printf_i+0x1f2>
 800e388:	f04f 30ff 	mov.w	r0, #4294967295
 800e38c:	b004      	add	sp, #16
 800e38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	f043 0320 	orr.w	r3, r3, #32
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	4833      	ldr	r0, [pc, #204]	@ (800e468 <_printf_i+0x23c>)
 800e39c:	2778      	movs	r7, #120	@ 0x78
 800e39e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	6831      	ldr	r1, [r6, #0]
 800e3a6:	061f      	lsls	r7, r3, #24
 800e3a8:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3ac:	d402      	bmi.n	800e3b4 <_printf_i+0x188>
 800e3ae:	065f      	lsls	r7, r3, #25
 800e3b0:	bf48      	it	mi
 800e3b2:	b2ad      	uxthmi	r5, r5
 800e3b4:	6031      	str	r1, [r6, #0]
 800e3b6:	07d9      	lsls	r1, r3, #31
 800e3b8:	bf44      	itt	mi
 800e3ba:	f043 0320 	orrmi.w	r3, r3, #32
 800e3be:	6023      	strmi	r3, [r4, #0]
 800e3c0:	b11d      	cbz	r5, 800e3ca <_printf_i+0x19e>
 800e3c2:	2310      	movs	r3, #16
 800e3c4:	e7ac      	b.n	800e320 <_printf_i+0xf4>
 800e3c6:	4827      	ldr	r0, [pc, #156]	@ (800e464 <_printf_i+0x238>)
 800e3c8:	e7e9      	b.n	800e39e <_printf_i+0x172>
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	f023 0320 	bic.w	r3, r3, #32
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	e7f6      	b.n	800e3c2 <_printf_i+0x196>
 800e3d4:	4616      	mov	r6, r2
 800e3d6:	e7bd      	b.n	800e354 <_printf_i+0x128>
 800e3d8:	6833      	ldr	r3, [r6, #0]
 800e3da:	6825      	ldr	r5, [r4, #0]
 800e3dc:	6961      	ldr	r1, [r4, #20]
 800e3de:	1d18      	adds	r0, r3, #4
 800e3e0:	6030      	str	r0, [r6, #0]
 800e3e2:	062e      	lsls	r6, r5, #24
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	d501      	bpl.n	800e3ec <_printf_i+0x1c0>
 800e3e8:	6019      	str	r1, [r3, #0]
 800e3ea:	e002      	b.n	800e3f2 <_printf_i+0x1c6>
 800e3ec:	0668      	lsls	r0, r5, #25
 800e3ee:	d5fb      	bpl.n	800e3e8 <_printf_i+0x1bc>
 800e3f0:	8019      	strh	r1, [r3, #0]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	6123      	str	r3, [r4, #16]
 800e3f6:	4616      	mov	r6, r2
 800e3f8:	e7bc      	b.n	800e374 <_printf_i+0x148>
 800e3fa:	6833      	ldr	r3, [r6, #0]
 800e3fc:	1d1a      	adds	r2, r3, #4
 800e3fe:	6032      	str	r2, [r6, #0]
 800e400:	681e      	ldr	r6, [r3, #0]
 800e402:	6862      	ldr	r2, [r4, #4]
 800e404:	2100      	movs	r1, #0
 800e406:	4630      	mov	r0, r6
 800e408:	f7f1 ff72 	bl	80002f0 <memchr>
 800e40c:	b108      	cbz	r0, 800e412 <_printf_i+0x1e6>
 800e40e:	1b80      	subs	r0, r0, r6
 800e410:	6060      	str	r0, [r4, #4]
 800e412:	6863      	ldr	r3, [r4, #4]
 800e414:	6123      	str	r3, [r4, #16]
 800e416:	2300      	movs	r3, #0
 800e418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e41c:	e7aa      	b.n	800e374 <_printf_i+0x148>
 800e41e:	6923      	ldr	r3, [r4, #16]
 800e420:	4632      	mov	r2, r6
 800e422:	4649      	mov	r1, r9
 800e424:	4640      	mov	r0, r8
 800e426:	47d0      	blx	sl
 800e428:	3001      	adds	r0, #1
 800e42a:	d0ad      	beq.n	800e388 <_printf_i+0x15c>
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	079b      	lsls	r3, r3, #30
 800e430:	d413      	bmi.n	800e45a <_printf_i+0x22e>
 800e432:	68e0      	ldr	r0, [r4, #12]
 800e434:	9b03      	ldr	r3, [sp, #12]
 800e436:	4298      	cmp	r0, r3
 800e438:	bfb8      	it	lt
 800e43a:	4618      	movlt	r0, r3
 800e43c:	e7a6      	b.n	800e38c <_printf_i+0x160>
 800e43e:	2301      	movs	r3, #1
 800e440:	4632      	mov	r2, r6
 800e442:	4649      	mov	r1, r9
 800e444:	4640      	mov	r0, r8
 800e446:	47d0      	blx	sl
 800e448:	3001      	adds	r0, #1
 800e44a:	d09d      	beq.n	800e388 <_printf_i+0x15c>
 800e44c:	3501      	adds	r5, #1
 800e44e:	68e3      	ldr	r3, [r4, #12]
 800e450:	9903      	ldr	r1, [sp, #12]
 800e452:	1a5b      	subs	r3, r3, r1
 800e454:	42ab      	cmp	r3, r5
 800e456:	dcf2      	bgt.n	800e43e <_printf_i+0x212>
 800e458:	e7eb      	b.n	800e432 <_printf_i+0x206>
 800e45a:	2500      	movs	r5, #0
 800e45c:	f104 0619 	add.w	r6, r4, #25
 800e460:	e7f5      	b.n	800e44e <_printf_i+0x222>
 800e462:	bf00      	nop
 800e464:	0800f0a9 	.word	0x0800f0a9
 800e468:	0800f0ba 	.word	0x0800f0ba

0800e46c <__sflush_r>:
 800e46c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e474:	0716      	lsls	r6, r2, #28
 800e476:	4605      	mov	r5, r0
 800e478:	460c      	mov	r4, r1
 800e47a:	d454      	bmi.n	800e526 <__sflush_r+0xba>
 800e47c:	684b      	ldr	r3, [r1, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	dc02      	bgt.n	800e488 <__sflush_r+0x1c>
 800e482:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e484:	2b00      	cmp	r3, #0
 800e486:	dd48      	ble.n	800e51a <__sflush_r+0xae>
 800e488:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e48a:	2e00      	cmp	r6, #0
 800e48c:	d045      	beq.n	800e51a <__sflush_r+0xae>
 800e48e:	2300      	movs	r3, #0
 800e490:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e494:	682f      	ldr	r7, [r5, #0]
 800e496:	6a21      	ldr	r1, [r4, #32]
 800e498:	602b      	str	r3, [r5, #0]
 800e49a:	d030      	beq.n	800e4fe <__sflush_r+0x92>
 800e49c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	0759      	lsls	r1, r3, #29
 800e4a2:	d505      	bpl.n	800e4b0 <__sflush_r+0x44>
 800e4a4:	6863      	ldr	r3, [r4, #4]
 800e4a6:	1ad2      	subs	r2, r2, r3
 800e4a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e4aa:	b10b      	cbz	r3, 800e4b0 <__sflush_r+0x44>
 800e4ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e4ae:	1ad2      	subs	r2, r2, r3
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4b4:	6a21      	ldr	r1, [r4, #32]
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	47b0      	blx	r6
 800e4ba:	1c43      	adds	r3, r0, #1
 800e4bc:	89a3      	ldrh	r3, [r4, #12]
 800e4be:	d106      	bne.n	800e4ce <__sflush_r+0x62>
 800e4c0:	6829      	ldr	r1, [r5, #0]
 800e4c2:	291d      	cmp	r1, #29
 800e4c4:	d82b      	bhi.n	800e51e <__sflush_r+0xb2>
 800e4c6:	4a2a      	ldr	r2, [pc, #168]	@ (800e570 <__sflush_r+0x104>)
 800e4c8:	410a      	asrs	r2, r1
 800e4ca:	07d6      	lsls	r6, r2, #31
 800e4cc:	d427      	bmi.n	800e51e <__sflush_r+0xb2>
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	6062      	str	r2, [r4, #4]
 800e4d2:	04d9      	lsls	r1, r3, #19
 800e4d4:	6922      	ldr	r2, [r4, #16]
 800e4d6:	6022      	str	r2, [r4, #0]
 800e4d8:	d504      	bpl.n	800e4e4 <__sflush_r+0x78>
 800e4da:	1c42      	adds	r2, r0, #1
 800e4dc:	d101      	bne.n	800e4e2 <__sflush_r+0x76>
 800e4de:	682b      	ldr	r3, [r5, #0]
 800e4e0:	b903      	cbnz	r3, 800e4e4 <__sflush_r+0x78>
 800e4e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4e6:	602f      	str	r7, [r5, #0]
 800e4e8:	b1b9      	cbz	r1, 800e51a <__sflush_r+0xae>
 800e4ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4ee:	4299      	cmp	r1, r3
 800e4f0:	d002      	beq.n	800e4f8 <__sflush_r+0x8c>
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f7ff fa9a 	bl	800da2c <_free_r>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4fc:	e00d      	b.n	800e51a <__sflush_r+0xae>
 800e4fe:	2301      	movs	r3, #1
 800e500:	4628      	mov	r0, r5
 800e502:	47b0      	blx	r6
 800e504:	4602      	mov	r2, r0
 800e506:	1c50      	adds	r0, r2, #1
 800e508:	d1c9      	bne.n	800e49e <__sflush_r+0x32>
 800e50a:	682b      	ldr	r3, [r5, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d0c6      	beq.n	800e49e <__sflush_r+0x32>
 800e510:	2b1d      	cmp	r3, #29
 800e512:	d001      	beq.n	800e518 <__sflush_r+0xac>
 800e514:	2b16      	cmp	r3, #22
 800e516:	d11e      	bne.n	800e556 <__sflush_r+0xea>
 800e518:	602f      	str	r7, [r5, #0]
 800e51a:	2000      	movs	r0, #0
 800e51c:	e022      	b.n	800e564 <__sflush_r+0xf8>
 800e51e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e522:	b21b      	sxth	r3, r3
 800e524:	e01b      	b.n	800e55e <__sflush_r+0xf2>
 800e526:	690f      	ldr	r7, [r1, #16]
 800e528:	2f00      	cmp	r7, #0
 800e52a:	d0f6      	beq.n	800e51a <__sflush_r+0xae>
 800e52c:	0793      	lsls	r3, r2, #30
 800e52e:	680e      	ldr	r6, [r1, #0]
 800e530:	bf08      	it	eq
 800e532:	694b      	ldreq	r3, [r1, #20]
 800e534:	600f      	str	r7, [r1, #0]
 800e536:	bf18      	it	ne
 800e538:	2300      	movne	r3, #0
 800e53a:	eba6 0807 	sub.w	r8, r6, r7
 800e53e:	608b      	str	r3, [r1, #8]
 800e540:	f1b8 0f00 	cmp.w	r8, #0
 800e544:	dde9      	ble.n	800e51a <__sflush_r+0xae>
 800e546:	6a21      	ldr	r1, [r4, #32]
 800e548:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e54a:	4643      	mov	r3, r8
 800e54c:	463a      	mov	r2, r7
 800e54e:	4628      	mov	r0, r5
 800e550:	47b0      	blx	r6
 800e552:	2800      	cmp	r0, #0
 800e554:	dc08      	bgt.n	800e568 <__sflush_r+0xfc>
 800e556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e55e:	81a3      	strh	r3, [r4, #12]
 800e560:	f04f 30ff 	mov.w	r0, #4294967295
 800e564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e568:	4407      	add	r7, r0
 800e56a:	eba8 0800 	sub.w	r8, r8, r0
 800e56e:	e7e7      	b.n	800e540 <__sflush_r+0xd4>
 800e570:	dfbffffe 	.word	0xdfbffffe

0800e574 <_fflush_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	690b      	ldr	r3, [r1, #16]
 800e578:	4605      	mov	r5, r0
 800e57a:	460c      	mov	r4, r1
 800e57c:	b913      	cbnz	r3, 800e584 <_fflush_r+0x10>
 800e57e:	2500      	movs	r5, #0
 800e580:	4628      	mov	r0, r5
 800e582:	bd38      	pop	{r3, r4, r5, pc}
 800e584:	b118      	cbz	r0, 800e58e <_fflush_r+0x1a>
 800e586:	6a03      	ldr	r3, [r0, #32]
 800e588:	b90b      	cbnz	r3, 800e58e <_fflush_r+0x1a>
 800e58a:	f7ff f911 	bl	800d7b0 <__sinit>
 800e58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d0f3      	beq.n	800e57e <_fflush_r+0xa>
 800e596:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e598:	07d0      	lsls	r0, r2, #31
 800e59a:	d404      	bmi.n	800e5a6 <_fflush_r+0x32>
 800e59c:	0599      	lsls	r1, r3, #22
 800e59e:	d402      	bmi.n	800e5a6 <_fflush_r+0x32>
 800e5a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5a2:	f7ff fa32 	bl	800da0a <__retarget_lock_acquire_recursive>
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	4621      	mov	r1, r4
 800e5aa:	f7ff ff5f 	bl	800e46c <__sflush_r>
 800e5ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5b0:	07da      	lsls	r2, r3, #31
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	d4e4      	bmi.n	800e580 <_fflush_r+0xc>
 800e5b6:	89a3      	ldrh	r3, [r4, #12]
 800e5b8:	059b      	lsls	r3, r3, #22
 800e5ba:	d4e1      	bmi.n	800e580 <_fflush_r+0xc>
 800e5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5be:	f7ff fa25 	bl	800da0c <__retarget_lock_release_recursive>
 800e5c2:	e7dd      	b.n	800e580 <_fflush_r+0xc>

0800e5c4 <_putc_r>:
 800e5c4:	b570      	push	{r4, r5, r6, lr}
 800e5c6:	460d      	mov	r5, r1
 800e5c8:	4614      	mov	r4, r2
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	b118      	cbz	r0, 800e5d6 <_putc_r+0x12>
 800e5ce:	6a03      	ldr	r3, [r0, #32]
 800e5d0:	b90b      	cbnz	r3, 800e5d6 <_putc_r+0x12>
 800e5d2:	f7ff f8ed 	bl	800d7b0 <__sinit>
 800e5d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5d8:	07d8      	lsls	r0, r3, #31
 800e5da:	d405      	bmi.n	800e5e8 <_putc_r+0x24>
 800e5dc:	89a3      	ldrh	r3, [r4, #12]
 800e5de:	0599      	lsls	r1, r3, #22
 800e5e0:	d402      	bmi.n	800e5e8 <_putc_r+0x24>
 800e5e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5e4:	f7ff fa11 	bl	800da0a <__retarget_lock_acquire_recursive>
 800e5e8:	68a3      	ldr	r3, [r4, #8]
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	60a3      	str	r3, [r4, #8]
 800e5f0:	da05      	bge.n	800e5fe <_putc_r+0x3a>
 800e5f2:	69a2      	ldr	r2, [r4, #24]
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	db12      	blt.n	800e61e <_putc_r+0x5a>
 800e5f8:	b2eb      	uxtb	r3, r5
 800e5fa:	2b0a      	cmp	r3, #10
 800e5fc:	d00f      	beq.n	800e61e <_putc_r+0x5a>
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	1c5a      	adds	r2, r3, #1
 800e602:	6022      	str	r2, [r4, #0]
 800e604:	701d      	strb	r5, [r3, #0]
 800e606:	b2ed      	uxtb	r5, r5
 800e608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e60a:	07da      	lsls	r2, r3, #31
 800e60c:	d405      	bmi.n	800e61a <_putc_r+0x56>
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	059b      	lsls	r3, r3, #22
 800e612:	d402      	bmi.n	800e61a <_putc_r+0x56>
 800e614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e616:	f7ff f9f9 	bl	800da0c <__retarget_lock_release_recursive>
 800e61a:	4628      	mov	r0, r5
 800e61c:	bd70      	pop	{r4, r5, r6, pc}
 800e61e:	4629      	mov	r1, r5
 800e620:	4622      	mov	r2, r4
 800e622:	4630      	mov	r0, r6
 800e624:	f000 f802 	bl	800e62c <__swbuf_r>
 800e628:	4605      	mov	r5, r0
 800e62a:	e7ed      	b.n	800e608 <_putc_r+0x44>

0800e62c <__swbuf_r>:
 800e62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62e:	460e      	mov	r6, r1
 800e630:	4614      	mov	r4, r2
 800e632:	4605      	mov	r5, r0
 800e634:	b118      	cbz	r0, 800e63e <__swbuf_r+0x12>
 800e636:	6a03      	ldr	r3, [r0, #32]
 800e638:	b90b      	cbnz	r3, 800e63e <__swbuf_r+0x12>
 800e63a:	f7ff f8b9 	bl	800d7b0 <__sinit>
 800e63e:	69a3      	ldr	r3, [r4, #24]
 800e640:	60a3      	str	r3, [r4, #8]
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	071a      	lsls	r2, r3, #28
 800e646:	d501      	bpl.n	800e64c <__swbuf_r+0x20>
 800e648:	6923      	ldr	r3, [r4, #16]
 800e64a:	b943      	cbnz	r3, 800e65e <__swbuf_r+0x32>
 800e64c:	4621      	mov	r1, r4
 800e64e:	4628      	mov	r0, r5
 800e650:	f000 f82a 	bl	800e6a8 <__swsetup_r>
 800e654:	b118      	cbz	r0, 800e65e <__swbuf_r+0x32>
 800e656:	f04f 37ff 	mov.w	r7, #4294967295
 800e65a:	4638      	mov	r0, r7
 800e65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	6922      	ldr	r2, [r4, #16]
 800e662:	1a98      	subs	r0, r3, r2
 800e664:	6963      	ldr	r3, [r4, #20]
 800e666:	b2f6      	uxtb	r6, r6
 800e668:	4283      	cmp	r3, r0
 800e66a:	4637      	mov	r7, r6
 800e66c:	dc05      	bgt.n	800e67a <__swbuf_r+0x4e>
 800e66e:	4621      	mov	r1, r4
 800e670:	4628      	mov	r0, r5
 800e672:	f7ff ff7f 	bl	800e574 <_fflush_r>
 800e676:	2800      	cmp	r0, #0
 800e678:	d1ed      	bne.n	800e656 <__swbuf_r+0x2a>
 800e67a:	68a3      	ldr	r3, [r4, #8]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	60a3      	str	r3, [r4, #8]
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	6022      	str	r2, [r4, #0]
 800e686:	701e      	strb	r6, [r3, #0]
 800e688:	6962      	ldr	r2, [r4, #20]
 800e68a:	1c43      	adds	r3, r0, #1
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d004      	beq.n	800e69a <__swbuf_r+0x6e>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	07db      	lsls	r3, r3, #31
 800e694:	d5e1      	bpl.n	800e65a <__swbuf_r+0x2e>
 800e696:	2e0a      	cmp	r6, #10
 800e698:	d1df      	bne.n	800e65a <__swbuf_r+0x2e>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4628      	mov	r0, r5
 800e69e:	f7ff ff69 	bl	800e574 <_fflush_r>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d0d9      	beq.n	800e65a <__swbuf_r+0x2e>
 800e6a6:	e7d6      	b.n	800e656 <__swbuf_r+0x2a>

0800e6a8 <__swsetup_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4b29      	ldr	r3, [pc, #164]	@ (800e750 <__swsetup_r+0xa8>)
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	6818      	ldr	r0, [r3, #0]
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	b118      	cbz	r0, 800e6bc <__swsetup_r+0x14>
 800e6b4:	6a03      	ldr	r3, [r0, #32]
 800e6b6:	b90b      	cbnz	r3, 800e6bc <__swsetup_r+0x14>
 800e6b8:	f7ff f87a 	bl	800d7b0 <__sinit>
 800e6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c0:	0719      	lsls	r1, r3, #28
 800e6c2:	d422      	bmi.n	800e70a <__swsetup_r+0x62>
 800e6c4:	06da      	lsls	r2, r3, #27
 800e6c6:	d407      	bmi.n	800e6d8 <__swsetup_r+0x30>
 800e6c8:	2209      	movs	r2, #9
 800e6ca:	602a      	str	r2, [r5, #0]
 800e6cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d6:	e033      	b.n	800e740 <__swsetup_r+0x98>
 800e6d8:	0758      	lsls	r0, r3, #29
 800e6da:	d512      	bpl.n	800e702 <__swsetup_r+0x5a>
 800e6dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6de:	b141      	cbz	r1, 800e6f2 <__swsetup_r+0x4a>
 800e6e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6e4:	4299      	cmp	r1, r3
 800e6e6:	d002      	beq.n	800e6ee <__swsetup_r+0x46>
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f7ff f99f 	bl	800da2c <_free_r>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6f2:	89a3      	ldrh	r3, [r4, #12]
 800e6f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6f8:	81a3      	strh	r3, [r4, #12]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	6063      	str	r3, [r4, #4]
 800e6fe:	6923      	ldr	r3, [r4, #16]
 800e700:	6023      	str	r3, [r4, #0]
 800e702:	89a3      	ldrh	r3, [r4, #12]
 800e704:	f043 0308 	orr.w	r3, r3, #8
 800e708:	81a3      	strh	r3, [r4, #12]
 800e70a:	6923      	ldr	r3, [r4, #16]
 800e70c:	b94b      	cbnz	r3, 800e722 <__swsetup_r+0x7a>
 800e70e:	89a3      	ldrh	r3, [r4, #12]
 800e710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e718:	d003      	beq.n	800e722 <__swsetup_r+0x7a>
 800e71a:	4621      	mov	r1, r4
 800e71c:	4628      	mov	r0, r5
 800e71e:	f000 f897 	bl	800e850 <__smakebuf_r>
 800e722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e726:	f013 0201 	ands.w	r2, r3, #1
 800e72a:	d00a      	beq.n	800e742 <__swsetup_r+0x9a>
 800e72c:	2200      	movs	r2, #0
 800e72e:	60a2      	str	r2, [r4, #8]
 800e730:	6962      	ldr	r2, [r4, #20]
 800e732:	4252      	negs	r2, r2
 800e734:	61a2      	str	r2, [r4, #24]
 800e736:	6922      	ldr	r2, [r4, #16]
 800e738:	b942      	cbnz	r2, 800e74c <__swsetup_r+0xa4>
 800e73a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e73e:	d1c5      	bne.n	800e6cc <__swsetup_r+0x24>
 800e740:	bd38      	pop	{r3, r4, r5, pc}
 800e742:	0799      	lsls	r1, r3, #30
 800e744:	bf58      	it	pl
 800e746:	6962      	ldrpl	r2, [r4, #20]
 800e748:	60a2      	str	r2, [r4, #8]
 800e74a:	e7f4      	b.n	800e736 <__swsetup_r+0x8e>
 800e74c:	2000      	movs	r0, #0
 800e74e:	e7f7      	b.n	800e740 <__swsetup_r+0x98>
 800e750:	24000110 	.word	0x24000110

0800e754 <memmove>:
 800e754:	4288      	cmp	r0, r1
 800e756:	b510      	push	{r4, lr}
 800e758:	eb01 0402 	add.w	r4, r1, r2
 800e75c:	d902      	bls.n	800e764 <memmove+0x10>
 800e75e:	4284      	cmp	r4, r0
 800e760:	4623      	mov	r3, r4
 800e762:	d807      	bhi.n	800e774 <memmove+0x20>
 800e764:	1e43      	subs	r3, r0, #1
 800e766:	42a1      	cmp	r1, r4
 800e768:	d008      	beq.n	800e77c <memmove+0x28>
 800e76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e76e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e772:	e7f8      	b.n	800e766 <memmove+0x12>
 800e774:	4402      	add	r2, r0
 800e776:	4601      	mov	r1, r0
 800e778:	428a      	cmp	r2, r1
 800e77a:	d100      	bne.n	800e77e <memmove+0x2a>
 800e77c:	bd10      	pop	{r4, pc}
 800e77e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e786:	e7f7      	b.n	800e778 <memmove+0x24>

0800e788 <_sbrk_r>:
 800e788:	b538      	push	{r3, r4, r5, lr}
 800e78a:	4d06      	ldr	r5, [pc, #24]	@ (800e7a4 <_sbrk_r+0x1c>)
 800e78c:	2300      	movs	r3, #0
 800e78e:	4604      	mov	r4, r0
 800e790:	4608      	mov	r0, r1
 800e792:	602b      	str	r3, [r5, #0]
 800e794:	f7f3 fabe 	bl	8001d14 <_sbrk>
 800e798:	1c43      	adds	r3, r0, #1
 800e79a:	d102      	bne.n	800e7a2 <_sbrk_r+0x1a>
 800e79c:	682b      	ldr	r3, [r5, #0]
 800e79e:	b103      	cbz	r3, 800e7a2 <_sbrk_r+0x1a>
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	bd38      	pop	{r3, r4, r5, pc}
 800e7a4:	24002520 	.word	0x24002520

0800e7a8 <_realloc_r>:
 800e7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ac:	4680      	mov	r8, r0
 800e7ae:	4615      	mov	r5, r2
 800e7b0:	460c      	mov	r4, r1
 800e7b2:	b921      	cbnz	r1, 800e7be <_realloc_r+0x16>
 800e7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	f7ff b9a3 	b.w	800db04 <_malloc_r>
 800e7be:	b92a      	cbnz	r2, 800e7cc <_realloc_r+0x24>
 800e7c0:	f7ff f934 	bl	800da2c <_free_r>
 800e7c4:	2400      	movs	r4, #0
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7cc:	f000 f89e 	bl	800e90c <_malloc_usable_size_r>
 800e7d0:	4285      	cmp	r5, r0
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	d802      	bhi.n	800e7dc <_realloc_r+0x34>
 800e7d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e7da:	d8f4      	bhi.n	800e7c6 <_realloc_r+0x1e>
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4640      	mov	r0, r8
 800e7e0:	f7ff f990 	bl	800db04 <_malloc_r>
 800e7e4:	4607      	mov	r7, r0
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d0ec      	beq.n	800e7c4 <_realloc_r+0x1c>
 800e7ea:	42b5      	cmp	r5, r6
 800e7ec:	462a      	mov	r2, r5
 800e7ee:	4621      	mov	r1, r4
 800e7f0:	bf28      	it	cs
 800e7f2:	4632      	movcs	r2, r6
 800e7f4:	f7ff f90b 	bl	800da0e <memcpy>
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	4640      	mov	r0, r8
 800e7fc:	f7ff f916 	bl	800da2c <_free_r>
 800e800:	463c      	mov	r4, r7
 800e802:	e7e0      	b.n	800e7c6 <_realloc_r+0x1e>

0800e804 <__swhatbuf_r>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	460c      	mov	r4, r1
 800e808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e80c:	2900      	cmp	r1, #0
 800e80e:	b096      	sub	sp, #88	@ 0x58
 800e810:	4615      	mov	r5, r2
 800e812:	461e      	mov	r6, r3
 800e814:	da0d      	bge.n	800e832 <__swhatbuf_r+0x2e>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e81c:	f04f 0100 	mov.w	r1, #0
 800e820:	bf14      	ite	ne
 800e822:	2340      	movne	r3, #64	@ 0x40
 800e824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e828:	2000      	movs	r0, #0
 800e82a:	6031      	str	r1, [r6, #0]
 800e82c:	602b      	str	r3, [r5, #0]
 800e82e:	b016      	add	sp, #88	@ 0x58
 800e830:	bd70      	pop	{r4, r5, r6, pc}
 800e832:	466a      	mov	r2, sp
 800e834:	f000 f848 	bl	800e8c8 <_fstat_r>
 800e838:	2800      	cmp	r0, #0
 800e83a:	dbec      	blt.n	800e816 <__swhatbuf_r+0x12>
 800e83c:	9901      	ldr	r1, [sp, #4]
 800e83e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e846:	4259      	negs	r1, r3
 800e848:	4159      	adcs	r1, r3
 800e84a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e84e:	e7eb      	b.n	800e828 <__swhatbuf_r+0x24>

0800e850 <__smakebuf_r>:
 800e850:	898b      	ldrh	r3, [r1, #12]
 800e852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e854:	079d      	lsls	r5, r3, #30
 800e856:	4606      	mov	r6, r0
 800e858:	460c      	mov	r4, r1
 800e85a:	d507      	bpl.n	800e86c <__smakebuf_r+0x1c>
 800e85c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e860:	6023      	str	r3, [r4, #0]
 800e862:	6123      	str	r3, [r4, #16]
 800e864:	2301      	movs	r3, #1
 800e866:	6163      	str	r3, [r4, #20]
 800e868:	b003      	add	sp, #12
 800e86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e86c:	ab01      	add	r3, sp, #4
 800e86e:	466a      	mov	r2, sp
 800e870:	f7ff ffc8 	bl	800e804 <__swhatbuf_r>
 800e874:	9f00      	ldr	r7, [sp, #0]
 800e876:	4605      	mov	r5, r0
 800e878:	4639      	mov	r1, r7
 800e87a:	4630      	mov	r0, r6
 800e87c:	f7ff f942 	bl	800db04 <_malloc_r>
 800e880:	b948      	cbnz	r0, 800e896 <__smakebuf_r+0x46>
 800e882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e886:	059a      	lsls	r2, r3, #22
 800e888:	d4ee      	bmi.n	800e868 <__smakebuf_r+0x18>
 800e88a:	f023 0303 	bic.w	r3, r3, #3
 800e88e:	f043 0302 	orr.w	r3, r3, #2
 800e892:	81a3      	strh	r3, [r4, #12]
 800e894:	e7e2      	b.n	800e85c <__smakebuf_r+0xc>
 800e896:	89a3      	ldrh	r3, [r4, #12]
 800e898:	6020      	str	r0, [r4, #0]
 800e89a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e89e:	81a3      	strh	r3, [r4, #12]
 800e8a0:	9b01      	ldr	r3, [sp, #4]
 800e8a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e8a6:	b15b      	cbz	r3, 800e8c0 <__smakebuf_r+0x70>
 800e8a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f000 f81d 	bl	800e8ec <_isatty_r>
 800e8b2:	b128      	cbz	r0, 800e8c0 <__smakebuf_r+0x70>
 800e8b4:	89a3      	ldrh	r3, [r4, #12]
 800e8b6:	f023 0303 	bic.w	r3, r3, #3
 800e8ba:	f043 0301 	orr.w	r3, r3, #1
 800e8be:	81a3      	strh	r3, [r4, #12]
 800e8c0:	89a3      	ldrh	r3, [r4, #12]
 800e8c2:	431d      	orrs	r5, r3
 800e8c4:	81a5      	strh	r5, [r4, #12]
 800e8c6:	e7cf      	b.n	800e868 <__smakebuf_r+0x18>

0800e8c8 <_fstat_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4d07      	ldr	r5, [pc, #28]	@ (800e8e8 <_fstat_r+0x20>)
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	4608      	mov	r0, r1
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	602b      	str	r3, [r5, #0]
 800e8d6:	f7f3 f9f4 	bl	8001cc2 <_fstat>
 800e8da:	1c43      	adds	r3, r0, #1
 800e8dc:	d102      	bne.n	800e8e4 <_fstat_r+0x1c>
 800e8de:	682b      	ldr	r3, [r5, #0]
 800e8e0:	b103      	cbz	r3, 800e8e4 <_fstat_r+0x1c>
 800e8e2:	6023      	str	r3, [r4, #0]
 800e8e4:	bd38      	pop	{r3, r4, r5, pc}
 800e8e6:	bf00      	nop
 800e8e8:	24002520 	.word	0x24002520

0800e8ec <_isatty_r>:
 800e8ec:	b538      	push	{r3, r4, r5, lr}
 800e8ee:	4d06      	ldr	r5, [pc, #24]	@ (800e908 <_isatty_r+0x1c>)
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	4608      	mov	r0, r1
 800e8f6:	602b      	str	r3, [r5, #0]
 800e8f8:	f7f3 f9f3 	bl	8001ce2 <_isatty>
 800e8fc:	1c43      	adds	r3, r0, #1
 800e8fe:	d102      	bne.n	800e906 <_isatty_r+0x1a>
 800e900:	682b      	ldr	r3, [r5, #0]
 800e902:	b103      	cbz	r3, 800e906 <_isatty_r+0x1a>
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	bd38      	pop	{r3, r4, r5, pc}
 800e908:	24002520 	.word	0x24002520

0800e90c <_malloc_usable_size_r>:
 800e90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e910:	1f18      	subs	r0, r3, #4
 800e912:	2b00      	cmp	r3, #0
 800e914:	bfbc      	itt	lt
 800e916:	580b      	ldrlt	r3, [r1, r0]
 800e918:	18c0      	addlt	r0, r0, r3
 800e91a:	4770      	bx	lr

0800e91c <_init>:
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91e:	bf00      	nop
 800e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e922:	bc08      	pop	{r3}
 800e924:	469e      	mov	lr, r3
 800e926:	4770      	bx	lr

0800e928 <_fini>:
 800e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92a:	bf00      	nop
 800e92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e92e:	bc08      	pop	{r3}
 800e930:	469e      	mov	lr, r3
 800e932:	4770      	bx	lr
