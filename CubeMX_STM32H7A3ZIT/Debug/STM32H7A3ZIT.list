
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dad0  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800dd80  0800dd80  0000ed80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800deb4  0800deb4  0000eeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800debc  0800debc  0000eebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dec0  0800dec0  0000eec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800dec4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001fc8  24000160  0800e024  0000f160  2**2
                  ALLOC
  8 ._user_heap_stack 00001200  24002128  0800e024  00010128  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027a67  00000000  00000000  0000f18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000574d  00000000  00000000  00036bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  0003c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001729  00000000  00000000  0003e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374c6  00000000  00000000  0003f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c478  00000000  00000000  00076d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001479c1  00000000  00000000  000a31ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eabc0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000867c  00000000  00000000  001eac04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001f3280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800dd68 	.word	0x0800dd68

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800dd68 	.word	0x0800dd68

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <flashBoot>:
#include "sdram_init.h"

FMC_SDRAM_CommandTypeDef command;


void flashBoot(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	*(uint8_t *) (FLASH_COMMON_BANK_ADDR + FLASH_COMMAND_OFFSET) = 0xFF;
 8000394:	f04f 4301 	mov.w	r3, #2164260864	@ 0x81000000
 8000398:	22ff      	movs	r2, #255	@ 0xff
 800039a:	701a      	strb	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
	...

080003a8 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	@ 0x40
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80003ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003bc:	f107 0320 	add.w	r3, r7, #32
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003dc:	4b48      	ldr	r3, [pc, #288]	@ (8000500 <MX_FMC_Init+0x158>)
 80003de:	4a49      	ldr	r2, [pc, #292]	@ (8000504 <MX_FMC_Init+0x15c>)
 80003e0:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003e2:	4b47      	ldr	r3, [pc, #284]	@ (8000500 <MX_FMC_Init+0x158>)
 80003e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003ea:	4b45      	ldr	r3, [pc, #276]	@ (8000500 <MX_FMC_Init+0x158>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003f0:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 80003f6:	4b42      	ldr	r3, [pc, #264]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f8:	2240      	movs	r2, #64	@ 0x40
 80003fa:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003fc:	4b40      	ldr	r3, [pc, #256]	@ (8000500 <MX_FMC_Init+0x158>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000402:	4b3f      	ldr	r3, [pc, #252]	@ (8000500 <MX_FMC_Init+0x158>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000408:	4b3d      	ldr	r3, [pc, #244]	@ (8000500 <MX_FMC_Init+0x158>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 800040e:	4b3c      	ldr	r3, [pc, #240]	@ (8000500 <MX_FMC_Init+0x158>)
 8000410:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 8000416:	4b3a      	ldr	r3, [pc, #232]	@ (8000500 <MX_FMC_Init+0x158>)
 8000418:	2240      	movs	r2, #64	@ 0x40
 800041a:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 800041c:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <MX_FMC_Init+0x158>)
 800041e:	2240      	movs	r2, #64	@ 0x40
 8000420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 8000422:	4b37      	ldr	r3, [pc, #220]	@ (8000500 <MX_FMC_Init+0x158>)
 8000424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 1;
 800042a:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <MX_FMC_Init+0x158>)
 800042c:	2201      	movs	r2, #1
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000430:	4b33      	ldr	r3, [pc, #204]	@ (8000500 <MX_FMC_Init+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8000436:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_FMC_Init+0x158>)
 8000438:	2201      	movs	r2, #1
 800043a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 8000446:	23fc      	movs	r3, #252	@ 0xfc
 8000448:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 800044a:	23fc      	movs	r3, #252	@ 0xfc
 800044c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800044e:	23fc      	movs	r3, #252	@ 0xfc
 8000450:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 8000452:	23fc      	movs	r3, #252	@ 0xfc
 8000454:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 8000456:	23fc      	movs	r3, #252	@ 0xfc
 8000458:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 800045a:	23fc      	movs	r3, #252	@ 0xfc
 800045c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800045e:	f107 0220 	add.w	r2, r7, #32
 8000462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000466:	4619      	mov	r1, r3
 8000468:	4825      	ldr	r0, [pc, #148]	@ (8000500 <MX_FMC_Init+0x158>)
 800046a:	f002 f9d1 	bl	8002810 <HAL_NAND_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 8000474:	f000 fec8 	bl	8001208 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000478:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <MX_FMC_Init+0x160>)
 800047a:	4a24      	ldr	r2, [pc, #144]	@ (800050c <MX_FMC_Init+0x164>)
 800047c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <MX_FMC_Init+0x160>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000484:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <MX_FMC_Init+0x160>)
 8000486:	2201      	movs	r2, #1
 8000488:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800048a:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <MX_FMC_Init+0x160>)
 800048c:	2204      	movs	r2, #4
 800048e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000490:	4b1d      	ldr	r3, [pc, #116]	@ (8000508 <MX_FMC_Init+0x160>)
 8000492:	2210      	movs	r2, #16
 8000494:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MX_FMC_Init+0x160>)
 8000498:	2240      	movs	r2, #64	@ 0x40
 800049a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_FMC_Init+0x160>)
 800049e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80004a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_FMC_Init+0x160>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80004b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80004b2:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_FMC_Init+0x160>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004c2:	2309      	movs	r3, #9
 80004c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004c6:	2306      	movs	r3, #6
 80004c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004ca:	2309      	movs	r3, #9
 80004cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004ce:	2303      	movs	r3, #3
 80004d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004d2:	2303      	movs	r3, #3
 80004d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	480a      	ldr	r0, [pc, #40]	@ (8000508 <MX_FMC_Init+0x160>)
 80004e0:	f007 fc6e 	bl	8007dc0 <HAL_SDRAM_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80004ea:	f000 fe8d 	bl	8001208 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80004ee:	4908      	ldr	r1, [pc, #32]	@ (8000510 <MX_FMC_Init+0x168>)
 80004f0:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_FMC_Init+0x160>)
 80004f2:	f000 fe8f 	bl	8001214 <SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	@ 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2400018c 	.word	0x2400018c
 8000504:	52004080 	.word	0x52004080
 8000508:	240001cc 	.word	0x240001cc
 800050c:	52004140 	.word	0x52004140
 8000510:	2400017c 	.word	0x2400017c

08000514 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0b8      	sub	sp, #224	@ 0xe0
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800052a:	4b5c      	ldr	r3, [pc, #368]	@ (800069c <HAL_FMC_MspInit+0x188>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 80af 	bne.w	8000692 <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 8000534:	4b59      	ldr	r3, [pc, #356]	@ (800069c <HAL_FMC_MspInit+0x188>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	22c0      	movs	r2, #192	@ 0xc0
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f00c fdc3 	bl	800d0ce <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800054c:	f04f 0300 	mov.w	r3, #0
 8000550:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_CLKP;
 8000554:	2303      	movs	r3, #3
 8000556:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4618      	mov	r0, r3
 800055e:	f005 f825 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000568:	f000 fe4e 	bl	8001208 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800056c:	4b4c      	ldr	r3, [pc, #304]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800056e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000572:	4a4b      	ldr	r2, [pc, #300]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 8000574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000578:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800057c:	4b48      	ldr	r3, [pc, #288]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800057e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800058a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800058e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a4:	230c      	movs	r3, #12
 80005a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005ae:	4619      	mov	r1, r3
 80005b0:	483c      	ldr	r0, [pc, #240]	@ (80006a4 <HAL_FMC_MspInit+0x190>)
 80005b2:	f001 fbe3 	bl	8001d7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80005b6:	230d      	movs	r3, #13
 80005b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005ce:	230c      	movs	r3, #12
 80005d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005d8:	4619      	mov	r1, r3
 80005da:	4833      	ldr	r0, [pc, #204]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 80005dc:	f001 fbce 	bl	8001d7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005fa:	230c      	movs	r3, #12
 80005fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000600:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000604:	4619      	mov	r1, r3
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <HAL_FMC_MspInit+0x198>)
 8000608:	f001 fbb8 	bl	8001d7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800060c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000626:	230c      	movs	r3, #12
 8000628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000630:	4619      	mov	r1, r3
 8000632:	481f      	ldr	r0, [pc, #124]	@ (80006b0 <HAL_FMC_MspInit+0x19c>)
 8000634:	f001 fba2 	bl	8001d7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000638:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 800063c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000652:	230c      	movs	r3, #12
 8000654:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000658:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800065c:	4619      	mov	r1, r3
 800065e:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <HAL_FMC_MspInit+0x1a0>)
 8000660:	f001 fb8c 	bl	8001d7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800067e:	2309      	movs	r3, #9
 8000680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000688:	4619      	mov	r1, r3
 800068a:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 800068c:	f001 fb76 	bl	8001d7c <HAL_GPIO_Init>
 8000690:	e000      	b.n	8000694 <HAL_FMC_MspInit+0x180>
    return;
 8000692:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000694:	37e0      	adds	r7, #224	@ 0xe0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000200 	.word	0x24000200
 80006a0:	58024400 	.word	0x58024400
 80006a4:	58021400 	.word	0x58021400
 80006a8:	58020800 	.word	0x58020800
 80006ac:	58021800 	.word	0x58021800
 80006b0:	58021000 	.word	0x58021000
 80006b4:	58020c00 	.word	0x58020c00

080006b8 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80006c0:	f7ff ff28 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006d4:	f7ff ff1e 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	4b60      	ldr	r3, [pc, #384]	@ (8000878 <MX_GPIO_Init+0x198>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006fc:	4a5e      	ldr	r2, [pc, #376]	@ (8000878 <MX_GPIO_Init+0x198>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000706:	4b5c      	ldr	r3, [pc, #368]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000714:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800071a:	4a57      	ldr	r2, [pc, #348]	@ (8000878 <MX_GPIO_Init+0x198>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000724:	4b54      	ldr	r3, [pc, #336]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000738:	4a4f      	ldr	r2, [pc, #316]	@ (8000878 <MX_GPIO_Init+0x198>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000742:	4b4d      	ldr	r3, [pc, #308]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000748:	f003 0320 	and.w	r3, r3, #32
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b49      	ldr	r3, [pc, #292]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000756:	4a48      	ldr	r2, [pc, #288]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000760:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000774:	4a40      	ldr	r2, [pc, #256]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800077a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800077e:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000780:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <MX_GPIO_Init+0x198>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000792:	4a39      	ldr	r2, [pc, #228]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800079c:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x198>)
 800079e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b0:	4a31      	ldr	r2, [pc, #196]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2150      	movs	r1, #80	@ 0x50
 80007cc:	482b      	ldr	r0, [pc, #172]	@ (800087c <MX_GPIO_Init+0x19c>)
 80007ce:	f001 fc85 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d8:	4829      	ldr	r0, [pc, #164]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 80007da:	f001 fc7f 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	21c0      	movs	r1, #192	@ 0xc0
 80007e2:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_GPIO_Init+0x1a4>)
 80007e4:	f001 fc7a 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007e8:	232c      	movs	r3, #44	@ 0x2c
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4820      	ldr	r0, [pc, #128]	@ (800087c <MX_GPIO_Init+0x19c>)
 80007fc:	f001 fabe 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000800:	2350      	movs	r3, #80	@ 0x50
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4819      	ldr	r0, [pc, #100]	@ (800087c <MX_GPIO_Init+0x19c>)
 8000818:	f001 fab0 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000836:	f001 faa1 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800083a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000850:	f001 fa94 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000854:	23c0      	movs	r3, #192	@ 0xc0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x1a4>)
 800086c:	f001 fa86 	bl	8001d7c <HAL_GPIO_Init>

}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	@ 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58024400 	.word	0x58024400
 800087c:	58021000 	.word	0x58021000
 8000880:	58020800 	.word	0x58020800
 8000884:	58021400 	.word	0x58021400

08000888 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_I2C1_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <MX_I2C1_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_I2C1_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <MX_I2C1_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008c4:	f001 fc3e 	bl	8002144 <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f000 fc9b 	bl	8001208 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008d6:	f001 fcd1 	bl	800227c <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 fc92 	bl	8001208 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008e8:	f001 fd13 	bl	8002312 <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fc89 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000204 	.word	0x24000204
 8000900:	40005400 	.word	0x40005400
 8000904:	20b0ccff 	.word	0x20b0ccff

08000908 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_I2C2_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <MX_I2C2_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_I2C2_Init+0x74>)
 8000914:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <MX_I2C2_Init+0x7c>)
 8000916:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_I2C2_Init+0x74>)
 8000920:	2201      	movs	r2, #1
 8000922:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_I2C2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_I2C2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_I2C2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_I2C2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000942:	480e      	ldr	r0, [pc, #56]	@ (800097c <MX_I2C2_Init+0x74>)
 8000944:	f001 fbfe 	bl	8002144 <HAL_I2C_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800094e:	f000 fc5b 	bl	8001208 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4809      	ldr	r0, [pc, #36]	@ (800097c <MX_I2C2_Init+0x74>)
 8000956:	f001 fc91 	bl	800227c <HAL_I2CEx_ConfigAnalogFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 fc52 	bl	8001208 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_I2C2_Init+0x74>)
 8000968:	f001 fcd3 	bl	8002312 <HAL_I2CEx_ConfigDigitalFilter>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 fc49 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	24000258 	.word	0x24000258
 8000980:	40005800 	.word	0x40005800
 8000984:	20b0ccff 	.word	0x20b0ccff

08000988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0bc      	sub	sp, #240	@ 0xf0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	22c0      	movs	r2, #192	@ 0xc0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00c fb90 	bl	800d0ce <memset>
  if(i2cHandle->Instance==I2C1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ae8 <HAL_I2C_MspInit+0x160>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d146      	bne.n	8000a46 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009b8:	f04f 0208 	mov.w	r2, #8
 80009bc:	f04f 0300 	mov.w	r3, #0
 80009c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 fdec 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009da:	f000 fc15 	bl	8001208 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b43      	ldr	r3, [pc, #268]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009e4:	4a41      	ldr	r2, [pc, #260]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ee:	4b3f      	ldr	r3, [pc, #252]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fc:	23c0      	movs	r3, #192	@ 0xc0
 80009fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a02:	2312      	movs	r3, #18
 8000a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a14:	2304      	movs	r3, #4
 8000a16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4833      	ldr	r0, [pc, #204]	@ (8000af0 <HAL_I2C_MspInit+0x168>)
 8000a22:	f001 f9ab 	bl	8001d7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a26:	4b31      	ldr	r3, [pc, #196]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a28:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a32:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a36:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a38:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a44:	e04b      	b.n	8000ade <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000af4 <HAL_I2C_MspInit+0x16c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d146      	bne.n	8000ade <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a50:	f04f 0208 	mov.w	r2, #8
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 fda0 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a72:	f000 fbc9 	bl	8001208 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <HAL_I2C_MspInit+0x168>)
 8000abc:	f001 f95e 	bl	8001d7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ac2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ac6:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ac8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000acc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ad2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
}
 8000ade:	bf00      	nop
 8000ae0:	37f0      	adds	r7, #240	@ 0xf0
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58020400 	.word	0x58020400
 8000af4:	40005800 	.word	0x40005800

08000af8 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000afe:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <MX_I2S1_Init+0x64>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b04:	2206      	movs	r2, #6
 8000b06:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b14:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b20:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b24:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b46:	f001 fc31 	bl	80023ac <HAL_I2S_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b50:	f000 fb5a 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	240002ac 	.word	0x240002ac
 8000b5c:	40013000 	.word	0x40013000

08000b60 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <MX_I2S2_Init+0x64>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b82:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b86:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b8a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000bac:	f001 fbfe 	bl	80023ac <HAL_I2S_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000bb6:	f000 fb27 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	24000300 	.word	0x24000300
 8000bc4:	40003800 	.word	0x40003800

08000bc8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0be      	sub	sp, #248	@ 0xf8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	22c0      	movs	r2, #192	@ 0xc0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00c fa70 	bl	800d0ce <memset>
  if(i2sHandle->Instance==SPI1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a75      	ldr	r2, [pc, #468]	@ (8000dc8 <HAL_I2S_MspInit+0x200>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d173      	bne.n	8000ce0 <HAL_I2S_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f004 fccc 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000c1a:	f000 faf5 	bl	8001208 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c20:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c24:	4a69      	ldr	r2, [pc, #420]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c2a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c2e:	4b67      	ldr	r3, [pc, #412]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c30:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b63      	ldr	r3, [pc, #396]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c42:	4a62      	ldr	r2, [pc, #392]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c4c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c60:	4a5a      	ldr	r2, [pc, #360]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c6a:	4b58      	ldr	r3, [pc, #352]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c78:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c92:	2305      	movs	r3, #5
 8000c94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	484c      	ldr	r0, [pc, #304]	@ (8000dd0 <HAL_I2S_MspInit+0x208>)
 8000ca0:	f001 f86c 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4842      	ldr	r0, [pc, #264]	@ (8000dd4 <HAL_I2S_MspInit+0x20c>)
 8000cca:	f001 f857 	bl	8001d7c <HAL_GPIO_Init>

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2023      	movs	r0, #35	@ 0x23
 8000cd4:	f000 ffa5 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cd8:	2023      	movs	r0, #35	@ 0x23
 8000cda:	f000 ffbc 	bl	8001c56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cde:	e06f      	b.n	8000dc0 <HAL_I2S_MspInit+0x1f8>
  else if(i2sHandle->Instance==SPI2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8000dd8 <HAL_I2S_MspInit+0x210>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d16a      	bne.n	8000dc0 <HAL_I2S_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fc53 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_I2S_MspInit+0x148>
      Error_Handler();
 8000d0c:	f000 fa7c 	bl	8001208 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d10:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d12:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d16:	4a2d      	ldr	r2, [pc, #180]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d20:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d22:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d34:	4a25      	ldr	r2, [pc, #148]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d3e:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d52:	4a1e      	ldr	r2, [pc, #120]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d6a:	2342      	movs	r3, #66	@ 0x42
 8000d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d82:	2305      	movs	r3, #5
 8000d84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <HAL_I2S_MspInit+0x20c>)
 8000d90:	f000 fff4 	bl	8001d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d94:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dae:	2305      	movs	r3, #5
 8000db0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <HAL_I2S_MspInit+0x214>)
 8000dbc:	f000 ffde 	bl	8001d7c <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	37f8      	adds	r7, #248	@ 0xf8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58020000 	.word	0x58020000
 8000dd4:	58020800 	.word	0x58020800
 8000dd8:	40003800 	.word	0x40003800
 8000ddc:	58020400 	.word	0x58020400

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	f5ad 5d86 	sub.w	sp, sp, #4288	@ 0x10c0
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dea:	f000 f9c3 	bl	8001174 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f000 fd87 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f929 	bl	8001048 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000df6:	f000 f99f 	bl	8001138 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f7ff fc71 	bl	80006e0 <MX_GPIO_Init>
  MX_FMC_Init();
 8000dfe:	f7ff fad3 	bl	80003a8 <MX_FMC_Init>
  MX_I2S1_Init();
 8000e02:	f7ff fe79 	bl	8000af8 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000e06:	f7ff feab 	bl	8000b60 <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000e0a:	f000 fa6f 	bl	80012ec <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000e0e:	f7ff fd3b 	bl	8000888 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e12:	f7ff fd79 	bl	8000908 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000e16:	f00b fac7 	bl	800c3a8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000e1a:	f000 fcd3 	bl	80017c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  flashBoot();
 8000e1e:	f7ff fab7 	bl	8000390 <flashBoot>

  NAND_AddressTypedef Address;
  uint8_t txBuf[BUFFER_SIZE];
  uint8_t rxBuf[BUFFER_SIZE];
  int memtest = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f241 02c4 	movw	r2, #4292	@ 0x10c4
 8000e28:	443a      	add	r2, r7
 8000e2a:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NAND_ID.Maker_Id = (uint16_t)0x00;
 8000e2c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e30:	2200      	movs	r2, #0
 8000e32:	f803 2c98 	strb.w	r2, [r3, #-152]
	  NAND_ID.Device_Id = (uint16_t)0x00;
 8000e36:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f803 2c97 	strb.w	r2, [r3, #-151]
	  NAND_ID.Third_Id = (uint16_t)0x00;
 8000e40:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e44:	2200      	movs	r2, #0
 8000e46:	f803 2c96 	strb.w	r2, [r3, #-150]
	  NAND_ID.Fourth_Id = (uint16_t)0x00;
 8000e4a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f803 2c95 	strb.w	r2, [r3, #-149]
	  /* Read the NAND memory ID */
	  if(HAL_NAND_Read_ID(&hnand1, &NAND_ID) != HAL_OK)
 8000e54:	4b74      	ldr	r3, [pc, #464]	@ (8001028 <main+0x248>)
 8000e56:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 8000e5a:	f103 0308 	add.w	r3, r3, #8
 8000e5e:	443b      	add	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4872      	ldr	r0, [pc, #456]	@ (800102c <main+0x24c>)
 8000e64:	f001 fd1e 	bl	80028a4 <HAL_NAND_Read_ID>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <main+0x92>
	  {
	  return NAND_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0d4      	b.n	800101c <main+0x23c>
	  }
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e76:	486e      	ldr	r0, [pc, #440]	@ (8001030 <main+0x250>)
 8000e78:	f001 f949 	bl	800210e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000e7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e80:	f000 fdd0 	bl	8001a24 <HAL_Delay>

	  Address.Page = 1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f241 02b4 	movw	r2, #4276	@ 0x10b4
 8000e8a:	443a      	add	r2, r7
 8000e8c:	8013      	strh	r3, [r2, #0]
	  Address.Plane = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f241 02b6 	movw	r2, #4278	@ 0x10b6
 8000e94:	443a      	add	r2, r7
 8000e96:	8013      	strh	r3, [r2, #0]
	  Address.Block = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f241 02b8 	movw	r2, #4280	@ 0x10b8
 8000e9e:	443a      	add	r2, r7
 8000ea0:	8013      	strh	r3, [r2, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e01f      	b.n	8000eec <main+0x10c>
		txBuf[i] = i;
 8000eac:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b2d9      	uxtb	r1, r3
 8000eb4:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8000eb8:	443b      	add	r3, r7
 8000eba:	f6a3 0254 	subw	r2, r3, #2132	@ 0x854
 8000ebe:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
		rxBuf[i] = 0;
 8000eca:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3b94      	subs	r3, #148	@ 0x94
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000ede:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f5b3 6f04 	cmp.w	r3, #2112	@ 0x840
 8000ef6:	dbd9      	blt.n	8000eac <main+0xcc>
	  }
	  // Erase block
	  if (HAL_NAND_Erase_Block(&hnand1, &Address) != HAL_OK)
 8000ef8:	f241 03b4 	movw	r3, #4276	@ 0x10b4
 8000efc:	443b      	add	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	484a      	ldr	r0, [pc, #296]	@ (800102c <main+0x24c>)
 8000f02:	f001 ffff 	bl	8002f04 <HAL_NAND_Erase_Block>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <main+0x130>
	  {
	  return NAND_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e085      	b.n	800101c <main+0x23c>
	  }
	  // Write Block
	  if (HAL_NAND_Write_Page(&hnand1,
 8000f10:	f607 0274 	addw	r2, r7, #2164	@ 0x874
 8000f14:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8000f18:	4439      	add	r1, r7
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4843      	ldr	r0, [pc, #268]	@ (800102c <main+0x24c>)
 8000f1e:	f001 fe99 	bl	8002c54 <HAL_NAND_Write_Page_8b>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <main+0x14c>
			  	  	  	  	  &Address,
							  txBuf,
							  1) != HAL_OK)
	  {
	  return NAND_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e077      	b.n	800101c <main+0x23c>
	  }
	  /* Read back data from the NAND memory */
	  if (HAL_NAND_Read_Page(&hnand1,
 8000f2c:	4a41      	ldr	r2, [pc, #260]	@ (8001034 <main+0x254>)
 8000f2e:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8000f32:	4413      	add	r3, r2
 8000f34:	19da      	adds	r2, r3, r7
 8000f36:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8000f3a:	4439      	add	r1, r7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	483b      	ldr	r0, [pc, #236]	@ (800102c <main+0x24c>)
 8000f40:	f001 fd2e 	bl	80029a0 <HAL_NAND_Read_Page_8b>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <main+0x16e>
	  &Address,
	  rxBuf,
	  1) != HAL_OK)
	  {
	  return NAND_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e066      	b.n	800101c <main+0x23c>
	  }
	  // Checking
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f241 02bc 	movw	r2, #4284	@ 0x10bc
 8000f54:	443a      	add	r2, r7
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e024      	b.n	8000fa4 <main+0x1c4>
		  if(rxBuf[i] != txBuf[i]) memtest = 0; // Check if all sent values were received
 8000f5a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8000f64:	443b      	add	r3, r7
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b94      	subs	r3, #148	@ 0x94
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8000f72:	443b      	add	r3, r7
 8000f74:	f6a3 0154 	subw	r1, r3, #2132	@ 0x854
 8000f78:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8000f7c:	443b      	add	r3, r7
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	440b      	add	r3, r1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d004      	beq.n	8000f92 <main+0x1b2>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f241 02c4 	movw	r2, #4292	@ 0x10c4
 8000f8e:	443a      	add	r2, r7
 8000f90:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000f92:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8000f96:	443b      	add	r3, r7
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f241 02bc 	movw	r2, #4284	@ 0x10bc
 8000fa0:	443a      	add	r2, r7
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8000fa8:	443b      	add	r3, r7
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f5b3 6f04 	cmp.w	r3, #2112	@ 0x840
 8000fb0:	dbd3      	blt.n	8000f5a <main+0x17a>
	  }
	  if(memtest) { //printfs
 8000fb2:	f241 03c4 	movw	r3, #4292	@ 0x10c4
 8000fb6:	443b      	add	r3, r7
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d017      	beq.n	8000fee <main+0x20e>
	  			  uint8_t str[] = "Total Flash Success\r\n";
 8000fbe:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001038 <main+0x258>)
 8000fc4:	f1a3 04b0 	sub.w	r4, r3, #176	@ 0xb0
 8000fc8:	4615      	mov	r5, r2
 8000fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fd2:	6020      	str	r0, [r4, #0]
 8000fd4:	3404      	adds	r4, #4
 8000fd6:	8021      	strh	r1, [r4, #0]
	  			  CDC_Transmit_HS(str, sizeof(str));
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <main+0x25c>)
 8000fda:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 8000fde:	f103 0308 	add.w	r3, r3, #8
 8000fe2:	443b      	add	r3, r7
 8000fe4:	2116      	movs	r1, #22
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00b fa9e 	bl	800c528 <CDC_Transmit_HS>
 8000fec:	e71e      	b.n	8000e2c <main+0x4c>
	  		  } else {
	  			  uint8_t str[] = "Partial Flash Failure\r\n";
 8000fee:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000ff2:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <main+0x260>)
 8000ff4:	f1a3 04c8 	sub.w	r4, r3, #200	@ 0xc8
 8000ff8:	4615      	mov	r5, r2
 8000ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001002:	e884 0003 	stmia.w	r4, {r0, r1}
	  			  CDC_Transmit_HS(str, sizeof(str));
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <main+0x264>)
 8001008:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 800100c:	f103 0308 	add.w	r3, r3, #8
 8001010:	443b      	add	r3, r7
 8001012:	2118      	movs	r1, #24
 8001014:	4618      	mov	r0, r3
 8001016:	f00b fa87 	bl	800c528 <CDC_Transmit_HS>
	  NAND_ID.Maker_Id = (uint16_t)0x00;
 800101a:	e707      	b.n	8000e2c <main+0x4c>

	   //uint8_t str[] = "Hello World\r\n";
	   //CDC_Transmit_HS(str, sizeof(str));
  }
  /* USER CODE END 3 */
}
 800101c:	4618      	mov	r0, r3
 800101e:	f507 5786 	add.w	r7, r7, #4288	@ 0x10c0
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bdb0      	pop	{r4, r5, r7, pc}
 8001028:	ffffef68 	.word	0xffffef68
 800102c:	2400018c 	.word	0x2400018c
 8001030:	58020800 	.word	0x58020800
 8001034:	ffffef6c 	.word	0xffffef6c
 8001038:	0800dd80 	.word	0x0800dd80
 800103c:	ffffef50 	.word	0xffffef50
 8001040:	0800dd98 	.word	0x0800dd98
 8001044:	ffffef38 	.word	0xffffef38

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b09c      	sub	sp, #112	@ 0x70
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001052:	224c      	movs	r2, #76	@ 0x4c
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00c f839 	bl	800d0ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2220      	movs	r2, #32
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f00c f833 	bl	800d0ce <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <SystemClock_Config+0xe8>)
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001072:	2002      	movs	r0, #2
 8001074:	f003 faa8 	bl	80045c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <SystemClock_Config+0xec>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a2c      	ldr	r2, [pc, #176]	@ (8001134 <SystemClock_Config+0xec>)
 8001082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <SystemClock_Config+0xec>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001094:	bf00      	nop
 8001096:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <SystemClock_Config+0xec>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800109e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010a2:	d1f8      	bne.n	8001096 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80010a4:	2322      	movs	r3, #34	@ 0x22
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80010ac:	2340      	movs	r3, #64	@ 0x40
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80010c0:	2323      	movs	r3, #35	@ 0x23
 80010c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010d0:	230c      	movs	r3, #12
 80010d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fabb 	bl	800465c <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80010ec:	f000 f88c 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	233f      	movs	r3, #63	@ 0x3f
 80010f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2303      	movs	r3, #3
 80010f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001100:	2340      	movs	r3, #64	@ 0x40
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001104:	2340      	movs	r3, #64	@ 0x40
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800110c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800110e:	2340      	movs	r3, #64	@ 0x40
 8001110:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2106      	movs	r1, #6
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fed2 	bl	8004ec0 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001122:	f000 f871 	bl	8001208 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3770      	adds	r7, #112	@ 0x70
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	58024400 	.word	0x58024400
 8001134:	58024800 	.word	0x58024800

08001138 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0b0      	sub	sp, #192	@ 0xc0
 800113c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	22c0      	movs	r2, #192	@ 0xc0
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00b ffc2 	bl	800d0ce <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800114a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001156:	2300      	movs	r3, #0
 8001158:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	4618      	mov	r0, r3
 800115e:	f004 fa25 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001168:	f000 f84e 	bl	8001208 <Error_Handler>
  }
}
 800116c:	bf00      	nop
 800116e:	37c0      	adds	r7, #192	@ 0xc0
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001186:	f000 fd81 	bl	8001c8c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800118a:	2301      	movs	r3, #1
 800118c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800118e:	2300      	movs	r3, #0
 8001190:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001196:	231f      	movs	r3, #31
 8001198:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800119a:	2387      	movs	r3, #135	@ 0x87
 800119c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800119e:	2300      	movs	r3, #0
 80011a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011a2:	2300      	movs	r3, #0
 80011a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011b6:	463b      	mov	r3, r7
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fd9f 	bl	8001cfc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80011be:	2301      	movs	r3, #1
 80011c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80011c2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80011c6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80011c8:	2317      	movs	r3, #23
 80011ca:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011d4:	2303      	movs	r3, #3
 80011d6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011dc:	463b      	mov	r3, r7
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fd8c 	bl	8001cfc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x8000000;
 80011e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80011ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011ee:	231f      	movs	r3, #31
 80011f0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011f2:	463b      	mov	r3, r7
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fd81 	bl	8001cfc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011fa:	2004      	movs	r0, #4
 80011fc:	f000 fd5e 	bl	8001cbc <HAL_MPU_Enable>

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <SDRAM_Initialization_Sequence>:
 * 6 Min of 2 auto-refresh cycles
 *
 */
#include "sdram_init.h"

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	 __IO uint32_t tmpmrd =0;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
	/* Step 2:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2210      	movs	r2, #16
 800122c:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2201      	movs	r2, #1
 8001232:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800123a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f006 fdf9 	bl	8007e38 <HAL_SDRAM_SendCommand>

	  /* Step 3: Insert 200 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 fbec 	bl	8001a24 <HAL_Delay>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2202      	movs	r2, #2
 8001250:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2210      	movs	r2, #16
 8001256:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f006 fde4 	bl	8007e38 <HAL_SDRAM_SendCommand>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2202      	movs	r2, #2
 8001274:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2210      	movs	r2, #16
 800127a:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128c:	6839      	ldr	r1, [r7, #0]
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f006 fdd2 	bl	8007e38 <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001294:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001298:	60fb      	str	r3, [r7, #12]
	                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_3           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2204      	movs	r2, #4
 800129e:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2210      	movs	r2, #16
 80012a4:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2201      	movs	r2, #1
 80012aa:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80012b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012b6:	6839      	ldr	r1, [r7, #0]
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f006 fdbd 	bl	8007e38 <HAL_SDRAM_SendCommand>

	  /* Step 6 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2203      	movs	r2, #3
 80012c2:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2210      	movs	r2, #16
 80012c8:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 2;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2202      	movs	r2, #2
 80012ce:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]

	  /* Send the command twice*/
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80012d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f006 fdab 	bl	8007e38 <HAL_SDRAM_SendCommand>
	  //HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);

}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 80012f2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80012f6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800130a:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001322:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <MX_SPDIFRX_Init+0x6c>)
 8001346:	f006 fdad 	bl	8007ea4 <HAL_SPDIFRX_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 8001350:	f7ff ff5a 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	24000354 	.word	0x24000354

0800135c <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0ba      	sub	sp, #232	@ 0xe8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	22c0      	movs	r2, #192	@ 0xc0
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00b fea6 	bl	800d0ce <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800138a:	d149      	bne.n	8001420 <HAL_SPDIFRX_MspInit+0xc4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 800138c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8001398:	2300      	movs	r3, #0
 800139a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 f903 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 80013ac:	f7ff ff2c 	bl	8001208 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <HAL_SPDIFRX_MspInit+0xcc>)
 80013b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80013b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <HAL_SPDIFRX_MspInit+0xcc>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013bc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_SPDIFRX_MspInit+0xcc>)
 80013c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80013c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <HAL_SPDIFRX_MspInit+0xcc>)
 80013d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013d4:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <HAL_SPDIFRX_MspInit+0xcc>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013de:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_SPDIFRX_MspInit+0xcc>)
 80013e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001404:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001408:	4619      	mov	r1, r3
 800140a:	4808      	ldr	r0, [pc, #32]	@ (800142c <HAL_SPDIFRX_MspInit+0xd0>)
 800140c:	f000 fcb6 	bl	8001d7c <HAL_GPIO_Init>

    /* SPDIFRX interrupt Init */
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2061      	movs	r0, #97	@ 0x61
 8001416:	f000 fc04 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 800141a:	2061      	movs	r0, #97	@ 0x61
 800141c:	f000 fc1b 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001420:	bf00      	nop
 8001422:	37e8      	adds	r7, #232	@ 0xe8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	58024400 	.word	0x58024400
 800142c:	58020c00 	.word	0x58020c00

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_MspInit+0x30>)
 8001438:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800143c:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <HAL_MspInit+0x30>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_MspInit+0x30>)
 8001448:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	58024400 	.word	0x58024400

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <NMI_Handler+0x4>

0800146c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001472:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001476:	4807      	ldr	r0, [pc, #28]	@ (8001494 <HardFault_Handler+0x28>)
 8001478:	f000 fe49 	bl	800210e <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	e002      	b.n	8001488 <HardFault_Handler+0x1c>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a03      	ldr	r2, [pc, #12]	@ (8001498 <HardFault_Handler+0x2c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	ddf8      	ble.n	8001482 <HardFault_Handler+0x16>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001490:	e7ef      	b.n	8001472 <HardFault_Handler+0x6>
 8001492:	bf00      	nop
 8001494:	58020800 	.word	0x58020800
 8001498:	000f423f 	.word	0x000f423f

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <MemManage_Handler+0x4>

080014a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 fa7f 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014f2:	480b      	ldr	r0, [pc, #44]	@ (8001520 <TIM2_IRQHandler+0x34>)
 80014f4:	f006 fe7f 	bl	80081f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  uint8_t str[] = "Timing Interrupt\r\n";
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <TIM2_IRQHandler+0x38>)
 80014fa:	1d3c      	adds	r4, r7, #4
 80014fc:	461d      	mov	r5, r3
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	8022      	strh	r2, [r4, #0]
 8001508:	3402      	adds	r4, #2
 800150a:	0c1b      	lsrs	r3, r3, #16
 800150c:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_HS(str, sizeof(str));
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2113      	movs	r1, #19
 8001512:	4618      	mov	r0, r3
 8001514:	f00b f808 	bl	800c528 <CDC_Transmit_HS>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	240003a8 	.word	0x240003a8
 8001524:	0800dddc 	.word	0x0800dddc

08001528 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <SPI1_IRQHandler+0x10>)
 800152e:	f001 f86d 	bl	800260c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	240002ac 	.word	0x240002ac

0800153c <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001542:	f001 fee2 	bl	800330a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	240018d8 	.word	0x240018d8

08001550 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001556:	f001 fed8 	bl	800330a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240018d8 	.word	0x240018d8

08001564 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <OTG_HS_IRQHandler+0x10>)
 800156a:	f001 fece 	bl	800330a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	240018d8 	.word	0x240018d8

08001578 <SPDIF_RX_IRQHandler>:

/**
  * @brief This function handles SPDIF-RX global interrupt.
  */
void SPDIF_RX_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <SPDIF_RX_IRQHandler+0x10>)
 800157e:	f006 fcff 	bl	8007f80 <HAL_SPDIFRX_IRQHandler>
  /* USER CODE BEGIN SPDIF_RX_IRQn 1 */

  /* USER CODE END SPDIF_RX_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	24000354 	.word	0x24000354

0800158c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e00a      	b.n	80015b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800159e:	f3af 8000 	nop.w
 80015a2:	4601      	mov	r1, r0
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	b2ca      	uxtb	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf0      	blt.n	800159e <_read+0x12>
  }

  return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e009      	b.n	80015ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	60ba      	str	r2, [r7, #8]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbf1      	blt.n	80015d8 <_write+0x12>
  }
  return len;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_close>:

int _close(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001626:	605a      	str	r2, [r3, #4]
  return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_isatty>:

int _isatty(int file)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f00b fd68 	bl	800d16c <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24100000 	.word	0x24100000
 80016c8:	00001000 	.word	0x00001000
 80016cc:	240003a4 	.word	0x240003a4
 80016d0:	24002128 	.word	0x24002128

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016d8:	4b32      	ldr	r3, [pc, #200]	@ (80017a4 <SystemInit+0xd0>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	4a31      	ldr	r2, [pc, #196]	@ (80017a4 <SystemInit+0xd0>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016e8:	4b2f      	ldr	r3, [pc, #188]	@ (80017a8 <SystemInit+0xd4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d807      	bhi.n	8001704 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f4:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <SystemInit+0xd4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 030f 	bic.w	r3, r3, #15
 80016fc:	4a2a      	ldr	r2, [pc, #168]	@ (80017a8 <SystemInit+0xd4>)
 80016fe:	f043 0303 	orr.w	r3, r3, #3
 8001702:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001704:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <SystemInit+0xd8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a28      	ldr	r2, [pc, #160]	@ (80017ac <SystemInit+0xd8>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001710:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <SystemInit+0xd8>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001716:	4b25      	ldr	r3, [pc, #148]	@ (80017ac <SystemInit+0xd8>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4924      	ldr	r1, [pc, #144]	@ (80017ac <SystemInit+0xd8>)
 800171c:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <SystemInit+0xdc>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <SystemInit+0xd4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <SystemInit+0xd4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 030f 	bic.w	r3, r3, #15
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <SystemInit+0xd4>)
 8001738:	f043 0303 	orr.w	r3, r3, #3
 800173c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <SystemInit+0xd8>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <SystemInit+0xd8>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800174a:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <SystemInit+0xd8>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <SystemInit+0xd8>)
 8001752:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <SystemInit+0xe0>)
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <SystemInit+0xd8>)
 8001758:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <SystemInit+0xe4>)
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <SystemInit+0xd8>)
 800175e:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <SystemInit+0xe8>)
 8001760:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <SystemInit+0xd8>)
 8001764:	2200      	movs	r2, #0
 8001766:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001768:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <SystemInit+0xd8>)
 800176a:	4a14      	ldr	r2, [pc, #80]	@ (80017bc <SystemInit+0xe8>)
 800176c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <SystemInit+0xd8>)
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001774:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <SystemInit+0xd8>)
 8001776:	4a11      	ldr	r2, [pc, #68]	@ (80017bc <SystemInit+0xe8>)
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <SystemInit+0xd8>)
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001780:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <SystemInit+0xd8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <SystemInit+0xd8>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800178c:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <SystemInit+0xd8>)
 800178e:	2200      	movs	r2, #0
 8001790:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <SystemInit+0xec>)
 8001794:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001798:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00
 80017a8:	52002000 	.word	0x52002000
 80017ac:	58024400 	.word	0x58024400
 80017b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017b4:	02020200 	.word	0x02020200
 80017b8:	01ff0000 	.word	0x01ff0000
 80017bc:	01010280 	.word	0x01010280
 80017c0:	52004000 	.word	0x52004000

080017c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6349205;
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017f8:	4a18      	ldr	r2, [pc, #96]	@ (800185c <MX_TIM2_Init+0x98>)
 80017fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <MX_TIM2_Init+0x94>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_TIM2_Init+0x94>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001808:	4813      	ldr	r0, [pc, #76]	@ (8001858 <MX_TIM2_Init+0x94>)
 800180a:	f006 fc9d 	bl	8008148 <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001814:	f7ff fcf8 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	4619      	mov	r1, r3
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <MX_TIM2_Init+0x94>)
 8001826:	f006 fded 	bl	8008404 <HAL_TIM_ConfigClockSource>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001830:	f7ff fcea 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001834:	2320      	movs	r3, #32
 8001836:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_TIM2_Init+0x94>)
 8001842:	f007 f847 	bl	80088d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800184c:	f7ff fcdc 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	240003a8 	.word	0x240003a8
 800185c:	0060e195 	.word	0x0060e195

08001860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001870:	d116      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <HAL_TIM_Base_MspInit+0x48>)
 8001874:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001878:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_TIM_Base_MspInit+0x48>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_TIM_Base_MspInit+0x48>)
 8001884:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	201c      	movs	r0, #28
 8001896:	f000 f9c4 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800189a:	201c      	movs	r0, #28
 800189c:	f000 f9db 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58024400 	.word	0x58024400

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b0:	f7ff ff10 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	@ (80018f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f00b fc4d 	bl	800d178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff fa7f 	bl	8000de0 <main>
  bx  lr
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80018e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018ec:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80018f0:	0800dec4 	.word	0x0800dec4
  ldr r2, =_sbss
 80018f4:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80018f8:	24002128 	.word	0x24002128

080018fc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001906:	2003      	movs	r0, #3
 8001908:	f000 f980 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800190c:	f003 fc8e 	bl	800522c <HAL_RCC_GetSysClockFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_Init+0x68>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	4913      	ldr	r1, [pc, #76]	@ (800196c <HAL_Init+0x6c>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
 8001928:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <HAL_Init+0x68>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	4a0e      	ldr	r2, [pc, #56]	@ (800196c <HAL_Init+0x6c>)
 8001934:	5cd3      	ldrb	r3, [r2, r3]
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <HAL_Init+0x70>)
 8001942:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <HAL_Init+0x74>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194a:	200f      	movs	r0, #15
 800194c:	f000 f814 	bl	8001978 <HAL_InitTick>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e002      	b.n	8001960 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800195a:	f7ff fd69 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	58024400 	.word	0x58024400
 800196c:	0800de70 	.word	0x0800de70
 8001970:	24000004 	.word	0x24000004
 8001974:	24000000 	.word	0x24000000

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_InitTick+0x60>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e021      	b.n	80019d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_InitTick+0x64>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_InitTick+0x60>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199a:	fbb3 f3f1 	udiv	r3, r3, r1
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f965 	bl	8001c72 <HAL_SYSTICK_Config>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00e      	b.n	80019d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d80a      	bhi.n	80019ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f000 f92f 	bl	8001c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c4:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <HAL_InitTick+0x68>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2400000c 	.word	0x2400000c
 80019dc:	24000000 	.word	0x24000000
 80019e0:	24000008 	.word	0x24000008

080019e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_IncTick+0x20>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_IncTick+0x24>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <HAL_IncTick+0x24>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	2400000c 	.word	0x2400000c
 8001a08:	240003f4 	.word	0x240003f4

08001a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <HAL_GetTick+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	240003f4 	.word	0x240003f4

08001a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff ffee 	bl	8001a0c <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d005      	beq.n	8001a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_Delay+0x44>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4a:	bf00      	nop
 8001a4c:	f7ff ffde 	bl	8001a0c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d8f7      	bhi.n	8001a4c <HAL_Delay+0x28>
  {
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2400000c 	.word	0x2400000c

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <__NVIC_SetPriorityGrouping+0x40>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <__NVIC_SetPriorityGrouping+0x40>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	05fa0000 	.word	0x05fa0000

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	@ (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	@ (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	@ (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	@ (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff8e 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff29 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff40 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff90 	bl	8001b60 <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5f 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff33 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa4 	bl	8001bc8 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c90:	f3bf 8f5f 	dmb	sy
}
 8001c94:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c96:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <HAL_MPU_Disable+0x28>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <HAL_MPU_Disable+0x28>)
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_MPU_Disable+0x2c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00
 8001cb8:	e000ed90 	.word	0xe000ed90

08001cbc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf4 <HAL_MPU_Enable+0x38>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_MPU_Enable+0x3c>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_MPU_Enable+0x3c>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cda:	f3bf 8f4f 	dsb	sy
}
 8001cde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ce0:	f3bf 8f6f 	isb	sy
}
 8001ce4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed90 	.word	0xe000ed90
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	785a      	ldrb	r2, [r3, #1]
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <HAL_MPU_ConfigRegion+0x7c>)
 8001d0a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_MPU_ConfigRegion+0x7c>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <HAL_MPU_ConfigRegion+0x7c>)
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d18:	4a17      	ldr	r2, [pc, #92]	@ (8001d78 <HAL_MPU_ConfigRegion+0x7c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7b1b      	ldrb	r3, [r3, #12]
 8001d24:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7adb      	ldrb	r3, [r3, #11]
 8001d2a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7a9b      	ldrb	r3, [r3, #10]
 8001d32:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7b5b      	ldrb	r3, [r3, #13]
 8001d3a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7b9b      	ldrb	r3, [r3, #14]
 8001d42:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7bdb      	ldrb	r3, [r3, #15]
 8001d4a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7a5b      	ldrb	r3, [r3, #9]
 8001d52:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7a1b      	ldrb	r3, [r3, #8]
 8001d5a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d5c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	7812      	ldrb	r2, [r2, #0]
 8001d62:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d64:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d66:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d68:	6113      	str	r3, [r2, #16]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed90 	.word	0xe000ed90

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d8a:	4b89      	ldr	r3, [pc, #548]	@ (8001fb0 <HAL_GPIO_Init+0x234>)
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d8e:	e194      	b.n	80020ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8186 	beq.w	80020b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_GPIO_Init+0x44>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d130      	bne.n	8001e22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df6:	2201      	movs	r2, #1
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0201 	and.w	r2, r3, #1
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d017      	beq.n	8001e5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	69b9      	ldr	r1, [r7, #24]
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80e0 	beq.w	80020b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb4 <HAL_GPIO_Init+0x238>)
 8001ef6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001efa:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb4 <HAL_GPIO_Init+0x238>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001f04:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <HAL_GPIO_Init+0x238>)
 8001f06:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f12:	4a29      	ldr	r2, [pc, #164]	@ (8001fb8 <HAL_GPIO_Init+0x23c>)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a20      	ldr	r2, [pc, #128]	@ (8001fbc <HAL_GPIO_Init+0x240>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d052      	beq.n	8001fe4 <HAL_GPIO_Init+0x268>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc0 <HAL_GPIO_Init+0x244>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d031      	beq.n	8001faa <HAL_GPIO_Init+0x22e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <HAL_GPIO_Init+0x248>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <HAL_GPIO_Init+0x22a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc8 <HAL_GPIO_Init+0x24c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d025      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	@ (8001fcc <HAL_GPIO_Init+0x250>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01f      	beq.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd0 <HAL_GPIO_Init+0x254>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_GPIO_Init+0x258>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x21a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_GPIO_Init+0x25c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x216>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a18      	ldr	r2, [pc, #96]	@ (8001fdc <HAL_GPIO_Init+0x260>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x212>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_GPIO_Init+0x264>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x20e>
 8001f86:	2309      	movs	r3, #9
 8001f88:	e02d      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	e02b      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f8e:	2308      	movs	r3, #8
 8001f90:	e029      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f92:	2307      	movs	r3, #7
 8001f94:	e027      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f96:	2306      	movs	r3, #6
 8001f98:	e025      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	e023      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	e021      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e01f      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e01d      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e01b      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001fae:	bf00      	nop
 8001fb0:	58000080 	.word	0x58000080
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58000400 	.word	0x58000400
 8001fbc:	58020000 	.word	0x58020000
 8001fc0:	58020400 	.word	0x58020400
 8001fc4:	58020800 	.word	0x58020800
 8001fc8:	58020c00 	.word	0x58020c00
 8001fcc:	58021000 	.word	0x58021000
 8001fd0:	58021400 	.word	0x58021400
 8001fd4:	58021800 	.word	0x58021800
 8001fd8:	58021c00 	.word	0x58021c00
 8001fdc:	58022000 	.word	0x58022000
 8001fe0:	58022400 	.word	0x58022400
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	f002 0203 	and.w	r2, r2, #3
 8001fec:	0092      	lsls	r2, r2, #2
 8001fee:	4093      	lsls	r3, r2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff6:	4938      	ldr	r1, [pc, #224]	@ (80020d8 <HAL_GPIO_Init+0x35c>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800202a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002058:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	3301      	adds	r3, #1
 80020b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f ae63 	bne.w	8001d90 <HAL_GPIO_Init+0x14>
  }
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3724      	adds	r7, #36	@ 0x24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	58000400 	.word	0x58000400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	041a      	lsls	r2, r3, #16
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43d9      	mvns	r1, r3
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	400b      	ands	r3, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	619a      	str	r2, [r3, #24]
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e08b      	b.n	800226e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fc0c 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	@ 0x24
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002194:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e006      	b.n	80021cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d108      	bne.n	80021e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	e007      	b.n	80021f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_I2C_Init+0x134>)
 8002202:	430b      	orrs	r3, r1
 8002204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69d9      	ldr	r1, [r3, #28]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1a      	ldr	r2, [r3, #32]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	02008000 	.word	0x02008000

0800227c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	d138      	bne.n	8002304 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800229c:	2302      	movs	r3, #2
 800229e:	e032      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	@ 0x24
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	d139      	bne.n	800239c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002332:	2302      	movs	r3, #2
 8002334:	e033      	b.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2224      	movs	r2, #36	@ 0x24
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002364:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e11a      	b.n	80025f4 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fbf8 	bl	8000bc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0201 	bic.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b04      	cmp	r3, #4
 800240c:	d008      	beq.n	8002420 <HAL_I2S_Init+0x74>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b06      	cmp	r3, #6
 8002414:	d004      	beq.n	8002420 <HAL_I2S_Init+0x74>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b0a      	cmp	r3, #10
 800241c:	f040 8094 	bne.w	8002548 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d067      	beq.n	80024f8 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8002430:	2302      	movs	r3, #2
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e001      	b.n	800243a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b30      	cmp	r3, #48	@ 0x30
 8002440:	d003      	beq.n	800244a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002446:	2bb0      	cmp	r3, #176	@ 0xb0
 8002448:	d102      	bne.n	8002450 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800244a:	2301      	movs	r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	e001      	b.n	8002454 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a68      	ldr	r2, [pc, #416]	@ (80025fc <HAL_I2S_Init+0x250>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d107      	bne.n	800246e <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 800245e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	f004 fa5f 	bl	8006928 <HAL_RCCEx_GetPeriphCLKFreq>
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	e006      	b.n	800247c <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800246e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	f004 fa57 	bl	8006928 <HAL_RCCEx_GetPeriphCLKFreq>
 800247a:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002484:	d113      	bne.n	80024ae <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002486:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	fbb2 f2f3 	udiv	r2, r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	461a      	mov	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	3305      	adds	r3, #5
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e014      	b.n	80024d8 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80024ae:	2220      	movs	r2, #32
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	3305      	adds	r3, #5
 80024d6:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4a49      	ldr	r2, [pc, #292]	@ (8002600 <HAL_I2S_Init+0x254>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e003      	b.n	8002500 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d102      	bne.n	800250c <HAL_I2S_Init+0x160>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d002      	beq.n	8002512 <HAL_I2S_Init+0x166>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2bff      	cmp	r3, #255	@ 0xff
 8002510:	d907      	bls.n	8002522 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e068      	b.n	80025f4 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8002528:	2301      	movs	r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002532:	4b34      	ldr	r3, [pc, #208]	@ (8002604 <HAL_I2S_Init+0x258>)
 8002534:	4013      	ands	r3, r2
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	0411      	lsls	r1, r2, #16
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	0612      	lsls	r2, r2, #24
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800254e:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <HAL_I2S_Init+0x25c>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6851      	ldr	r1, [r2, #4]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6892      	ldr	r2, [r2, #8]
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	4311      	orrs	r1, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6992      	ldr	r2, [r2, #24]
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6a12      	ldr	r2, [r2, #32]
 800256c:	4311      	orrs	r1, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6912      	ldr	r2, [r2, #16]
 8002578:	430a      	orrs	r2, r1
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f640 72f8 	movw	r2, #4088	@ 0xff8
 800258e:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800259e:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d007      	beq.n	80025ce <HAL_I2S_Init+0x222>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d003      	beq.n	80025ce <HAL_I2S_Init+0x222>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	d10a      	bne.n	80025e4 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	58001400 	.word	0x58001400
 8002600:	cccccccd 	.word	0xcccccccd
 8002604:	fe00ffff 	.word	0xfe00ffff
 8002608:	fdff9040 	.word	0xfdff9040

0800260c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b04      	cmp	r3, #4
 8002636:	d12f      	bne.n	8002698 <HAL_I2S_IRQHandler+0x8c>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_I2S_IRQHandler+0x48>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01c      	beq.n	8002698 <HAL_I2S_IRQHandler+0x8c>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6919      	ldr	r1, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b62      	ldr	r3, [pc, #392]	@ (80027f4 <HAL_I2S_IRQHandler+0x1e8>)
 800266a:	400b      	ands	r3, r1
 800266c:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800267c:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800268a:	f043 0202 	orr.w	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8b2 	bl	80027fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d12f      	bne.n	8002704 <HAL_I2S_IRQHandler+0xf8>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_I2S_IRQHandler+0xb4>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <HAL_I2S_IRQHandler+0xb4>
    {
      hi2s->TxISR(hi2s);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01c      	beq.n	8002704 <HAL_I2S_IRQHandler+0xf8>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 72b1 	bic.w	r2, r2, #354	@ 0x162
 80026d8:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0220 	orr.w	r2, r2, #32
 80026e8:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026f6:	f043 0204 	orr.w	r2, r3, #4
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f87c 	bl	80027fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b05      	cmp	r3, #5
 800270e:	d16c      	bne.n	80027ea <HAL_I2S_IRQHandler+0x1de>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_I2S_IRQHandler+0x11e>
    {
      hi2s->TxISR(hi2s);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_I2S_IRQHandler+0x13a>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <HAL_I2S_IRQHandler+0x13a>
    {
      hi2s->RxISR(hi2s);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_I2S_IRQHandler+0x156>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_I2S_IRQHandler+0x156>
    {
      hi2s->TxISR(hi2s);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01c      	beq.n	80027a6 <HAL_I2S_IRQHandler+0x19a>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_I2S_IRQHandler+0x1ec>)
 8002778:	400b      	ands	r3, r1
 800277a:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f82b 	bl	80027fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <HAL_I2S_IRQHandler+0x1de>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <HAL_I2S_IRQHandler+0x1ec>)
 80027bc:	400b      	ands	r3, r1
 80027be:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027ce:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027dc:	f043 0202 	orr.w	r2, r3, #2
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f809 	bl	80027fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	fffffe9e 	.word	0xfffffe9e
 80027f8:	fffffe9c 	.word	0xfffffe9c

080027fc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e037      	b.n	8002896 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7fd ff3c 	bl	80006b8 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f006 f8ee 	bl	8008a2c <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	461a      	mov	r2, r3
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	f006 f910 	bl	8008a80 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	461a      	mov	r2, r3
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f006 f925 	bl	8008aba <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0204 	orr.w	r2, r2, #4
 800287e:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002880:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <HAL_NAND_Init+0x90>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a06      	ldr	r2, [pc, #24]	@ (80028a0 <HAL_NAND_Init+0x90>)
 8002886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800288a:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	52004000 	.word	0x52004000

080028a4 <HAL_NAND_Read_ID>:
  *                the configuration information for NAND module.
  * @param  pNAND_ID NAND ID structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t data = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t data1 = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d101      	bne.n	80028c6 <HAL_NAND_Read_ID+0x22>
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e066      	b.n	8002994 <HAL_NAND_Read_ID+0xf0>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d15f      	bne.n	8002992 <HAL_NAND_Read_ID+0xee>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_NAND_Read_ID+0x3c>
 80028dc:	2302      	movs	r3, #2
 80028de:	e059      	b.n	8002994 <HAL_NAND_Read_ID+0xf0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80028f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80028f4:	617b      	str	r3, [r7, #20]

    /* Send Read ID command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	2290      	movs	r2, #144	@ 0x90
 80028fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002900:	f3bf 8f4f 	dsb	sy
}
 8002904:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002910:	f3bf 8f4f 	dsb	sy
}
 8002914:	bf00      	nop
    __DSB();

    /* Read the electronic signature from NAND flash */
    if (hnand->Init.MemoryDataWidth == FMC_NAND_MEM_BUS_WIDTH_8)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_NAND_Read_ID+0xa8>
    {
      data = *(__IO uint32_t *)deviceaddress;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	613b      	str	r3, [r7, #16]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	b2da      	uxtb	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	b2da      	uxtb	r2, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	0e1b      	lsrs	r3, r3, #24
 8002944:	b2da      	uxtb	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	70da      	strb	r2, [r3, #3]
 800294a:	e018      	b.n	800297e <HAL_NAND_Read_ID+0xda>
    }
    else
    {
      data = *(__IO uint32_t *)deviceaddress;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	613b      	str	r3, [r7, #16]
      data1 = *((__IO uint32_t *)deviceaddress + 4);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3310      	adds	r3, #16
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	b2da      	uxtb	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	b2da      	uxtb	r2, r3
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	70da      	strb	r2, [r3, #3]
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_NAND_Read_ID+0xf0>
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	@ 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d101      	bne.n	80029ca <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
 80029c8:	e140      	b.n	8002c4c <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	f040 8139 	bne.w	8002c4a <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_NAND_Read_Page_8b+0x46>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e132      	b.n	8002c4c <HAL_NAND_Read_Page_8b+0x2ac>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80029f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029fa:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	889b      	ldrh	r3, [r3, #4]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	885b      	ldrh	r3, [r3, #2]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a12:	fb00 f303 	mul.w	r3, r0, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	440b      	add	r3, r1
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8002a24:	e0fa      	b.n	8002c1c <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a30:	f3bf 8f4f 	dsb	sy
}
 8002a34:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a3e:	d848      	bhi.n	8002ad2 <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a50:	d21a      	bcs.n	8002a88 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a5c:	f3bf 8f4f 	dsb	sy
}
 8002a60:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a6e:	f3bf 8f4f 	dsb	sy
}
 8002a72:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	0a1a      	lsrs	r2, r3, #8
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a82:	f3bf 8f4f 	dsb	sy
}
 8002a86:	e07d      	b.n	8002b84 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a92:	f3bf 8f4f 	dsb	sy
}
 8002a96:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002aa4:	f3bf 8f4f 	dsb	sy
}
 8002aa8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	0a1a      	lsrs	r2, r3, #8
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ab8:	f3bf 8f4f 	dsb	sy
}
 8002abc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	0c1a      	lsrs	r2, r3, #16
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002acc:	f3bf 8f4f 	dsb	sy
}
 8002ad0:	e058      	b.n	8002b84 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae2:	d222      	bcs.n	8002b2a <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002aee:	f3bf 8f4f 	dsb	sy
}
 8002af2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002afe:	f3bf 8f4f 	dsb	sy
}
 8002b02:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b10:	f3bf 8f4f 	dsb	sy
}
 8002b14:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	0a1a      	lsrs	r2, r3, #8
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b24:	f3bf 8f4f 	dsb	sy
}
 8002b28:	e02c      	b.n	8002b84 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b34:	f3bf 8f4f 	dsb	sy
}
 8002b38:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b44:	f3bf 8f4f 	dsb	sy
}
 8002b48:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b56:	f3bf 8f4f 	dsb	sy
}
 8002b5a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	0a1a      	lsrs	r2, r3, #8
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b6a:	f3bf 8f4f 	dsb	sy
}
 8002b6e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	0c1a      	lsrs	r2, r3, #16
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b7e:	f3bf 8f4f 	dsb	sy
}
 8002b82:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8a:	2230      	movs	r2, #48	@ 0x30
 8002b8c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b8e:	f3bf 8f4f 	dsb	sy
}
 8002b92:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d123      	bne.n	8002be6 <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe ff35 	bl	8001a0c <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8002ba4:	e011      	b.n	8002bca <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8002ba6:	f7fe ff31 	bl	8001a0c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb4:	d909      	bls.n	8002bca <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e040      	b.n	8002c4c <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fa37 	bl	800303e <HAL_NAND_Read_Status>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b40      	cmp	r3, #64	@ 0x40
 8002bd4:	d1e7      	bne.n	8002ba6 <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002be0:	f3bf 8f4f 	dsb	sy
}
 8002be4:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bea:	e009      	b.n	8002c00 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	701a      	strb	r2, [r3, #0]
        buff++;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8002bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3f0      	bcc.n	8002bec <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	3301      	adds	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_NAND_Read_Page_8b+0x296>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f4ff aef8 	bcc.w	8002a26 <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3730      	adds	r7, #48	@ 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	@ 0x30
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d101      	bne.n	8002c7e <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e13e      	b.n	8002efc <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 8137 	bne.w	8002efa <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_NAND_Write_Page_8b+0x46>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e130      	b.n	8002efc <HAL_NAND_Write_Page_8b+0x2a8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8002caa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002cae:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	889b      	ldrh	r3, [r3, #4]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	885b      	ldrh	r3, [r3, #2]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc6:	fb00 f303 	mul.w	r3, r0, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8002cd8:	e0f8      	b.n	8002ecc <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ce4:	f3bf 8f4f 	dsb	sy
}
 8002ce8:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	2280      	movs	r2, #128	@ 0x80
 8002cf2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cf4:	f3bf 8f4f 	dsb	sy
}
 8002cf8:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d02:	d848      	bhi.n	8002d96 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d14:	d21a      	bcs.n	8002d4c <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d20:	f3bf 8f4f 	dsb	sy
}
 8002d24:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d32:	f3bf 8f4f 	dsb	sy
}
 8002d36:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	0a1a      	lsrs	r2, r3, #8
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d46:	f3bf 8f4f 	dsb	sy
}
 8002d4a:	e07d      	b.n	8002e48 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d56:	f3bf 8f4f 	dsb	sy
}
 8002d5a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d68:	f3bf 8f4f 	dsb	sy
}
 8002d6c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	0a1a      	lsrs	r2, r3, #8
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d7c:	f3bf 8f4f 	dsb	sy
}
 8002d80:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	0c1a      	lsrs	r2, r3, #16
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d90:	f3bf 8f4f 	dsb	sy
}
 8002d94:	e058      	b.n	8002e48 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da6:	d222      	bcs.n	8002dee <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002db2:	f3bf 8f4f 	dsb	sy
}
 8002db6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dc2:	f3bf 8f4f 	dsb	sy
}
 8002dc6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dd4:	f3bf 8f4f 	dsb	sy
}
 8002dd8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	0a1a      	lsrs	r2, r3, #8
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002de8:	f3bf 8f4f 	dsb	sy
}
 8002dec:	e02c      	b.n	8002e48 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002df8:	f3bf 8f4f 	dsb	sy
}
 8002dfc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e08:	f3bf 8f4f 	dsb	sy
}
 8002e0c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e1a:	f3bf 8f4f 	dsb	sy
}
 8002e1e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	0a1a      	lsrs	r2, r3, #8
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e2e:	f3bf 8f4f 	dsb	sy
}
 8002e32:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	0c1a      	lsrs	r2, r3, #16
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e42:	f3bf 8f4f 	dsb	sy
}
 8002e46:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e4c:	e00c      	b.n	8002e68 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	701a      	strb	r2, [r3, #0]
        buff++;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e5c:	f3bf 8f4f 	dsb	sy
}
 8002e60:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8002e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e64:	3301      	adds	r3, #1
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3ed      	bcc.n	8002e4e <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e78:	2210      	movs	r2, #16
 8002e7a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e7c:	f3bf 8f4f 	dsb	sy
}
 8002e80:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fdc3 	bl	8001a0c <HAL_GetTick>
 8002e86:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8002e88:	e011      	b.n	8002eae <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8002e8a:	f7fe fdbf 	bl	8001a0c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e98:	d909      	bls.n	8002eae <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e026      	b.n	8002efc <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8c5 	bl	800303e <HAL_NAND_Read_Status>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	d1e7      	bne.n	8002e8a <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8002eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_NAND_Write_Page_8b+0x292>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	f4ff aefa 	bcc.w	8002cda <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3730      	adds	r7, #48	@ 0x30
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d101      	bne.n	8002f1e <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e089      	b.n	8003032 <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	f040 8082 	bne.w	8003030 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_NAND_Erase_Block+0x36>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e07b      	b.n	8003032 <HAL_NAND_Erase_Block+0x12e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8002f4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002f4e:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f56:	2260      	movs	r2, #96	@ 0x60
 8002f58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f5a:	f3bf 8f4f 	dsb	sy
}
 8002f5e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	889b      	ldrh	r3, [r3, #4]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	885b      	ldrh	r3, [r3, #2]
 8002f70:	4618      	mov	r0, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	fb00 f303 	mul.w	r3, r0, r3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	b2d9      	uxtb	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	fb11 f303 	smulbb	r3, r1, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8002f90:	4413      	add	r3, r2
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f96:	f3bf 8f4f 	dsb	sy
}
 8002f9a:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	889b      	ldrh	r3, [r3, #4]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	885b      	ldrh	r3, [r3, #2]
 8002fac:	4618      	mov	r0, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb2:	fb00 f303 	mul.w	r3, r0, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fbc:	fb02 f303 	mul.w	r3, r2, r3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	0a1a      	lsrs	r2, r3, #8
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fce:	f3bf 8f4f 	dsb	sy
}
 8002fd2:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	889b      	ldrh	r3, [r3, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	885b      	ldrh	r3, [r3, #2]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	fb00 f303 	mul.w	r3, r0, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0c1a      	lsrs	r2, r3, #16
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003006:	f3bf 8f4f 	dsb	sy
}
 800300a:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003012:	22d0      	movs	r2, #208	@ 0xd0
 8003014:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003016:	f3bf 8f4f 	dsb	sy
}
 800301a:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8003046:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800304a:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003052:	2270      	movs	r2, #112	@ 0x70
 8003054:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e007      	b.n	800307c <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8003076:	2340      	movs	r3, #64	@ 0x40
 8003078:	e000      	b.n	800307c <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800307a:	2300      	movs	r3, #0
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af02      	add	r7, sp, #8
 800308e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0fe      	b.n	8003298 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f009 fb82 	bl	800c7b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2203      	movs	r2, #3
 80030b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f005 ff26 	bl	8008f12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7c1a      	ldrb	r2, [r3, #16]
 80030ce:	f88d 2000 	strb.w	r2, [sp]
 80030d2:	3304      	adds	r3, #4
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	f005 fdf7 	bl	8008cc8 <USB_CoreInit>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0d5      	b.n	8003298 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 ff1e 	bl	8008f34 <USB_SetCurrentMode>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0c6      	b.n	8003298 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e04a      	b.n	80031a6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	3315      	adds	r3, #21
 8003120:	2201      	movs	r2, #1
 8003122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3314      	adds	r3, #20
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	b298      	uxth	r0, r3
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	332e      	adds	r3, #46	@ 0x2e
 800314c:	4602      	mov	r2, r0
 800314e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3318      	adds	r3, #24
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	331c      	adds	r3, #28
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3320      	adds	r3, #32
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3324      	adds	r3, #36	@ 0x24
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	3301      	adds	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	791b      	ldrb	r3, [r3, #4]
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d3af      	bcc.n	8003110 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e044      	b.n	8003240 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	3301      	adds	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	791b      	ldrb	r3, [r3, #4]
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	429a      	cmp	r2, r3
 8003248:	d3b5      	bcc.n	80031b6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7c1a      	ldrb	r2, [r3, #16]
 8003252:	f88d 2000 	strb.w	r2, [sp]
 8003256:	3304      	adds	r3, #4
 8003258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325a:	f005 feb7 	bl	8008fcc <USB_DevInit>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e013      	b.n	8003298 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7b1b      	ldrb	r3, [r3, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d102      	bne.n	800328c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f001 f96e 	bl	8004568 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f006 fefa 	bl	800a08a <USB_DevDisconnect>

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_PCD_Start+0x1c>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e022      	b.n	8003302 <HAL_PCD_Start+0x62>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 fe01 	bl	8008ef0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f006 fea8 	bl	800a048 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800330a:	b590      	push	{r4, r7, lr}
 800330c:	b08d      	sub	sp, #52	@ 0x34
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f006 ff66 	bl	800a1f2 <USB_GetMode>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 84b9 	bne.w	8003ca0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f006 feca 	bl	800a0cc <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 84af 	beq.w	8003c9e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f006 feb7 	bl	800a0cc <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b02      	cmp	r3, #2
 8003366:	d107      	bne.n	8003378 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f002 0202 	and.w	r2, r2, #2
 8003376:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f006 fea5 	bl	800a0cc <USB_ReadInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b10      	cmp	r3, #16
 800338a:	d161      	bne.n	8003450 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0210 	bic.w	r2, r2, #16
 800339a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f003 020f 	and.w	r2, r3, #15
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	0c5b      	lsrs	r3, r3, #17
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d124      	bne.n	8003412 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d035      	beq.n	8003440 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	6a38      	ldr	r0, [r7, #32]
 80033e8:	f006 fcdc 	bl	8009da4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f8:	441a      	add	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800340a:	441a      	add	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	615a      	str	r2, [r3, #20]
 8003410:	e016      	b.n	8003440 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	0c5b      	lsrs	r3, r3, #17
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	2b06      	cmp	r3, #6
 800341c:	d110      	bne.n	8003440 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003424:	2208      	movs	r2, #8
 8003426:	4619      	mov	r1, r3
 8003428:	6a38      	ldr	r0, [r7, #32]
 800342a:	f006 fcbb 	bl	8009da4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800343a:	441a      	add	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0210 	orr.w	r2, r2, #16
 800344e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f006 fe39 	bl	800a0cc <USB_ReadInterrupts>
 800345a:	4603      	mov	r3, r0
 800345c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003460:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003464:	f040 80a7 	bne.w	80035b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f006 fe3e 	bl	800a0f2 <USB_ReadDevAllOutEpInterrupt>
 8003476:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003478:	e099      	b.n	80035ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 808e 	beq.w	80035a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f006 fe62 	bl	800a15a <USB_ReadDevOutEPInterrupt>
 8003496:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00c      	beq.n	80034bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ae:	461a      	mov	r2, r3
 80034b0:	2301      	movs	r3, #1
 80034b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fed0 	bl	800425c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00c      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	2308      	movs	r3, #8
 80034d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 ffa6 	bl	800442c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f6:	461a      	mov	r2, r3
 80034f8:	2310      	movs	r3, #16
 80034fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d030      	beq.n	8003568 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350e:	2b80      	cmp	r3, #128	@ 0x80
 8003510:	d109      	bne.n	8003526 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003520:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003524:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	3304      	adds	r3, #4
 800353a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	78db      	ldrb	r3, [r3, #3]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d108      	bne.n	8003556 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2200      	movs	r2, #0
 8003548:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f009 fa89 	bl	800ca68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	2302      	movs	r3, #2
 8003566:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357e:	461a      	mov	r2, r3
 8003580:	2320      	movs	r3, #32
 8003582:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800359a:	461a      	mov	r2, r3
 800359c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	3301      	adds	r3, #1
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f af62 	bne.w	800347a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f006 fd86 	bl	800a0cc <USB_ReadInterrupts>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035ca:	f040 80db 	bne.w	8003784 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f006 fda7 	bl	800a126 <USB_ReadDevAllInEpInterrupt>
 80035d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80035de:	e0cd      	b.n	800377c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80c2 	beq.w	8003770 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f006 fdcd 	bl	800a196 <USB_ReadDevInEPInterrupt>
 80035fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d057      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	2201      	movs	r2, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800361c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	69f9      	ldr	r1, [r7, #28]
 8003624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003628:	4013      	ands	r3, r2
 800362a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003638:	461a      	mov	r2, r3
 800363a:	2301      	movs	r3, #1
 800363c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	799b      	ldrb	r3, [r3, #6]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d132      	bne.n	80036ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	3320      	adds	r3, #32
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4403      	add	r3, r0
 8003666:	331c      	adds	r3, #28
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4419      	add	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4403      	add	r3, r0
 800367a:	3320      	adds	r3, #32
 800367c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d113      	bne.n	80036ac <HAL_PCD_IRQHandler+0x3a2>
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3324      	adds	r3, #36	@ 0x24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d108      	bne.n	80036ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036a4:	461a      	mov	r2, r3
 80036a6:	2101      	movs	r1, #1
 80036a8:	f006 fdd6 	bl	800a258 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f009 f953 	bl	800c95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ce:	461a      	mov	r2, r3
 80036d0:	2308      	movs	r3, #8
 80036d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ea:	461a      	mov	r2, r3
 80036ec:	2310      	movs	r3, #16
 80036ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003706:	461a      	mov	r2, r3
 8003708:	2340      	movs	r3, #64	@ 0x40
 800370a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003718:	6a38      	ldr	r0, [r7, #32]
 800371a:	f005 fdb5 	bl	8009288 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800371e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	3310      	adds	r3, #16
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	78db      	ldrb	r3, [r3, #3]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d108      	bne.n	800374c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	b2db      	uxtb	r3, r3
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f009 f9a0 	bl	800ca8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003758:	461a      	mov	r2, r3
 800375a:	2302      	movs	r3, #2
 800375c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fcea 	bl	8004144 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	3301      	adds	r3, #1
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	2b00      	cmp	r3, #0
 8003780:	f47f af2e 	bne.w	80035e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f006 fc9f 	bl	800a0cc <USB_ReadInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003798:	d122      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d108      	bne.n	80037ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037c0:	2100      	movs	r1, #0
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fef4 	bl	80045b0 <HAL_PCDEx_LPM_Callback>
 80037c8:	e002      	b.n	80037d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f009 f93e 	bl	800ca4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80037de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f006 fc71 	bl	800a0cc <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f4:	d112      	bne.n	800381c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f009 f8fa 	bl	800ca00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800381a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f006 fc53 	bl	800a0cc <USB_ReadInterrupts>
 8003826:	4603      	mov	r3, r0
 8003828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800382c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003830:	d121      	bne.n	8003876 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003840:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003848:	2b00      	cmp	r3, #0
 800384a:	d111      	bne.n	8003870 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	f003 020f 	and.w	r2, r3, #15
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003866:	2101      	movs	r1, #1
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fea1 	bl	80045b0 <HAL_PCDEx_LPM_Callback>
 800386e:	e002      	b.n	8003876 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f009 f8c5 	bl	800ca00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f006 fc26 	bl	800a0cc <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388a:	f040 80b7 	bne.w	80039fc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2110      	movs	r1, #16
 80038a8:	4618      	mov	r0, r3
 80038aa:	f005 fced 	bl	8009288 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b2:	e046      	b.n	8003942 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c0:	461a      	mov	r2, r3
 80038c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800390c:	0151      	lsls	r1, r2, #5
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	440a      	add	r2, r1
 8003912:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003916:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800391a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800392c:	0151      	lsls	r1, r2, #5
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	440a      	add	r2, r1
 8003932:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003936:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800393a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800393c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393e:	3301      	adds	r3, #1
 8003940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	791b      	ldrb	r3, [r3, #4]
 8003946:	461a      	mov	r2, r3
 8003948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394a:	4293      	cmp	r3, r2
 800394c:	d3b2      	bcc.n	80038b4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800395c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003960:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7bdb      	ldrb	r3, [r3, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800397a:	f043 030b 	orr.w	r3, r3, #11
 800397e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003990:	f043 030b 	orr.w	r3, r3, #11
 8003994:	6453      	str	r3, [r2, #68]	@ 0x44
 8003996:	e015      	b.n	80039c4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a6:	4619      	mov	r1, r3
 80039a8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80039ac:	4313      	orrs	r3, r2
 80039ae:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039be:	f043 030b 	orr.w	r3, r3, #11
 80039c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039e6:	461a      	mov	r2, r3
 80039e8:	f006 fc36 	bl	800a258 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80039fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f006 fb63 	bl	800a0cc <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a10:	d123      	bne.n	8003a5a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f006 fbfa 	bl	800a210 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f005 fcaa 	bl	800937a <USB_GetDevSpeed>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681c      	ldr	r4, [r3, #0]
 8003a32:	f001 fd75 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8003a36:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f005 f9b4 	bl	8008dac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f008 ffb2 	bl	800c9ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f006 fb34 	bl	800a0cc <USB_ReadInterrupts>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d10a      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f008 ff8f 	bl	800c992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f002 0208 	and.w	r2, r2, #8
 8003a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f006 fb1f 	bl	800a0cc <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a94:	2b80      	cmp	r3, #128	@ 0x80
 8003a96:	d123      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa8:	e014      	b.n	8003ad4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fb0a 	bl	80040e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	791b      	ldrb	r3, [r3, #4]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d3e4      	bcc.n	8003aaa <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f006 faf1 	bl	800a0cc <USB_ReadInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af4:	d13c      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af6:	2301      	movs	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afa:	e02b      	b.n	8003b54 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d115      	bne.n	8003b4e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	da12      	bge.n	8003b4e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3317      	adds	r3, #23
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 faca 	bl	80040e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	791b      	ldrb	r3, [r3, #4]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d3cd      	bcc.n	8003afc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f006 faa9 	bl	800a0cc <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b84:	d156      	bne.n	8003c34 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b86:	2301      	movs	r3, #1
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8a:	e045      	b.n	8003c18 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d12e      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da2b      	bge.n	8003c12 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	0c1a      	lsrs	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003bc4:	4053      	eors	r3, r2
 8003bc6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d121      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c0e:	6053      	str	r3, [r2, #4]
            break;
 8003c10:	e008      	b.n	8003c24 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	3301      	adds	r3, #1
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	791b      	ldrb	r3, [r3, #4]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d3b3      	bcc.n	8003b8c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f006 fa47 	bl	800a0cc <USB_ReadInterrupts>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c48:	d10a      	bne.n	8003c60 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f008 ff30 	bl	800cab0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f006 fa31 	bl	800a0cc <USB_ReadInterrupts>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d115      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f008 ff20 	bl	800cacc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	e000      	b.n	8003ca0 <HAL_PCD_IRQHandler+0x996>
      return;
 8003c9e:	bf00      	nop
    }
  }
}
 8003ca0:	3734      	adds	r7, #52	@ 0x34
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd90      	pop	{r4, r7, pc}

08003ca6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_PCD_SetAddress+0x1a>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e012      	b.n	8003ce6 <HAL_PCD_SetAddress+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f006 f990 	bl	8009ffc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	70fb      	strb	r3, [r7, #3]
 8003d00:	460b      	mov	r3, r1
 8003d02:	803b      	strh	r3, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	da0f      	bge.n	8003d34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	3310      	adds	r3, #16
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4413      	add	r3, r2
 8003d28:	3304      	adds	r3, #4
 8003d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	705a      	strb	r2, [r3, #1]
 8003d32:	e00f      	b.n	8003d54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d60:	883b      	ldrh	r3, [r7, #0]
 8003d62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	78ba      	ldrb	r2, [r7, #2]
 8003d6e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d82:	78bb      	ldrb	r3, [r7, #2]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d102      	bne.n	8003d8e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_PCD_EP_Open+0xae>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e00e      	b.n	8003dba <HAL_PCD_EP_Open+0xcc>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f005 fb0a 	bl	80093c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003db8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da0f      	bge.n	8003df6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	f003 020f 	and.w	r2, r3, #15
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	3310      	adds	r3, #16
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	3304      	adds	r3, #4
 8003dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	705a      	strb	r2, [r3, #1]
 8003df4:	e00f      	b.n	8003e16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_PCD_EP_Close+0x6e>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e00e      	b.n	8003e4e <HAL_PCD_EP_Close+0x8c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68f9      	ldr	r1, [r7, #12]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f005 fb48 	bl	80094d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	460b      	mov	r3, r1
 8003e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e66:	7afb      	ldrb	r3, [r7, #11]
 8003e68:	f003 020f 	and.w	r2, r3, #15
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e98:	7afb      	ldrb	r3, [r7, #11]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	799b      	ldrb	r3, [r3, #6]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	799b      	ldrb	r3, [r3, #6]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6979      	ldr	r1, [r7, #20]
 8003ebe:	f005 fbe5 	bl	800968c <USB_EPStartXfer>

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 020f 	and.w	r2, r3, #15
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	3310      	adds	r3, #16
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	3304      	adds	r3, #4
 8003f22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f3c:	7afb      	ldrb	r3, [r7, #11]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	799b      	ldrb	r3, [r3, #6]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d102      	bne.n	8003f56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	799b      	ldrb	r3, [r3, #6]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	6979      	ldr	r1, [r7, #20]
 8003f62:	f005 fb93 	bl	800968c <USB_EPStartXfer>

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	7912      	ldrb	r2, [r2, #4]
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e04f      	b.n	800402e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	da0f      	bge.n	8003fb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 020f 	and.w	r2, r3, #15
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	3310      	adds	r3, #16
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	705a      	strb	r2, [r3, #1]
 8003fb4:	e00d      	b.n	8003fd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3304      	adds	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_PCD_EP_SetStall+0x82>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e01d      	b.n	800402e <HAL_PCD_EP_SetStall+0xbe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	4618      	mov	r0, r3
 8004002:	f005 ff27 	bl	8009e54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7999      	ldrb	r1, [r3, #6]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800401e:	461a      	mov	r2, r3
 8004020:	f006 f91a 	bl	800a258 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	7912      	ldrb	r2, [r2, #4]
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e042      	b.n	80040da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004058:	2b00      	cmp	r3, #0
 800405a:	da0f      	bge.n	800407c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 020f 	and.w	r2, r3, #15
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	3310      	adds	r3, #16
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	705a      	strb	r2, [r3, #1]
 800407a:	e00f      	b.n	800409c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	f003 020f 	and.w	r2, r3, #15
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	3304      	adds	r3, #4
 8004094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_PCD_EP_ClrStall+0x86>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e00e      	b.n	80040da <HAL_PCD_EP_ClrStall+0xa4>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f005 ff30 	bl	8009f30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da0c      	bge.n	8004110 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	3310      	adds	r3, #16
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4413      	add	r3, r2
 800410a:	3304      	adds	r3, #4
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e00c      	b.n	800412a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	f003 020f 	and.w	r2, r3, #15
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	4618      	mov	r0, r3
 8004132:	f005 fd4f 	bl	8009bd4 <USB_EPStopXfer>
 8004136:	4603      	mov	r3, r0
 8004138:	72fb      	strb	r3, [r7, #11]

  return ret;
 800413a:	7afb      	ldrb	r3, [r7, #11]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	@ 0x28
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	3310      	adds	r3, #16
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4413      	add	r3, r2
 8004168:	3304      	adds	r3, #4
 800416a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	d901      	bls.n	800417c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e06b      	b.n	8004254 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	429a      	cmp	r2, r3
 8004190:	d902      	bls.n	8004198 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	3303      	adds	r3, #3
 800419c:	089b      	lsrs	r3, r3, #2
 800419e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041a0:	e02a      	b.n	80041f8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d902      	bls.n	80041be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3303      	adds	r3, #3
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68d9      	ldr	r1, [r3, #12]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4603      	mov	r3, r0
 80041da:	6978      	ldr	r0, [r7, #20]
 80041dc:	f005 fda4 	bl	8009d28 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	441a      	add	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	441a      	add	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	429a      	cmp	r2, r3
 800420c:	d809      	bhi.n	8004222 <PCD_WriteEmptyTxFifo+0xde>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004216:	429a      	cmp	r2, r3
 8004218:	d203      	bcs.n	8004222 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1bf      	bne.n	80041a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	429a      	cmp	r2, r3
 800422c:	d811      	bhi.n	8004252 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	2201      	movs	r2, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	43db      	mvns	r3, r3
 8004248:	6939      	ldr	r1, [r7, #16]
 800424a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800424e:	4013      	ands	r3, r2
 8004250:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	333c      	adds	r3, #60	@ 0x3c
 8004274:	3304      	adds	r3, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	799b      	ldrb	r3, [r3, #6]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d17b      	bne.n	800438a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	4a61      	ldr	r2, [pc, #388]	@ (8004424 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	f240 80b9 	bls.w	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80b3 	beq.w	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042be:	461a      	mov	r2, r3
 80042c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042c4:	6093      	str	r3, [r2, #8]
 80042c6:	e0a7      	b.n	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042de:	461a      	mov	r2, r3
 80042e0:	2320      	movs	r3, #32
 80042e2:	6093      	str	r3, [r2, #8]
 80042e4:	e098      	b.n	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f040 8093 	bne.w	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004424 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d90f      	bls.n	800431a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004310:	461a      	mov	r2, r3
 8004312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004316:	6093      	str	r3, [r2, #8]
 8004318:	e07e      	b.n	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	0159      	lsls	r1, r3, #5
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	440b      	add	r3, r1
 800433c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004346:	1ad2      	subs	r2, r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d114      	bne.n	800437c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004364:	461a      	mov	r2, r3
 8004366:	2101      	movs	r1, #1
 8004368:	f005 ff76 	bl	800a258 <USB_EP0_OutStart>
 800436c:	e006      	b.n	800437c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	441a      	add	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f008 fad0 	bl	800c928 <HAL_PCD_DataOutStageCallback>
 8004388:	e046      	b.n	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4a26      	ldr	r2, [pc, #152]	@ (8004428 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d124      	bne.n	80043dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	461a      	mov	r2, r3
 80043aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ae:	6093      	str	r3, [r2, #8]
 80043b0:	e032      	b.n	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c8:	461a      	mov	r2, r3
 80043ca:	2320      	movs	r3, #32
 80043cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f008 faa7 	bl	800c928 <HAL_PCD_DataOutStageCallback>
 80043da:	e01d      	b.n	8004418 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d114      	bne.n	800440c <PCD_EP_OutXfrComplete_int+0x1b0>
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004404:	461a      	mov	r2, r3
 8004406:	2100      	movs	r1, #0
 8004408:	f005 ff26 	bl	800a258 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f008 fa88 	bl	800c928 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	4f54300a 	.word	0x4f54300a
 8004428:	4f54310a 	.word	0x4f54310a

0800442c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	333c      	adds	r3, #60	@ 0x3c
 8004444:	3304      	adds	r3, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a15      	ldr	r2, [pc, #84]	@ (80044b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d90e      	bls.n	8004480 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004478:	461a      	mov	r2, r3
 800447a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800447e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f008 fa3f 	bl	800c904 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d90c      	bls.n	80044a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	799b      	ldrb	r3, [r3, #6]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d108      	bne.n	80044a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044a0:	461a      	mov	r2, r3
 80044a2:	2101      	movs	r1, #1
 80044a4:	f005 fed8 	bl	800a258 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	4f54300a 	.word	0x4f54300a

080044b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
 80044c4:	4613      	mov	r3, r2
 80044c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044d6:	883b      	ldrh	r3, [r7, #0]
 80044d8:	0419      	lsls	r1, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044e4:	e028      	b.n	8004538 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4413      	add	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e00d      	b.n	8004516 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	3340      	adds	r3, #64	@ 0x40
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	4413      	add	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	3301      	adds	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	3b01      	subs	r3, #1
 800451c:	429a      	cmp	r2, r3
 800451e:	d3ec      	bcc.n	80044fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004520:	883b      	ldrh	r3, [r7, #0]
 8004522:	0418      	lsls	r0, r3, #16
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6819      	ldr	r1, [r3, #0]
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	3b01      	subs	r3, #1
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	4302      	orrs	r2, r0
 8004530:	3340      	adds	r3, #64	@ 0x40
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004596:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_PCDEx_ActivateLPM+0x44>)
 8004598:	4313      	orrs	r3, r2
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	10000003 	.word	0x10000003

080045b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d00a      	beq.n	80045f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045dc:	4b16      	ldr	r3, [pc, #88]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e01f      	b.n	800462e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e01d      	b.n	800462e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045f2:	4b11      	ldr	r3, [pc, #68]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f023 0207 	bic.w	r2, r3, #7
 80045fa:	490f      	ldr	r1, [pc, #60]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004602:	f7fd fa03 	bl	8001a0c <HAL_GetTick>
 8004606:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004608:	e009      	b.n	800461e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800460a:	f7fd f9ff 	bl	8001a0c <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004618:	d901      	bls.n	800461e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e007      	b.n	800462e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800461e:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800462a:	d1ee      	bne.n	800460a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	58024800 	.word	0x58024800

0800463c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a04      	ldr	r2, [pc, #16]	@ (8004658 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800464a:	60d3      	str	r3, [r2, #12]
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	58024800 	.word	0x58024800

0800465c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	@ 0x30
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f000 bc1f 	b.w	8004eae <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80b3 	beq.w	80047e4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467e:	4b95      	ldr	r3, [pc, #596]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004688:	4b92      	ldr	r3, [pc, #584]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800468e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004690:	2b10      	cmp	r3, #16
 8004692:	d007      	beq.n	80046a4 <HAL_RCC_OscConfig+0x48>
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	2b18      	cmp	r3, #24
 8004698:	d112      	bne.n	80046c0 <HAL_RCC_OscConfig+0x64>
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a4:	4b8b      	ldr	r3, [pc, #556]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8098 	beq.w	80047e2 <HAL_RCC_OscConfig+0x186>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 8093 	bne.w	80047e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e3f6      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c8:	d106      	bne.n	80046d8 <HAL_RCC_OscConfig+0x7c>
 80046ca:	4b82      	ldr	r3, [pc, #520]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a81      	ldr	r2, [pc, #516]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e058      	b.n	800478a <HAL_RCC_OscConfig+0x12e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d112      	bne.n	8004706 <HAL_RCC_OscConfig+0xaa>
 80046e0:	4b7c      	ldr	r3, [pc, #496]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7b      	ldr	r2, [pc, #492]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b79      	ldr	r3, [pc, #484]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a78      	ldr	r2, [pc, #480]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4b76      	ldr	r3, [pc, #472]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a75      	ldr	r2, [pc, #468]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80046fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	e041      	b.n	800478a <HAL_RCC_OscConfig+0x12e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800470e:	d112      	bne.n	8004736 <HAL_RCC_OscConfig+0xda>
 8004710:	4b70      	ldr	r3, [pc, #448]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a6f      	ldr	r2, [pc, #444]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004716:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b6d      	ldr	r3, [pc, #436]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a6c      	ldr	r2, [pc, #432]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004722:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b6a      	ldr	r3, [pc, #424]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a69      	ldr	r2, [pc, #420]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800472e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e029      	b.n	800478a <HAL_RCC_OscConfig+0x12e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800473e:	d112      	bne.n	8004766 <HAL_RCC_OscConfig+0x10a>
 8004740:	4b64      	ldr	r3, [pc, #400]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a63      	ldr	r2, [pc, #396]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004746:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b61      	ldr	r3, [pc, #388]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a60      	ldr	r2, [pc, #384]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b5e      	ldr	r3, [pc, #376]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a5d      	ldr	r2, [pc, #372]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800475e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e011      	b.n	800478a <HAL_RCC_OscConfig+0x12e>
 8004766:	4b5b      	ldr	r3, [pc, #364]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a5a      	ldr	r2, [pc, #360]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800476c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b58      	ldr	r3, [pc, #352]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a57      	ldr	r2, [pc, #348]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b55      	ldr	r3, [pc, #340]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a54      	ldr	r2, [pc, #336]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004784:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004788:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fd f93b 	bl	8001a0c <HAL_GetTick>
 8004796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479a:	f7fd f937 	bl	8001a0c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b64      	cmp	r3, #100	@ 0x64
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e380      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ac:	4b49      	ldr	r3, [pc, #292]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x13e>
 80047b8:	e014      	b.n	80047e4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fd f927 	bl	8001a0c <HAL_GetTick>
 80047be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c2:	f7fd f923 	bl	8001a0c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b64      	cmp	r3, #100	@ 0x64
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e36c      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047d4:	4b3f      	ldr	r3, [pc, #252]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_OscConfig+0x166>
 80047e0:	e000      	b.n	80047e4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 808c 	beq.w	800490a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f2:	4b38      	ldr	r3, [pc, #224]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047fc:	4b35      	ldr	r3, [pc, #212]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_RCC_OscConfig+0x1bc>
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2b18      	cmp	r3, #24
 800480c:	d137      	bne.n	800487e <HAL_RCC_OscConfig+0x222>
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d132      	bne.n	800487e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004818:	4b2e      	ldr	r3, [pc, #184]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_RCC_OscConfig+0x1d4>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e33e      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004830:	4b28      	ldr	r3, [pc, #160]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 0219 	bic.w	r2, r3, #25
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4925      	ldr	r1, [pc, #148]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fd f8e3 	bl	8001a0c <HAL_GetTick>
 8004846:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484a:	f7fd f8df 	bl	8001a0c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e328      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800485c:	4b1d      	ldr	r3, [pc, #116]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	4b1a      	ldr	r3, [pc, #104]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	4917      	ldr	r1, [pc, #92]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800487c:	e045      	b.n	800490a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d028      	beq.n	80048d8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004886:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0219 	bic.w	r2, r3, #25
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4910      	ldr	r1, [pc, #64]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd f8b8 	bl	8001a0c <HAL_GetTick>
 800489c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a0:	f7fd f8b4 	bl	8001a0c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e2fd      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048b2:	4b08      	ldr	r3, [pc, #32]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048be:	4b05      	ldr	r3, [pc, #20]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	4901      	ldr	r1, [pc, #4]	@ (80048d4 <HAL_RCC_OscConfig+0x278>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
 80048d2:	e01a      	b.n	800490a <HAL_RCC_OscConfig+0x2ae>
 80048d4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048d8:	4b97      	ldr	r3, [pc, #604]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a96      	ldr	r2, [pc, #600]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd f892 	bl	8001a0c <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ec:	f7fd f88e 	bl	8001a0c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e2d7      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048fe:	4b8e      	ldr	r3, [pc, #568]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d06a      	beq.n	80049ec <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004916:	4b88      	ldr	r3, [pc, #544]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800491e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004920:	4b85      	ldr	r3, [pc, #532]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d007      	beq.n	800493c <HAL_RCC_OscConfig+0x2e0>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b18      	cmp	r3, #24
 8004930:	d11b      	bne.n	800496a <HAL_RCC_OscConfig+0x30e>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d116      	bne.n	800496a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800493c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_OscConfig+0x2f8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	2b80      	cmp	r3, #128	@ 0x80
 800494e:	d001      	beq.n	8004954 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e2ac      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004954:	4b78      	ldr	r3, [pc, #480]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	4975      	ldr	r1, [pc, #468]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004968:	e040      	b.n	80049ec <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d023      	beq.n	80049ba <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004972:	4b71      	ldr	r3, [pc, #452]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a70      	ldr	r2, [pc, #448]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7fd f845 	bl	8001a0c <HAL_GetTick>
 8004982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004986:	f7fd f841 	bl	8001a0c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e28a      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004998:	4b67      	ldr	r3, [pc, #412]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049a4:	4b64      	ldr	r3, [pc, #400]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	4961      	ldr	r1, [pc, #388]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60cb      	str	r3, [r1, #12]
 80049b8:	e018      	b.n	80049ec <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a5e      	ldr	r2, [pc, #376]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 80049c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c6:	f7fd f821 	bl	8001a0c <HAL_GetTick>
 80049ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049ce:	f7fd f81d 	bl	8001a0c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e266      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049e0:	4b55      	ldr	r3, [pc, #340]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d036      	beq.n	8004a66 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d019      	beq.n	8004a34 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a00:	4b4d      	ldr	r3, [pc, #308]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a04:	4a4c      	ldr	r2, [pc, #304]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fc fffe 	bl	8001a0c <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a14:	f7fc fffa 	bl	8001a0c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e243      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a26:	4b44      	ldr	r3, [pc, #272]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x3b8>
 8004a32:	e018      	b.n	8004a66 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a34:	4b40      	ldr	r3, [pc, #256]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a38:	4a3f      	ldr	r2, [pc, #252]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fc ffe4 	bl	8001a0c <HAL_GetTick>
 8004a44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a48:	f7fc ffe0 	bl	8001a0c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e229      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a5a:	4b37      	ldr	r3, [pc, #220]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d036      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d019      	beq.n	8004aae <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004a80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a86:	f7fc ffc1 	bl	8001a0c <HAL_GetTick>
 8004a8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8e:	f7fc ffbd 	bl	8001a0c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e206      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aa0:	4b25      	ldr	r3, [pc, #148]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x432>
 8004aac:	e018      	b.n	8004ae0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aae:	4b22      	ldr	r3, [pc, #136]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a21      	ldr	r2, [pc, #132]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004ab4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ab8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004aba:	f7fc ffa7 	bl	8001a0c <HAL_GetTick>
 8004abe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac2:	f7fc ffa3 	bl	8001a0c <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e1ec      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ad4:	4b18      	ldr	r3, [pc, #96]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80af 	beq.w	8004c4c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aee:	4b13      	ldr	r3, [pc, #76]	@ (8004b3c <HAL_RCC_OscConfig+0x4e0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a12      	ldr	r2, [pc, #72]	@ (8004b3c <HAL_RCC_OscConfig+0x4e0>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004afa:	f7fc ff87 	bl	8001a0c <HAL_GetTick>
 8004afe:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b02:	f7fc ff83 	bl	8001a0c <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b64      	cmp	r3, #100	@ 0x64
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e1cc      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b14:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <HAL_RCC_OscConfig+0x4e0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCC_OscConfig+0x4e4>
 8004b28:	4b03      	ldr	r3, [pc, #12]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2c:	4a02      	ldr	r2, [pc, #8]	@ (8004b38 <HAL_RCC_OscConfig+0x4dc>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b34:	e05b      	b.n	8004bee <HAL_RCC_OscConfig+0x592>
 8004b36:	bf00      	nop
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	58024800 	.word	0x58024800
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_OscConfig+0x512>
 8004b48:	4b9d      	ldr	r3, [pc, #628]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4c:	4a9c      	ldr	r2, [pc, #624]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b54:	4b9a      	ldr	r3, [pc, #616]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b58:	4a99      	ldr	r2, [pc, #612]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b60:	4b97      	ldr	r3, [pc, #604]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b64:	4a96      	ldr	r2, [pc, #600]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b66:	f023 0304 	bic.w	r3, r3, #4
 8004b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b6c:	e03f      	b.n	8004bee <HAL_RCC_OscConfig+0x592>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	d112      	bne.n	8004b9c <HAL_RCC_OscConfig+0x540>
 8004b76:	4b92      	ldr	r3, [pc, #584]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	4a91      	ldr	r2, [pc, #580]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b7c:	f043 0304 	orr.w	r3, r3, #4
 8004b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b82:	4b8f      	ldr	r3, [pc, #572]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	4a8e      	ldr	r2, [pc, #568]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8e:	4b8c      	ldr	r3, [pc, #560]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	4a8b      	ldr	r2, [pc, #556]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b9a:	e028      	b.n	8004bee <HAL_RCC_OscConfig+0x592>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b85      	cmp	r3, #133	@ 0x85
 8004ba2:	d112      	bne.n	8004bca <HAL_RCC_OscConfig+0x56e>
 8004ba4:	4b86      	ldr	r3, [pc, #536]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba8:	4a85      	ldr	r2, [pc, #532]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004baa:	f043 0304 	orr.w	r3, r3, #4
 8004bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb0:	4b83      	ldr	r3, [pc, #524]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb4:	4a82      	ldr	r2, [pc, #520]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bbc:	4b80      	ldr	r3, [pc, #512]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc0:	4a7f      	ldr	r2, [pc, #508]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc8:	e011      	b.n	8004bee <HAL_RCC_OscConfig+0x592>
 8004bca:	4b7d      	ldr	r3, [pc, #500]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bce:	4a7c      	ldr	r2, [pc, #496]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004bd0:	f023 0301 	bic.w	r3, r3, #1
 8004bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	4a79      	ldr	r2, [pc, #484]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
 8004be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be2:	4b77      	ldr	r3, [pc, #476]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	4a76      	ldr	r2, [pc, #472]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d015      	beq.n	8004c22 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf6:	f7fc ff09 	bl	8001a0c <HAL_GetTick>
 8004bfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fc ff05 	bl	8001a0c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e14c      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c14:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ee      	beq.n	8004bfe <HAL_RCC_OscConfig+0x5a2>
 8004c20:	e014      	b.n	8004c4c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fc fef3 	bl	8001a0c <HAL_GetTick>
 8004c26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fc feef 	bl	8001a0c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e136      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c40:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1ee      	bne.n	8004c2a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 812b 	beq.w	8004eac <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c56:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c5e:	2b18      	cmp	r3, #24
 8004c60:	f000 80bb 	beq.w	8004dda <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	f040 8095 	bne.w	8004d98 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b54      	ldr	r3, [pc, #336]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a53      	ldr	r2, [pc, #332]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004c74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fc fec7 	bl	8001a0c <HAL_GetTick>
 8004c7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c82:	f7fc fec3 	bl	8001a0c <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e10c      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c94:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca0:	4b47      	ldr	r3, [pc, #284]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004ca2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ca4:	4b47      	ldr	r3, [pc, #284]	@ (8004dc4 <HAL_RCC_OscConfig+0x768>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cb0:	0112      	lsls	r2, r2, #4
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	4942      	ldr	r1, [pc, #264]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	025b      	lsls	r3, r3, #9
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cea:	4935      	ldr	r1, [pc, #212]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cf0:	4b33      	ldr	r3, [pc, #204]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	4a32      	ldr	r2, [pc, #200]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cfc:	4b30      	ldr	r3, [pc, #192]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d00:	4b31      	ldr	r3, [pc, #196]	@ (8004dc8 <HAL_RCC_OscConfig+0x76c>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d08:	00d2      	lsls	r2, r2, #3
 8004d0a:	492d      	ldr	r1, [pc, #180]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d10:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	f023 020c 	bic.w	r2, r3, #12
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	4928      	ldr	r1, [pc, #160]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d22:	4b27      	ldr	r3, [pc, #156]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	f023 0202 	bic.w	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	4924      	ldr	r1, [pc, #144]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d34:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	4a21      	ldr	r2, [pc, #132]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d40:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d58:	4b19      	ldr	r3, [pc, #100]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5c:	4a18      	ldr	r2, [pc, #96]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d64:	4b16      	ldr	r3, [pc, #88]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a15      	ldr	r2, [pc, #84]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fc fe4c 	bl	8001a0c <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fc fe48 	bl	8001a0c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e091      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x71c>
 8004d96:	e089      	b.n	8004eac <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a08      	ldr	r2, [pc, #32]	@ (8004dc0 <HAL_RCC_OscConfig+0x764>)
 8004d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fc fe32 	bl	8001a0c <HAL_GetTick>
 8004da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004daa:	e00f      	b.n	8004dcc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fc fe2e 	bl	8001a0c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d908      	bls.n	8004dcc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e077      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	fffffc0c 	.word	0xfffffc0c
 8004dc8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e9      	bne.n	8004dac <HAL_RCC_OscConfig+0x750>
 8004dd8:	e068      	b.n	8004eac <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004dda:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dde:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004de0:	4b35      	ldr	r3, [pc, #212]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d031      	beq.n	8004e52 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f003 0203 	and.w	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d12a      	bne.n	8004e52 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d122      	bne.n	8004e52 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e16:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d11a      	bne.n	8004e52 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	0a5b      	lsrs	r3, r3, #9
 8004e20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e28:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d111      	bne.n	8004e52 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d108      	bne.n	8004e52 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	0e1b      	lsrs	r3, r3, #24
 8004e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d001      	beq.n	8004e56 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e02b      	b.n	8004eae <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e56:	4b18      	ldr	r3, [pc, #96]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5a:	08db      	lsrs	r3, r3, #3
 8004e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e60:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d01f      	beq.n	8004eac <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e6c:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	4a11      	ldr	r2, [pc, #68]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e78:	f7fc fdc8 	bl	8001a0c <HAL_GetTick>
 8004e7c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e7e:	bf00      	nop
 8004e80:	f7fc fdc4 	bl	8001a0c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d0f9      	beq.n	8004e80 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e90:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <HAL_RCC_OscConfig+0x860>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e98:	00d2      	lsls	r2, r2, #3
 8004e9a:	4907      	ldr	r1, [pc, #28]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <HAL_RCC_OscConfig+0x85c>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3730      	adds	r7, #48	@ 0x30
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	ffff0007 	.word	0xffff0007

08004ec0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e19c      	b.n	800520e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8005100 <HAL_RCC_ClockConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d910      	bls.n	8004f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b87      	ldr	r3, [pc, #540]	@ (8005100 <HAL_RCC_ClockConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 020f 	bic.w	r2, r3, #15
 8004eea:	4985      	ldr	r1, [pc, #532]	@ (8005100 <HAL_RCC_ClockConfig+0x240>)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b83      	ldr	r3, [pc, #524]	@ (8005100 <HAL_RCC_ClockConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e184      	b.n	800520e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	4b7b      	ldr	r3, [pc, #492]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d908      	bls.n	8004f32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f20:	4b78      	ldr	r3, [pc, #480]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	4975      	ldr	r1, [pc, #468]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d010      	beq.n	8004f60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	4b70      	ldr	r3, [pc, #448]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d908      	bls.n	8004f60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	496a      	ldr	r1, [pc, #424]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	4b64      	ldr	r3, [pc, #400]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d908      	bls.n	8004f8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f7c:	4b61      	ldr	r3, [pc, #388]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	495e      	ldr	r1, [pc, #376]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d010      	beq.n	8004fbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	4b59      	ldr	r3, [pc, #356]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d908      	bls.n	8004fbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004faa:	4b56      	ldr	r3, [pc, #344]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4953      	ldr	r1, [pc, #332]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d010      	beq.n	8004fea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d908      	bls.n	8004fea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f023 020f 	bic.w	r2, r3, #15
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4947      	ldr	r1, [pc, #284]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d055      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ff6:	4b43      	ldr	r3, [pc, #268]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	4940      	ldr	r1, [pc, #256]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8005004:	4313      	orrs	r3, r2
 8005006:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d107      	bne.n	8005020 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005010:	4b3c      	ldr	r3, [pc, #240]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d121      	bne.n	8005060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0f6      	b.n	800520e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d107      	bne.n	8005038 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005028:	4b36      	ldr	r3, [pc, #216]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d115      	bne.n	8005060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0ea      	b.n	800520e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d107      	bne.n	8005050 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005040:	4b30      	ldr	r3, [pc, #192]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d109      	bne.n	8005060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0de      	b.n	800520e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005050:	4b2c      	ldr	r3, [pc, #176]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0d6      	b.n	800520e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005060:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f023 0207 	bic.w	r2, r3, #7
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4925      	ldr	r1, [pc, #148]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 800506e:	4313      	orrs	r3, r2
 8005070:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005072:	f7fc fccb 	bl	8001a0c <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005078:	e00a      	b.n	8005090 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507a:	f7fc fcc7 	bl	8001a0c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e0be      	b.n	800520e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005090:	4b1c      	ldr	r3, [pc, #112]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	429a      	cmp	r2, r3
 80050a0:	d1eb      	bne.n	800507a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d010      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d208      	bcs.n	80050d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050be:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f023 020f 	bic.w	r2, r3, #15
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	490e      	ldr	r1, [pc, #56]	@ (8005104 <HAL_RCC_ClockConfig+0x244>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <HAL_RCC_ClockConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d214      	bcs.n	8005108 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050de:	4b08      	ldr	r3, [pc, #32]	@ (8005100 <HAL_RCC_ClockConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 020f 	bic.w	r2, r3, #15
 80050e6:	4906      	ldr	r1, [pc, #24]	@ (8005100 <HAL_RCC_ClockConfig+0x240>)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <HAL_RCC_ClockConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e086      	b.n	800520e <HAL_RCC_ClockConfig+0x34e>
 8005100:	52002000 	.word	0x52002000
 8005104:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d010      	beq.n	8005136 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	4b3f      	ldr	r3, [pc, #252]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005120:	429a      	cmp	r2, r3
 8005122:	d208      	bcs.n	8005136 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005124:	4b3c      	ldr	r3, [pc, #240]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	4939      	ldr	r1, [pc, #228]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 8005132:	4313      	orrs	r3, r2
 8005134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695a      	ldr	r2, [r3, #20]
 8005146:	4b34      	ldr	r3, [pc, #208]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800514e:	429a      	cmp	r2, r3
 8005150:	d208      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005152:	4b31      	ldr	r3, [pc, #196]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	492e      	ldr	r1, [pc, #184]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 8005160:	4313      	orrs	r3, r2
 8005162:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	d010      	beq.n	8005192 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	4b28      	ldr	r3, [pc, #160]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800517c:	429a      	cmp	r2, r3
 800517e:	d208      	bcs.n	8005192 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005180:	4b25      	ldr	r3, [pc, #148]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	4922      	ldr	r1, [pc, #136]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 800518e:	4313      	orrs	r3, r2
 8005190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d010      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d208      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	4917      	ldr	r1, [pc, #92]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80051c0:	f000 f834 	bl	800522c <HAL_RCC_GetSysClockFreq>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b14      	ldr	r3, [pc, #80]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	4912      	ldr	r1, [pc, #72]	@ (800521c <HAL_RCC_ClockConfig+0x35c>)
 80051d2:	5ccb      	ldrb	r3, [r1, r3]
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80051de:	4b0e      	ldr	r3, [pc, #56]	@ (8005218 <HAL_RCC_ClockConfig+0x358>)
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	4a0d      	ldr	r2, [pc, #52]	@ (800521c <HAL_RCC_ClockConfig+0x35c>)
 80051e8:	5cd3      	ldrb	r3, [r2, r3]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
 80051f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005220 <HAL_RCC_ClockConfig+0x360>)
 80051f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005224 <HAL_RCC_ClockConfig+0x364>)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <HAL_RCC_ClockConfig+0x368>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7fc fbb8 	bl	8001978 <HAL_InitTick>
 8005208:	4603      	mov	r3, r0
 800520a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	58024400 	.word	0x58024400
 800521c:	0800de70 	.word	0x0800de70
 8005220:	24000004 	.word	0x24000004
 8005224:	24000000 	.word	0x24000000
 8005228:	24000008 	.word	0x24000008

0800522c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	b089      	sub	sp, #36	@ 0x24
 8005230:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005232:	4bb3      	ldr	r3, [pc, #716]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800523a:	2b18      	cmp	r3, #24
 800523c:	f200 8155 	bhi.w	80054ea <HAL_RCC_GetSysClockFreq+0x2be>
 8005240:	a201      	add	r2, pc, #4	@ (adr r2, 8005248 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	080052ad 	.word	0x080052ad
 800524c:	080054eb 	.word	0x080054eb
 8005250:	080054eb 	.word	0x080054eb
 8005254:	080054eb 	.word	0x080054eb
 8005258:	080054eb 	.word	0x080054eb
 800525c:	080054eb 	.word	0x080054eb
 8005260:	080054eb 	.word	0x080054eb
 8005264:	080054eb 	.word	0x080054eb
 8005268:	080052d3 	.word	0x080052d3
 800526c:	080054eb 	.word	0x080054eb
 8005270:	080054eb 	.word	0x080054eb
 8005274:	080054eb 	.word	0x080054eb
 8005278:	080054eb 	.word	0x080054eb
 800527c:	080054eb 	.word	0x080054eb
 8005280:	080054eb 	.word	0x080054eb
 8005284:	080054eb 	.word	0x080054eb
 8005288:	080052d9 	.word	0x080052d9
 800528c:	080054eb 	.word	0x080054eb
 8005290:	080054eb 	.word	0x080054eb
 8005294:	080054eb 	.word	0x080054eb
 8005298:	080054eb 	.word	0x080054eb
 800529c:	080054eb 	.word	0x080054eb
 80052a0:	080054eb 	.word	0x080054eb
 80052a4:	080054eb 	.word	0x080054eb
 80052a8:	080052df 	.word	0x080052df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ac:	4b94      	ldr	r3, [pc, #592]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b8:	4b91      	ldr	r3, [pc, #580]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	08db      	lsrs	r3, r3, #3
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	4a90      	ldr	r2, [pc, #576]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
 80052c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052ca:	e111      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052cc:	4b8d      	ldr	r3, [pc, #564]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052ce:	61bb      	str	r3, [r7, #24]
      break;
 80052d0:	e10e      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052d4:	61bb      	str	r3, [r7, #24]
      break;
 80052d6:	e10b      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052d8:	4b8c      	ldr	r3, [pc, #560]	@ (800550c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052da:	61bb      	str	r3, [r7, #24]
      break;
 80052dc:	e108      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052de:	4b88      	ldr	r3, [pc, #544]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052e8:	4b85      	ldr	r3, [pc, #532]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052f4:	4b82      	ldr	r3, [pc, #520]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052fe:	4b80      	ldr	r3, [pc, #512]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005302:	08db      	lsrs	r3, r3, #3
 8005304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80e1 	beq.w	80054e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b02      	cmp	r3, #2
 8005326:	f000 8083 	beq.w	8005430 <HAL_RCC_GetSysClockFreq+0x204>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b02      	cmp	r3, #2
 800532e:	f200 80a1 	bhi.w	8005474 <HAL_RCC_GetSysClockFreq+0x248>
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x114>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d056      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800533e:	e099      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005340:	4b6f      	ldr	r3, [pc, #444]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d02d      	beq.n	80053a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800534c:	4b6c      	ldr	r3, [pc, #432]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	08db      	lsrs	r3, r3, #3
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	4a6b      	ldr	r2, [pc, #428]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
 800535c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	ee07 3a90 	vmov	s15, r3
 8005364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b62      	ldr	r3, [pc, #392]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a02 	vldr	s12, [r7, #8]
 800538a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053a6:	e087      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005514 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b51      	ldr	r3, [pc, #324]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005510 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ea:	e065      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005518 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b40      	ldr	r3, [pc, #256]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005412:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005510 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800542e:	e043      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800551c <HAL_RCC_GetSysClockFreq+0x2f0>
 800543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005442:	4b2f      	ldr	r3, [pc, #188]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	ed97 6a02 	vldr	s12, [r7, #8]
 8005456:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005472:	e021      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005518 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005496:	ed97 6a02 	vldr	s12, [r7, #8]
 800549a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054b8:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054bc:	0a5b      	lsrs	r3, r3, #9
 80054be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054c2:	3301      	adds	r3, #1
 80054c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054dc:	ee17 3a90 	vmov	r3, s15
 80054e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054e2:	e005      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
      break;
 80054e8:	e002      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054ea:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054ec:	61bb      	str	r3, [r7, #24]
      break;
 80054ee:	bf00      	nop
  }

  return sysclockfreq;
 80054f0:	69bb      	ldr	r3, [r7, #24]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3724      	adds	r7, #36	@ 0x24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	58024400 	.word	0x58024400
 8005504:	03d09000 	.word	0x03d09000
 8005508:	003d0900 	.word	0x003d0900
 800550c:	016e3600 	.word	0x016e3600
 8005510:	46000000 	.word	0x46000000
 8005514:	4c742400 	.word	0x4c742400
 8005518:	4a742400 	.word	0x4a742400
 800551c:	4bb71b00 	.word	0x4bb71b00

08005520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005526:	f7ff fe81 	bl	800522c <HAL_RCC_GetSysClockFreq>
 800552a:	4602      	mov	r2, r0
 800552c:	4b10      	ldr	r3, [pc, #64]	@ (8005570 <HAL_RCC_GetHCLKFreq+0x50>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	0a1b      	lsrs	r3, r3, #8
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	490f      	ldr	r1, [pc, #60]	@ (8005574 <HAL_RCC_GetHCLKFreq+0x54>)
 8005538:	5ccb      	ldrb	r3, [r1, r3]
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	fa22 f303 	lsr.w	r3, r2, r3
 8005542:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005544:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <HAL_RCC_GetHCLKFreq+0x50>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	4a09      	ldr	r2, [pc, #36]	@ (8005574 <HAL_RCC_GetHCLKFreq+0x54>)
 800554e:	5cd3      	ldrb	r3, [r2, r3]
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	fa22 f303 	lsr.w	r3, r2, r3
 800555a:	4a07      	ldr	r2, [pc, #28]	@ (8005578 <HAL_RCC_GetHCLKFreq+0x58>)
 800555c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800555e:	4a07      	ldr	r2, [pc, #28]	@ (800557c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005564:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <HAL_RCC_GetHCLKFreq+0x58>)
 8005566:	681b      	ldr	r3, [r3, #0]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	58024400 	.word	0x58024400
 8005574:	0800de70 	.word	0x0800de70
 8005578:	24000004 	.word	0x24000004
 800557c:	24000000 	.word	0x24000000

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005584:	f7ff ffcc 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	091b      	lsrs	r3, r3, #4
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4904      	ldr	r1, [pc, #16]	@ (80055a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	58024400 	.word	0x58024400
 80055a8:	0800de70 	.word	0x0800de70

080055ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b0:	b0c8      	sub	sp, #288	@ 0x120
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055be:	2300      	movs	r3, #0
 80055c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80055d0:	2500      	movs	r5, #0
 80055d2:	ea54 0305 	orrs.w	r3, r4, r5
 80055d6:	d049      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055e2:	d02f      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055e8:	d828      	bhi.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055ee:	d01a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055f4:	d822      	bhi.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055fe:	d007      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005600:	e01c      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005602:	4ba7      	ldr	r3, [pc, #668]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	4aa6      	ldr	r2, [pc, #664]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800560c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800560e:	e01a      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005614:	3308      	adds	r3, #8
 8005616:	2102      	movs	r1, #2
 8005618:	4618      	mov	r0, r3
 800561a:	f002 fa6d 	bl	8007af8 <RCCEx_PLL2_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005624:	e00f      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800562a:	3328      	adds	r3, #40	@ 0x28
 800562c:	2102      	movs	r1, #2
 800562e:	4618      	mov	r0, r3
 8005630:	f002 fb14 	bl	8007c5c <RCCEx_PLL3_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800563a:	e004      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005642:	e000      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800564e:	4b94      	ldr	r3, [pc, #592]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005652:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800565a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800565c:	4a90      	ldr	r2, [pc, #576]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800565e:	430b      	orrs	r3, r1
 8005660:	6513      	str	r3, [r2, #80]	@ 0x50
 8005662:	e003      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005668:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800566c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005678:	f04f 0900 	mov.w	r9, #0
 800567c:	ea58 0309 	orrs.w	r3, r8, r9
 8005680:	d047      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005688:	2b04      	cmp	r3, #4
 800568a:	d82a      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800568c:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056a9 	.word	0x080056a9
 8005698:	080056b7 	.word	0x080056b7
 800569c:	080056cd 	.word	0x080056cd
 80056a0:	080056eb 	.word	0x080056eb
 80056a4:	080056eb 	.word	0x080056eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a8:	4b7d      	ldr	r3, [pc, #500]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	4a7c      	ldr	r2, [pc, #496]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056b4:	e01a      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ba:	3308      	adds	r3, #8
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f002 fa1a 	bl	8007af8 <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056ca:	e00f      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d0:	3328      	adds	r3, #40	@ 0x28
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f002 fac1 	bl	8007c5c <RCCEx_PLL3_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056e0:	e004      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056f4:	4b6a      	ldr	r3, [pc, #424]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f8:	f023 0107 	bic.w	r1, r3, #7
 80056fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005702:	4a67      	ldr	r2, [pc, #412]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005704:	430b      	orrs	r3, r1
 8005706:	6513      	str	r3, [r2, #80]	@ 0x50
 8005708:	e003      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800570e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800571e:	f04f 0b00 	mov.w	fp, #0
 8005722:	ea5a 030b 	orrs.w	r3, sl, fp
 8005726:	d054      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800572c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005732:	d036      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005734:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005738:	d82f      	bhi.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800573a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573e:	d032      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005744:	d829      	bhi.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005746:	2bc0      	cmp	r3, #192	@ 0xc0
 8005748:	d02f      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800574a:	2bc0      	cmp	r3, #192	@ 0xc0
 800574c:	d825      	bhi.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800574e:	2b80      	cmp	r3, #128	@ 0x80
 8005750:	d018      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005752:	2b80      	cmp	r3, #128	@ 0x80
 8005754:	d821      	bhi.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800575a:	2b40      	cmp	r3, #64	@ 0x40
 800575c:	d007      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800575e:	e01c      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005760:	4b4f      	ldr	r3, [pc, #316]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	4a4e      	ldr	r2, [pc, #312]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800576a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800576c:	e01e      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800576e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005772:	3308      	adds	r3, #8
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f002 f9be 	bl	8007af8 <RCCEx_PLL2_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005782:	e013      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005788:	3328      	adds	r3, #40	@ 0x28
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f002 fa65 	bl	8007c5c <RCCEx_PLL3_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005798:	e008      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057a0:	e004      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80057aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80057b4:	4b3a      	ldr	r3, [pc, #232]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80057bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c2:	4a37      	ldr	r2, [pc, #220]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057c8:	e003      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80057d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80057de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80057e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80057ec:	460b      	mov	r3, r1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	d05c      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80057f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80057fc:	d03b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80057fe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005802:	d834      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005808:	d037      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800580a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800580e:	d82e      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005810:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005814:	d033      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005816:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800581a:	d828      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005820:	d01a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005826:	d822      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800582c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005830:	d007      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005832:	e01c      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005834:	4b1a      	ldr	r3, [pc, #104]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	4a19      	ldr	r2, [pc, #100]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005840:	e01e      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005846:	3308      	adds	r3, #8
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f002 f954 	bl	8007af8 <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005856:	e013      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800585c:	3328      	adds	r3, #40	@ 0x28
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f002 f9fb 	bl	8007c5c <RCCEx_PLL3_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800586c:	e008      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005874:	e004      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005876:	bf00      	nop
 8005878:	e002      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800587e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005880:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10d      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005888:	4b05      	ldr	r3, [pc, #20]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800588a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005896:	4a02      	ldr	r2, [pc, #8]	@ (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005898:	430b      	orrs	r3, r1
 800589a:	6513      	str	r3, [r2, #80]	@ 0x50
 800589c:	e006      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x300>
 800589e:	bf00      	nop
 80058a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80058b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80058c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80058c6:	460b      	mov	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d03a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d2:	2b30      	cmp	r3, #48	@ 0x30
 80058d4:	d01f      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80058d6:	2b30      	cmp	r3, #48	@ 0x30
 80058d8:	d819      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d00c      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d815      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d019      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d111      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ea:	4bae      	ldr	r3, [pc, #696]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	4aad      	ldr	r2, [pc, #692]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058f6:	e011      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058fc:	3308      	adds	r3, #8
 80058fe:	2102      	movs	r1, #2
 8005900:	4618      	mov	r0, r3
 8005902:	f002 f8f9 	bl	8007af8 <RCCEx_PLL2_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800590c:	e006      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005914:	e002      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005916:	bf00      	nop
 8005918:	e000      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800591a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005924:	4b9f      	ldr	r3, [pc, #636]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005928:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800592c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005932:	4a9c      	ldr	r2, [pc, #624]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005934:	430b      	orrs	r3, r1
 8005936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005938:	e003      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800593e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800594e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005952:	2300      	movs	r3, #0
 8005954:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005958:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800595c:	460b      	mov	r3, r1
 800595e:	4313      	orrs	r3, r2
 8005960:	d051      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005968:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800596c:	d035      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800596e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005972:	d82e      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005974:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005978:	d031      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x432>
 800597a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800597e:	d828      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005984:	d01a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800598a:	d822      	bhi.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005994:	d007      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005996:	e01c      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005998:	4b82      	ldr	r3, [pc, #520]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	4a81      	ldr	r2, [pc, #516]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800599e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059a4:	e01c      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059aa:	3308      	adds	r3, #8
 80059ac:	2100      	movs	r1, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f002 f8a2 	bl	8007af8 <RCCEx_PLL2_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059ba:	e011      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c0:	3328      	adds	r3, #40	@ 0x28
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 f949 	bl	8007c5c <RCCEx_PLL3_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059d0:	e006      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059d8:	e002      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80059de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059e8:	4b6e      	ldr	r3, [pc, #440]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f6:	4a6b      	ldr	r2, [pc, #428]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80059fc:	e003      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005a12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a16:	2300      	movs	r3, #0
 8005a18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005a20:	460b      	mov	r3, r1
 8005a22:	4313      	orrs	r3, r2
 8005a24:	d053      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a30:	d033      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005a32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a36:	d82c      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a3c:	d02f      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005a3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a42:	d826      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a48:	d02b      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a4e:	d820      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a54:	d012      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a5a:	d81a      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d022      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a64:	d115      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 f842 	bl	8007af8 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e015      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a80:	3328      	adds	r3, #40	@ 0x28
 8005a82:	2101      	movs	r1, #1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f002 f8e9 	bl	8007c5c <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a90:	e00a      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e004      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a9e:	bf00      	nop
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005abe:	4a39      	ldr	r2, [pc, #228]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ac4:	e003      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ada:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ae4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d060      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005af6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005afa:	d039      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005afc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005b00:	d832      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b06:	d035      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b0c:	d82c      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b12:	d031      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b18:	d826      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b1e:	d02d      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005b20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b24:	d820      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b2a:	d012      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b30:	d81a      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d024      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b3a:	d115      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b40:	3308      	adds	r3, #8
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 ffd7 	bl	8007af8 <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b50:	e017      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b56:	3328      	adds	r3, #40	@ 0x28
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f002 f87e 	bl	8007c5c <RCCEx_PLL3_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b66:	e00c      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b6e:	e008      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b70:	bf00      	nop
 8005b72:	e006      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b74:	bf00      	nop
 8005b76:	e004      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b78:	bf00      	nop
 8005b7a:	e002      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b7c:	bf00      	nop
 8005b7e:	e000      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10e      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b9a:	4a02      	ldr	r2, [pc, #8]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ba0:	e006      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005ba2:	bf00      	nop
 8005ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	d037      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bda:	d00e      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be0:	d816      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d018      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bea:	d111      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bec:	4bc4      	ldr	r3, [pc, #784]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf0:	4ac3      	ldr	r2, [pc, #780]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bf8:	e00f      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bfe:	3308      	adds	r3, #8
 8005c00:	2101      	movs	r1, #1
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 ff78 	bl	8007af8 <RCCEx_PLL2_Config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c0e:	e004      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c16:	e000      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c22:	4bb7      	ldr	r3, [pc, #732]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c30:	4ab3      	ldr	r2, [pc, #716]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c32:	430b      	orrs	r3, r1
 8005c34:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c36:	e003      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c48:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c56:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	d039      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d81c      	bhi.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005cad 	.word	0x08005cad
 8005c74:	08005c81 	.word	0x08005c81
 8005c78:	08005c8f 	.word	0x08005c8f
 8005c7c:	08005cad 	.word	0x08005cad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c80:	4b9f      	ldr	r3, [pc, #636]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	4a9e      	ldr	r2, [pc, #632]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c8c:	e00f      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c92:	3308      	adds	r3, #8
 8005c94:	2102      	movs	r1, #2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 ff2e 	bl	8007af8 <RCCEx_PLL2_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ca2:	e004      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005caa:	e000      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cb6:	4b92      	ldr	r3, [pc, #584]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cba:	f023 0103 	bic.w	r1, r3, #3
 8005cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc4:	4a8e      	ldr	r2, [pc, #568]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cca:	e003      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cd0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f000 8099 	beq.w	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf6:	4b83      	ldr	r3, [pc, #524]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a82      	ldr	r2, [pc, #520]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d02:	f7fb fe83 	bl	8001a0c <HAL_GetTick>
 8005d06:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d0a:	e00b      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0c:	f7fb fe7e 	bl	8001a0c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b64      	cmp	r3, #100	@ 0x64
 8005d1a:	d903      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d22:	e005      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d24:	4b77      	ldr	r3, [pc, #476]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ed      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005d30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d173      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d38:	4b71      	ldr	r3, [pc, #452]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d44:	4053      	eors	r3, r2
 8005d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d015      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d5a:	4b69      	ldr	r3, [pc, #420]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5e:	4a68      	ldr	r2, [pc, #416]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d64:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d66:	4b66      	ldr	r3, [pc, #408]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6a:	4a65      	ldr	r2, [pc, #404]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d70:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d72:	4a63      	ldr	r2, [pc, #396]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d78:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d86:	d118      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fb fe40 	bl	8001a0c <HAL_GetTick>
 8005d8c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d90:	e00d      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fb fe3b 	bl	8001a0c <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005d9c:	1ad2      	subs	r2, r2, r3
 8005d9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d903      	bls.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005dac:	e005      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dae:	4b54      	ldr	r3, [pc, #336]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0eb      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005dba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d129      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dd2:	d10e      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005de4:	091a      	lsrs	r2, r3, #4
 8005de6:	4b48      	ldr	r3, [pc, #288]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	4a45      	ldr	r2, [pc, #276]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6113      	str	r3, [r2, #16]
 8005df0:	e005      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005df2:	4b43      	ldr	r3, [pc, #268]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	4a42      	ldr	r2, [pc, #264]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005df8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005dfc:	6113      	str	r3, [r2, #16]
 8005dfe:	4b40      	ldr	r3, [pc, #256]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e00:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e14:	e008      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005e1e:	e003      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f002 0301 	and.w	r3, r2, #1
 8005e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f000 8090 	beq.w	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e52:	2b28      	cmp	r3, #40	@ 0x28
 8005e54:	d870      	bhi.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005e56:	a201      	add	r2, pc, #4	@ (adr r2, 8005e5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005f41 	.word	0x08005f41
 8005e60:	08005f39 	.word	0x08005f39
 8005e64:	08005f39 	.word	0x08005f39
 8005e68:	08005f39 	.word	0x08005f39
 8005e6c:	08005f39 	.word	0x08005f39
 8005e70:	08005f39 	.word	0x08005f39
 8005e74:	08005f39 	.word	0x08005f39
 8005e78:	08005f39 	.word	0x08005f39
 8005e7c:	08005f0d 	.word	0x08005f0d
 8005e80:	08005f39 	.word	0x08005f39
 8005e84:	08005f39 	.word	0x08005f39
 8005e88:	08005f39 	.word	0x08005f39
 8005e8c:	08005f39 	.word	0x08005f39
 8005e90:	08005f39 	.word	0x08005f39
 8005e94:	08005f39 	.word	0x08005f39
 8005e98:	08005f39 	.word	0x08005f39
 8005e9c:	08005f23 	.word	0x08005f23
 8005ea0:	08005f39 	.word	0x08005f39
 8005ea4:	08005f39 	.word	0x08005f39
 8005ea8:	08005f39 	.word	0x08005f39
 8005eac:	08005f39 	.word	0x08005f39
 8005eb0:	08005f39 	.word	0x08005f39
 8005eb4:	08005f39 	.word	0x08005f39
 8005eb8:	08005f39 	.word	0x08005f39
 8005ebc:	08005f41 	.word	0x08005f41
 8005ec0:	08005f39 	.word	0x08005f39
 8005ec4:	08005f39 	.word	0x08005f39
 8005ec8:	08005f39 	.word	0x08005f39
 8005ecc:	08005f39 	.word	0x08005f39
 8005ed0:	08005f39 	.word	0x08005f39
 8005ed4:	08005f39 	.word	0x08005f39
 8005ed8:	08005f39 	.word	0x08005f39
 8005edc:	08005f41 	.word	0x08005f41
 8005ee0:	08005f39 	.word	0x08005f39
 8005ee4:	08005f39 	.word	0x08005f39
 8005ee8:	08005f39 	.word	0x08005f39
 8005eec:	08005f39 	.word	0x08005f39
 8005ef0:	08005f39 	.word	0x08005f39
 8005ef4:	08005f39 	.word	0x08005f39
 8005ef8:	08005f39 	.word	0x08005f39
 8005efc:	08005f41 	.word	0x08005f41
 8005f00:	58024400 	.word	0x58024400
 8005f04:	58024800 	.word	0x58024800
 8005f08:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f10:	3308      	adds	r3, #8
 8005f12:	2101      	movs	r1, #1
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 fdef 	bl	8007af8 <RCCEx_PLL2_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f20:	e00f      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f26:	3328      	adds	r3, #40	@ 0x28
 8005f28:	2101      	movs	r1, #1
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fe96 	bl	8007c5c <RCCEx_PLL3_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f36:	e004      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f4a:	4bc0      	ldr	r3, [pc, #768]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f5a:	4abc      	ldr	r2, [pc, #752]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f60:	e003      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f002 0302 	and.w	r3, r2, #2
 8005f76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f80:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f84:	460b      	mov	r3, r1
 8005f86:	4313      	orrs	r3, r2
 8005f88:	d043      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d824      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005f96:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005fe9 	.word	0x08005fe9
 8005fa0:	08005fb5 	.word	0x08005fb5
 8005fa4:	08005fcb 	.word	0x08005fcb
 8005fa8:	08005fe9 	.word	0x08005fe9
 8005fac:	08005fe9 	.word	0x08005fe9
 8005fb0:	08005fe9 	.word	0x08005fe9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb8:	3308      	adds	r3, #8
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 fd9b 	bl	8007af8 <RCCEx_PLL2_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fc8:	e00f      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fce:	3328      	adds	r3, #40	@ 0x28
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 fe42 	bl	8007c5c <RCCEx_PLL3_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fde:	e004      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fe6:	e000      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ff2:	4b96      	ldr	r3, [pc, #600]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff6:	f023 0107 	bic.w	r1, r3, #7
 8005ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006002:	4a92      	ldr	r2, [pc, #584]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006004:	430b      	orrs	r3, r1
 8006006:	6553      	str	r3, [r2, #84]	@ 0x54
 8006008:	e003      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800600e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f002 0304 	and.w	r3, r2, #4
 800601e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006022:	2300      	movs	r3, #0
 8006024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006028:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800602c:	460b      	mov	r3, r1
 800602e:	4313      	orrs	r3, r2
 8006030:	d043      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800603a:	2b05      	cmp	r3, #5
 800603c:	d824      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006091 	.word	0x08006091
 8006048:	0800605d 	.word	0x0800605d
 800604c:	08006073 	.word	0x08006073
 8006050:	08006091 	.word	0x08006091
 8006054:	08006091 	.word	0x08006091
 8006058:	08006091 	.word	0x08006091
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800605c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006060:	3308      	adds	r3, #8
 8006062:	2101      	movs	r1, #1
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fd47 	bl	8007af8 <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006070:	e00f      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006076:	3328      	adds	r3, #40	@ 0x28
 8006078:	2101      	movs	r1, #1
 800607a:	4618      	mov	r0, r3
 800607c:	f001 fdee 	bl	8007c5c <RCCEx_PLL3_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006086:	e004      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006092:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800609a:	4b6c      	ldr	r3, [pc, #432]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800609c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609e:	f023 0107 	bic.w	r1, r3, #7
 80060a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060aa:	4a68      	ldr	r2, [pc, #416]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060ac:	430b      	orrs	r3, r1
 80060ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80060b0:	e003      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	f002 0320 	and.w	r3, r2, #32
 80060c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060ca:	2300      	movs	r3, #0
 80060cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060d4:	460b      	mov	r3, r1
 80060d6:	4313      	orrs	r3, r2
 80060d8:	d055      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060e6:	d033      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80060e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ec:	d82c      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f2:	d02f      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80060f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f8:	d826      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060fe:	d02b      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006100:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006104:	d820      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800610a:	d012      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800610c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006110:	d81a      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d022      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800611a:	d115      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800611c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006120:	3308      	adds	r3, #8
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fce7 	bl	8007af8 <RCCEx_PLL2_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006130:	e015      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006136:	3328      	adds	r3, #40	@ 0x28
 8006138:	2102      	movs	r1, #2
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fd8e 	bl	8007c5c <RCCEx_PLL3_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006146:	e00a      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800614e:	e006      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006150:	bf00      	nop
 8006152:	e004      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006154:	bf00      	nop
 8006156:	e002      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006158:	bf00      	nop
 800615a:	e000      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800615c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800615e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10b      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006166:	4b39      	ldr	r3, [pc, #228]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800616e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006172:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006176:	4a35      	ldr	r2, [pc, #212]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006178:	430b      	orrs	r3, r1
 800617a:	6553      	str	r3, [r2, #84]	@ 0x54
 800617c:	e003      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006182:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006196:	2300      	movs	r3, #0
 8006198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800619c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4313      	orrs	r3, r2
 80061a4:	d058      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80061a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061b2:	d033      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80061b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061b8:	d82c      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061be:	d02f      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c4:	d826      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061ca:	d02b      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80061cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061d0:	d820      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061d6:	d012      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80061d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061dc:	d81a      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d022      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80061e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e6:	d115      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061ec:	3308      	adds	r3, #8
 80061ee:	2100      	movs	r1, #0
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 fc81 	bl	8007af8 <RCCEx_PLL2_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061fc:	e015      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006202:	3328      	adds	r3, #40	@ 0x28
 8006204:	2102      	movs	r1, #2
 8006206:	4618      	mov	r0, r3
 8006208:	f001 fd28 	bl	8007c5c <RCCEx_PLL3_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006212:	e00a      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800621a:	e006      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800621c:	bf00      	nop
 800621e:	e004      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800622a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10e      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006232:	4b06      	ldr	r3, [pc, #24]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006236:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800623a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800623e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006242:	4a02      	ldr	r2, [pc, #8]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006244:	430b      	orrs	r3, r1
 8006246:	6593      	str	r3, [r2, #88]	@ 0x58
 8006248:	e006      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800624a:	bf00      	nop
 800624c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006250:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006254:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006268:	2300      	movs	r3, #0
 800626a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800626e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006272:	460b      	mov	r3, r1
 8006274:	4313      	orrs	r3, r2
 8006276:	d055      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800627c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006280:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006284:	d033      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006286:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800628a:	d82c      	bhi.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800628c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006290:	d02f      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006296:	d826      	bhi.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006298:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800629c:	d02b      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800629e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062a2:	d820      	bhi.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80062a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062a8:	d012      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80062aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ae:	d81a      	bhi.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d022      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80062b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062b8:	d115      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062be:	3308      	adds	r3, #8
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 fc18 	bl	8007af8 <RCCEx_PLL2_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062ce:	e015      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d4:	3328      	adds	r3, #40	@ 0x28
 80062d6:	2102      	movs	r1, #2
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fcbf 	bl	8007c5c <RCCEx_PLL3_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062e4:	e00a      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80062ec:	e006      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062ee:	bf00      	nop
 80062f0:	e004      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062f2:	bf00      	nop
 80062f4:	e002      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10b      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006304:	4ba1      	ldr	r3, [pc, #644]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006308:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006310:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006314:	4a9d      	ldr	r2, [pc, #628]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006316:	430b      	orrs	r3, r1
 8006318:	6593      	str	r3, [r2, #88]	@ 0x58
 800631a:	e003      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006320:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f002 0308 	and.w	r3, r2, #8
 8006330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006334:	2300      	movs	r3, #0
 8006336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800633a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800633e:	460b      	mov	r3, r1
 8006340:	4313      	orrs	r3, r2
 8006342:	d01e      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006350:	d10c      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006356:	3328      	adds	r3, #40	@ 0x28
 8006358:	2102      	movs	r1, #2
 800635a:	4618      	mov	r0, r3
 800635c:	f001 fc7e 	bl	8007c5c <RCCEx_PLL3_Config>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800636c:	4b87      	ldr	r3, [pc, #540]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800636e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006370:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800637c:	4a83      	ldr	r2, [pc, #524]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800637e:	430b      	orrs	r3, r1
 8006380:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f002 0310 	and.w	r3, r2, #16
 800638e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006392:	2300      	movs	r3, #0
 8006394:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006398:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800639c:	460b      	mov	r3, r1
 800639e:	4313      	orrs	r3, r2
 80063a0:	d01e      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ae:	d10c      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063b4:	3328      	adds	r3, #40	@ 0x28
 80063b6:	2102      	movs	r1, #2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f001 fc4f 	bl	8007c5c <RCCEx_PLL3_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063ca:	4b70      	ldr	r3, [pc, #448]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063da:	4a6c      	ldr	r2, [pc, #432]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80063ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063f0:	2300      	movs	r3, #0
 80063f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80063fa:	460b      	mov	r3, r1
 80063fc:	4313      	orrs	r3, r2
 80063fe:	d03e      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006404:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800640c:	d022      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800640e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006412:	d81b      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800641c:	d00b      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800641e:	e015      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006424:	3308      	adds	r3, #8
 8006426:	2100      	movs	r1, #0
 8006428:	4618      	mov	r0, r3
 800642a:	f001 fb65 	bl	8007af8 <RCCEx_PLL2_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006434:	e00f      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800643a:	3328      	adds	r3, #40	@ 0x28
 800643c:	2102      	movs	r1, #2
 800643e:	4618      	mov	r0, r3
 8006440:	f001 fc0c 	bl	8007c5c <RCCEx_PLL3_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800644a:	e004      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006452:	e000      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006456:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800645e:	4b4b      	ldr	r3, [pc, #300]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006462:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800646a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800646e:	4a47      	ldr	r2, [pc, #284]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006470:	430b      	orrs	r3, r1
 8006472:	6593      	str	r3, [r2, #88]	@ 0x58
 8006474:	e003      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006476:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800647a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800647e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800648a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800648c:	2300      	movs	r3, #0
 800648e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006490:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006494:	460b      	mov	r3, r1
 8006496:	4313      	orrs	r3, r2
 8006498:	d03b      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800649a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064a6:	d01f      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80064a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064ac:	d818      	bhi.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80064ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b2:	d003      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80064b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064b8:	d007      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80064ba:	e011      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064bc:	4b33      	ldr	r3, [pc, #204]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	4a32      	ldr	r2, [pc, #200]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064c8:	e00f      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ce:	3328      	adds	r3, #40	@ 0x28
 80064d0:	2101      	movs	r1, #1
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 fbc2 	bl	8007c5c <RCCEx_PLL3_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80064de:	e004      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80064e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064f2:	4b26      	ldr	r3, [pc, #152]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006502:	4a22      	ldr	r2, [pc, #136]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6553      	str	r3, [r2, #84]	@ 0x54
 8006508:	e003      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800650e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800651e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006520:	2300      	movs	r3, #0
 8006522:	677b      	str	r3, [r7, #116]	@ 0x74
 8006524:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006528:	460b      	mov	r3, r1
 800652a:	4313      	orrs	r3, r2
 800652c:	d034      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800652e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653c:	d007      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800653e:	e011      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006540:	4b12      	ldr	r3, [pc, #72]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006544:	4a11      	ldr	r2, [pc, #68]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800654a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800654c:	e00e      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800654e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006552:	3308      	adds	r3, #8
 8006554:	2102      	movs	r1, #2
 8006556:	4618      	mov	r0, r3
 8006558:	f001 face 	bl	8007af8 <RCCEx_PLL2_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006562:	e003      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800656a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10d      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006574:	4b05      	ldr	r3, [pc, #20]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006578:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800657c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006582:	4a02      	ldr	r2, [pc, #8]	@ (800658c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006584:	430b      	orrs	r3, r1
 8006586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006588:	e006      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800658a:	bf00      	nop
 800658c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006594:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80065a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065a6:	2300      	movs	r3, #0
 80065a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80065ae:	460b      	mov	r3, r1
 80065b0:	4313      	orrs	r3, r2
 80065b2:	d00c      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b8:	3328      	adds	r3, #40	@ 0x28
 80065ba:	2102      	movs	r1, #2
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fb4d 	bl	8007c5c <RCCEx_PLL3_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80065da:	663b      	str	r3, [r7, #96]	@ 0x60
 80065dc:	2300      	movs	r3, #0
 80065de:	667b      	str	r3, [r7, #100]	@ 0x64
 80065e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80065e4:	460b      	mov	r3, r1
 80065e6:	4313      	orrs	r3, r2
 80065e8:	d038      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80065ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f6:	d018      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80065f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065fc:	d811      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80065fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006602:	d014      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006608:	d80b      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d011      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800660e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006612:	d106      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006614:	4bc3      	ldr	r3, [pc, #780]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006618:	4ac2      	ldr	r2, [pc, #776]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800661a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800661e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006620:	e008      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006628:	e004      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800662a:	bf00      	nop
 800662c:	e002      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800662e:	bf00      	nop
 8006630:	e000      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006634:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800663c:	4bb9      	ldr	r3, [pc, #740]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800663e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006640:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664c:	4ab5      	ldr	r2, [pc, #724]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800664e:	430b      	orrs	r3, r1
 8006650:	6553      	str	r3, [r2, #84]	@ 0x54
 8006652:	e003      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006658:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800666a:	2300      	movs	r3, #0
 800666c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800666e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006672:	460b      	mov	r3, r1
 8006674:	4313      	orrs	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006678:	4baa      	ldr	r3, [pc, #680]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800667a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006686:	4aa7      	ldr	r2, [pc, #668]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800668c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006698:	653b      	str	r3, [r7, #80]	@ 0x50
 800669a:	2300      	movs	r3, #0
 800669c:	657b      	str	r3, [r7, #84]	@ 0x54
 800669e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d009      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066a8:	4b9e      	ldr	r3, [pc, #632]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b6:	4a9b      	ldr	r2, [pc, #620]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80066bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80066c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ca:	2300      	movs	r3, #0
 80066cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d009      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80066d8:	4b92      	ldr	r3, [pc, #584]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066dc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80066e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e6:	4a8f      	ldr	r2, [pc, #572]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066e8:	430b      	orrs	r3, r1
 80066ea:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80066f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066fa:	2300      	movs	r3, #0
 80066fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006702:	460b      	mov	r3, r1
 8006704:	4313      	orrs	r3, r2
 8006706:	d00e      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006708:	4b86      	ldr	r3, [pc, #536]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	4a85      	ldr	r2, [pc, #532]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800670e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006712:	6113      	str	r3, [r2, #16]
 8006714:	4b83      	ldr	r3, [pc, #524]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006716:	6919      	ldr	r1, [r3, #16]
 8006718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800671c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006720:	4a80      	ldr	r2, [pc, #512]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006722:	430b      	orrs	r3, r1
 8006724:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006734:	2300      	movs	r3, #0
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006738:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d009      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006742:	4b78      	ldr	r3, [pc, #480]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006746:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800674a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800674e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006750:	4a74      	ldr	r2, [pc, #464]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006752:	430b      	orrs	r3, r1
 8006754:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006762:	633b      	str	r3, [r7, #48]	@ 0x30
 8006764:	2300      	movs	r3, #0
 8006766:	637b      	str	r3, [r7, #52]	@ 0x34
 8006768:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800676c:	460b      	mov	r3, r1
 800676e:	4313      	orrs	r3, r2
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006772:	4b6c      	ldr	r3, [pc, #432]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006776:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800677a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800677e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006782:	4a68      	ldr	r2, [pc, #416]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006784:	430b      	orrs	r3, r1
 8006786:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	2100      	movs	r1, #0
 8006792:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800679a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800679e:	460b      	mov	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	d011      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a8:	3308      	adds	r3, #8
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 f9a3 	bl	8007af8 <RCCEx_PLL2_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80067b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	2100      	movs	r1, #0
 80067d2:	6239      	str	r1, [r7, #32]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067de:	460b      	mov	r3, r1
 80067e0:	4313      	orrs	r3, r2
 80067e2:	d011      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e8:	3308      	adds	r3, #8
 80067ea:	2101      	movs	r1, #1
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 f983 	bl	8007af8 <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80067f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006804:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	2100      	movs	r1, #0
 8006812:	61b9      	str	r1, [r7, #24]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d011      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006828:	3308      	adds	r3, #8
 800682a:	2102      	movs	r1, #2
 800682c:	4618      	mov	r0, r3
 800682e:	f001 f963 	bl	8007af8 <RCCEx_PLL2_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006844:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	2100      	movs	r1, #0
 8006852:	6139      	str	r1, [r7, #16]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d011      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006868:	3328      	adds	r3, #40	@ 0x28
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f001 f9f5 	bl	8007c5c <RCCEx_PLL3_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006878:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006884:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006888:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	2100      	movs	r1, #0
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800689e:	460b      	mov	r3, r1
 80068a0:	4313      	orrs	r3, r2
 80068a2:	d011      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068a8:	3328      	adds	r3, #40	@ 0x28
 80068aa:	2101      	movs	r1, #1
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 f9d5 	bl	8007c5c <RCCEx_PLL3_Config>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80068b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	2100      	movs	r1, #0
 80068d2:	6039      	str	r1, [r7, #0]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068de:	460b      	mov	r3, r1
 80068e0:	4313      	orrs	r3, r2
 80068e2:	d011      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068e8:	3328      	adds	r3, #40	@ 0x28
 80068ea:	2102      	movs	r1, #2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 f9b5 	bl	8007c5c <RCCEx_PLL3_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80068f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006900:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006904:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006908:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	e000      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
}
 8006916:	4618      	mov	r0, r3
 8006918:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800691c:	46bd      	mov	sp, r7
 800691e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006922:	bf00      	nop
 8006924:	58024400 	.word	0x58024400

08006928 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b090      	sub	sp, #64	@ 0x40
 800692c:	af00      	add	r7, sp, #0
 800692e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006936:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800693a:	430b      	orrs	r3, r1
 800693c:	f040 8094 	bne.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006940:	4b97      	ldr	r3, [pc, #604]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	2b04      	cmp	r3, #4
 800694e:	f200 8087 	bhi.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006952:	a201      	add	r2, pc, #4	@ (adr r2, 8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	0800696d 	.word	0x0800696d
 800695c:	08006995 	.word	0x08006995
 8006960:	080069bd 	.word	0x080069bd
 8006964:	08006a59 	.word	0x08006a59
 8006968:	080069e5 	.word	0x080069e5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800696c:	4b8c      	ldr	r3, [pc, #560]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006978:	d108      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800697a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800697e:	4618      	mov	r0, r3
 8006980:	f000 ff68 	bl	8007854 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006988:	f000 bc97 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006990:	f000 bc93 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006994:	4b82      	ldr	r3, [pc, #520]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800699c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069a0:	d108      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a2:	f107 0318 	add.w	r3, r7, #24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fcac 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069b0:	f000 bc83 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b8:	f000 bc7f 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069bc:	4b78      	ldr	r3, [pc, #480]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069c8:	d108      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ca:	f107 030c 	add.w	r3, r7, #12
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fdec 	bl	80075ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d8:	f000 bc6f 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e0:	f000 bc6b 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069e4:	4b6e      	ldr	r3, [pc, #440]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069ee:	4b6c      	ldr	r3, [pc, #432]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d10c      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80069fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a00:	4b67      	ldr	r3, [pc, #412]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	08db      	lsrs	r3, r3, #3
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	4a66      	ldr	r2, [pc, #408]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a12:	e01f      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a14:	4b62      	ldr	r3, [pc, #392]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a20:	d106      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a28:	d102      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a2e:	e011      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a30:	4b5b      	ldr	r3, [pc, #364]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a3c:	d106      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a44:	d102      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a46:	4b59      	ldr	r3, [pc, #356]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4a:	e003      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a50:	f000 bc33 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006a54:	f000 bc31 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a58:	4b55      	ldr	r3, [pc, #340]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5c:	f000 bc2d 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a64:	f000 bc29 	b.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a6c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006a70:	430b      	orrs	r3, r1
 8006a72:	f040 809f 	bne.w	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8006a76:	4b4a      	ldr	r3, [pc, #296]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006a7e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a86:	d04d      	beq.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8e:	f200 8084 	bhi.w	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a96:	d07d      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a9c:	d87d      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	2b80      	cmp	r3, #128	@ 0x80
 8006aa2:	d02d      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	2b80      	cmp	r3, #128	@ 0x80
 8006aa8:	d877      	bhi.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d012      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006ab6:	e070      	b.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ab8:	4b39      	ldr	r3, [pc, #228]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ac4:	d107      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fec2 	bl	8007854 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad4:	e3f1      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ada:	e3ee      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006adc:	4b30      	ldr	r3, [pc, #192]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ae8:	d107      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aea:	f107 0318 	add.w	r3, r7, #24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fc08 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af8:	e3df      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006afe:	e3dc      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b00:	4b27      	ldr	r3, [pc, #156]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b0c:	d107      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b0e:	f107 030c 	add.w	r3, r7, #12
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fd4a 	bl	80075ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b1c:	e3cd      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b22:	e3ca      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b24:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d10c      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b40:	4b17      	ldr	r3, [pc, #92]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	08db      	lsrs	r3, r3, #3
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	4a16      	ldr	r2, [pc, #88]	@ (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b52:	e01e      	b.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b54:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b60:	d106      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b68:	d102      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b6e:	e010      	b.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b7c:	d106      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b84:	d102      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b86:	4b09      	ldr	r3, [pc, #36]	@ (8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b8a:	e002      	b.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b90:	e393      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006b92:	e392      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b94:	4b06      	ldr	r3, [pc, #24]	@ (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b98:	e38f      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b9e:	e38c      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	03d09000 	.word	0x03d09000
 8006ba8:	003d0900 	.word	0x003d0900
 8006bac:	016e3600 	.word	0x016e3600
 8006bb0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	f040 809c 	bne.w	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8006bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006bca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bd2:	d054      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bda:	f200 808b 	bhi.w	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006be4:	f000 8083 	beq.w	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006bee:	f200 8081 	bhi.w	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf8:	d02f      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c00:	d878      	bhi.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c0e:	d012      	beq.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006c10:	e070      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c12:	4b8a      	ldr	r3, [pc, #552]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c1e:	d107      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fe15 	bl	8007854 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c2e:	e344      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c34:	e341      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c36:	4b81      	ldr	r3, [pc, #516]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c42:	d107      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c44:	f107 0318 	add.w	r3, r7, #24
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fb5b 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c52:	e332      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c58:	e32f      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c5a:	4b78      	ldr	r3, [pc, #480]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c66:	d107      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c68:	f107 030c 	add.w	r3, r7, #12
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fc9d 	bl	80075ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c76:	e320      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e31d      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c88:	4b6c      	ldr	r3, [pc, #432]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d10c      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c9a:	4b68      	ldr	r3, [pc, #416]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	4a66      	ldr	r2, [pc, #408]	@ (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cac:	e01e      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cae:	4b63      	ldr	r3, [pc, #396]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cba:	d106      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cc2:	d102      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cc4:	4b5f      	ldr	r3, [pc, #380]	@ (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cc8:	e010      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cca:	4b5c      	ldr	r3, [pc, #368]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ce0:	4b59      	ldr	r3, [pc, #356]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8006cea:	e2e6      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006cec:	e2e5      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cee:	4b57      	ldr	r3, [pc, #348]	@ (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf2:	e2e2      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf8:	e2df      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006d02:	430b      	orrs	r3, r1
 8006d04:	f040 80a7 	bne.w	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006d08:	4b4c      	ldr	r3, [pc, #304]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006d10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d18:	d055      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d20:	f200 8096 	bhi.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d2a:	f000 8084 	beq.w	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d34:	f200 808c 	bhi.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d3e:	d030      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d46:	f200 8083 	bhi.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d56:	d012      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006d58:	e07a      	b.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d5a:	4b38      	ldr	r3, [pc, #224]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d66:	d107      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fd71 	bl	8007854 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d76:	e2a0      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d7c:	e29d      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d8a:	d107      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d8c:	f107 0318 	add.w	r3, r7, #24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fab7 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9a:	e28e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da0:	e28b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006da2:	4b26      	ldr	r3, [pc, #152]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db0:	f107 030c 	add.w	r3, r7, #12
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fbf9 	bl	80075ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbe:	e27c      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dc4:	e279      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006dce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d10c      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006de2:	4b16      	ldr	r3, [pc, #88]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	08db      	lsrs	r3, r3, #3
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	4a14      	ldr	r2, [pc, #80]	@ (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006dee:	fa22 f303 	lsr.w	r3, r2, r3
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df4:	e01e      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006df6:	4b11      	ldr	r3, [pc, #68]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e02:	d106      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e0a:	d102      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e10:	e010      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e12:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e1e:	d106      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e26:	d102      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e28:	4b07      	ldr	r3, [pc, #28]	@ (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e2c:	e002      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e32:	e242      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e34:	e241      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e36:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e3a:	e23e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	03d09000 	.word	0x03d09000
 8006e44:	003d0900 	.word	0x003d0900
 8006e48:	016e3600 	.word	0x016e3600
 8006e4c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e54:	e231      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e5a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	f040 8085 	bne.w	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006e64:	4b9c      	ldr	r3, [pc, #624]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e68:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e74:	d06b      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e7c:	d874      	bhi.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e84:	d056      	beq.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e8c:	d86c      	bhi.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e94:	d03b      	beq.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e9c:	d864      	bhi.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ea4:	d021      	beq.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eac:	d85c      	bhi.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eba:	d004      	beq.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006ebc:	e054      	b.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ebe:	f7fe fb5f 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8006ec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ec4:	e1f9      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ec6:	4b84      	ldr	r3, [pc, #528]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ed4:	f107 0318 	add.w	r3, r7, #24
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fa13 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ee2:	e1ea      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee8:	e1e7      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006eea:	4b7b      	ldr	r3, [pc, #492]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ef6:	d107      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ef8:	f107 030c 	add.w	r3, r7, #12
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fb55 	bl	80075ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f06:	e1d8      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f0c:	e1d5      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f0e:	4b72      	ldr	r3, [pc, #456]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d109      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	08db      	lsrs	r3, r3, #3
 8006f20:	f003 0303 	and.w	r3, r3, #3
 8006f24:	4a6d      	ldr	r2, [pc, #436]	@ (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f26:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f2c:	e1c5      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f32:	e1c2      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f34:	4b68      	ldr	r3, [pc, #416]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f40:	d102      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006f42:	4b67      	ldr	r3, [pc, #412]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f46:	e1b8      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4c:	e1b5      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f4e:	4b62      	ldr	r3, [pc, #392]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5a:	d102      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006f5c:	4b61      	ldr	r3, [pc, #388]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f60:	e1ab      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f66:	e1a8      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f6c:	e1a5      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f72:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006f76:	430b      	orrs	r3, r1
 8006f78:	d173      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006f7a:	4b57      	ldr	r3, [pc, #348]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f82:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f8a:	d02f      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f92:	d863      	bhi.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d004      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa0:	d012      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006fa2:	e05b      	b.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fb0:	d107      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb2:	f107 0318 	add.w	r3, r7, #24
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f9a4 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc0:	e17b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc6:	e178      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fc8:	4b43      	ldr	r3, [pc, #268]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fd4:	d107      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd6:	f107 030c 	add.w	r3, r7, #12
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fae6 	bl	80075ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe4:	e169      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fea:	e166      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fec:	4b3a      	ldr	r3, [pc, #232]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ff6:	4b38      	ldr	r3, [pc, #224]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d10c      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007004:	2b00      	cmp	r3, #0
 8007006:	d109      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007008:	4b33      	ldr	r3, [pc, #204]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	08db      	lsrs	r3, r3, #3
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	4a32      	ldr	r2, [pc, #200]	@ (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800701a:	e01e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800701c:	4b2e      	ldr	r3, [pc, #184]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007028:	d106      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800702a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007030:	d102      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007032:	4b2b      	ldr	r3, [pc, #172]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007036:	e010      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007038:	4b27      	ldr	r3, [pc, #156]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007044:	d106      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800704c:	d102      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800704e:	4b25      	ldr	r3, [pc, #148]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007052:	e002      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007058:	e12f      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800705a:	e12e      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007060:	e12b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007066:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800706a:	430b      	orrs	r3, r1
 800706c:	d13c      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800706e:	4b1a      	ldr	r3, [pc, #104]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007076:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007084:	d012      	beq.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8007086:	e023      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007088:	4b13      	ldr	r3, [pc, #76]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007094:	d107      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fbda 	bl	8007854 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070a4:	e109      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070aa:	e106      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ac:	4b0a      	ldr	r3, [pc, #40]	@ (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070b8:	d107      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ba:	f107 0318 	add.w	r3, r7, #24
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f920 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c8:	e0f7      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ce:	e0f4      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d4:	e0f1      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80070d6:	bf00      	nop
 80070d8:	58024400 	.word	0x58024400
 80070dc:	03d09000 	.word	0x03d09000
 80070e0:	003d0900 	.word	0x003d0900
 80070e4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80070e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80070f0:	430b      	orrs	r3, r1
 80070f2:	f040 8091 	bne.w	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80070f6:	4b73      	ldr	r3, [pc, #460]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80070fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007102:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007106:	f000 8081 	beq.w	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007110:	d87f      	bhi.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007118:	d06b      	beq.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007120:	d877      	bhi.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007128:	d056      	beq.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800712a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007130:	d86f      	bhi.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007138:	d03b      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007140:	d867      	bhi.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007148:	d021      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007150:	d85f      	bhi.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800715e:	d004      	beq.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007160:	e057      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007162:	f000 f8b9 	bl	80072d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007166:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007168:	e0a7      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800716a:	4b56      	ldr	r3, [pc, #344]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007176:	d107      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007178:	f107 0318 	add.w	r3, r7, #24
 800717c:	4618      	mov	r0, r3
 800717e:	f000 f8c1 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007186:	e098      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718c:	e095      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800718e:	4b4d      	ldr	r3, [pc, #308]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719a:	d107      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800719c:	f107 030c 	add.w	r3, r7, #12
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fa03 	bl	80075ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071aa:	e086      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b0:	e083      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071b2:	4b44      	ldr	r3, [pc, #272]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d109      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071be:	4b41      	ldr	r3, [pc, #260]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	08db      	lsrs	r3, r3, #3
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	4a3f      	ldr	r2, [pc, #252]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80071ca:	fa22 f303 	lsr.w	r3, r2, r3
 80071ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d0:	e073      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d6:	e070      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071d8:	4b3a      	ldr	r3, [pc, #232]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e4:	d102      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80071e6:	4b39      	ldr	r3, [pc, #228]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80071e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ea:	e066      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071f0:	e063      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071f2:	4b34      	ldr	r3, [pc, #208]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071fe:	d102      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007200:	4b33      	ldr	r3, [pc, #204]	@ (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007204:	e059      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800720a:	e056      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800720c:	4b31      	ldr	r3, [pc, #196]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007210:	e053      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007216:	e050      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800721c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007220:	430b      	orrs	r3, r1
 8007222:	d148      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007224:	4b27      	ldr	r3, [pc, #156]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007228:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800722c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007234:	d02a      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800723c:	d838      	bhi.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800723e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800724a:	d00d      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800724c:	e030      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800724e:	4b1d      	ldr	r3, [pc, #116]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800725a:	d102      	bne.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800725c:	4b1c      	ldr	r3, [pc, #112]	@ (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007260:	e02b      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007266:	e028      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007268:	4b16      	ldr	r3, [pc, #88]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007270:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007274:	d107      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800727a:	4618      	mov	r0, r3
 800727c:	f000 faea 	bl	8007854 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007284:	e019      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800728a:	e016      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800728c:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007298:	d107      	bne.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800729a:	f107 0318 	add.w	r3, r7, #24
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f830 	bl	8007304 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072a8:	e007      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ae:	e004      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b4:	e001      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80072ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3740      	adds	r7, #64	@ 0x40
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	58024400 	.word	0x58024400
 80072c8:	03d09000 	.word	0x03d09000
 80072cc:	003d0900 	.word	0x003d0900
 80072d0:	016e3600 	.word	0x016e3600
 80072d4:	00bb8000 	.word	0x00bb8000

080072d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80072dc:	f7fe f920 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 80072e0:	4602      	mov	r2, r0
 80072e2:	4b06      	ldr	r3, [pc, #24]	@ (80072fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	091b      	lsrs	r3, r3, #4
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	4904      	ldr	r1, [pc, #16]	@ (8007300 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072ee:	5ccb      	ldrb	r3, [r1, r3]
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	58024400 	.word	0x58024400
 8007300:	0800de70 	.word	0x0800de70

08007304 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007304:	b480      	push	{r7}
 8007306:	b089      	sub	sp, #36	@ 0x24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800730c:	4ba1      	ldr	r3, [pc, #644]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007316:	4b9f      	ldr	r3, [pc, #636]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731a:	0b1b      	lsrs	r3, r3, #12
 800731c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007320:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007322:	4b9c      	ldr	r3, [pc, #624]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007326:	091b      	lsrs	r3, r3, #4
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800732e:	4b99      	ldr	r3, [pc, #612]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007332:	08db      	lsrs	r3, r3, #3
 8007334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8111 	beq.w	8007574 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	2b02      	cmp	r3, #2
 8007356:	f000 8083 	beq.w	8007460 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b02      	cmp	r3, #2
 800735e:	f200 80a1 	bhi.w	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d056      	beq.n	800741c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800736e:	e099      	b.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007370:	4b88      	ldr	r3, [pc, #544]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02d      	beq.n	80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800737c:	4b85      	ldr	r3, [pc, #532]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	08db      	lsrs	r3, r3, #3
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	4a84      	ldr	r2, [pc, #528]	@ (8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007388:	fa22 f303 	lsr.w	r3, r2, r3
 800738c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	ee07 3a90 	vmov	s15, r3
 8007394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800759c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073d6:	e087      	b.n	80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800759c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800740e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800741a:	e065      	b.n	80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800742a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742e:	4b59      	ldr	r3, [pc, #356]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007442:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800759c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800745e:	e043      	b.n	80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80075a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007472:	4b48      	ldr	r3, [pc, #288]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007482:	ed97 6a03 	vldr	s12, [r7, #12]
 8007486:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800759c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a2:	e021      	b.n	80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b6:	4b37      	ldr	r3, [pc, #220]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800759c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ec:	0a5b      	lsrs	r3, r3, #9
 80074ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007502:	edd7 6a07 	vldr	s13, [r7, #28]
 8007506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800750a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800750e:	ee17 2a90 	vmov	r2, s15
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007516:	4b1f      	ldr	r3, [pc, #124]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751a:	0c1b      	lsrs	r3, r3, #16
 800751c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007528:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800752c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007530:	edd7 6a07 	vldr	s13, [r7, #28]
 8007534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800753c:	ee17 2a90 	vmov	r2, s15
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007544:	4b13      	ldr	r3, [pc, #76]	@ (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	0e1b      	lsrs	r3, r3, #24
 800754a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800755a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800755e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756a:	ee17 2a90 	vmov	r2, s15
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007572:	e008      	b.n	8007586 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	609a      	str	r2, [r3, #8]
}
 8007586:	bf00      	nop
 8007588:	3724      	adds	r7, #36	@ 0x24
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400
 8007598:	03d09000 	.word	0x03d09000
 800759c:	46000000 	.word	0x46000000
 80075a0:	4c742400 	.word	0x4c742400
 80075a4:	4a742400 	.word	0x4a742400
 80075a8:	4bb71b00 	.word	0x4bb71b00

080075ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b089      	sub	sp, #36	@ 0x24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075b4:	4ba1      	ldr	r3, [pc, #644]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80075be:	4b9f      	ldr	r3, [pc, #636]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c2:	0d1b      	lsrs	r3, r3, #20
 80075c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075ca:	4b9c      	ldr	r3, [pc, #624]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ce:	0a1b      	lsrs	r3, r3, #8
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075d6:	4b99      	ldr	r3, [pc, #612]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075da:	08db      	lsrs	r3, r3, #3
 80075dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 8111 	beq.w	800781c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	f000 8083 	beq.w	8007708 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b02      	cmp	r3, #2
 8007606:	f200 80a1 	bhi.w	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d056      	beq.n	80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007616:	e099      	b.n	800774c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007618:	4b88      	ldr	r3, [pc, #544]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b00      	cmp	r3, #0
 8007622:	d02d      	beq.n	8007680 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007624:	4b85      	ldr	r3, [pc, #532]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	08db      	lsrs	r3, r3, #3
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	4a84      	ldr	r2, [pc, #528]	@ (8007840 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
 8007634:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b7b      	ldr	r3, [pc, #492]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007662:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800767e:	e087      	b.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007848 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800768e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007692:	4b6a      	ldr	r3, [pc, #424]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c2:	e065      	b.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800784c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d6:	4b59      	ldr	r3, [pc, #356]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007706:	e043      	b.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771a:	4b48      	ldr	r3, [pc, #288]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772a:	ed97 6a03 	vldr	s12, [r7, #12]
 800772e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774a:	e021      	b.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800784c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800775a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775e:	4b37      	ldr	r3, [pc, #220]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007772:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800778e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007790:	4b2a      	ldr	r3, [pc, #168]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007794:	0a5b      	lsrs	r3, r3, #9
 8007796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b6:	ee17 2a90 	vmov	r2, s15
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80077be:	4b1f      	ldr	r3, [pc, #124]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	0c1b      	lsrs	r3, r3, #16
 80077c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e4:	ee17 2a90 	vmov	r2, s15
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077ec:	4b13      	ldr	r3, [pc, #76]	@ (800783c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f0:	0e1b      	lsrs	r3, r3, #24
 80077f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007806:	edd7 6a07 	vldr	s13, [r7, #28]
 800780a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800780e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007812:	ee17 2a90 	vmov	r2, s15
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800781a:	e008      	b.n	800782e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	609a      	str	r2, [r3, #8]
}
 800782e:	bf00      	nop
 8007830:	3724      	adds	r7, #36	@ 0x24
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	58024400 	.word	0x58024400
 8007840:	03d09000 	.word	0x03d09000
 8007844:	46000000 	.word	0x46000000
 8007848:	4c742400 	.word	0x4c742400
 800784c:	4a742400 	.word	0x4a742400
 8007850:	4bb71b00 	.word	0x4bb71b00

08007854 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007854:	b480      	push	{r7}
 8007856:	b089      	sub	sp, #36	@ 0x24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800785c:	4ba0      	ldr	r3, [pc, #640]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800785e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007866:	4b9e      	ldr	r3, [pc, #632]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	091b      	lsrs	r3, r3, #4
 800786c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007870:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007872:	4b9b      	ldr	r3, [pc, #620]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800787c:	4b98      	ldr	r3, [pc, #608]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800787e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007880:	08db      	lsrs	r3, r3, #3
 8007882:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	fb02 f303 	mul.w	r3, r2, r3
 800788c:	ee07 3a90 	vmov	s15, r3
 8007890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007894:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8111 	beq.w	8007ac2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	f000 8083 	beq.w	80079ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	f200 80a1 	bhi.w	80079f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d056      	beq.n	800796a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80078bc:	e099      	b.n	80079f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078be:	4b88      	ldr	r3, [pc, #544]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d02d      	beq.n	8007926 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ca:	4b85      	ldr	r3, [pc, #532]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	08db      	lsrs	r3, r3, #3
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	4a83      	ldr	r2, [pc, #524]	@ (8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	ee07 3a90 	vmov	s15, r3
 80078ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f4:	4b7a      	ldr	r3, [pc, #488]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007904:	ed97 6a03 	vldr	s12, [r7, #12]
 8007908:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800790c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007914:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007920:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007924:	e087      	b.n	8007a36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	ee07 3a90 	vmov	s15, r3
 800792c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007930:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007938:	4b69      	ldr	r3, [pc, #420]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800793a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007940:	ee07 3a90 	vmov	s15, r3
 8007944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007948:	ed97 6a03 	vldr	s12, [r7, #12]
 800794c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007958:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800795c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007964:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007968:	e065      	b.n	8007a36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007974:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800797c:	4b58      	ldr	r3, [pc, #352]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800797e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007990:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800799c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ac:	e043      	b.n	8007a36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	ee07 3a90 	vmov	s15, r3
 80079b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80079bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c0:	4b47      	ldr	r3, [pc, #284]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079d4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079f0:	e021      	b.n	8007a36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a04:	4b36      	ldr	r3, [pc, #216]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a18:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a36:	4b2a      	ldr	r3, [pc, #168]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	0a5b      	lsrs	r3, r3, #9
 8007a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a40:	ee07 3a90 	vmov	s15, r3
 8007a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a5c:	ee17 2a90 	vmov	r2, s15
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a64:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	0c1b      	lsrs	r3, r3, #16
 8007a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a8a:	ee17 2a90 	vmov	r2, s15
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007a92:	4b13      	ldr	r3, [pc, #76]	@ (8007ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a96:	0e1b      	lsrs	r3, r3, #24
 8007a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab8:	ee17 2a90 	vmov	r2, s15
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ac0:	e008      	b.n	8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	609a      	str	r2, [r3, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	3724      	adds	r7, #36	@ 0x24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	58024400 	.word	0x58024400
 8007ae4:	03d09000 	.word	0x03d09000
 8007ae8:	46000000 	.word	0x46000000
 8007aec:	4c742400 	.word	0x4c742400
 8007af0:	4a742400 	.word	0x4a742400
 8007af4:	4bb71b00 	.word	0x4bb71b00

08007af8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b06:	4b53      	ldr	r3, [pc, #332]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	f003 0303 	and.w	r3, r3, #3
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d101      	bne.n	8007b16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e099      	b.n	8007c4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b16:	4b4f      	ldr	r3, [pc, #316]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a4e      	ldr	r2, [pc, #312]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b22:	f7f9 ff73 	bl	8001a0c <HAL_GetTick>
 8007b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b28:	e008      	b.n	8007b3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b2a:	f7f9 ff6f 	bl	8001a0c <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e086      	b.n	8007c4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b3c:	4b45      	ldr	r3, [pc, #276]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f0      	bne.n	8007b2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b48:	4b42      	ldr	r3, [pc, #264]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	031b      	lsls	r3, r3, #12
 8007b56:	493f      	ldr	r1, [pc, #252]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	025b      	lsls	r3, r3, #9
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	041b      	lsls	r3, r3, #16
 8007b7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	061b      	lsls	r3, r3, #24
 8007b88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b8c:	4931      	ldr	r1, [pc, #196]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b92:	4b30      	ldr	r3, [pc, #192]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	492d      	ldr	r1, [pc, #180]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba8:	f023 0220 	bic.w	r2, r3, #32
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	4928      	ldr	r1, [pc, #160]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bb6:	4b27      	ldr	r3, [pc, #156]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bba:	4a26      	ldr	r2, [pc, #152]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bbc:	f023 0310 	bic.w	r3, r3, #16
 8007bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bc2:	4b24      	ldr	r3, [pc, #144]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bc6:	4b24      	ldr	r3, [pc, #144]	@ (8007c58 <RCCEx_PLL2_Config+0x160>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	69d2      	ldr	r2, [r2, #28]
 8007bce:	00d2      	lsls	r2, r2, #3
 8007bd0:	4920      	ldr	r1, [pc, #128]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	4a1e      	ldr	r2, [pc, #120]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	f043 0310 	orr.w	r3, r3, #16
 8007be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d106      	bne.n	8007bf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007be8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	4a19      	ldr	r2, [pc, #100]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bf4:	e00f      	b.n	8007c16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d106      	bne.n	8007c0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bfc:	4b15      	ldr	r3, [pc, #84]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	4a14      	ldr	r2, [pc, #80]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c08:	e005      	b.n	8007c16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c0a:	4b12      	ldr	r3, [pc, #72]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0e:	4a11      	ldr	r2, [pc, #68]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007c10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c16:	4b0f      	ldr	r3, [pc, #60]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c22:	f7f9 fef3 	bl	8001a0c <HAL_GetTick>
 8007c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c28:	e008      	b.n	8007c3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c2a:	f7f9 feef 	bl	8001a0c <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d901      	bls.n	8007c3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e006      	b.n	8007c4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <RCCEx_PLL2_Config+0x15c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d0f0      	beq.n	8007c2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	58024400 	.word	0x58024400
 8007c58:	ffff0007 	.word	0xffff0007

08007c5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c6a:	4b53      	ldr	r3, [pc, #332]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6e:	f003 0303 	and.w	r3, r3, #3
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d101      	bne.n	8007c7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e099      	b.n	8007dae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c7a:	4b4f      	ldr	r3, [pc, #316]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a4e      	ldr	r2, [pc, #312]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007c80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c86:	f7f9 fec1 	bl	8001a0c <HAL_GetTick>
 8007c8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c8c:	e008      	b.n	8007ca0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c8e:	f7f9 febd 	bl	8001a0c <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d901      	bls.n	8007ca0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e086      	b.n	8007dae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ca0:	4b45      	ldr	r3, [pc, #276]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1f0      	bne.n	8007c8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cac:	4b42      	ldr	r3, [pc, #264]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	051b      	lsls	r3, r3, #20
 8007cba:	493f      	ldr	r1, [pc, #252]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	025b      	lsls	r3, r3, #9
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	041b      	lsls	r3, r3, #16
 8007cde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	061b      	lsls	r3, r3, #24
 8007cec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007cf0:	4931      	ldr	r1, [pc, #196]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cf6:	4b30      	ldr	r3, [pc, #192]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	492d      	ldr	r1, [pc, #180]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d08:	4b2b      	ldr	r3, [pc, #172]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	4928      	ldr	r1, [pc, #160]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d1a:	4b27      	ldr	r3, [pc, #156]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1e:	4a26      	ldr	r2, [pc, #152]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d26:	4b24      	ldr	r3, [pc, #144]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d2a:	4b24      	ldr	r3, [pc, #144]	@ (8007dbc <RCCEx_PLL3_Config+0x160>)
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	69d2      	ldr	r2, [r2, #28]
 8007d32:	00d2      	lsls	r2, r2, #3
 8007d34:	4920      	ldr	r1, [pc, #128]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d106      	bne.n	8007d5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d50:	4a19      	ldr	r2, [pc, #100]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d58:	e00f      	b.n	8007d7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d106      	bne.n	8007d6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d60:	4b15      	ldr	r3, [pc, #84]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	4a14      	ldr	r2, [pc, #80]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d6c:	e005      	b.n	8007d7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d6e:	4b12      	ldr	r3, [pc, #72]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d72:	4a11      	ldr	r2, [pc, #68]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d86:	f7f9 fe41 	bl	8001a0c <HAL_GetTick>
 8007d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d8c:	e008      	b.n	8007da0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d8e:	f7f9 fe3d 	bl	8001a0c <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e006      	b.n	8007dae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007da0:	4b05      	ldr	r3, [pc, #20]	@ (8007db8 <RCCEx_PLL3_Config+0x15c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0f0      	beq.n	8007d8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	58024400 	.word	0x58024400
 8007dbc:	ffff0007 	.word	0xffff0007

08007dc0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e02b      	b.n	8007e2c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7f8 fc6f 	bl	80006cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f000 fe77 	bl	8008af4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	f000 fecb 	bl	8008bac <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007e16:	4b07      	ldr	r3, [pc, #28]	@ (8007e34 <HAL_SDRAM_Init+0x74>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a06      	ldr	r2, [pc, #24]	@ (8007e34 <HAL_SDRAM_Init+0x74>)
 8007e1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e20:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	52004000 	.word	0x52004000

08007e38 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007e4a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d101      	bne.n	8007e56 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007e52:	2302      	movs	r3, #2
 8007e54:	e021      	b.n	8007e9a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d002      	beq.n	8007e62 <HAL_SDRAM_SendCommand+0x2a>
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	d118      	bne.n	8007e94 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2202      	movs	r2, #2
 8007e66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 ff04 	bl	8008c80 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d104      	bne.n	8007e8a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2205      	movs	r2, #5
 8007e84:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e88:	e006      	b.n	8007e98 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e92:	e001      	b.n	8007e98 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e000      	b.n	8007e9a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e05e      	b.n	8007f74 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d106      	bne.n	8007ed0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7f9 fa46 	bl	800135c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0203 	bic.w	r2, r2, #3
 8007ee6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4b22      	ldr	r3, [pc, #136]	@ (8007f7c <HAL_SPDIFRX_Init+0xd8>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007f00:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8007f06:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007f0c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8007f12:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007f18:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007f1e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007f24:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8007f2a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8007f30:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d103      	bne.n	8007f4a <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f48:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d103      	bne.n	8007f5c <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f5a:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	ffc88407 	.word	0xffc88407

08007f80 <HAL_SPDIFRX_IRQHandler>:
  * @brief  This function handles SPDIFRX interrupt request.
  * @param  hspdif SPDIFRX handle
  * @retval HAL status
  */
void HAL_SPDIFRX_IRQHandler(SPDIFRX_HandleTypeDef *hspdif)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t itFlag   = hspdif->Instance->SR;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itSource = hspdif->Instance->IMR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	60bb      	str	r3, [r7, #8]

  /* SPDIFRX in mode Data Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <HAL_SPDIFRX_IRQHandler+0x3a>
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d006      	beq.n	8007fba <HAL_SPDIFRX_IRQHandler+0x3a>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveDataFlow_IT(hspdif);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f861 	bl	800807c <SPDIFRX_ReceiveDataFlow_IT>
  }

  /* SPDIFRX in mode Control Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <HAL_SPDIFRX_IRQHandler+0x5c>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <HAL_SPDIFRX_IRQHandler+0x5c>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveControlFlow_IT(hspdif);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f883 	bl	80080e2 <SPDIFRX_ReceiveControlFlow_IT>
  }

  /* SPDIFRX Overrun error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f003 0308 	and.w	r3, r3, #8
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d011      	beq.n	800800a <HAL_SPDIFRX_IRQHandler+0x8a>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00c      	beq.n	800800a <HAL_SPDIFRX_IRQHandler+0x8a>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	60da      	str	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ffc:	f043 0202 	orr.w	r2, r3, #2
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f82f 	bl	8008068 <HAL_SPDIFRX_ErrorCallback>
  }

  /* SPDIFRX Parity error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d011      	beq.n	8008038 <HAL_SPDIFRX_IRQHandler+0xb8>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00c      	beq.n	8008038 <HAL_SPDIFRX_IRQHandler+0xb8>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2204      	movs	r2, #4
 8008024:	60da      	str	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800802a:	f043 0204 	orr.w	r2, r3, #4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f818 	bl	8008068 <HAL_SPDIFRX_ErrorCallback>
  }
}
 8008038:	bf00      	nop
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_SPDIFRX_RxCpltCallback>:
  * @brief Rx Transfer (Data flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_RxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_SPDIFRX_CxCpltCallback>:
  * @brief Rx Transfer (Control flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_CxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_SPDIFRX_ErrorCallback>:
  * @brief SPDIFRX error callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_ErrorCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_ErrorCallback could be implemented in the user file
  */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <SPDIFRX_ReceiveDataFlow_IT>:
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808c:	6912      	ldr	r2, [r2, #16]
 800808e:	601a      	str	r2, [r3, #0]
  hspdif->pRxBuffPtr++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	1d1a      	adds	r2, r3, #4
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	631a      	str	r2, [r3, #48]	@ 0x30
  hspdif->RxXferCount--;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	875a      	strh	r2, [r3, #58]	@ 0x3a

  if (hspdif->RxXferCount == 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d113      	bne.n	80080da <SPDIFRX_ReceiveDataFlow_IT+0x5e>
  {
    /* Disable RXNE/PE and OVR interrupts */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6859      	ldr	r1, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 80080c0:	400b      	ands	r3, r1
 80080c2:	6053      	str	r3, [r2, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->RxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_RxCpltCallback(hspdif);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff ffb3 	bl	8008040 <HAL_SPDIFRX_RxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <SPDIFRX_ReceiveControlFlow_IT>:
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f2:	6952      	ldr	r2, [r2, #20]
 80080f4:	601a      	str	r2, [r3, #0]
  hspdif->pCsBuffPtr++;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspdif->CsXferCount--;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspdif->CsXferCount == 0U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008112:	b29b      	uxth	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d113      	bne.n	8008140 <SPDIFRX_ReceiveControlFlow_IT+0x5e>
  {
    /* Disable CSRNE interrupt */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6859      	ldr	r1, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8008126:	400b      	ands	r3, r1
 8008128:	6053      	str	r3, [r2, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->CxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_CxCpltCallback(hspdif);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff ff8a 	bl	8008054 <HAL_SPDIFRX_CxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e049      	b.n	80081ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7f9 fb76 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f000 fa66 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d020      	beq.n	800825a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01b      	beq.n	800825a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f06f 0202 	mvn.w	r2, #2
 800822a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f9eb 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 8008246:	e005      	b.n	8008254 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f9dd 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f9ee 	bl	8008630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d020      	beq.n	80082a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d01b      	beq.n	80082a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f06f 0204 	mvn.w	r2, #4
 8008276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f9c5 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 8008292:	e005      	b.n	80082a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f9b7 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f9c8 	bl	8008630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d020      	beq.n	80082f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01b      	beq.n	80082f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f06f 0208 	mvn.w	r2, #8
 80082c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2204      	movs	r2, #4
 80082c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f99f 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 80082de:	e005      	b.n	80082ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f991 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f9a2 	bl	8008630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d020      	beq.n	800833e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f003 0310 	and.w	r3, r3, #16
 8008302:	2b00      	cmp	r3, #0
 8008304:	d01b      	beq.n	800833e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f06f 0210 	mvn.w	r2, #16
 800830e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2208      	movs	r2, #8
 8008314:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f979 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 800832a:	e005      	b.n	8008338 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f96b 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f97c 	bl	8008630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00c      	beq.n	8008362 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f06f 0201 	mvn.w	r2, #1
 800835a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f949 	bl	80085f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00c      	beq.n	8008390 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837c:	2b00      	cmp	r3, #0
 800837e:	d007      	beq.n	8008390 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fb3a 	bl	8008a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00c      	beq.n	80083b4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d007      	beq.n	80083b4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80083ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fb32 	bl	8008a18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00c      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f936 	bl	8008644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 0320 	and.w	r3, r3, #32
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00c      	beq.n	80083fc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0220 	mvn.w	r2, #32
 80083f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fafa 	bl	80089f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083fc:	bf00      	nop
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_TIM_ConfigClockSource+0x1c>
 800841c:	2302      	movs	r3, #2
 800841e:	e0dc      	b.n	80085da <HAL_TIM_ConfigClockSource+0x1d6>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	4b6a      	ldr	r3, [pc, #424]	@ (80085e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800843c:	4013      	ands	r3, r2
 800843e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a64      	ldr	r2, [pc, #400]	@ (80085e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	f000 80a9 	beq.w	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 800845c:	4a62      	ldr	r2, [pc, #392]	@ (80085e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	f200 80ae 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008464:	4a61      	ldr	r2, [pc, #388]	@ (80085ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8008466:	4293      	cmp	r3, r2
 8008468:	f000 80a1 	beq.w	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 800846c:	4a5f      	ldr	r2, [pc, #380]	@ (80085ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	f200 80a6 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008474:	4a5e      	ldr	r2, [pc, #376]	@ (80085f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008476:	4293      	cmp	r3, r2
 8008478:	f000 8099 	beq.w	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 800847c:	4a5c      	ldr	r2, [pc, #368]	@ (80085f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800847e:	4293      	cmp	r3, r2
 8008480:	f200 809e 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008484:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008488:	f000 8091 	beq.w	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 800848c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008490:	f200 8096 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008498:	f000 8089 	beq.w	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 800849c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084a0:	f200 808e 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084a8:	d03e      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0x124>
 80084aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ae:	f200 8087 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b6:	f000 8086 	beq.w	80085c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084be:	d87f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084c0:	2b70      	cmp	r3, #112	@ 0x70
 80084c2:	d01a      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0xf6>
 80084c4:	2b70      	cmp	r3, #112	@ 0x70
 80084c6:	d87b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084c8:	2b60      	cmp	r3, #96	@ 0x60
 80084ca:	d050      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x16a>
 80084cc:	2b60      	cmp	r3, #96	@ 0x60
 80084ce:	d877      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084d0:	2b50      	cmp	r3, #80	@ 0x50
 80084d2:	d03c      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x14a>
 80084d4:	2b50      	cmp	r3, #80	@ 0x50
 80084d6:	d873      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084d8:	2b40      	cmp	r3, #64	@ 0x40
 80084da:	d058      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x18a>
 80084dc:	2b40      	cmp	r3, #64	@ 0x40
 80084de:	d86f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084e0:	2b30      	cmp	r3, #48	@ 0x30
 80084e2:	d064      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 80084e4:	2b30      	cmp	r3, #48	@ 0x30
 80084e6:	d86b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d060      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d867      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d05c      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d05a      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x1aa>
 80084f8:	e062      	b.n	80085c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800850a:	f000 f9c3 	bl	8008894 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800851c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	609a      	str	r2, [r3, #8]
      break;
 8008526:	e04f      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008538:	f000 f9ac 	bl	8008894 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800854a:	609a      	str	r2, [r3, #8]
      break;
 800854c:	e03c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800855a:	461a      	mov	r2, r3
 800855c:	f000 f91c 	bl	8008798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2150      	movs	r1, #80	@ 0x50
 8008566:	4618      	mov	r0, r3
 8008568:	f000 f976 	bl	8008858 <TIM_ITRx_SetConfig>
      break;
 800856c:	e02c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800857a:	461a      	mov	r2, r3
 800857c:	f000 f93b 	bl	80087f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2160      	movs	r1, #96	@ 0x60
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f966 	bl	8008858 <TIM_ITRx_SetConfig>
      break;
 800858c:	e01c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800859a:	461a      	mov	r2, r3
 800859c:	f000 f8fc 	bl	8008798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2140      	movs	r1, #64	@ 0x40
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f956 	bl	8008858 <TIM_ITRx_SetConfig>
      break;
 80085ac:	e00c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f000 f94d 	bl	8008858 <TIM_ITRx_SetConfig>
      break;
 80085be:	e003      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
      break;
 80085c4:	e000      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80085c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	ffceff88 	.word	0xffceff88
 80085e8:	00100040 	.word	0x00100040
 80085ec:	00100030 	.word	0x00100030
 80085f0:	00100020 	.word	0x00100020

080085f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a43      	ldr	r2, [pc, #268]	@ (8008778 <TIM_Base_SetConfig+0x120>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d013      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008676:	d00f      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a40      	ldr	r2, [pc, #256]	@ (800877c <TIM_Base_SetConfig+0x124>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00b      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a3f      	ldr	r2, [pc, #252]	@ (8008780 <TIM_Base_SetConfig+0x128>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d007      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a3e      	ldr	r2, [pc, #248]	@ (8008784 <TIM_Base_SetConfig+0x12c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d003      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a3d      	ldr	r2, [pc, #244]	@ (8008788 <TIM_Base_SetConfig+0x130>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d108      	bne.n	80086aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a32      	ldr	r2, [pc, #200]	@ (8008778 <TIM_Base_SetConfig+0x120>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d01f      	beq.n	80086f2 <TIM_Base_SetConfig+0x9a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b8:	d01b      	beq.n	80086f2 <TIM_Base_SetConfig+0x9a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a2f      	ldr	r2, [pc, #188]	@ (800877c <TIM_Base_SetConfig+0x124>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d017      	beq.n	80086f2 <TIM_Base_SetConfig+0x9a>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a2e      	ldr	r2, [pc, #184]	@ (8008780 <TIM_Base_SetConfig+0x128>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d013      	beq.n	80086f2 <TIM_Base_SetConfig+0x9a>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008784 <TIM_Base_SetConfig+0x12c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00f      	beq.n	80086f2 <TIM_Base_SetConfig+0x9a>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008788 <TIM_Base_SetConfig+0x130>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00b      	beq.n	80086f2 <TIM_Base_SetConfig+0x9a>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a2b      	ldr	r2, [pc, #172]	@ (800878c <TIM_Base_SetConfig+0x134>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d007      	beq.n	80086f2 <TIM_Base_SetConfig+0x9a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008790 <TIM_Base_SetConfig+0x138>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d003      	beq.n	80086f2 <TIM_Base_SetConfig+0x9a>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a29      	ldr	r2, [pc, #164]	@ (8008794 <TIM_Base_SetConfig+0x13c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d108      	bne.n	8008704 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	4313      	orrs	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	4313      	orrs	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a14      	ldr	r2, [pc, #80]	@ (8008778 <TIM_Base_SetConfig+0x120>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00f      	beq.n	800874a <TIM_Base_SetConfig+0xf2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a16      	ldr	r2, [pc, #88]	@ (8008788 <TIM_Base_SetConfig+0x130>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d00b      	beq.n	800874a <TIM_Base_SetConfig+0xf2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a15      	ldr	r2, [pc, #84]	@ (800878c <TIM_Base_SetConfig+0x134>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d007      	beq.n	800874a <TIM_Base_SetConfig+0xf2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a14      	ldr	r2, [pc, #80]	@ (8008790 <TIM_Base_SetConfig+0x138>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d003      	beq.n	800874a <TIM_Base_SetConfig+0xf2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a13      	ldr	r2, [pc, #76]	@ (8008794 <TIM_Base_SetConfig+0x13c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d103      	bne.n	8008752 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	691a      	ldr	r2, [r3, #16]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f043 0204 	orr.w	r2, r3, #4
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	601a      	str	r2, [r3, #0]
}
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	40010000 	.word	0x40010000
 800877c:	40000400 	.word	0x40000400
 8008780:	40000800 	.word	0x40000800
 8008784:	40000c00 	.word	0x40000c00
 8008788:	40010400 	.word	0x40010400
 800878c:	40014000 	.word	0x40014000
 8008790:	40014400 	.word	0x40014400
 8008794:	40014800 	.word	0x40014800

08008798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f023 0201 	bic.w	r2, r3, #1
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f023 030a 	bic.w	r3, r3, #10
 80087d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	621a      	str	r2, [r3, #32]
}
 80087ea:	bf00      	nop
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b087      	sub	sp, #28
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	f023 0210 	bic.w	r2, r3, #16
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	031b      	lsls	r3, r3, #12
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	4313      	orrs	r3, r2
 800882a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008832:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	621a      	str	r2, [r3, #32]
}
 800884a:	bf00      	nop
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
	...

08008858 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4b09      	ldr	r3, [pc, #36]	@ (8008890 <TIM_ITRx_SetConfig+0x38>)
 800886c:	4013      	ands	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4313      	orrs	r3, r2
 8008876:	f043 0307 	orr.w	r3, r3, #7
 800887a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	609a      	str	r2, [r3, #8]
}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	ffcfff8f 	.word	0xffcfff8f

08008894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	021a      	lsls	r2, r3, #8
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	431a      	orrs	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	609a      	str	r2, [r3, #8]
}
 80088c8:	bf00      	nop
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e06d      	b.n	80089c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a30      	ldr	r2, [pc, #192]	@ (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d004      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a2f      	ldr	r2, [pc, #188]	@ (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d108      	bne.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008926:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008938:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a20      	ldr	r2, [pc, #128]	@ (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d022      	beq.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800895e:	d01d      	beq.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a1d      	ldr	r2, [pc, #116]	@ (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d018      	beq.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a1c      	ldr	r2, [pc, #112]	@ (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d013      	beq.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a1a      	ldr	r2, [pc, #104]	@ (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00e      	beq.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a15      	ldr	r2, [pc, #84]	@ (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d009      	beq.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a16      	ldr	r2, [pc, #88]	@ (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d004      	beq.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a15      	ldr	r2, [pc, #84]	@ (80089ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d10c      	bne.n	80089b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40010000 	.word	0x40010000
 80089d8:	40010400 	.word	0x40010400
 80089dc:	40000400 	.word	0x40000400
 80089e0:	40000800 	.word	0x40000800
 80089e4:	40000c00 	.word	0x40000c00
 80089e8:	40001800 	.word	0x40001800
 80089ec:	40014000 	.word	0x40014000

080089f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b10      	ldr	r3, [pc, #64]	@ (8008a7c <FMC_NAND_Init+0x50>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	6851      	ldr	r1, [r2, #4]
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	6892      	ldr	r2, [r2, #8]
 8008a46:	4311      	orrs	r1, r2
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	68d2      	ldr	r2, [r2, #12]
 8008a4c:	4311      	orrs	r1, r2
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	6912      	ldr	r2, [r2, #16]
 8008a52:	4311      	orrs	r1, r2
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	6952      	ldr	r2, [r2, #20]
 8008a58:	0252      	lsls	r2, r2, #9
 8008a5a:	4311      	orrs	r1, r2
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	6992      	ldr	r2, [r2, #24]
 8008a60:	0352      	lsls	r2, r2, #13
 8008a62:	430a      	orrs	r2, r1
 8008a64:	4313      	orrs	r3, r2
 8008a66:	f043 0208 	orr.w	r2, r3, #8
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	fff00189 	.word	0xfff00189

08008a80 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8008a96:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8008a9e:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8008aa6:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 8008ad0:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8008ad8:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8008ae0:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d121      	bne.n	8008b4a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4b27      	ldr	r3, [pc, #156]	@ (8008ba8 <FMC_SDRAM_Init+0xb4>)
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	6851      	ldr	r1, [r2, #4]
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	6892      	ldr	r2, [r2, #8]
 8008b16:	4311      	orrs	r1, r2
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	68d2      	ldr	r2, [r2, #12]
 8008b1c:	4311      	orrs	r1, r2
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	6912      	ldr	r2, [r2, #16]
 8008b22:	4311      	orrs	r1, r2
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	6952      	ldr	r2, [r2, #20]
 8008b28:	4311      	orrs	r1, r2
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	6992      	ldr	r2, [r2, #24]
 8008b2e:	4311      	orrs	r1, r2
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	69d2      	ldr	r2, [r2, #28]
 8008b34:	4311      	orrs	r1, r2
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	6a12      	ldr	r2, [r2, #32]
 8008b3a:	4311      	orrs	r1, r2
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b40:	430a      	orrs	r2, r1
 8008b42:	431a      	orrs	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	e026      	b.n	8008b98 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	69d9      	ldr	r1, [r3, #28]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	4319      	orrs	r1, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b60:	430b      	orrs	r3, r1
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba8 <FMC_SDRAM_Init+0xb4>)
 8008b6e:	4013      	ands	r3, r2
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	6851      	ldr	r1, [r2, #4]
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	6892      	ldr	r2, [r2, #8]
 8008b78:	4311      	orrs	r1, r2
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	68d2      	ldr	r2, [r2, #12]
 8008b7e:	4311      	orrs	r1, r2
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	6912      	ldr	r2, [r2, #16]
 8008b84:	4311      	orrs	r1, r2
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	6952      	ldr	r2, [r2, #20]
 8008b8a:	4311      	orrs	r1, r2
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	6992      	ldr	r2, [r2, #24]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	ffff8000 	.word	0xffff8000

08008bac <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d128      	bne.n	8008c10 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	1e59      	subs	r1, r3, #1
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	011b      	lsls	r3, r3, #4
 8008bd4:	4319      	orrs	r1, r3
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	021b      	lsls	r3, r3, #8
 8008bde:	4319      	orrs	r1, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	031b      	lsls	r3, r3, #12
 8008be8:	4319      	orrs	r1, r3
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	041b      	lsls	r3, r3, #16
 8008bf2:	4319      	orrs	r1, r3
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	051b      	lsls	r3, r3, #20
 8008bfc:	4319      	orrs	r1, r3
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	061b      	lsls	r3, r3, #24
 8008c06:	430b      	orrs	r3, r1
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	609a      	str	r2, [r3, #8]
 8008c0e:	e02d      	b.n	8008c6c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	4b19      	ldr	r3, [pc, #100]	@ (8008c7c <FMC_SDRAM_Timing_Init+0xd0>)
 8008c16:	4013      	ands	r3, r2
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	68d2      	ldr	r2, [r2, #12]
 8008c1c:	3a01      	subs	r2, #1
 8008c1e:	0311      	lsls	r1, r2, #12
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	6952      	ldr	r2, [r2, #20]
 8008c24:	3a01      	subs	r2, #1
 8008c26:	0512      	lsls	r2, r2, #20
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	1e59      	subs	r1, r3, #1
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	4319      	orrs	r1, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	4319      	orrs	r1, r3
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	041b      	lsls	r3, r3, #16
 8008c5a:	4319      	orrs	r1, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	061b      	lsls	r3, r3, #24
 8008c64:	430b      	orrs	r3, r1
 8008c66:	431a      	orrs	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	ff0f0fff 	.word	0xff0f0fff

08008c80 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc4 <FMC_SDRAM_SendCommand+0x44>)
 8008c92:	4013      	ands	r3, r2
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	6811      	ldr	r1, [r2, #0]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	6852      	ldr	r2, [r2, #4]
 8008c9c:	4311      	orrs	r1, r2
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	6892      	ldr	r2, [r2, #8]
 8008ca2:	3a01      	subs	r2, #1
 8008ca4:	0152      	lsls	r2, r2, #5
 8008ca6:	4311      	orrs	r1, r2
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	68d2      	ldr	r2, [r2, #12]
 8008cac:	0252      	lsls	r2, r2, #9
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	ffc00000 	.word	0xffc00000

08008cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cc8:	b084      	sub	sp, #16
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	f107 001c 	add.w	r0, r7, #28
 8008cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d121      	bne.n	8008d26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8008da4 <USB_CoreInit+0xdc>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d105      	bne.n	8008d1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 fafa 	bl	800a314 <USB_CoreReset>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
 8008d24:	e01b      	b.n	8008d5e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 faee 	bl	800a314 <USB_CoreReset>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d3c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d106      	bne.n	8008d52 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d50:	e005      	b.n	8008d5e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d5e:	7fbb      	ldrb	r3, [r7, #30]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d116      	bne.n	8008d92 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d72:	4b0d      	ldr	r3, [pc, #52]	@ (8008da8 <USB_CoreInit+0xe0>)
 8008d74:	4313      	orrs	r3, r2
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f043 0206 	orr.w	r2, r3, #6
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f043 0220 	orr.w	r2, r3, #32
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d9e:	b004      	add	sp, #16
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	ffbdffbf 	.word	0xffbdffbf
 8008da8:	03ee0000 	.word	0x03ee0000

08008dac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d165      	bne.n	8008e8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	4a41      	ldr	r2, [pc, #260]	@ (8008ec8 <USB_SetTurnaroundTime+0x11c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d906      	bls.n	8008dd6 <USB_SetTurnaroundTime+0x2a>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4a40      	ldr	r2, [pc, #256]	@ (8008ecc <USB_SetTurnaroundTime+0x120>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d202      	bcs.n	8008dd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008dd0:	230f      	movs	r3, #15
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e062      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8008ecc <USB_SetTurnaroundTime+0x120>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d306      	bcc.n	8008dec <USB_SetTurnaroundTime+0x40>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	4a3b      	ldr	r2, [pc, #236]	@ (8008ed0 <USB_SetTurnaroundTime+0x124>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d202      	bcs.n	8008dec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008de6:	230e      	movs	r3, #14
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	e057      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4a38      	ldr	r2, [pc, #224]	@ (8008ed0 <USB_SetTurnaroundTime+0x124>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d306      	bcc.n	8008e02 <USB_SetTurnaroundTime+0x56>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4a37      	ldr	r2, [pc, #220]	@ (8008ed4 <USB_SetTurnaroundTime+0x128>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d202      	bcs.n	8008e02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008dfc:	230d      	movs	r3, #13
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e04c      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4a33      	ldr	r2, [pc, #204]	@ (8008ed4 <USB_SetTurnaroundTime+0x128>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d306      	bcc.n	8008e18 <USB_SetTurnaroundTime+0x6c>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4a32      	ldr	r2, [pc, #200]	@ (8008ed8 <USB_SetTurnaroundTime+0x12c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d802      	bhi.n	8008e18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008e12:	230c      	movs	r3, #12
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e041      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8008ed8 <USB_SetTurnaroundTime+0x12c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d906      	bls.n	8008e2e <USB_SetTurnaroundTime+0x82>
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a2e      	ldr	r2, [pc, #184]	@ (8008edc <USB_SetTurnaroundTime+0x130>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d802      	bhi.n	8008e2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008e28:	230b      	movs	r3, #11
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	e036      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	4a2a      	ldr	r2, [pc, #168]	@ (8008edc <USB_SetTurnaroundTime+0x130>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d906      	bls.n	8008e44 <USB_SetTurnaroundTime+0x98>
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4a29      	ldr	r2, [pc, #164]	@ (8008ee0 <USB_SetTurnaroundTime+0x134>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d802      	bhi.n	8008e44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e3e:	230a      	movs	r3, #10
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	e02b      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4a26      	ldr	r2, [pc, #152]	@ (8008ee0 <USB_SetTurnaroundTime+0x134>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d906      	bls.n	8008e5a <USB_SetTurnaroundTime+0xae>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	4a25      	ldr	r2, [pc, #148]	@ (8008ee4 <USB_SetTurnaroundTime+0x138>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d202      	bcs.n	8008e5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e54:	2309      	movs	r3, #9
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	e020      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	4a21      	ldr	r2, [pc, #132]	@ (8008ee4 <USB_SetTurnaroundTime+0x138>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d306      	bcc.n	8008e70 <USB_SetTurnaroundTime+0xc4>
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	4a20      	ldr	r2, [pc, #128]	@ (8008ee8 <USB_SetTurnaroundTime+0x13c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d802      	bhi.n	8008e70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	e015      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee8 <USB_SetTurnaroundTime+0x13c>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d906      	bls.n	8008e86 <USB_SetTurnaroundTime+0xda>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008eec <USB_SetTurnaroundTime+0x140>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d202      	bcs.n	8008e86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e80:	2307      	movs	r3, #7
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	e00a      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e86:	2306      	movs	r3, #6
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	e007      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d102      	bne.n	8008e98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008e92:	2309      	movs	r3, #9
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	e001      	b.n	8008e9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e98:	2309      	movs	r3, #9
 8008e9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	029b      	lsls	r3, r3, #10
 8008eb0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	371c      	adds	r7, #28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	00d8acbf 	.word	0x00d8acbf
 8008ecc:	00e4e1c0 	.word	0x00e4e1c0
 8008ed0:	00f42400 	.word	0x00f42400
 8008ed4:	01067380 	.word	0x01067380
 8008ed8:	011a499f 	.word	0x011a499f
 8008edc:	01312cff 	.word	0x01312cff
 8008ee0:	014ca43f 	.word	0x014ca43f
 8008ee4:	016e3600 	.word	0x016e3600
 8008ee8:	01a6ab1f 	.word	0x01a6ab1f
 8008eec:	01e84800 	.word	0x01e84800

08008ef0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f043 0201 	orr.w	r2, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b083      	sub	sp, #12
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f023 0201 	bic.w	r2, r3, #1
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d115      	bne.n	8008f82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f62:	200a      	movs	r0, #10
 8008f64:	f7f8 fd5e 	bl	8001a24 <HAL_Delay>
      ms += 10U;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	330a      	adds	r3, #10
 8008f6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 f93f 	bl	800a1f2 <USB_GetMode>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d01e      	beq.n	8008fb8 <USB_SetCurrentMode+0x84>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f7e:	d9f0      	bls.n	8008f62 <USB_SetCurrentMode+0x2e>
 8008f80:	e01a      	b.n	8008fb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d115      	bne.n	8008fb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f94:	200a      	movs	r0, #10
 8008f96:	f7f8 fd45 	bl	8001a24 <HAL_Delay>
      ms += 10U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	330a      	adds	r3, #10
 8008f9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 f926 	bl	800a1f2 <USB_GetMode>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <USB_SetCurrentMode+0x84>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2bc7      	cmp	r3, #199	@ 0xc7
 8008fb0:	d9f0      	bls.n	8008f94 <USB_SetCurrentMode+0x60>
 8008fb2:	e001      	b.n	8008fb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e005      	b.n	8008fc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2bc8      	cmp	r3, #200	@ 0xc8
 8008fbc:	d101      	bne.n	8008fc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e000      	b.n	8008fc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fcc:	b084      	sub	sp, #16
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	613b      	str	r3, [r7, #16]
 8008fea:	e009      	b.n	8009000 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	3340      	adds	r3, #64	@ 0x40
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	2b0e      	cmp	r3, #14
 8009004:	d9f2      	bls.n	8008fec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009006:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800900a:	2b00      	cmp	r3, #0
 800900c:	d11c      	bne.n	8009048 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800901c:	f043 0302 	orr.w	r3, r3, #2
 8009020:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009026:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	e005      	b.n	8009054 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800905a:	461a      	mov	r2, r3
 800905c:	2300      	movs	r3, #0
 800905e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009060:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009064:	2b01      	cmp	r3, #1
 8009066:	d10d      	bne.n	8009084 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800906c:	2b00      	cmp	r3, #0
 800906e:	d104      	bne.n	800907a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009070:	2100      	movs	r1, #0
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f968 	bl	8009348 <USB_SetDevSpeed>
 8009078:	e008      	b.n	800908c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800907a:	2101      	movs	r1, #1
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f963 	bl	8009348 <USB_SetDevSpeed>
 8009082:	e003      	b.n	800908c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009084:	2103      	movs	r1, #3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f95e 	bl	8009348 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800908c:	2110      	movs	r1, #16
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f8fa 	bl	8009288 <USB_FlushTxFifo>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f924 	bl	80092ec <USB_FlushRxFifo>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b4:	461a      	mov	r2, r3
 80090b6:	2300      	movs	r3, #0
 80090b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c0:	461a      	mov	r2, r3
 80090c2:	2300      	movs	r3, #0
 80090c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090cc:	461a      	mov	r2, r3
 80090ce:	2300      	movs	r3, #0
 80090d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	e043      	b.n	8009160 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ee:	d118      	bne.n	8009122 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10a      	bne.n	800910c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009102:	461a      	mov	r2, r3
 8009104:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	e013      	b.n	8009134 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009118:	461a      	mov	r2, r3
 800911a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	e008      	b.n	8009134 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800912e:	461a      	mov	r2, r3
 8009130:	2300      	movs	r3, #0
 8009132:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009140:	461a      	mov	r2, r3
 8009142:	2300      	movs	r3, #0
 8009144:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009152:	461a      	mov	r2, r3
 8009154:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	3301      	adds	r3, #1
 800915e:	613b      	str	r3, [r7, #16]
 8009160:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009164:	461a      	mov	r2, r3
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	4293      	cmp	r3, r2
 800916a:	d3b5      	bcc.n	80090d8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800916c:	2300      	movs	r3, #0
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	e043      	b.n	80091fa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009188:	d118      	bne.n	80091bc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800919c:	461a      	mov	r2, r3
 800919e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	e013      	b.n	80091ce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b2:	461a      	mov	r2, r3
 80091b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80091b8:	6013      	str	r3, [r2, #0]
 80091ba:	e008      	b.n	80091ce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c8:	461a      	mov	r2, r3
 80091ca:	2300      	movs	r3, #0
 80091cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091da:	461a      	mov	r2, r3
 80091dc:	2300      	movs	r3, #0
 80091de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ec:	461a      	mov	r2, r3
 80091ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	3301      	adds	r3, #1
 80091f8:	613b      	str	r3, [r7, #16]
 80091fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091fe:	461a      	mov	r2, r3
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	4293      	cmp	r3, r2
 8009204:	d3b5      	bcc.n	8009172 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009218:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009226:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009228:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800922c:	2b00      	cmp	r3, #0
 800922e:	d105      	bne.n	800923c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	f043 0210 	orr.w	r2, r3, #16
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	699a      	ldr	r2, [r3, #24]
 8009240:	4b0f      	ldr	r3, [pc, #60]	@ (8009280 <USB_DevInit+0x2b4>)
 8009242:	4313      	orrs	r3, r2
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009248:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	f043 0208 	orr.w	r2, r3, #8
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800925c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009260:	2b01      	cmp	r3, #1
 8009262:	d105      	bne.n	8009270 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699a      	ldr	r2, [r3, #24]
 8009268:	4b06      	ldr	r3, [pc, #24]	@ (8009284 <USB_DevInit+0x2b8>)
 800926a:	4313      	orrs	r3, r2
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800927c:	b004      	add	sp, #16
 800927e:	4770      	bx	lr
 8009280:	803c3800 	.word	0x803c3800
 8009284:	40000004 	.word	0x40000004

08009288 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092a2:	d901      	bls.n	80092a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e01b      	b.n	80092e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	daf2      	bge.n	8009296 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	019b      	lsls	r3, r3, #6
 80092b8:	f043 0220 	orr.w	r2, r3, #32
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092cc:	d901      	bls.n	80092d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e006      	b.n	80092e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d0f0      	beq.n	80092c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092f4:	2300      	movs	r3, #0
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3301      	adds	r3, #1
 80092fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009304:	d901      	bls.n	800930a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e018      	b.n	800933c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	daf2      	bge.n	80092f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2210      	movs	r2, #16
 800931a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	3301      	adds	r3, #1
 8009320:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009328:	d901      	bls.n	800932e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e006      	b.n	800933c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f003 0310 	and.w	r3, r3, #16
 8009336:	2b10      	cmp	r3, #16
 8009338:	d0f0      	beq.n	800931c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	68f9      	ldr	r1, [r7, #12]
 8009364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009368:	4313      	orrs	r3, r2
 800936a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800937a:	b480      	push	{r7}
 800937c:	b087      	sub	sp, #28
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 0306 	and.w	r3, r3, #6
 8009392:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d102      	bne.n	80093a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800939a:	2300      	movs	r3, #0
 800939c:	75fb      	strb	r3, [r7, #23]
 800939e:	e00a      	b.n	80093b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d002      	beq.n	80093ac <USB_GetDevSpeed+0x32>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b06      	cmp	r3, #6
 80093aa:	d102      	bne.n	80093b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80093ac:	2302      	movs	r3, #2
 80093ae:	75fb      	strb	r3, [r7, #23]
 80093b0:	e001      	b.n	80093b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80093b2:	230f      	movs	r3, #15
 80093b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d139      	bne.n	8009454 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093e6:	69da      	ldr	r2, [r3, #28]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 030f 	and.w	r3, r3, #15
 80093f0:	2101      	movs	r1, #1
 80093f2:	fa01 f303 	lsl.w	r3, r1, r3
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	68f9      	ldr	r1, [r7, #12]
 80093fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093fe:	4313      	orrs	r3, r2
 8009400:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d153      	bne.n	80094c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	791b      	ldrb	r3, [r3, #4]
 8009432:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009434:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	059b      	lsls	r3, r3, #22
 800943a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800943c:	431a      	orrs	r2, r3
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	0159      	lsls	r1, r3, #5
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	440b      	add	r3, r1
 8009446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800944a:	4619      	mov	r1, r3
 800944c:	4b20      	ldr	r3, [pc, #128]	@ (80094d0 <USB_ActivateEndpoint+0x10c>)
 800944e:	4313      	orrs	r3, r2
 8009450:	600b      	str	r3, [r1, #0]
 8009452:	e035      	b.n	80094c0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	2101      	movs	r1, #1
 8009466:	fa01 f303 	lsl.w	r3, r1, r3
 800946a:	041b      	lsls	r3, r3, #16
 800946c:	68f9      	ldr	r1, [r7, #12]
 800946e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009472:	4313      	orrs	r3, r2
 8009474:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d119      	bne.n	80094c0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	791b      	ldrb	r3, [r3, #4]
 80094a6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80094a8:	430b      	orrs	r3, r1
 80094aa:	431a      	orrs	r2, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	0159      	lsls	r1, r3, #5
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	440b      	add	r3, r1
 80094b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b8:	4619      	mov	r1, r3
 80094ba:	4b05      	ldr	r3, [pc, #20]	@ (80094d0 <USB_ActivateEndpoint+0x10c>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	10008000 	.word	0x10008000

080094d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	785b      	ldrb	r3, [r3, #1]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d161      	bne.n	80095b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009506:	d11f      	bne.n	8009548 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	0151      	lsls	r1, r2, #5
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	440a      	add	r2, r1
 800951e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009522:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009526:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	0151      	lsls	r1, r2, #5
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	440a      	add	r2, r1
 800953e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	2101      	movs	r1, #1
 800955a:	fa01 f303 	lsl.w	r3, r1, r3
 800955e:	b29b      	uxth	r3, r3
 8009560:	43db      	mvns	r3, r3
 8009562:	68f9      	ldr	r1, [r7, #12]
 8009564:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009568:	4013      	ands	r3, r2
 800956a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009572:	69da      	ldr	r2, [r3, #28]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	f003 030f 	and.w	r3, r3, #15
 800957c:	2101      	movs	r1, #1
 800957e:	fa01 f303 	lsl.w	r3, r1, r3
 8009582:	b29b      	uxth	r3, r3
 8009584:	43db      	mvns	r3, r3
 8009586:	68f9      	ldr	r1, [r7, #12]
 8009588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800958c:	4013      	ands	r3, r2
 800958e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	0159      	lsls	r1, r3, #5
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	440b      	add	r3, r1
 80095a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095aa:	4619      	mov	r1, r3
 80095ac:	4b35      	ldr	r3, [pc, #212]	@ (8009684 <USB_DeactivateEndpoint+0x1b0>)
 80095ae:	4013      	ands	r3, r2
 80095b0:	600b      	str	r3, [r1, #0]
 80095b2:	e060      	b.n	8009676 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095ca:	d11f      	bne.n	800960c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	0151      	lsls	r1, r2, #5
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	440a      	add	r2, r1
 80095e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009606:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800960a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	2101      	movs	r1, #1
 800961e:	fa01 f303 	lsl.w	r3, r1, r3
 8009622:	041b      	lsls	r3, r3, #16
 8009624:	43db      	mvns	r3, r3
 8009626:	68f9      	ldr	r1, [r7, #12]
 8009628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800962c:	4013      	ands	r3, r2
 800962e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009636:	69da      	ldr	r2, [r3, #28]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 030f 	and.w	r3, r3, #15
 8009640:	2101      	movs	r1, #1
 8009642:	fa01 f303 	lsl.w	r3, r1, r3
 8009646:	041b      	lsls	r3, r3, #16
 8009648:	43db      	mvns	r3, r3
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009650:	4013      	ands	r3, r2
 8009652:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	0159      	lsls	r1, r3, #5
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	440b      	add	r3, r1
 800966a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966e:	4619      	mov	r1, r3
 8009670:	4b05      	ldr	r3, [pc, #20]	@ (8009688 <USB_DeactivateEndpoint+0x1b4>)
 8009672:	4013      	ands	r3, r2
 8009674:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	ec337800 	.word	0xec337800
 8009688:	eff37800 	.word	0xeff37800

0800968c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	@ 0x28
 8009690:	af02      	add	r7, sp, #8
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	785b      	ldrb	r3, [r3, #1]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	f040 8185 	bne.w	80099b8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d132      	bne.n	800971c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	0159      	lsls	r1, r3, #5
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	440b      	add	r3, r1
 80096cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d0:	4619      	mov	r1, r3
 80096d2:	4ba7      	ldr	r3, [pc, #668]	@ (8009970 <USB_EPStartXfer+0x2e4>)
 80096d4:	4013      	ands	r3, r2
 80096d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009704:	691a      	ldr	r2, [r3, #16]
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	0159      	lsls	r1, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	440b      	add	r3, r1
 800970e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009712:	4619      	mov	r1, r3
 8009714:	4b97      	ldr	r3, [pc, #604]	@ (8009974 <USB_EPStartXfer+0x2e8>)
 8009716:	4013      	ands	r3, r2
 8009718:	610b      	str	r3, [r1, #16]
 800971a:	e097      	b.n	800984c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009728:	691a      	ldr	r2, [r3, #16]
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	0159      	lsls	r1, r3, #5
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	440b      	add	r3, r1
 8009732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009736:	4619      	mov	r1, r3
 8009738:	4b8e      	ldr	r3, [pc, #568]	@ (8009974 <USB_EPStartXfer+0x2e8>)
 800973a:	4013      	ands	r3, r2
 800973c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800974a:	691a      	ldr	r2, [r3, #16]
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	0159      	lsls	r1, r3, #5
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	440b      	add	r3, r1
 8009754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009758:	4619      	mov	r1, r3
 800975a:	4b85      	ldr	r3, [pc, #532]	@ (8009970 <USB_EPStartXfer+0x2e4>)
 800975c:	4013      	ands	r3, r2
 800975e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d11a      	bne.n	800979c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	429a      	cmp	r2, r3
 8009770:	d903      	bls.n	800977a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	0151      	lsls	r1, r2, #5
 800978c:	69fa      	ldr	r2, [r7, #28]
 800978e:	440a      	add	r2, r1
 8009790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009794:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009798:	6113      	str	r3, [r2, #16]
 800979a:	e044      	b.n	8009826 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	4413      	add	r3, r2
 80097a6:	1e5a      	subs	r2, r3, #1
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	8afb      	ldrh	r3, [r7, #22]
 80097c2:	04d9      	lsls	r1, r3, #19
 80097c4:	4b6c      	ldr	r3, [pc, #432]	@ (8009978 <USB_EPStartXfer+0x2ec>)
 80097c6:	400b      	ands	r3, r1
 80097c8:	69b9      	ldr	r1, [r7, #24]
 80097ca:	0148      	lsls	r0, r1, #5
 80097cc:	69f9      	ldr	r1, [r7, #28]
 80097ce:	4401      	add	r1, r0
 80097d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097d4:	4313      	orrs	r3, r2
 80097d6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	791b      	ldrb	r3, [r3, #4]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d122      	bne.n	8009826 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	0151      	lsls	r1, r2, #5
 80097f2:	69fa      	ldr	r2, [r7, #28]
 80097f4:	440a      	add	r2, r1
 80097f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097fa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80097fe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800980c:	691a      	ldr	r2, [r3, #16]
 800980e:	8afb      	ldrh	r3, [r7, #22]
 8009810:	075b      	lsls	r3, r3, #29
 8009812:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009816:	69b9      	ldr	r1, [r7, #24]
 8009818:	0148      	lsls	r0, r1, #5
 800981a:	69f9      	ldr	r1, [r7, #28]
 800981c:	4401      	add	r1, r0
 800981e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009822:	4313      	orrs	r3, r2
 8009824:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800983c:	69b9      	ldr	r1, [r7, #24]
 800983e:	0148      	lsls	r0, r1, #5
 8009840:	69f9      	ldr	r1, [r7, #28]
 8009842:	4401      	add	r1, r0
 8009844:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009848:	4313      	orrs	r3, r2
 800984a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d14b      	bne.n	80098ea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009866:	461a      	mov	r2, r3
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	791b      	ldrb	r3, [r3, #4]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d128      	bne.n	80098c8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009882:	2b00      	cmp	r3, #0
 8009884:	d110      	bne.n	80098a8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	69fa      	ldr	r2, [r7, #28]
 800989a:	440a      	add	r2, r1
 800989c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	e00f      	b.n	80098c8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	0151      	lsls	r1, r2, #5
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	440a      	add	r2, r1
 80098be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	69ba      	ldr	r2, [r7, #24]
 80098d8:	0151      	lsls	r1, r2, #5
 80098da:	69fa      	ldr	r2, [r7, #28]
 80098dc:	440a      	add	r2, r1
 80098de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	e169      	b.n	8009bbe <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	0151      	lsls	r1, r2, #5
 80098fc:	69fa      	ldr	r2, [r7, #28]
 80098fe:	440a      	add	r2, r1
 8009900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009904:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009908:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	791b      	ldrb	r3, [r3, #4]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d015      	beq.n	800993e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 8151 	beq.w	8009bbe <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 030f 	and.w	r3, r3, #15
 800992c:	2101      	movs	r1, #1
 800992e:	fa01 f303 	lsl.w	r3, r1, r3
 8009932:	69f9      	ldr	r1, [r7, #28]
 8009934:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009938:	4313      	orrs	r3, r2
 800993a:	634b      	str	r3, [r1, #52]	@ 0x34
 800993c:	e13f      	b.n	8009bbe <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800994a:	2b00      	cmp	r3, #0
 800994c:	d116      	bne.n	800997c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	0151      	lsls	r1, r2, #5
 8009960:	69fa      	ldr	r2, [r7, #28]
 8009962:	440a      	add	r2, r1
 8009964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009968:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	e015      	b.n	800999c <USB_EPStartXfer+0x310>
 8009970:	e007ffff 	.word	0xe007ffff
 8009974:	fff80000 	.word	0xfff80000
 8009978:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	0151      	lsls	r1, r2, #5
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	440a      	add	r2, r1
 8009992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800999a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	68d9      	ldr	r1, [r3, #12]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	781a      	ldrb	r2, [r3, #0]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	b298      	uxth	r0, r3
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	4603      	mov	r3, r0
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f9b9 	bl	8009d28 <USB_WritePacket>
 80099b6:	e102      	b.n	8009bbe <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c4:	691a      	ldr	r2, [r3, #16]
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	0159      	lsls	r1, r3, #5
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	440b      	add	r3, r1
 80099ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d2:	4619      	mov	r1, r3
 80099d4:	4b7c      	ldr	r3, [pc, #496]	@ (8009bc8 <USB_EPStartXfer+0x53c>)
 80099d6:	4013      	ands	r3, r2
 80099d8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e6:	691a      	ldr	r2, [r3, #16]
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	0159      	lsls	r1, r3, #5
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	440b      	add	r3, r1
 80099f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f4:	4619      	mov	r1, r3
 80099f6:	4b75      	ldr	r3, [pc, #468]	@ (8009bcc <USB_EPStartXfer+0x540>)
 80099f8:	4013      	ands	r3, r2
 80099fa:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d12f      	bne.n	8009a62 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a26:	691a      	ldr	r2, [r3, #16]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a30:	69b9      	ldr	r1, [r7, #24]
 8009a32:	0148      	lsls	r0, r1, #5
 8009a34:	69f9      	ldr	r1, [r7, #28]
 8009a36:	4401      	add	r1, r0
 8009a38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a5e:	6113      	str	r3, [r2, #16]
 8009a60:	e05f      	b.n	8009b22 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d123      	bne.n	8009ab2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a76:	691a      	ldr	r2, [r3, #16]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a80:	69b9      	ldr	r1, [r7, #24]
 8009a82:	0148      	lsls	r0, r1, #5
 8009a84:	69f9      	ldr	r1, [r7, #28]
 8009a86:	4401      	add	r1, r0
 8009a88:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	0151      	lsls	r1, r2, #5
 8009aa2:	69fa      	ldr	r2, [r7, #28]
 8009aa4:	440a      	add	r2, r1
 8009aa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aaa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009aae:	6113      	str	r3, [r2, #16]
 8009ab0:	e037      	b.n	8009b22 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	691a      	ldr	r2, [r3, #16]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	4413      	add	r3, r2
 8009abc:	1e5a      	subs	r2, r3, #1
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	8afa      	ldrh	r2, [r7, #22]
 8009ace:	fb03 f202 	mul.w	r2, r3, r2
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae2:	691a      	ldr	r2, [r3, #16]
 8009ae4:	8afb      	ldrh	r3, [r7, #22]
 8009ae6:	04d9      	lsls	r1, r3, #19
 8009ae8:	4b39      	ldr	r3, [pc, #228]	@ (8009bd0 <USB_EPStartXfer+0x544>)
 8009aea:	400b      	ands	r3, r1
 8009aec:	69b9      	ldr	r1, [r7, #24]
 8009aee:	0148      	lsls	r0, r1, #5
 8009af0:	69f9      	ldr	r1, [r7, #28]
 8009af2:	4401      	add	r1, r0
 8009af4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009af8:	4313      	orrs	r3, r2
 8009afa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b08:	691a      	ldr	r2, [r3, #16]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b12:	69b9      	ldr	r1, [r7, #24]
 8009b14:	0148      	lsls	r0, r1, #5
 8009b16:	69f9      	ldr	r1, [r7, #28]
 8009b18:	4401      	add	r1, r0
 8009b1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d10d      	bne.n	8009b44 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d009      	beq.n	8009b44 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	68d9      	ldr	r1, [r3, #12]
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b40:	460a      	mov	r2, r1
 8009b42:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	791b      	ldrb	r3, [r3, #4]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d128      	bne.n	8009b9e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d110      	bne.n	8009b7e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	0151      	lsls	r1, r2, #5
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	440a      	add	r2, r1
 8009b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b76:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	e00f      	b.n	8009b9e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	0151      	lsls	r1, r2, #5
 8009b90:	69fa      	ldr	r2, [r7, #28]
 8009b92:	440a      	add	r2, r1
 8009b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b9c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	0151      	lsls	r1, r2, #5
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	440a      	add	r2, r1
 8009bb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bb8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009bbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	fff80000 	.word	0xfff80000
 8009bcc:	e007ffff 	.word	0xe007ffff
 8009bd0:	1ff80000 	.word	0x1ff80000

08009bd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d14a      	bne.n	8009c88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c0a:	f040 8086 	bne.w	8009d1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	7812      	ldrb	r2, [r2, #0]
 8009c22:	0151      	lsls	r1, r2, #5
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	440a      	add	r2, r1
 8009c28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	7812      	ldrb	r2, [r2, #0]
 8009c46:	0151      	lsls	r1, r2, #5
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	440a      	add	r2, r1
 8009c4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d902      	bls.n	8009c6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
          break;
 8009c6a:	e056      	b.n	8009d1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	015a      	lsls	r2, r3, #5
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	4413      	add	r3, r2
 8009c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c84:	d0e7      	beq.n	8009c56 <USB_EPStopXfer+0x82>
 8009c86:	e048      	b.n	8009d1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ca0:	d13b      	bne.n	8009d1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	7812      	ldrb	r2, [r2, #0]
 8009cb6:	0151      	lsls	r1, r2, #5
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	440a      	add	r2, r1
 8009cbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009cc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	7812      	ldrb	r2, [r2, #0]
 8009cda:	0151      	lsls	r1, r2, #5
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	440a      	add	r2, r1
 8009ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ce4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ce8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3301      	adds	r3, #1
 8009cee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d902      	bls.n	8009d00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	75fb      	strb	r3, [r7, #23]
          break;
 8009cfe:	e00c      	b.n	8009d1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	015a      	lsls	r2, r3, #5
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d18:	d0e7      	beq.n	8009cea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	371c      	adds	r7, #28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b089      	sub	sp, #36	@ 0x24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	4611      	mov	r1, r2
 8009d34:	461a      	mov	r2, r3
 8009d36:	460b      	mov	r3, r1
 8009d38:	71fb      	strb	r3, [r7, #7]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009d46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d123      	bne.n	8009d96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009d4e:	88bb      	ldrh	r3, [r7, #4]
 8009d50:	3303      	adds	r3, #3
 8009d52:	089b      	lsrs	r3, r3, #2
 8009d54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d56:	2300      	movs	r3, #0
 8009d58:	61bb      	str	r3, [r7, #24]
 8009d5a:	e018      	b.n	8009d8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	031a      	lsls	r2, r3, #12
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d68:	461a      	mov	r2, r3
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	3301      	adds	r3, #1
 8009d74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	3301      	adds	r3, #1
 8009d86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	61bb      	str	r3, [r7, #24]
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d3e2      	bcc.n	8009d5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3724      	adds	r7, #36	@ 0x24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b08b      	sub	sp, #44	@ 0x2c
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	4613      	mov	r3, r2
 8009db0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009dba:	88fb      	ldrh	r3, [r7, #6]
 8009dbc:	089b      	lsrs	r3, r3, #2
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009dc2:	88fb      	ldrh	r3, [r7, #6]
 8009dc4:	f003 0303 	and.w	r3, r3, #3
 8009dc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009dca:	2300      	movs	r3, #0
 8009dcc:	623b      	str	r3, [r7, #32]
 8009dce:	e014      	b.n	8009dfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dda:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dde:	3301      	adds	r3, #1
 8009de0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de4:	3301      	adds	r3, #1
 8009de6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dea:	3301      	adds	r3, #1
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df0:	3301      	adds	r3, #1
 8009df2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	3301      	adds	r3, #1
 8009df8:	623b      	str	r3, [r7, #32]
 8009dfa:	6a3a      	ldr	r2, [r7, #32]
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d3e6      	bcc.n	8009dd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009e02:	8bfb      	ldrh	r3, [r7, #30]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d01e      	beq.n	8009e46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e12:	461a      	mov	r2, r3
 8009e14:	f107 0310 	add.w	r3, r7, #16
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	fa22 f303 	lsr.w	r3, r2, r3
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2c:	701a      	strb	r2, [r3, #0]
      i++;
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	3301      	adds	r3, #1
 8009e32:	623b      	str	r3, [r7, #32]
      pDest++;
 8009e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e36:	3301      	adds	r3, #1
 8009e38:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009e3a:	8bfb      	ldrh	r3, [r7, #30]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009e40:	8bfb      	ldrh	r3, [r7, #30]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1ea      	bne.n	8009e1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	372c      	adds	r7, #44	@ 0x2c
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	785b      	ldrb	r3, [r3, #1]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d12c      	bne.n	8009eca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	db12      	blt.n	8009ea8 <USB_EPSetStall+0x54>
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00f      	beq.n	8009ea8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	0151      	lsls	r1, r2, #5
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	440a      	add	r2, r1
 8009e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ea2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009ea6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	0151      	lsls	r1, r2, #5
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	440a      	add	r2, r1
 8009ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ec2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ec6:	6013      	str	r3, [r2, #0]
 8009ec8:	e02b      	b.n	8009f22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	db12      	blt.n	8009f02 <USB_EPSetStall+0xae>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00f      	beq.n	8009f02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	0151      	lsls	r1, r2, #5
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	440a      	add	r2, r1
 8009ef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009efc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009f00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	0151      	lsls	r1, r2, #5
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	440a      	add	r2, r1
 8009f18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009f20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d128      	bne.n	8009f9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	0151      	lsls	r1, r2, #5
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	440a      	add	r2, r1
 8009f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	791b      	ldrb	r3, [r3, #4]
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d003      	beq.n	8009f7c <USB_EPClearStall+0x4c>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	791b      	ldrb	r3, [r3, #4]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d138      	bne.n	8009fee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	0151      	lsls	r1, r2, #5
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	440a      	add	r2, r1
 8009f92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	e027      	b.n	8009fee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	0151      	lsls	r1, r2, #5
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	440a      	add	r2, r1
 8009fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009fbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	791b      	ldrb	r3, [r3, #4]
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d003      	beq.n	8009fce <USB_EPClearStall+0x9e>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	791b      	ldrb	r3, [r3, #4]
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d10f      	bne.n	8009fee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a01a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a01e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a030:	68f9      	ldr	r1, [r7, #12]
 800a032:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a036:	4313      	orrs	r3, r2
 800a038:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a062:	f023 0303 	bic.w	r3, r3, #3
 800a066:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a076:	f023 0302 	bic.w	r3, r3, #2
 800a07a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b085      	sub	sp, #20
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0a4:	f023 0303 	bic.w	r3, r3, #3
 800a0a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0b8:	f043 0302 	orr.w	r3, r3, #2
 800a0bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b085      	sub	sp, #20
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	4013      	ands	r3, r2
 800a114:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	0c1b      	lsrs	r3, r3, #16
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	68ba      	ldr	r2, [r7, #8]
 800a146:	4013      	ands	r3, r2
 800a148:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	b29b      	uxth	r3, r3
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b085      	sub	sp, #20
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a16a:	78fb      	ldrb	r3, [r7, #3]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	4013      	ands	r3, r2
 800a186:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a188:	68bb      	ldr	r3, [r7, #8]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a196:	b480      	push	{r7}
 800a198:	b087      	sub	sp, #28
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a1ba:	78fb      	ldrb	r3, [r7, #3]
 800a1bc:	f003 030f 	and.w	r3, r3, #15
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c6:	01db      	lsls	r3, r3, #7
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b083      	sub	sp, #12
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	f003 0301 	and.w	r3, r3, #1
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
	...

0800a210 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a22a:	4619      	mov	r1, r3
 800a22c:	4b09      	ldr	r3, [pc, #36]	@ (800a254 <USB_ActivateSetup+0x44>)
 800a22e:	4013      	ands	r3, r2
 800a230:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	fffff800 	.word	0xfffff800

0800a258 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	460b      	mov	r3, r1
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	333c      	adds	r3, #60	@ 0x3c
 800a26e:	3304      	adds	r3, #4
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	4a26      	ldr	r2, [pc, #152]	@ (800a310 <USB_EP0_OutStart+0xb8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d90a      	bls.n	800a292 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a288:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a28c:	d101      	bne.n	800a292 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	e037      	b.n	800a302 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a298:	461a      	mov	r2, r3
 800a29a:	2300      	movs	r3, #0
 800a29c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2c0:	f043 0318 	orr.w	r3, r3, #24
 800a2c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a2d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a2da:	7afb      	ldrb	r3, [r7, #11]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d10f      	bne.n	800a300 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a2fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	371c      	adds	r7, #28
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	4f54300a 	.word	0x4f54300a

0800a314 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3301      	adds	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a32c:	d901      	bls.n	800a332 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e01b      	b.n	800a36a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	daf2      	bge.n	800a320 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a33a:	2300      	movs	r3, #0
 800a33c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	f043 0201 	orr.w	r2, r3, #1
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3301      	adds	r3, #1
 800a34e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a356:	d901      	bls.n	800a35c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e006      	b.n	800a36a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	f003 0301 	and.w	r3, r3, #1
 800a364:	2b01      	cmp	r3, #1
 800a366:	d0f0      	beq.n	800a34a <USB_CoreReset+0x36>

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a384:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a388:	f002 fd3e 	bl	800ce08 <USBD_static_malloc>
 800a38c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d109      	bne.n	800a3a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	32b0      	adds	r2, #176	@ 0xb0
 800a39e:	2100      	movs	r1, #0
 800a3a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e0d4      	b.n	800a552 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a3a8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f002 fe8d 	bl	800d0ce <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	32b0      	adds	r2, #176	@ 0xb0
 800a3be:	68f9      	ldr	r1, [r7, #12]
 800a3c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	32b0      	adds	r2, #176	@ 0xb0
 800a3ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	7c1b      	ldrb	r3, [r3, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d138      	bne.n	800a452 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a3e0:	4b5e      	ldr	r3, [pc, #376]	@ (800a55c <USBD_CDC_Init+0x1e4>)
 800a3e2:	7819      	ldrb	r1, [r3, #0]
 800a3e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f002 fbe9 	bl	800cbc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a3f0:	4b5a      	ldr	r3, [pc, #360]	@ (800a55c <USBD_CDC_Init+0x1e4>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	f003 020f 	and.w	r2, r3, #15
 800a3f8:	6879      	ldr	r1, [r7, #4]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	440b      	add	r3, r1
 800a404:	3324      	adds	r3, #36	@ 0x24
 800a406:	2201      	movs	r2, #1
 800a408:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a40a:	4b55      	ldr	r3, [pc, #340]	@ (800a560 <USBD_CDC_Init+0x1e8>)
 800a40c:	7819      	ldrb	r1, [r3, #0]
 800a40e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a412:	2202      	movs	r2, #2
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f002 fbd4 	bl	800cbc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a41a:	4b51      	ldr	r3, [pc, #324]	@ (800a560 <USBD_CDC_Init+0x1e8>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	f003 020f 	and.w	r2, r3, #15
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	440b      	add	r3, r1
 800a42e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a432:	2201      	movs	r2, #1
 800a434:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a436:	4b4b      	ldr	r3, [pc, #300]	@ (800a564 <USBD_CDC_Init+0x1ec>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	f003 020f 	and.w	r2, r3, #15
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	4613      	mov	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	440b      	add	r3, r1
 800a44a:	3326      	adds	r3, #38	@ 0x26
 800a44c:	2210      	movs	r2, #16
 800a44e:	801a      	strh	r2, [r3, #0]
 800a450:	e035      	b.n	800a4be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a452:	4b42      	ldr	r3, [pc, #264]	@ (800a55c <USBD_CDC_Init+0x1e4>)
 800a454:	7819      	ldrb	r1, [r3, #0]
 800a456:	2340      	movs	r3, #64	@ 0x40
 800a458:	2202      	movs	r2, #2
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f002 fbb1 	bl	800cbc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a460:	4b3e      	ldr	r3, [pc, #248]	@ (800a55c <USBD_CDC_Init+0x1e4>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	f003 020f 	and.w	r2, r3, #15
 800a468:	6879      	ldr	r1, [r7, #4]
 800a46a:	4613      	mov	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	440b      	add	r3, r1
 800a474:	3324      	adds	r3, #36	@ 0x24
 800a476:	2201      	movs	r2, #1
 800a478:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a47a:	4b39      	ldr	r3, [pc, #228]	@ (800a560 <USBD_CDC_Init+0x1e8>)
 800a47c:	7819      	ldrb	r1, [r3, #0]
 800a47e:	2340      	movs	r3, #64	@ 0x40
 800a480:	2202      	movs	r2, #2
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f002 fb9d 	bl	800cbc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a488:	4b35      	ldr	r3, [pc, #212]	@ (800a560 <USBD_CDC_Init+0x1e8>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	f003 020f 	and.w	r2, r3, #15
 800a490:	6879      	ldr	r1, [r7, #4]
 800a492:	4613      	mov	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	440b      	add	r3, r1
 800a49c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a4a4:	4b2f      	ldr	r3, [pc, #188]	@ (800a564 <USBD_CDC_Init+0x1ec>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	f003 020f 	and.w	r2, r3, #15
 800a4ac:	6879      	ldr	r1, [r7, #4]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	440b      	add	r3, r1
 800a4b8:	3326      	adds	r3, #38	@ 0x26
 800a4ba:	2210      	movs	r2, #16
 800a4bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a4be:	4b29      	ldr	r3, [pc, #164]	@ (800a564 <USBD_CDC_Init+0x1ec>)
 800a4c0:	7819      	ldrb	r1, [r3, #0]
 800a4c2:	2308      	movs	r3, #8
 800a4c4:	2203      	movs	r2, #3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f002 fb7b 	bl	800cbc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a4cc:	4b25      	ldr	r3, [pc, #148]	@ (800a564 <USBD_CDC_Init+0x1ec>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	f003 020f 	and.w	r2, r3, #15
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	440b      	add	r3, r1
 800a4e0:	3324      	adds	r3, #36	@ 0x24
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	33b0      	adds	r3, #176	@ 0xb0
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a51c:	2302      	movs	r3, #2
 800a51e:	e018      	b.n	800a552 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	7c1b      	ldrb	r3, [r3, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10a      	bne.n	800a53e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a528:	4b0d      	ldr	r3, [pc, #52]	@ (800a560 <USBD_CDC_Init+0x1e8>)
 800a52a:	7819      	ldrb	r1, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f002 fc32 	bl	800cda0 <USBD_LL_PrepareReceive>
 800a53c:	e008      	b.n	800a550 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a53e:	4b08      	ldr	r3, [pc, #32]	@ (800a560 <USBD_CDC_Init+0x1e8>)
 800a540:	7819      	ldrb	r1, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a548:	2340      	movs	r3, #64	@ 0x40
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f002 fc28 	bl	800cda0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	24000097 	.word	0x24000097
 800a560:	24000098 	.word	0x24000098
 800a564:	24000099 	.word	0x24000099

0800a568 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a574:	4b3a      	ldr	r3, [pc, #232]	@ (800a660 <USBD_CDC_DeInit+0xf8>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f002 fb47 	bl	800cc0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a580:	4b37      	ldr	r3, [pc, #220]	@ (800a660 <USBD_CDC_DeInit+0xf8>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	f003 020f 	and.w	r2, r3, #15
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	440b      	add	r3, r1
 800a594:	3324      	adds	r3, #36	@ 0x24
 800a596:	2200      	movs	r2, #0
 800a598:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a59a:	4b32      	ldr	r3, [pc, #200]	@ (800a664 <USBD_CDC_DeInit+0xfc>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f002 fb34 	bl	800cc0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a5a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a664 <USBD_CDC_DeInit+0xfc>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	f003 020f 	and.w	r2, r3, #15
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	440b      	add	r3, r1
 800a5ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a5be:	2200      	movs	r2, #0
 800a5c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a5c2:	4b29      	ldr	r3, [pc, #164]	@ (800a668 <USBD_CDC_DeInit+0x100>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f002 fb20 	bl	800cc0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a5ce:	4b26      	ldr	r3, [pc, #152]	@ (800a668 <USBD_CDC_DeInit+0x100>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 020f 	and.w	r2, r3, #15
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	3324      	adds	r3, #36	@ 0x24
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a5e8:	4b1f      	ldr	r3, [pc, #124]	@ (800a668 <USBD_CDC_DeInit+0x100>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	f003 020f 	and.w	r2, r3, #15
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	440b      	add	r3, r1
 800a5fc:	3326      	adds	r3, #38	@ 0x26
 800a5fe:	2200      	movs	r2, #0
 800a600:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	32b0      	adds	r2, #176	@ 0xb0
 800a60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d01f      	beq.n	800a654 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	33b0      	adds	r3, #176	@ 0xb0
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	32b0      	adds	r2, #176	@ 0xb0
 800a632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a636:	4618      	mov	r0, r3
 800a638:	f002 fbf4 	bl	800ce24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	32b0      	adds	r2, #176	@ 0xb0
 800a646:	2100      	movs	r1, #0
 800a648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	24000097 	.word	0x24000097
 800a664:	24000098 	.word	0x24000098
 800a668:	24000099 	.word	0x24000099

0800a66c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	32b0      	adds	r2, #176	@ 0xb0
 800a680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a684:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a68a:	2300      	movs	r3, #0
 800a68c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a698:	2303      	movs	r3, #3
 800a69a:	e0bf      	b.n	800a81c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d050      	beq.n	800a74a <USBD_CDC_Setup+0xde>
 800a6a8:	2b20      	cmp	r3, #32
 800a6aa:	f040 80af 	bne.w	800a80c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	88db      	ldrh	r3, [r3, #6]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d03a      	beq.n	800a72c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	b25b      	sxtb	r3, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da1b      	bge.n	800a6f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	33b0      	adds	r3, #176	@ 0xb0
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a6d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	88d2      	ldrh	r2, [r2, #6]
 800a6dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	88db      	ldrh	r3, [r3, #6]
 800a6e2:	2b07      	cmp	r3, #7
 800a6e4:	bf28      	it	cs
 800a6e6:	2307      	movcs	r3, #7
 800a6e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	89fa      	ldrh	r2, [r7, #14]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f001 fdd9 	bl	800c2a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a6f6:	e090      	b.n	800a81a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	785a      	ldrb	r2, [r3, #1]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	88db      	ldrh	r3, [r3, #6]
 800a706:	2b3f      	cmp	r3, #63	@ 0x3f
 800a708:	d803      	bhi.n	800a712 <USBD_CDC_Setup+0xa6>
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	88db      	ldrh	r3, [r3, #6]
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	e000      	b.n	800a714 <USBD_CDC_Setup+0xa8>
 800a712:	2240      	movs	r2, #64	@ 0x40
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a71a:	6939      	ldr	r1, [r7, #16]
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a722:	461a      	mov	r2, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 fdeb 	bl	800c300 <USBD_CtlPrepareRx>
      break;
 800a72a:	e076      	b.n	800a81a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	33b0      	adds	r3, #176	@ 0xb0
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	7850      	ldrb	r0, [r2, #1]
 800a742:	2200      	movs	r2, #0
 800a744:	6839      	ldr	r1, [r7, #0]
 800a746:	4798      	blx	r3
      break;
 800a748:	e067      	b.n	800a81a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	2b0b      	cmp	r3, #11
 800a750:	d851      	bhi.n	800a7f6 <USBD_CDC_Setup+0x18a>
 800a752:	a201      	add	r2, pc, #4	@ (adr r2, 800a758 <USBD_CDC_Setup+0xec>)
 800a754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a758:	0800a789 	.word	0x0800a789
 800a75c:	0800a805 	.word	0x0800a805
 800a760:	0800a7f7 	.word	0x0800a7f7
 800a764:	0800a7f7 	.word	0x0800a7f7
 800a768:	0800a7f7 	.word	0x0800a7f7
 800a76c:	0800a7f7 	.word	0x0800a7f7
 800a770:	0800a7f7 	.word	0x0800a7f7
 800a774:	0800a7f7 	.word	0x0800a7f7
 800a778:	0800a7f7 	.word	0x0800a7f7
 800a77c:	0800a7f7 	.word	0x0800a7f7
 800a780:	0800a7b3 	.word	0x0800a7b3
 800a784:	0800a7dd 	.word	0x0800a7dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b03      	cmp	r3, #3
 800a792:	d107      	bne.n	800a7a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a794:	f107 030a 	add.w	r3, r7, #10
 800a798:	2202      	movs	r2, #2
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 fd83 	bl	800c2a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7a2:	e032      	b.n	800a80a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f001 fd01 	bl	800c1ae <USBD_CtlError>
            ret = USBD_FAIL;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	75fb      	strb	r3, [r7, #23]
          break;
 800a7b0:	e02b      	b.n	800a80a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d107      	bne.n	800a7ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a7be:	f107 030d 	add.w	r3, r7, #13
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 fd6e 	bl	800c2a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7cc:	e01d      	b.n	800a80a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 fcec 	bl	800c1ae <USBD_CtlError>
            ret = USBD_FAIL;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a7da:	e016      	b.n	800a80a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d00f      	beq.n	800a808 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 fcdf 	bl	800c1ae <USBD_CtlError>
            ret = USBD_FAIL;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7f4:	e008      	b.n	800a808 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f001 fcd8 	bl	800c1ae <USBD_CtlError>
          ret = USBD_FAIL;
 800a7fe:	2303      	movs	r3, #3
 800a800:	75fb      	strb	r3, [r7, #23]
          break;
 800a802:	e002      	b.n	800a80a <USBD_CDC_Setup+0x19e>
          break;
 800a804:	bf00      	nop
 800a806:	e008      	b.n	800a81a <USBD_CDC_Setup+0x1ae>
          break;
 800a808:	bf00      	nop
      }
      break;
 800a80a:	e006      	b.n	800a81a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f001 fccd 	bl	800c1ae <USBD_CtlError>
      ret = USBD_FAIL;
 800a814:	2303      	movs	r3, #3
 800a816:	75fb      	strb	r3, [r7, #23]
      break;
 800a818:	bf00      	nop
  }

  return (uint8_t)ret;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a836:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	32b0      	adds	r2, #176	@ 0xb0
 800a842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e065      	b.n	800a91a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	32b0      	adds	r2, #176	@ 0xb0
 800a858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	f003 020f 	and.w	r2, r3, #15
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	440b      	add	r3, r1
 800a870:	3318      	adds	r3, #24
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d02f      	beq.n	800a8d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a878:	78fb      	ldrb	r3, [r7, #3]
 800a87a:	f003 020f 	and.w	r2, r3, #15
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	3318      	adds	r3, #24
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	f003 010f 	and.w	r1, r3, #15
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	460b      	mov	r3, r1
 800a898:	00db      	lsls	r3, r3, #3
 800a89a:	440b      	add	r3, r1
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4403      	add	r3, r0
 800a8a0:	331c      	adds	r3, #28
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8a8:	fb01 f303 	mul.w	r3, r1, r3
 800a8ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d112      	bne.n	800a8d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	f003 020f 	and.w	r2, r3, #15
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	440b      	add	r3, r1
 800a8c4:	3318      	adds	r3, #24
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8ca:	78f9      	ldrb	r1, [r7, #3]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f002 fa44 	bl	800cd5e <USBD_LL_Transmit>
 800a8d6:	e01f      	b.n	800a918 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	33b0      	adds	r3, #176	@ 0xb0
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d010      	beq.n	800a918 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	33b0      	adds	r3, #176	@ 0xb0
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	460b      	mov	r3, r1
 800a92c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	32b0      	adds	r2, #176	@ 0xb0
 800a938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	32b0      	adds	r2, #176	@ 0xb0
 800a948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a950:	2303      	movs	r3, #3
 800a952:	e01a      	b.n	800a98a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f002 fa42 	bl	800cde2 <USBD_LL_GetRxDataSize>
 800a95e:	4602      	mov	r2, r0
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	33b0      	adds	r3, #176	@ 0xb0
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a984:	4611      	mov	r1, r2
 800a986:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	32b0      	adds	r2, #176	@ 0xb0
 800a9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e024      	b.n	800a9fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	33b0      	adds	r3, #176	@ 0xb0
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d019      	beq.n	800a9fc <USBD_CDC_EP0_RxReady+0x6a>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a9ce:	2bff      	cmp	r3, #255	@ 0xff
 800a9d0:	d014      	beq.n	800a9fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	33b0      	adds	r3, #176	@ 0xb0
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a9ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a9f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	22ff      	movs	r2, #255	@ 0xff
 800a9f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa10:	2182      	movs	r1, #130	@ 0x82
 800aa12:	4818      	ldr	r0, [pc, #96]	@ (800aa74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aa14:	f000 fd6b 	bl	800b4ee <USBD_GetEpDesc>
 800aa18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	4815      	ldr	r0, [pc, #84]	@ (800aa74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aa1e:	f000 fd66 	bl	800b4ee <USBD_GetEpDesc>
 800aa22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa24:	2181      	movs	r1, #129	@ 0x81
 800aa26:	4813      	ldr	r0, [pc, #76]	@ (800aa74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aa28:	f000 fd61 	bl	800b4ee <USBD_GetEpDesc>
 800aa2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2210      	movs	r2, #16
 800aa38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d006      	beq.n	800aa4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa48:	711a      	strb	r2, [r3, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d006      	beq.n	800aa62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa5c:	711a      	strb	r2, [r3, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2243      	movs	r2, #67	@ 0x43
 800aa66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa68:	4b02      	ldr	r3, [pc, #8]	@ (800aa74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	24000054 	.word	0x24000054

0800aa78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa80:	2182      	movs	r1, #130	@ 0x82
 800aa82:	4818      	ldr	r0, [pc, #96]	@ (800aae4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa84:	f000 fd33 	bl	800b4ee <USBD_GetEpDesc>
 800aa88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	4815      	ldr	r0, [pc, #84]	@ (800aae4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa8e:	f000 fd2e 	bl	800b4ee <USBD_GetEpDesc>
 800aa92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa94:	2181      	movs	r1, #129	@ 0x81
 800aa96:	4813      	ldr	r0, [pc, #76]	@ (800aae4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa98:	f000 fd29 	bl	800b4ee <USBD_GetEpDesc>
 800aa9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2210      	movs	r2, #16
 800aaa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d006      	beq.n	800aabe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	2200      	movs	r2, #0
 800aab4:	711a      	strb	r2, [r3, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f042 0202 	orr.w	r2, r2, #2
 800aabc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	711a      	strb	r2, [r3, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f042 0202 	orr.w	r2, r2, #2
 800aad0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2243      	movs	r2, #67	@ 0x43
 800aad6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aad8:	4b02      	ldr	r3, [pc, #8]	@ (800aae4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	24000054 	.word	0x24000054

0800aae8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aaf0:	2182      	movs	r1, #130	@ 0x82
 800aaf2:	4818      	ldr	r0, [pc, #96]	@ (800ab54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aaf4:	f000 fcfb 	bl	800b4ee <USBD_GetEpDesc>
 800aaf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aafa:	2101      	movs	r1, #1
 800aafc:	4815      	ldr	r0, [pc, #84]	@ (800ab54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aafe:	f000 fcf6 	bl	800b4ee <USBD_GetEpDesc>
 800ab02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab04:	2181      	movs	r1, #129	@ 0x81
 800ab06:	4813      	ldr	r0, [pc, #76]	@ (800ab54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ab08:	f000 fcf1 	bl	800b4ee <USBD_GetEpDesc>
 800ab0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	2210      	movs	r2, #16
 800ab18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d006      	beq.n	800ab2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab28:	711a      	strb	r2, [r3, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d006      	beq.n	800ab42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab3c:	711a      	strb	r2, [r3, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2243      	movs	r2, #67	@ 0x43
 800ab46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab48:	4b02      	ldr	r3, [pc, #8]	@ (800ab54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	24000054 	.word	0x24000054

0800ab58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	220a      	movs	r2, #10
 800ab64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab66:	4b03      	ldr	r3, [pc, #12]	@ (800ab74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	24000010 	.word	0x24000010

0800ab78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e009      	b.n	800aba0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	33b0      	adds	r3, #176	@ 0xb0
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	32b0      	adds	r2, #176	@ 0xb0
 800abc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800abce:	2303      	movs	r3, #3
 800abd0:	e008      	b.n	800abe4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	32b0      	adds	r2, #176	@ 0xb0
 800ac04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e004      	b.n	800ac1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	32b0      	adds	r2, #176	@ 0xb0
 800ac3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac42:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac44:	2301      	movs	r3, #1
 800ac46:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ac4e:	2303      	movs	r3, #3
 800ac50:	e025      	b.n	800ac9e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d11f      	bne.n	800ac9c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ac64:	4b10      	ldr	r3, [pc, #64]	@ (800aca8 <USBD_CDC_TransmitPacket+0x7c>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	f003 020f 	and.w	r2, r3, #15
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4403      	add	r3, r0
 800ac7e:	3318      	adds	r3, #24
 800ac80:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ac82:	4b09      	ldr	r3, [pc, #36]	@ (800aca8 <USBD_CDC_TransmitPacket+0x7c>)
 800ac84:	7819      	ldrb	r1, [r3, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f002 f863 	bl	800cd5e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	24000097 	.word	0x24000097

0800acac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	32b0      	adds	r2, #176	@ 0xb0
 800acbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	32b0      	adds	r2, #176	@ 0xb0
 800acce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e018      	b.n	800ad0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	7c1b      	ldrb	r3, [r3, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10a      	bne.n	800acf8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ace2:	4b0c      	ldr	r3, [pc, #48]	@ (800ad14 <USBD_CDC_ReceivePacket+0x68>)
 800ace4:	7819      	ldrb	r1, [r3, #0]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f002 f855 	bl	800cda0 <USBD_LL_PrepareReceive>
 800acf6:	e008      	b.n	800ad0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acf8:	4b06      	ldr	r3, [pc, #24]	@ (800ad14 <USBD_CDC_ReceivePacket+0x68>)
 800acfa:	7819      	ldrb	r1, [r3, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad02:	2340      	movs	r3, #64	@ 0x40
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f002 f84b 	bl	800cda0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	24000098 	.word	0x24000098

0800ad18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	4613      	mov	r3, r2
 800ad24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10a      	bne.n	800ad42 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800ad2c:	4817      	ldr	r0, [pc, #92]	@ (800ad8c <USBD_Init+0x74>)
 800ad2e:	f002 f971 	bl	800d014 <iprintf>
 800ad32:	4817      	ldr	r0, [pc, #92]	@ (800ad90 <USBD_Init+0x78>)
 800ad34:	f002 f96e 	bl	800d014 <iprintf>
 800ad38:	200a      	movs	r0, #10
 800ad3a:	f002 f97d 	bl	800d038 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e01f      	b.n	800ad82 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	79fa      	ldrb	r2, [r7, #7]
 800ad74:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f001 feb6 	bl	800cae8 <USBD_LL_Init>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800ddf0 	.word	0x0800ddf0
 800ad90:	0800ddf8 	.word	0x0800ddf8

0800ad94 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10a      	bne.n	800adbe <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800ada8:	481a      	ldr	r0, [pc, #104]	@ (800ae14 <USBD_RegisterClass+0x80>)
 800adaa:	f002 f933 	bl	800d014 <iprintf>
 800adae:	481a      	ldr	r0, [pc, #104]	@ (800ae18 <USBD_RegisterClass+0x84>)
 800adb0:	f002 f930 	bl	800d014 <iprintf>
 800adb4:	200a      	movs	r0, #10
 800adb6:	f002 f93f 	bl	800d038 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800adba:	2303      	movs	r3, #3
 800adbc:	e025      	b.n	800ae0a <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	32ae      	adds	r2, #174	@ 0xae
 800add0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00f      	beq.n	800adfa <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	32ae      	adds	r2, #174	@ 0xae
 800ade4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adea:	f107 020e 	add.w	r2, r7, #14
 800adee:	4610      	mov	r0, r2
 800adf0:	4798      	blx	r3
 800adf2:	4602      	mov	r2, r0
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	0800ddf0 	.word	0x0800ddf0
 800ae18:	0800de10 	.word	0x0800de10

0800ae1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 feb1 	bl	800cb8c <USBD_LL_Start>
 800ae2a:	4603      	mov	r3, r0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	460b      	mov	r3, r1
 800ae54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d009      	beq.n	800ae78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	78fa      	ldrb	r2, [r7, #3]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	4798      	blx	r3
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	78fa      	ldrb	r2, [r7, #3]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f001 f936 	bl	800c13a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800aedc:	461a      	mov	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aeea:	f003 031f 	and.w	r3, r3, #31
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d01a      	beq.n	800af28 <USBD_LL_SetupStage+0x72>
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d822      	bhi.n	800af3c <USBD_LL_SetupStage+0x86>
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <USBD_LL_SetupStage+0x4a>
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d00a      	beq.n	800af14 <USBD_LL_SetupStage+0x5e>
 800aefe:	e01d      	b.n	800af3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fb63 	bl	800b5d4 <USBD_StdDevReq>
 800af0e:	4603      	mov	r3, r0
 800af10:	73fb      	strb	r3, [r7, #15]
      break;
 800af12:	e020      	b.n	800af56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fbcb 	bl	800b6b8 <USBD_StdItfReq>
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]
      break;
 800af26:	e016      	b.n	800af56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fc2d 	bl	800b790 <USBD_StdEPReq>
 800af36:	4603      	mov	r3, r0
 800af38:	73fb      	strb	r3, [r7, #15]
      break;
 800af3a:	e00c      	b.n	800af56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af42:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800af46:	b2db      	uxtb	r3, r3
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f001 fe7e 	bl	800cc4c <USBD_LL_StallEP>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]
      break;
 800af54:	bf00      	nop
  }

  return ret;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	460b      	mov	r3, r1
 800af6a:	607a      	str	r2, [r7, #4]
 800af6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800af72:	7afb      	ldrb	r3, [r7, #11]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d16e      	bne.n	800b056 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800af7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af86:	2b03      	cmp	r3, #3
 800af88:	f040 8098 	bne.w	800b0bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	689a      	ldr	r2, [r3, #8]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	429a      	cmp	r2, r3
 800af96:	d913      	bls.n	800afc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	1ad2      	subs	r2, r2, r3
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	68da      	ldr	r2, [r3, #12]
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	4293      	cmp	r3, r2
 800afb0:	bf28      	it	cs
 800afb2:	4613      	movcs	r3, r2
 800afb4:	461a      	mov	r2, r3
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f001 f9be 	bl	800c33a <USBD_CtlContinueRx>
 800afbe:	e07d      	b.n	800b0bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800afc6:	f003 031f 	and.w	r3, r3, #31
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d014      	beq.n	800aff8 <USBD_LL_DataOutStage+0x98>
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d81d      	bhi.n	800b00e <USBD_LL_DataOutStage+0xae>
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <USBD_LL_DataOutStage+0x7c>
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d003      	beq.n	800afe2 <USBD_LL_DataOutStage+0x82>
 800afda:	e018      	b.n	800b00e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	75bb      	strb	r3, [r7, #22]
            break;
 800afe0:	e018      	b.n	800b014 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	4619      	mov	r1, r3
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 fa64 	bl	800b4ba <USBD_CoreFindIF>
 800aff2:	4603      	mov	r3, r0
 800aff4:	75bb      	strb	r3, [r7, #22]
            break;
 800aff6:	e00d      	b.n	800b014 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800affe:	b2db      	uxtb	r3, r3
 800b000:	4619      	mov	r1, r3
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 fa66 	bl	800b4d4 <USBD_CoreFindEP>
 800b008:	4603      	mov	r3, r0
 800b00a:	75bb      	strb	r3, [r7, #22]
            break;
 800b00c:	e002      	b.n	800b014 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b00e:	2300      	movs	r3, #0
 800b010:	75bb      	strb	r3, [r7, #22]
            break;
 800b012:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b014:	7dbb      	ldrb	r3, [r7, #22]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d119      	bne.n	800b04e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b03      	cmp	r3, #3
 800b024:	d113      	bne.n	800b04e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b026:	7dba      	ldrb	r2, [r7, #22]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	32ae      	adds	r2, #174	@ 0xae
 800b02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00b      	beq.n	800b04e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b036:	7dba      	ldrb	r2, [r7, #22]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b03e:	7dba      	ldrb	r2, [r7, #22]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	32ae      	adds	r2, #174	@ 0xae
 800b044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f001 f984 	bl	800c35c <USBD_CtlSendStatus>
 800b054:	e032      	b.n	800b0bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b056:	7afb      	ldrb	r3, [r7, #11]
 800b058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	4619      	mov	r1, r3
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f000 fa37 	bl	800b4d4 <USBD_CoreFindEP>
 800b066:	4603      	mov	r3, r0
 800b068:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b06a:	7dbb      	ldrb	r3, [r7, #22]
 800b06c:	2bff      	cmp	r3, #255	@ 0xff
 800b06e:	d025      	beq.n	800b0bc <USBD_LL_DataOutStage+0x15c>
 800b070:	7dbb      	ldrb	r3, [r7, #22]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d122      	bne.n	800b0bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d117      	bne.n	800b0b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b082:	7dba      	ldrb	r2, [r7, #22]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	32ae      	adds	r2, #174	@ 0xae
 800b088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00f      	beq.n	800b0b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b092:	7dba      	ldrb	r2, [r7, #22]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b09a:	7dba      	ldrb	r2, [r7, #22]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	32ae      	adds	r2, #174	@ 0xae
 800b0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	7afa      	ldrb	r2, [r7, #11]
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	4798      	blx	r3
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ba:	e000      	b.n	800b0be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b086      	sub	sp, #24
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	607a      	str	r2, [r7, #4]
 800b0d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b0d4:	7afb      	ldrb	r3, [r7, #11]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d16f      	bne.n	800b1ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3314      	adds	r3, #20
 800b0de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d15a      	bne.n	800b1a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	689a      	ldr	r2, [r3, #8]
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d914      	bls.n	800b120 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	689a      	ldr	r2, [r3, #8]
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	461a      	mov	r2, r3
 800b10a:	6879      	ldr	r1, [r7, #4]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f001 f8e6 	bl	800c2de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b112:	2300      	movs	r3, #0
 800b114:	2200      	movs	r2, #0
 800b116:	2100      	movs	r1, #0
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f001 fe41 	bl	800cda0 <USBD_LL_PrepareReceive>
 800b11e:	e03f      	b.n	800b1a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	68da      	ldr	r2, [r3, #12]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d11c      	bne.n	800b166 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b134:	429a      	cmp	r2, r3
 800b136:	d316      	bcc.n	800b166 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b142:	429a      	cmp	r2, r3
 800b144:	d20f      	bcs.n	800b166 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b146:	2200      	movs	r2, #0
 800b148:	2100      	movs	r1, #0
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f001 f8c7 	bl	800c2de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b158:	2300      	movs	r3, #0
 800b15a:	2200      	movs	r2, #0
 800b15c:	2100      	movs	r1, #0
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f001 fe1e 	bl	800cda0 <USBD_LL_PrepareReceive>
 800b164:	e01c      	b.n	800b1a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d10f      	bne.n	800b192 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d009      	beq.n	800b192 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b192:	2180      	movs	r1, #128	@ 0x80
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f001 fd59 	bl	800cc4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f001 f8f1 	bl	800c382 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d03a      	beq.n	800b220 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff fe42 	bl	800ae34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b1b8:	e032      	b.n	800b220 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b1ba:	7afb      	ldrb	r3, [r7, #11]
 800b1bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f000 f985 	bl	800b4d4 <USBD_CoreFindEP>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
 800b1d0:	2bff      	cmp	r3, #255	@ 0xff
 800b1d2:	d025      	beq.n	800b220 <USBD_LL_DataInStage+0x15a>
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d122      	bne.n	800b220 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d11c      	bne.n	800b220 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b1e6:	7dfa      	ldrb	r2, [r7, #23]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	32ae      	adds	r2, #174	@ 0xae
 800b1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d014      	beq.n	800b220 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b1f6:	7dfa      	ldrb	r2, [r7, #23]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b1fe:	7dfa      	ldrb	r2, [r7, #23]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	32ae      	adds	r2, #174	@ 0xae
 800b204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	7afa      	ldrb	r2, [r7, #11]
 800b20c:	4611      	mov	r1, r2
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	4798      	blx	r3
 800b212:	4603      	mov	r3, r0
 800b214:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b216:	7dbb      	ldrb	r3, [r7, #22]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b21c:	7dbb      	ldrb	r3, [r7, #22]
 800b21e:	e000      	b.n	800b222 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b262:	2b00      	cmp	r3, #0
 800b264:	d014      	beq.n	800b290 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	6852      	ldr	r2, [r2, #4]
 800b27e:	b2d2      	uxtb	r2, r2
 800b280:	4611      	mov	r1, r2
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	4798      	blx	r3
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b28c:	2303      	movs	r3, #3
 800b28e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b290:	2340      	movs	r3, #64	@ 0x40
 800b292:	2200      	movs	r2, #0
 800b294:	2100      	movs	r1, #0
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 fc93 	bl	800cbc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2240      	movs	r2, #64	@ 0x40
 800b2a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2ac:	2340      	movs	r3, #64	@ 0x40
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	2180      	movs	r1, #128	@ 0x80
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 fc85 	bl	800cbc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2240      	movs	r2, #64	@ 0x40
 800b2c2:	621a      	str	r2, [r3, #32]

  return ret;
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	78fa      	ldrb	r2, [r7, #3]
 800b2de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	370c      	adds	r7, #12
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr

0800b2ee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b2ee:	b480      	push	{r7}
 800b2f0:	b083      	sub	sp, #12
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	d006      	beq.n	800b310 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2204      	movs	r2, #4
 800b314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b04      	cmp	r3, #4
 800b338:	d106      	bne.n	800b348 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b340:	b2da      	uxtb	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b082      	sub	sp, #8
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b03      	cmp	r3, #3
 800b368:	d110      	bne.n	800b38c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00b      	beq.n	800b38c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b37a:	69db      	ldr	r3, [r3, #28]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d005      	beq.n	800b38c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	460b      	mov	r3, r1
 800b3a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	32ae      	adds	r2, #174	@ 0xae
 800b3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	e01c      	b.n	800b3f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	d115      	bne.n	800b3f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	32ae      	adds	r2, #174	@ 0xae
 800b3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	32ae      	adds	r2, #174	@ 0xae
 800b3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	78fa      	ldrb	r2, [r7, #3]
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	460b      	mov	r3, r1
 800b404:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	32ae      	adds	r2, #174	@ 0xae
 800b410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b418:	2303      	movs	r3, #3
 800b41a:	e01c      	b.n	800b456 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b03      	cmp	r3, #3
 800b426:	d115      	bne.n	800b454 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	32ae      	adds	r2, #174	@ 0xae
 800b432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	32ae      	adds	r2, #174	@ 0xae
 800b446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b44c:	78fa      	ldrb	r2, [r7, #3]
 800b44e:	4611      	mov	r1, r2
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00e      	beq.n	800b4b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	6852      	ldr	r2, [r2, #4]
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	4798      	blx	r3
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b083      	sub	sp, #12
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b086      	sub	sp, #24
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b502:	2300      	movs	r3, #0
 800b504:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	885b      	ldrh	r3, [r3, #2]
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	7812      	ldrb	r2, [r2, #0]
 800b510:	4293      	cmp	r3, r2
 800b512:	d91f      	bls.n	800b554 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b51a:	e013      	b.n	800b544 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b51c:	f107 030a 	add.w	r3, r7, #10
 800b520:	4619      	mov	r1, r3
 800b522:	6978      	ldr	r0, [r7, #20]
 800b524:	f000 f81b 	bl	800b55e <USBD_GetNextDesc>
 800b528:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	785b      	ldrb	r3, [r3, #1]
 800b52e:	2b05      	cmp	r3, #5
 800b530:	d108      	bne.n	800b544 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	789b      	ldrb	r3, [r3, #2]
 800b53a:	78fa      	ldrb	r2, [r7, #3]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d008      	beq.n	800b552 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b540:	2300      	movs	r3, #0
 800b542:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	885b      	ldrh	r3, [r3, #2]
 800b548:	b29a      	uxth	r2, r3
 800b54a:	897b      	ldrh	r3, [r7, #10]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d8e5      	bhi.n	800b51c <USBD_GetEpDesc+0x2e>
 800b550:	e000      	b.n	800b554 <USBD_GetEpDesc+0x66>
          break;
 800b552:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b554:	693b      	ldr	r3, [r7, #16]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3718      	adds	r7, #24
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b55e:	b480      	push	{r7}
 800b560:	b085      	sub	sp, #20
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	881b      	ldrh	r3, [r3, #0]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	7812      	ldrb	r2, [r2, #0]
 800b574:	4413      	add	r3, r2
 800b576:	b29a      	uxth	r2, r3
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4413      	add	r3, r2
 800b586:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b588:	68fb      	ldr	r3, [r7, #12]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b596:	b480      	push	{r7}
 800b598:	b087      	sub	sp, #28
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b5b4:	8a3b      	ldrh	r3, [r7, #16]
 800b5b6:	021b      	lsls	r3, r3, #8
 800b5b8:	b21a      	sxth	r2, r3
 800b5ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	b21b      	sxth	r3, r3
 800b5c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b5c4:	89fb      	ldrh	r3, [r7, #14]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
	...

0800b5d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5ea:	2b40      	cmp	r3, #64	@ 0x40
 800b5ec:	d005      	beq.n	800b5fa <USBD_StdDevReq+0x26>
 800b5ee:	2b40      	cmp	r3, #64	@ 0x40
 800b5f0:	d857      	bhi.n	800b6a2 <USBD_StdDevReq+0xce>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00f      	beq.n	800b616 <USBD_StdDevReq+0x42>
 800b5f6:	2b20      	cmp	r3, #32
 800b5f8:	d153      	bne.n	800b6a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	32ae      	adds	r2, #174	@ 0xae
 800b604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	4798      	blx	r3
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]
      break;
 800b614:	e04a      	b.n	800b6ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	785b      	ldrb	r3, [r3, #1]
 800b61a:	2b09      	cmp	r3, #9
 800b61c:	d83b      	bhi.n	800b696 <USBD_StdDevReq+0xc2>
 800b61e:	a201      	add	r2, pc, #4	@ (adr r2, 800b624 <USBD_StdDevReq+0x50>)
 800b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b624:	0800b679 	.word	0x0800b679
 800b628:	0800b68d 	.word	0x0800b68d
 800b62c:	0800b697 	.word	0x0800b697
 800b630:	0800b683 	.word	0x0800b683
 800b634:	0800b697 	.word	0x0800b697
 800b638:	0800b657 	.word	0x0800b657
 800b63c:	0800b64d 	.word	0x0800b64d
 800b640:	0800b697 	.word	0x0800b697
 800b644:	0800b66f 	.word	0x0800b66f
 800b648:	0800b661 	.word	0x0800b661
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fa3c 	bl	800bacc <USBD_GetDescriptor>
          break;
 800b654:	e024      	b.n	800b6a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fbcb 	bl	800bdf4 <USBD_SetAddress>
          break;
 800b65e:	e01f      	b.n	800b6a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fc0a 	bl	800be7c <USBD_SetConfig>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]
          break;
 800b66c:	e018      	b.n	800b6a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fcad 	bl	800bfd0 <USBD_GetConfig>
          break;
 800b676:	e013      	b.n	800b6a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fcde 	bl	800c03c <USBD_GetStatus>
          break;
 800b680:	e00e      	b.n	800b6a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fd0d 	bl	800c0a4 <USBD_SetFeature>
          break;
 800b68a:	e009      	b.n	800b6a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fd31 	bl	800c0f6 <USBD_ClrFeature>
          break;
 800b694:	e004      	b.n	800b6a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fd88 	bl	800c1ae <USBD_CtlError>
          break;
 800b69e:	bf00      	nop
      }
      break;
 800b6a0:	e004      	b.n	800b6ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fd82 	bl	800c1ae <USBD_CtlError>
      break;
 800b6aa:	bf00      	nop
  }

  return ret;
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop

0800b6b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6ce:	2b40      	cmp	r3, #64	@ 0x40
 800b6d0:	d005      	beq.n	800b6de <USBD_StdItfReq+0x26>
 800b6d2:	2b40      	cmp	r3, #64	@ 0x40
 800b6d4:	d852      	bhi.n	800b77c <USBD_StdItfReq+0xc4>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <USBD_StdItfReq+0x26>
 800b6da:	2b20      	cmp	r3, #32
 800b6dc:	d14e      	bne.n	800b77c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	d840      	bhi.n	800b76e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	889b      	ldrh	r3, [r3, #4]
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d836      	bhi.n	800b764 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	889b      	ldrh	r3, [r3, #4]
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff fedb 	bl	800b4ba <USBD_CoreFindIF>
 800b704:	4603      	mov	r3, r0
 800b706:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b708:	7bbb      	ldrb	r3, [r7, #14]
 800b70a:	2bff      	cmp	r3, #255	@ 0xff
 800b70c:	d01d      	beq.n	800b74a <USBD_StdItfReq+0x92>
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d11a      	bne.n	800b74a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b714:	7bba      	ldrb	r2, [r7, #14]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	32ae      	adds	r2, #174	@ 0xae
 800b71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00f      	beq.n	800b744 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b724:	7bba      	ldrb	r2, [r7, #14]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b72c:	7bba      	ldrb	r2, [r7, #14]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	32ae      	adds	r2, #174	@ 0xae
 800b732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	4798      	blx	r3
 800b73e:	4603      	mov	r3, r0
 800b740:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b742:	e004      	b.n	800b74e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b744:	2303      	movs	r3, #3
 800b746:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b748:	e001      	b.n	800b74e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b74a:	2303      	movs	r3, #3
 800b74c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	88db      	ldrh	r3, [r3, #6]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d110      	bne.n	800b778 <USBD_StdItfReq+0xc0>
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10d      	bne.n	800b778 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fdfd 	bl	800c35c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b762:	e009      	b.n	800b778 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b764:	6839      	ldr	r1, [r7, #0]
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fd21 	bl	800c1ae <USBD_CtlError>
          break;
 800b76c:	e004      	b.n	800b778 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fd1c 	bl	800c1ae <USBD_CtlError>
          break;
 800b776:	e000      	b.n	800b77a <USBD_StdItfReq+0xc2>
          break;
 800b778:	bf00      	nop
      }
      break;
 800b77a:	e004      	b.n	800b786 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b77c:	6839      	ldr	r1, [r7, #0]
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fd15 	bl	800c1ae <USBD_CtlError>
      break;
 800b784:	bf00      	nop
  }

  return ret;
 800b786:	7bfb      	ldrb	r3, [r7, #15]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	889b      	ldrh	r3, [r3, #4]
 800b7a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7ac:	2b40      	cmp	r3, #64	@ 0x40
 800b7ae:	d007      	beq.n	800b7c0 <USBD_StdEPReq+0x30>
 800b7b0:	2b40      	cmp	r3, #64	@ 0x40
 800b7b2:	f200 817f 	bhi.w	800bab4 <USBD_StdEPReq+0x324>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d02a      	beq.n	800b810 <USBD_StdEPReq+0x80>
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	f040 817a 	bne.w	800bab4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7c0:	7bbb      	ldrb	r3, [r7, #14]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7ff fe85 	bl	800b4d4 <USBD_CoreFindEP>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7ce:	7b7b      	ldrb	r3, [r7, #13]
 800b7d0:	2bff      	cmp	r3, #255	@ 0xff
 800b7d2:	f000 8174 	beq.w	800babe <USBD_StdEPReq+0x32e>
 800b7d6:	7b7b      	ldrb	r3, [r7, #13]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f040 8170 	bne.w	800babe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b7de:	7b7a      	ldrb	r2, [r7, #13]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b7e6:	7b7a      	ldrb	r2, [r7, #13]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	32ae      	adds	r2, #174	@ 0xae
 800b7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 8163 	beq.w	800babe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b7f8:	7b7a      	ldrb	r2, [r7, #13]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	32ae      	adds	r2, #174	@ 0xae
 800b7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	4798      	blx	r3
 800b80a:	4603      	mov	r3, r0
 800b80c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b80e:	e156      	b.n	800babe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	785b      	ldrb	r3, [r3, #1]
 800b814:	2b03      	cmp	r3, #3
 800b816:	d008      	beq.n	800b82a <USBD_StdEPReq+0x9a>
 800b818:	2b03      	cmp	r3, #3
 800b81a:	f300 8145 	bgt.w	800baa8 <USBD_StdEPReq+0x318>
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 809b 	beq.w	800b95a <USBD_StdEPReq+0x1ca>
 800b824:	2b01      	cmp	r3, #1
 800b826:	d03c      	beq.n	800b8a2 <USBD_StdEPReq+0x112>
 800b828:	e13e      	b.n	800baa8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b02      	cmp	r3, #2
 800b834:	d002      	beq.n	800b83c <USBD_StdEPReq+0xac>
 800b836:	2b03      	cmp	r3, #3
 800b838:	d016      	beq.n	800b868 <USBD_StdEPReq+0xd8>
 800b83a:	e02c      	b.n	800b896 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b83c:	7bbb      	ldrb	r3, [r7, #14]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00d      	beq.n	800b85e <USBD_StdEPReq+0xce>
 800b842:	7bbb      	ldrb	r3, [r7, #14]
 800b844:	2b80      	cmp	r3, #128	@ 0x80
 800b846:	d00a      	beq.n	800b85e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b848:	7bbb      	ldrb	r3, [r7, #14]
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f001 f9fd 	bl	800cc4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b852:	2180      	movs	r1, #128	@ 0x80
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 f9f9 	bl	800cc4c <USBD_LL_StallEP>
 800b85a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b85c:	e020      	b.n	800b8a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fca4 	bl	800c1ae <USBD_CtlError>
              break;
 800b866:	e01b      	b.n	800b8a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	885b      	ldrh	r3, [r3, #2]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10e      	bne.n	800b88e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b870:	7bbb      	ldrb	r3, [r7, #14]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <USBD_StdEPReq+0xfe>
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	2b80      	cmp	r3, #128	@ 0x80
 800b87a:	d008      	beq.n	800b88e <USBD_StdEPReq+0xfe>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	88db      	ldrh	r3, [r3, #6]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d104      	bne.n	800b88e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 f9df 	bl	800cc4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fd64 	bl	800c35c <USBD_CtlSendStatus>

              break;
 800b894:	e004      	b.n	800b8a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fc88 	bl	800c1ae <USBD_CtlError>
              break;
 800b89e:	bf00      	nop
          }
          break;
 800b8a0:	e107      	b.n	800bab2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d002      	beq.n	800b8b4 <USBD_StdEPReq+0x124>
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	d016      	beq.n	800b8e0 <USBD_StdEPReq+0x150>
 800b8b2:	e04b      	b.n	800b94c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00d      	beq.n	800b8d6 <USBD_StdEPReq+0x146>
 800b8ba:	7bbb      	ldrb	r3, [r7, #14]
 800b8bc:	2b80      	cmp	r3, #128	@ 0x80
 800b8be:	d00a      	beq.n	800b8d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 f9c1 	bl	800cc4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8ca:	2180      	movs	r1, #128	@ 0x80
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f001 f9bd 	bl	800cc4c <USBD_LL_StallEP>
 800b8d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8d4:	e040      	b.n	800b958 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fc68 	bl	800c1ae <USBD_CtlError>
              break;
 800b8de:	e03b      	b.n	800b958 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	885b      	ldrh	r3, [r3, #2]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d136      	bne.n	800b956 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d004      	beq.n	800b8fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 f9c7 	bl	800cc8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fd2d 	bl	800c35c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b902:	7bbb      	ldrb	r3, [r7, #14]
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7ff fde4 	bl	800b4d4 <USBD_CoreFindEP>
 800b90c:	4603      	mov	r3, r0
 800b90e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b910:	7b7b      	ldrb	r3, [r7, #13]
 800b912:	2bff      	cmp	r3, #255	@ 0xff
 800b914:	d01f      	beq.n	800b956 <USBD_StdEPReq+0x1c6>
 800b916:	7b7b      	ldrb	r3, [r7, #13]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d11c      	bne.n	800b956 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b91c:	7b7a      	ldrb	r2, [r7, #13]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b924:	7b7a      	ldrb	r2, [r7, #13]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	32ae      	adds	r2, #174	@ 0xae
 800b92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d010      	beq.n	800b956 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b934:	7b7a      	ldrb	r2, [r7, #13]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	32ae      	adds	r2, #174	@ 0xae
 800b93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
 800b946:	4603      	mov	r3, r0
 800b948:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b94a:	e004      	b.n	800b956 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fc2d 	bl	800c1ae <USBD_CtlError>
              break;
 800b954:	e000      	b.n	800b958 <USBD_StdEPReq+0x1c8>
              break;
 800b956:	bf00      	nop
          }
          break;
 800b958:	e0ab      	b.n	800bab2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b02      	cmp	r3, #2
 800b964:	d002      	beq.n	800b96c <USBD_StdEPReq+0x1dc>
 800b966:	2b03      	cmp	r3, #3
 800b968:	d032      	beq.n	800b9d0 <USBD_StdEPReq+0x240>
 800b96a:	e097      	b.n	800ba9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d007      	beq.n	800b982 <USBD_StdEPReq+0x1f2>
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	2b80      	cmp	r3, #128	@ 0x80
 800b976:	d004      	beq.n	800b982 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b978:	6839      	ldr	r1, [r7, #0]
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fc17 	bl	800c1ae <USBD_CtlError>
                break;
 800b980:	e091      	b.n	800baa6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b986:	2b00      	cmp	r3, #0
 800b988:	da0b      	bge.n	800b9a2 <USBD_StdEPReq+0x212>
 800b98a:	7bbb      	ldrb	r3, [r7, #14]
 800b98c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	3310      	adds	r3, #16
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	4413      	add	r3, r2
 800b99e:	3304      	adds	r3, #4
 800b9a0:	e00b      	b.n	800b9ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
 800b9a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2202      	movs	r2, #2
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fc6d 	bl	800c2a8 <USBD_CtlSendData>
              break;
 800b9ce:	e06a      	b.n	800baa6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	da11      	bge.n	800b9fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	f003 020f 	and.w	r2, r3, #15
 800b9de:	6879      	ldr	r1, [r7, #4]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	440b      	add	r3, r1
 800b9ea:	3324      	adds	r3, #36	@ 0x24
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d117      	bne.n	800ba22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9f2:	6839      	ldr	r1, [r7, #0]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fbda 	bl	800c1ae <USBD_CtlError>
                  break;
 800b9fa:	e054      	b.n	800baa6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9fc:	7bbb      	ldrb	r3, [r7, #14]
 800b9fe:	f003 020f 	and.w	r2, r3, #15
 800ba02:	6879      	ldr	r1, [r7, #4]
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	440b      	add	r3, r1
 800ba0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d104      	bne.n	800ba22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fbc7 	bl	800c1ae <USBD_CtlError>
                  break;
 800ba20:	e041      	b.n	800baa6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	da0b      	bge.n	800ba42 <USBD_StdEPReq+0x2b2>
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	3310      	adds	r3, #16
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	3304      	adds	r3, #4
 800ba40:	e00b      	b.n	800ba5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
 800ba44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	4413      	add	r3, r2
 800ba58:	3304      	adds	r3, #4
 800ba5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d002      	beq.n	800ba68 <USBD_StdEPReq+0x2d8>
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	2b80      	cmp	r3, #128	@ 0x80
 800ba66:	d103      	bne.n	800ba70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
 800ba6e:	e00e      	b.n	800ba8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f001 f927 	bl	800ccc8 <USBD_LL_IsStallEP>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d003      	beq.n	800ba88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2201      	movs	r2, #1
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	e002      	b.n	800ba8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	2202      	movs	r2, #2
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fc07 	bl	800c2a8 <USBD_CtlSendData>
              break;
 800ba9a:	e004      	b.n	800baa6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fb85 	bl	800c1ae <USBD_CtlError>
              break;
 800baa4:	bf00      	nop
          }
          break;
 800baa6:	e004      	b.n	800bab2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fb7f 	bl	800c1ae <USBD_CtlError>
          break;
 800bab0:	bf00      	nop
      }
      break;
 800bab2:	e005      	b.n	800bac0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fb79 	bl	800c1ae <USBD_CtlError>
      break;
 800babc:	e000      	b.n	800bac0 <USBD_StdEPReq+0x330>
      break;
 800babe:	bf00      	nop
  }

  return ret;
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
	...

0800bacc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bade:	2300      	movs	r3, #0
 800bae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	885b      	ldrh	r3, [r3, #2]
 800bae6:	0a1b      	lsrs	r3, r3, #8
 800bae8:	b29b      	uxth	r3, r3
 800baea:	3b01      	subs	r3, #1
 800baec:	2b0e      	cmp	r3, #14
 800baee:	f200 8152 	bhi.w	800bd96 <USBD_GetDescriptor+0x2ca>
 800baf2:	a201      	add	r2, pc, #4	@ (adr r2, 800baf8 <USBD_GetDescriptor+0x2c>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb69 	.word	0x0800bb69
 800bafc:	0800bb81 	.word	0x0800bb81
 800bb00:	0800bbc1 	.word	0x0800bbc1
 800bb04:	0800bd97 	.word	0x0800bd97
 800bb08:	0800bd97 	.word	0x0800bd97
 800bb0c:	0800bd37 	.word	0x0800bd37
 800bb10:	0800bd63 	.word	0x0800bd63
 800bb14:	0800bd97 	.word	0x0800bd97
 800bb18:	0800bd97 	.word	0x0800bd97
 800bb1c:	0800bd97 	.word	0x0800bd97
 800bb20:	0800bd97 	.word	0x0800bd97
 800bb24:	0800bd97 	.word	0x0800bd97
 800bb28:	0800bd97 	.word	0x0800bd97
 800bb2c:	0800bd97 	.word	0x0800bd97
 800bb30:	0800bb35 	.word	0x0800bb35
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00b      	beq.n	800bb58 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	7c12      	ldrb	r2, [r2, #16]
 800bb4c:	f107 0108 	add.w	r1, r7, #8
 800bb50:	4610      	mov	r0, r2
 800bb52:	4798      	blx	r3
 800bb54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb56:	e126      	b.n	800bda6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fb27 	bl	800c1ae <USBD_CtlError>
        err++;
 800bb60:	7afb      	ldrb	r3, [r7, #11]
 800bb62:	3301      	adds	r3, #1
 800bb64:	72fb      	strb	r3, [r7, #11]
      break;
 800bb66:	e11e      	b.n	800bda6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	7c12      	ldrb	r2, [r2, #16]
 800bb74:	f107 0108 	add.w	r1, r7, #8
 800bb78:	4610      	mov	r0, r2
 800bb7a:	4798      	blx	r3
 800bb7c:	60f8      	str	r0, [r7, #12]
      break;
 800bb7e:	e112      	b.n	800bda6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	7c1b      	ldrb	r3, [r3, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10d      	bne.n	800bba4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb90:	f107 0208 	add.w	r2, r7, #8
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3
 800bb98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	2202      	movs	r2, #2
 800bba0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bba2:	e100      	b.n	800bda6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbac:	f107 0208 	add.w	r2, r7, #8
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	4798      	blx	r3
 800bbb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	2202      	movs	r2, #2
 800bbbc:	701a      	strb	r2, [r3, #0]
      break;
 800bbbe:	e0f2      	b.n	800bda6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	885b      	ldrh	r3, [r3, #2]
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b05      	cmp	r3, #5
 800bbc8:	f200 80ac 	bhi.w	800bd24 <USBD_GetDescriptor+0x258>
 800bbcc:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <USBD_GetDescriptor+0x108>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bbed 	.word	0x0800bbed
 800bbd8:	0800bc21 	.word	0x0800bc21
 800bbdc:	0800bc55 	.word	0x0800bc55
 800bbe0:	0800bc89 	.word	0x0800bc89
 800bbe4:	0800bcbd 	.word	0x0800bcbd
 800bbe8:	0800bcf1 	.word	0x0800bcf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00b      	beq.n	800bc10 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	7c12      	ldrb	r2, [r2, #16]
 800bc04:	f107 0108 	add.w	r1, r7, #8
 800bc08:	4610      	mov	r0, r2
 800bc0a:	4798      	blx	r3
 800bc0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc0e:	e091      	b.n	800bd34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 facb 	bl	800c1ae <USBD_CtlError>
            err++;
 800bc18:	7afb      	ldrb	r3, [r7, #11]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc1e:	e089      	b.n	800bd34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00b      	beq.n	800bc44 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	7c12      	ldrb	r2, [r2, #16]
 800bc38:	f107 0108 	add.w	r1, r7, #8
 800bc3c:	4610      	mov	r0, r2
 800bc3e:	4798      	blx	r3
 800bc40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc42:	e077      	b.n	800bd34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fab1 	bl	800c1ae <USBD_CtlError>
            err++;
 800bc4c:	7afb      	ldrb	r3, [r7, #11]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	72fb      	strb	r3, [r7, #11]
          break;
 800bc52:	e06f      	b.n	800bd34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	7c12      	ldrb	r2, [r2, #16]
 800bc6c:	f107 0108 	add.w	r1, r7, #8
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
 800bc74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc76:	e05d      	b.n	800bd34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fa97 	bl	800c1ae <USBD_CtlError>
            err++;
 800bc80:	7afb      	ldrb	r3, [r7, #11]
 800bc82:	3301      	adds	r3, #1
 800bc84:	72fb      	strb	r3, [r7, #11]
          break;
 800bc86:	e055      	b.n	800bd34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00b      	beq.n	800bcac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	7c12      	ldrb	r2, [r2, #16]
 800bca0:	f107 0108 	add.w	r1, r7, #8
 800bca4:	4610      	mov	r0, r2
 800bca6:	4798      	blx	r3
 800bca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcaa:	e043      	b.n	800bd34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fa7d 	bl	800c1ae <USBD_CtlError>
            err++;
 800bcb4:	7afb      	ldrb	r3, [r7, #11]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bcba:	e03b      	b.n	800bd34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00b      	beq.n	800bce0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	7c12      	ldrb	r2, [r2, #16]
 800bcd4:	f107 0108 	add.w	r1, r7, #8
 800bcd8:	4610      	mov	r0, r2
 800bcda:	4798      	blx	r3
 800bcdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcde:	e029      	b.n	800bd34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fa63 	bl	800c1ae <USBD_CtlError>
            err++;
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	3301      	adds	r3, #1
 800bcec:	72fb      	strb	r3, [r7, #11]
          break;
 800bcee:	e021      	b.n	800bd34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	7c12      	ldrb	r2, [r2, #16]
 800bd08:	f107 0108 	add.w	r1, r7, #8
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd12:	e00f      	b.n	800bd34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fa49 	bl	800c1ae <USBD_CtlError>
            err++;
 800bd1c:	7afb      	ldrb	r3, [r7, #11]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	72fb      	strb	r3, [r7, #11]
          break;
 800bd22:	e007      	b.n	800bd34 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fa41 	bl	800c1ae <USBD_CtlError>
          err++;
 800bd2c:	7afb      	ldrb	r3, [r7, #11]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd32:	bf00      	nop
      }
      break;
 800bd34:	e037      	b.n	800bda6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	7c1b      	ldrb	r3, [r3, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d109      	bne.n	800bd52 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd46:	f107 0208 	add.w	r2, r7, #8
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	4798      	blx	r3
 800bd4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd50:	e029      	b.n	800bda6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fa2a 	bl	800c1ae <USBD_CtlError>
        err++;
 800bd5a:	7afb      	ldrb	r3, [r7, #11]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd60:	e021      	b.n	800bda6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	7c1b      	ldrb	r3, [r3, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10d      	bne.n	800bd86 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd72:	f107 0208 	add.w	r2, r7, #8
 800bd76:	4610      	mov	r0, r2
 800bd78:	4798      	blx	r3
 800bd7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	2207      	movs	r2, #7
 800bd82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd84:	e00f      	b.n	800bda6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 fa10 	bl	800c1ae <USBD_CtlError>
        err++;
 800bd8e:	7afb      	ldrb	r3, [r7, #11]
 800bd90:	3301      	adds	r3, #1
 800bd92:	72fb      	strb	r3, [r7, #11]
      break;
 800bd94:	e007      	b.n	800bda6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fa08 	bl	800c1ae <USBD_CtlError>
      err++;
 800bd9e:	7afb      	ldrb	r3, [r7, #11]
 800bda0:	3301      	adds	r3, #1
 800bda2:	72fb      	strb	r3, [r7, #11]
      break;
 800bda4:	bf00      	nop
  }

  if (err != 0U)
 800bda6:	7afb      	ldrb	r3, [r7, #11]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d11e      	bne.n	800bdea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	88db      	ldrh	r3, [r3, #6]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d016      	beq.n	800bde2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bdb4:	893b      	ldrh	r3, [r7, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00e      	beq.n	800bdd8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	88da      	ldrh	r2, [r3, #6]
 800bdbe:	893b      	ldrh	r3, [r7, #8]
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	bf28      	it	cs
 800bdc4:	4613      	movcs	r3, r2
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdca:	893b      	ldrh	r3, [r7, #8]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fa69 	bl	800c2a8 <USBD_CtlSendData>
 800bdd6:	e009      	b.n	800bdec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f9e7 	bl	800c1ae <USBD_CtlError>
 800bde0:	e004      	b.n	800bdec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 faba 	bl	800c35c <USBD_CtlSendStatus>
 800bde8:	e000      	b.n	800bdec <USBD_GetDescriptor+0x320>
    return;
 800bdea:	bf00      	nop
  }
}
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop

0800bdf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	889b      	ldrh	r3, [r3, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d131      	bne.n	800be6a <USBD_SetAddress+0x76>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	88db      	ldrh	r3, [r3, #6]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d12d      	bne.n	800be6a <USBD_SetAddress+0x76>
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	885b      	ldrh	r3, [r3, #2]
 800be12:	2b7f      	cmp	r3, #127	@ 0x7f
 800be14:	d829      	bhi.n	800be6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	885b      	ldrh	r3, [r3, #2]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d104      	bne.n	800be38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f9bc 	bl	800c1ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be36:	e01d      	b.n	800be74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	7bfa      	ldrb	r2, [r7, #15]
 800be3c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be40:	7bfb      	ldrb	r3, [r7, #15]
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 ff6b 	bl	800cd20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fa86 	bl	800c35c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d004      	beq.n	800be60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2202      	movs	r2, #2
 800be5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be5e:	e009      	b.n	800be74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be68:	e004      	b.n	800be74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 f99e 	bl	800c1ae <USBD_CtlError>
  }
}
 800be72:	bf00      	nop
 800be74:	bf00      	nop
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	885b      	ldrh	r3, [r3, #2]
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	4b4e      	ldr	r3, [pc, #312]	@ (800bfcc <USBD_SetConfig+0x150>)
 800be92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be94:	4b4d      	ldr	r3, [pc, #308]	@ (800bfcc <USBD_SetConfig+0x150>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d905      	bls.n	800bea8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be9c:	6839      	ldr	r1, [r7, #0]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f985 	bl	800c1ae <USBD_CtlError>
    return USBD_FAIL;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e08c      	b.n	800bfc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d002      	beq.n	800beba <USBD_SetConfig+0x3e>
 800beb4:	2b03      	cmp	r3, #3
 800beb6:	d029      	beq.n	800bf0c <USBD_SetConfig+0x90>
 800beb8:	e075      	b.n	800bfa6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800beba:	4b44      	ldr	r3, [pc, #272]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d020      	beq.n	800bf04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bec2:	4b42      	ldr	r3, [pc, #264]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800becc:	4b3f      	ldr	r3, [pc, #252]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7fe ffb9 	bl	800ae4a <USBD_SetClassConfig>
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d008      	beq.n	800bef4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f962 	bl	800c1ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2202      	movs	r2, #2
 800beee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bef2:	e065      	b.n	800bfc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fa31 	bl	800c35c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2203      	movs	r2, #3
 800befe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bf02:	e05d      	b.n	800bfc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fa29 	bl	800c35c <USBD_CtlSendStatus>
      break;
 800bf0a:	e059      	b.n	800bfc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bf0c:	4b2f      	ldr	r3, [pc, #188]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d112      	bne.n	800bf3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bf1c:	4b2b      	ldr	r3, [pc, #172]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf26:	4b29      	ldr	r3, [pc, #164]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7fe ffa8 	bl	800ae82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fa12 	bl	800c35c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf38:	e042      	b.n	800bfc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf3a:	4b24      	ldr	r3, [pc, #144]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d02a      	beq.n	800bf9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	4619      	mov	r1, r3
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7fe ff96 	bl	800ae82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf56:	4b1d      	ldr	r3, [pc, #116]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf60:	4b1a      	ldr	r3, [pc, #104]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7fe ff6f 	bl	800ae4a <USBD_SetClassConfig>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00f      	beq.n	800bf96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f918 	bl	800c1ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	4619      	mov	r1, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7fe ff7b 	bl	800ae82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bf94:	e014      	b.n	800bfc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f9e0 	bl	800c35c <USBD_CtlSendStatus>
      break;
 800bf9c:	e010      	b.n	800bfc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f9dc 	bl	800c35c <USBD_CtlSendStatus>
      break;
 800bfa4:	e00c      	b.n	800bfc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f900 	bl	800c1ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfae:	4b07      	ldr	r3, [pc, #28]	@ (800bfcc <USBD_SetConfig+0x150>)
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7fe ff64 	bl	800ae82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	73fb      	strb	r3, [r7, #15]
      break;
 800bfbe:	bf00      	nop
  }

  return ret;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	240003f8 	.word	0x240003f8

0800bfd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	88db      	ldrh	r3, [r3, #6]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d004      	beq.n	800bfec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f8e2 	bl	800c1ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfea:	e023      	b.n	800c034 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	dc02      	bgt.n	800bffe <USBD_GetConfig+0x2e>
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dc03      	bgt.n	800c004 <USBD_GetConfig+0x34>
 800bffc:	e015      	b.n	800c02a <USBD_GetConfig+0x5a>
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d00b      	beq.n	800c01a <USBD_GetConfig+0x4a>
 800c002:	e012      	b.n	800c02a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	3308      	adds	r3, #8
 800c00e:	2201      	movs	r2, #1
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f948 	bl	800c2a8 <USBD_CtlSendData>
        break;
 800c018:	e00c      	b.n	800c034 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	3304      	adds	r3, #4
 800c01e:	2201      	movs	r2, #1
 800c020:	4619      	mov	r1, r3
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f940 	bl	800c2a8 <USBD_CtlSendData>
        break;
 800c028:	e004      	b.n	800c034 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f8be 	bl	800c1ae <USBD_CtlError>
        break;
 800c032:	bf00      	nop
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	3b01      	subs	r3, #1
 800c050:	2b02      	cmp	r3, #2
 800c052:	d81e      	bhi.n	800c092 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	88db      	ldrh	r3, [r3, #6]
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d004      	beq.n	800c066 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f8a5 	bl	800c1ae <USBD_CtlError>
        break;
 800c064:	e01a      	b.n	800c09c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c072:	2b00      	cmp	r3, #0
 800c074:	d005      	beq.n	800c082 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	f043 0202 	orr.w	r2, r3, #2
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	330c      	adds	r3, #12
 800c086:	2202      	movs	r2, #2
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f90c 	bl	800c2a8 <USBD_CtlSendData>
      break;
 800c090:	e004      	b.n	800c09c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f88a 	bl	800c1ae <USBD_CtlError>
      break;
 800c09a:	bf00      	nop
  }
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	885b      	ldrh	r3, [r3, #2]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d107      	bne.n	800c0c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f94c 	bl	800c35c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c0c4:	e013      	b.n	800c0ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	885b      	ldrh	r3, [r3, #2]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d10b      	bne.n	800c0e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	889b      	ldrh	r3, [r3, #4]
 800c0d2:	0a1b      	lsrs	r3, r3, #8
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f93c 	bl	800c35c <USBD_CtlSendStatus>
}
 800c0e4:	e003      	b.n	800c0ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f860 	bl	800c1ae <USBD_CtlError>
}
 800c0ee:	bf00      	nop
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c106:	b2db      	uxtb	r3, r3
 800c108:	3b01      	subs	r3, #1
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d80b      	bhi.n	800c126 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	885b      	ldrh	r3, [r3, #2]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d10c      	bne.n	800c130 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f91c 	bl	800c35c <USBD_CtlSendStatus>
      }
      break;
 800c124:	e004      	b.n	800c130 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f840 	bl	800c1ae <USBD_CtlError>
      break;
 800c12e:	e000      	b.n	800c132 <USBD_ClrFeature+0x3c>
      break;
 800c130:	bf00      	nop
  }
}
 800c132:	bf00      	nop
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	781a      	ldrb	r2, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3301      	adds	r3, #1
 800c154:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	781a      	ldrb	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3301      	adds	r3, #1
 800c162:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f7ff fa16 	bl	800b596 <SWAPBYTE>
 800c16a:	4603      	mov	r3, r0
 800c16c:	461a      	mov	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3301      	adds	r3, #1
 800c176:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	3301      	adds	r3, #1
 800c17c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f7ff fa09 	bl	800b596 <SWAPBYTE>
 800c184:	4603      	mov	r3, r0
 800c186:	461a      	mov	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	3301      	adds	r3, #1
 800c190:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3301      	adds	r3, #1
 800c196:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f7ff f9fc 	bl	800b596 <SWAPBYTE>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	80da      	strh	r2, [r3, #6]
}
 800c1a6:	bf00      	nop
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1b8:	2180      	movs	r1, #128	@ 0x80
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fd46 	bl	800cc4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fd42 	bl	800cc4c <USBD_LL_StallEP>
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d042      	beq.n	800c26c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c1ea:	6938      	ldr	r0, [r7, #16]
 800c1ec:	f000 f842 	bl	800c274 <USBD_GetLen>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1fa:	d808      	bhi.n	800c20e <USBD_GetString+0x3e>
 800c1fc:	6938      	ldr	r0, [r7, #16]
 800c1fe:	f000 f839 	bl	800c274 <USBD_GetLen>
 800c202:	4603      	mov	r3, r0
 800c204:	3301      	adds	r3, #1
 800c206:	b29b      	uxth	r3, r3
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	e001      	b.n	800c212 <USBD_GetString+0x42>
 800c20e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c216:	7dfb      	ldrb	r3, [r7, #23]
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	4413      	add	r3, r2
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	7812      	ldrb	r2, [r2, #0]
 800c220:	701a      	strb	r2, [r3, #0]
  idx++;
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	3301      	adds	r3, #1
 800c226:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c228:	7dfb      	ldrb	r3, [r7, #23]
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	4413      	add	r3, r2
 800c22e:	2203      	movs	r2, #3
 800c230:	701a      	strb	r2, [r3, #0]
  idx++;
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	3301      	adds	r3, #1
 800c236:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c238:	e013      	b.n	800c262 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	4413      	add	r3, r2
 800c240:	693a      	ldr	r2, [r7, #16]
 800c242:	7812      	ldrb	r2, [r2, #0]
 800c244:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	3301      	adds	r3, #1
 800c24a:	613b      	str	r3, [r7, #16]
    idx++;
 800c24c:	7dfb      	ldrb	r3, [r7, #23]
 800c24e:	3301      	adds	r3, #1
 800c250:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	4413      	add	r3, r2
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	3301      	adds	r3, #1
 800c260:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1e7      	bne.n	800c23a <USBD_GetString+0x6a>
 800c26a:	e000      	b.n	800c26e <USBD_GetString+0x9e>
    return;
 800c26c:	bf00      	nop
  }
}
 800c26e:	3718      	adds	r7, #24
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c284:	e005      	b.n	800c292 <USBD_GetLen+0x1e>
  {
    len++;
 800c286:	7bfb      	ldrb	r3, [r7, #15]
 800c288:	3301      	adds	r3, #1
 800c28a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	3301      	adds	r3, #1
 800c290:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1f5      	bne.n	800c286 <USBD_GetLen+0x12>
  }

  return len;
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3714      	adds	r7, #20
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2202      	movs	r2, #2
 800c2b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 fd45 	bl	800cd5e <USBD_LL_Transmit>

  return USBD_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b084      	sub	sp, #16
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	60f8      	str	r0, [r7, #12]
 800c2e6:	60b9      	str	r1, [r7, #8]
 800c2e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f000 fd34 	bl	800cd5e <USBD_LL_Transmit>

  return USBD_OK;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2203      	movs	r2, #3
 800c310:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	2100      	movs	r1, #0
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f000 fd38 	bl	800cda0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	2100      	movs	r1, #0
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 fd27 	bl	800cda0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2204      	movs	r2, #4
 800c368:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c36c:	2300      	movs	r3, #0
 800c36e:	2200      	movs	r2, #0
 800c370:	2100      	movs	r1, #0
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fcf3 	bl	800cd5e <USBD_LL_Transmit>

  return USBD_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b082      	sub	sp, #8
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2205      	movs	r2, #5
 800c38e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c392:	2300      	movs	r3, #0
 800c394:	2200      	movs	r2, #0
 800c396:	2100      	movs	r1, #0
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fd01 	bl	800cda0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c39e:	2300      	movs	r3, #0
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	4913      	ldr	r1, [pc, #76]	@ (800c3fc <MX_USB_DEVICE_Init+0x54>)
 800c3b0:	4813      	ldr	r0, [pc, #76]	@ (800c400 <MX_USB_DEVICE_Init+0x58>)
 800c3b2:	f7fe fcb1 	bl	800ad18 <USBD_Init>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c3bc:	f7f4 ff24 	bl	8001208 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800c3c0:	4910      	ldr	r1, [pc, #64]	@ (800c404 <MX_USB_DEVICE_Init+0x5c>)
 800c3c2:	480f      	ldr	r0, [pc, #60]	@ (800c400 <MX_USB_DEVICE_Init+0x58>)
 800c3c4:	f7fe fce6 	bl	800ad94 <USBD_RegisterClass>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c3ce:	f7f4 ff1b 	bl	8001208 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800c3d2:	490d      	ldr	r1, [pc, #52]	@ (800c408 <MX_USB_DEVICE_Init+0x60>)
 800c3d4:	480a      	ldr	r0, [pc, #40]	@ (800c400 <MX_USB_DEVICE_Init+0x58>)
 800c3d6:	f7fe fbcf 	bl	800ab78 <USBD_CDC_RegisterInterface>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d001      	beq.n	800c3e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3e0:	f7f4 ff12 	bl	8001208 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800c3e4:	4806      	ldr	r0, [pc, #24]	@ (800c400 <MX_USB_DEVICE_Init+0x58>)
 800c3e6:	f7fe fd19 	bl	800ae1c <USBD_Start>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3f0:	f7f4 ff0a 	bl	8001208 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c3f4:	f7f8 f922 	bl	800463c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3f8:	bf00      	nop
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	240000b0 	.word	0x240000b0
 800c400:	240003fc 	.word	0x240003fc
 800c404:	2400001c 	.word	0x2400001c
 800c408:	2400009c 	.word	0x2400009c

0800c40c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800c410:	2200      	movs	r2, #0
 800c412:	4905      	ldr	r1, [pc, #20]	@ (800c428 <CDC_Init_HS+0x1c>)
 800c414:	4805      	ldr	r0, [pc, #20]	@ (800c42c <CDC_Init_HS+0x20>)
 800c416:	f7fe fbc9 	bl	800abac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800c41a:	4905      	ldr	r1, [pc, #20]	@ (800c430 <CDC_Init_HS+0x24>)
 800c41c:	4803      	ldr	r0, [pc, #12]	@ (800c42c <CDC_Init_HS+0x20>)
 800c41e:	f7fe fbe7 	bl	800abf0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c422:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c424:	4618      	mov	r0, r3
 800c426:	bd80      	pop	{r7, pc}
 800c428:	24000ed8 	.word	0x24000ed8
 800c42c:	240003fc 	.word	0x240003fc
 800c430:	240006d8 	.word	0x240006d8

0800c434 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800c434:	b480      	push	{r7}
 800c436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800c438:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	4603      	mov	r3, r0
 800c44c:	6039      	str	r1, [r7, #0]
 800c44e:	71fb      	strb	r3, [r7, #7]
 800c450:	4613      	mov	r3, r2
 800c452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	2b23      	cmp	r3, #35	@ 0x23
 800c458:	d84a      	bhi.n	800c4f0 <CDC_Control_HS+0xac>
 800c45a:	a201      	add	r2, pc, #4	@ (adr r2, 800c460 <CDC_Control_HS+0x1c>)
 800c45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c460:	0800c4f1 	.word	0x0800c4f1
 800c464:	0800c4f1 	.word	0x0800c4f1
 800c468:	0800c4f1 	.word	0x0800c4f1
 800c46c:	0800c4f1 	.word	0x0800c4f1
 800c470:	0800c4f1 	.word	0x0800c4f1
 800c474:	0800c4f1 	.word	0x0800c4f1
 800c478:	0800c4f1 	.word	0x0800c4f1
 800c47c:	0800c4f1 	.word	0x0800c4f1
 800c480:	0800c4f1 	.word	0x0800c4f1
 800c484:	0800c4f1 	.word	0x0800c4f1
 800c488:	0800c4f1 	.word	0x0800c4f1
 800c48c:	0800c4f1 	.word	0x0800c4f1
 800c490:	0800c4f1 	.word	0x0800c4f1
 800c494:	0800c4f1 	.word	0x0800c4f1
 800c498:	0800c4f1 	.word	0x0800c4f1
 800c49c:	0800c4f1 	.word	0x0800c4f1
 800c4a0:	0800c4f1 	.word	0x0800c4f1
 800c4a4:	0800c4f1 	.word	0x0800c4f1
 800c4a8:	0800c4f1 	.word	0x0800c4f1
 800c4ac:	0800c4f1 	.word	0x0800c4f1
 800c4b0:	0800c4f1 	.word	0x0800c4f1
 800c4b4:	0800c4f1 	.word	0x0800c4f1
 800c4b8:	0800c4f1 	.word	0x0800c4f1
 800c4bc:	0800c4f1 	.word	0x0800c4f1
 800c4c0:	0800c4f1 	.word	0x0800c4f1
 800c4c4:	0800c4f1 	.word	0x0800c4f1
 800c4c8:	0800c4f1 	.word	0x0800c4f1
 800c4cc:	0800c4f1 	.word	0x0800c4f1
 800c4d0:	0800c4f1 	.word	0x0800c4f1
 800c4d4:	0800c4f1 	.word	0x0800c4f1
 800c4d8:	0800c4f1 	.word	0x0800c4f1
 800c4dc:	0800c4f1 	.word	0x0800c4f1
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c4f1 	.word	0x0800c4f1
 800c4e8:	0800c4f1 	.word	0x0800c4f1
 800c4ec:	0800c4f1 	.word	0x0800c4f1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c4f0:	bf00      	nop
  }

  return (USBD_OK);
 800c4f2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	4805      	ldr	r0, [pc, #20]	@ (800c524 <CDC_Receive_HS+0x24>)
 800c50e:	f7fe fb6f 	bl	800abf0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800c512:	4804      	ldr	r0, [pc, #16]	@ (800c524 <CDC_Receive_HS+0x24>)
 800c514:	f7fe fbca 	bl	800acac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c518:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	240003fc 	.word	0x240003fc

0800c528 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800c538:	4b0d      	ldr	r3, [pc, #52]	@ (800c570 <CDC_Transmit_HS+0x48>)
 800c53a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c53e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e00b      	b.n	800c566 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800c54e:	887b      	ldrh	r3, [r7, #2]
 800c550:	461a      	mov	r2, r3
 800c552:	6879      	ldr	r1, [r7, #4]
 800c554:	4806      	ldr	r0, [pc, #24]	@ (800c570 <CDC_Transmit_HS+0x48>)
 800c556:	f7fe fb29 	bl	800abac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800c55a:	4805      	ldr	r0, [pc, #20]	@ (800c570 <CDC_Transmit_HS+0x48>)
 800c55c:	f7fe fb66 	bl	800ac2c <USBD_CDC_TransmitPacket>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800c564:	7bfb      	ldrb	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	240003fc 	.word	0x240003fc

0800c574 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c574:	b480      	push	{r7}
 800c576:	b087      	sub	sp, #28
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	4613      	mov	r3, r2
 800c580:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800c586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	371c      	adds	r7, #28
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr
	...

0800c598 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	6039      	str	r1, [r7, #0]
 800c5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2212      	movs	r2, #18
 800c5a8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800c5aa:	4b03      	ldr	r3, [pc, #12]	@ (800c5b8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	240000d0 	.word	0x240000d0

0800c5bc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	6039      	str	r1, [r7, #0]
 800c5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2204      	movs	r2, #4
 800c5cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c5ce:	4b03      	ldr	r3, [pc, #12]	@ (800c5dc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	240000e4 	.word	0x240000e4

0800c5e0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d105      	bne.n	800c5fe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	4907      	ldr	r1, [pc, #28]	@ (800c614 <USBD_HS_ProductStrDescriptor+0x34>)
 800c5f6:	4808      	ldr	r0, [pc, #32]	@ (800c618 <USBD_HS_ProductStrDescriptor+0x38>)
 800c5f8:	f7ff fdea 	bl	800c1d0 <USBD_GetString>
 800c5fc:	e004      	b.n	800c608 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	4904      	ldr	r1, [pc, #16]	@ (800c614 <USBD_HS_ProductStrDescriptor+0x34>)
 800c602:	4805      	ldr	r0, [pc, #20]	@ (800c618 <USBD_HS_ProductStrDescriptor+0x38>)
 800c604:	f7ff fde4 	bl	800c1d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c608:	4b02      	ldr	r3, [pc, #8]	@ (800c614 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	240016d8 	.word	0x240016d8
 800c618:	0800de28 	.word	0x0800de28

0800c61c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	4603      	mov	r3, r0
 800c624:	6039      	str	r1, [r7, #0]
 800c626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	4904      	ldr	r1, [pc, #16]	@ (800c63c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800c62c:	4804      	ldr	r0, [pc, #16]	@ (800c640 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800c62e:	f7ff fdcf 	bl	800c1d0 <USBD_GetString>
  return USBD_StrDesc;
 800c632:	4b02      	ldr	r3, [pc, #8]	@ (800c63c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	240016d8 	.word	0x240016d8
 800c640:	0800de40 	.word	0x0800de40

0800c644 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	6039      	str	r1, [r7, #0]
 800c64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	221a      	movs	r2, #26
 800c654:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c656:	f000 f843 	bl	800c6e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c65a:	4b02      	ldr	r3, [pc, #8]	@ (800c664 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	240000e8 	.word	0x240000e8

0800c668 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	6039      	str	r1, [r7, #0]
 800c672:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c674:	79fb      	ldrb	r3, [r7, #7]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d105      	bne.n	800c686 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	4907      	ldr	r1, [pc, #28]	@ (800c69c <USBD_HS_ConfigStrDescriptor+0x34>)
 800c67e:	4808      	ldr	r0, [pc, #32]	@ (800c6a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c680:	f7ff fda6 	bl	800c1d0 <USBD_GetString>
 800c684:	e004      	b.n	800c690 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	4904      	ldr	r1, [pc, #16]	@ (800c69c <USBD_HS_ConfigStrDescriptor+0x34>)
 800c68a:	4805      	ldr	r0, [pc, #20]	@ (800c6a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c68c:	f7ff fda0 	bl	800c1d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c690:	4b02      	ldr	r3, [pc, #8]	@ (800c69c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	240016d8 	.word	0x240016d8
 800c6a0:	0800de54 	.word	0x0800de54

0800c6a4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	6039      	str	r1, [r7, #0]
 800c6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6b0:	79fb      	ldrb	r3, [r7, #7]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d105      	bne.n	800c6c2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	4907      	ldr	r1, [pc, #28]	@ (800c6d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c6ba:	4808      	ldr	r0, [pc, #32]	@ (800c6dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c6bc:	f7ff fd88 	bl	800c1d0 <USBD_GetString>
 800c6c0:	e004      	b.n	800c6cc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	4904      	ldr	r1, [pc, #16]	@ (800c6d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c6c6:	4805      	ldr	r0, [pc, #20]	@ (800c6dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c6c8:	f7ff fd82 	bl	800c1d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6cc:	4b02      	ldr	r3, [pc, #8]	@ (800c6d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	240016d8 	.word	0x240016d8
 800c6dc:	0800de60 	.word	0x0800de60

0800c6e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c724 <Get_SerialNum+0x44>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c6ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c728 <Get_SerialNum+0x48>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c6f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c72c <Get_SerialNum+0x4c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c706:	2208      	movs	r2, #8
 800c708:	4909      	ldr	r1, [pc, #36]	@ (800c730 <Get_SerialNum+0x50>)
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f000 f814 	bl	800c738 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c710:	2204      	movs	r2, #4
 800c712:	4908      	ldr	r1, [pc, #32]	@ (800c734 <Get_SerialNum+0x54>)
 800c714:	68b8      	ldr	r0, [r7, #8]
 800c716:	f000 f80f 	bl	800c738 <IntToUnicode>
  }
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	08fff800 	.word	0x08fff800
 800c728:	08fff804 	.word	0x08fff804
 800c72c:	08fff808 	.word	0x08fff808
 800c730:	240000ea 	.word	0x240000ea
 800c734:	240000fa 	.word	0x240000fa

0800c738 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	4613      	mov	r3, r2
 800c744:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c74a:	2300      	movs	r3, #0
 800c74c:	75fb      	strb	r3, [r7, #23]
 800c74e:	e027      	b.n	800c7a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	0f1b      	lsrs	r3, r3, #28
 800c754:	2b09      	cmp	r3, #9
 800c756:	d80b      	bhi.n	800c770 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	0f1b      	lsrs	r3, r3, #28
 800c75c:	b2da      	uxtb	r2, r3
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4619      	mov	r1, r3
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	440b      	add	r3, r1
 800c768:	3230      	adds	r2, #48	@ 0x30
 800c76a:	b2d2      	uxtb	r2, r2
 800c76c:	701a      	strb	r2, [r3, #0]
 800c76e:	e00a      	b.n	800c786 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	0f1b      	lsrs	r3, r3, #28
 800c774:	b2da      	uxtb	r2, r3
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	005b      	lsls	r3, r3, #1
 800c77a:	4619      	mov	r1, r3
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	440b      	add	r3, r1
 800c780:	3237      	adds	r2, #55	@ 0x37
 800c782:	b2d2      	uxtb	r2, r2
 800c784:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	011b      	lsls	r3, r3, #4
 800c78a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c78c:	7dfb      	ldrb	r3, [r7, #23]
 800c78e:	005b      	lsls	r3, r3, #1
 800c790:	3301      	adds	r3, #1
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	4413      	add	r3, r2
 800c796:	2200      	movs	r2, #0
 800c798:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
 800c79c:	3301      	adds	r3, #1
 800c79e:	75fb      	strb	r3, [r7, #23]
 800c7a0:	7dfa      	ldrb	r2, [r7, #23]
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d3d3      	bcc.n	800c750 <IntToUnicode+0x18>
  }
}
 800c7a8:	bf00      	nop
 800c7aa:	bf00      	nop
 800c7ac:	371c      	adds	r7, #28
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
	...

0800c7b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b0ba      	sub	sp, #232	@ 0xe8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	605a      	str	r2, [r3, #4]
 800c7ca:	609a      	str	r2, [r3, #8]
 800c7cc:	60da      	str	r2, [r3, #12]
 800c7ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c7d0:	f107 0310 	add.w	r3, r7, #16
 800c7d4:	22c0      	movs	r2, #192	@ 0xc0
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 fc78 	bl	800d0ce <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a45      	ldr	r2, [pc, #276]	@ (800c8f8 <HAL_PCD_MspInit+0x140>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	f040 8082 	bne.w	800c8ee <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c7ea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c7ee:	f04f 0300 	mov.w	r3, #0
 800c7f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c7f6:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800c7fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c7fe:	f107 0310 	add.w	r3, r7, #16
 800c802:	4618      	mov	r0, r3
 800c804:	f7f8 fed2 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800c80e:	f7f4 fcfb 	bl	8001208 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c812:	f7f7 ff13 	bl	800463c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c816:	4b39      	ldr	r3, [pc, #228]	@ (800c8fc <HAL_PCD_MspInit+0x144>)
 800c818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800c81c:	4a37      	ldr	r2, [pc, #220]	@ (800c8fc <HAL_PCD_MspInit+0x144>)
 800c81e:	f043 0301 	orr.w	r3, r3, #1
 800c822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800c826:	4b35      	ldr	r3, [pc, #212]	@ (800c8fc <HAL_PCD_MspInit+0x144>)
 800c828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	60fb      	str	r3, [r7, #12]
 800c832:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c838:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c83c:	2300      	movs	r3, #0
 800c83e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c842:	2300      	movs	r3, #0
 800c844:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c848:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800c84c:	4619      	mov	r1, r3
 800c84e:	482c      	ldr	r0, [pc, #176]	@ (800c900 <HAL_PCD_MspInit+0x148>)
 800c850:	f7f5 fa94 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c854:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c858:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c85c:	2302      	movs	r3, #2
 800c85e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c862:	2300      	movs	r3, #0
 800c864:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c868:	2300      	movs	r3, #0
 800c86a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c86e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800c872:	4619      	mov	r1, r3
 800c874:	4822      	ldr	r0, [pc, #136]	@ (800c900 <HAL_PCD_MspInit+0x148>)
 800c876:	f7f5 fa81 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c87a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c87e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c882:	2302      	movs	r3, #2
 800c884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c888:	2301      	movs	r3, #1
 800c88a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c88e:	2300      	movs	r3, #0
 800c890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c894:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800c898:	4619      	mov	r1, r3
 800c89a:	4819      	ldr	r0, [pc, #100]	@ (800c900 <HAL_PCD_MspInit+0x148>)
 800c89c:	f7f5 fa6e 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c8a0:	4b16      	ldr	r3, [pc, #88]	@ (800c8fc <HAL_PCD_MspInit+0x144>)
 800c8a2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c8a6:	4a15      	ldr	r2, [pc, #84]	@ (800c8fc <HAL_PCD_MspInit+0x144>)
 800c8a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c8ac:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800c8b0:	4b12      	ldr	r3, [pc, #72]	@ (800c8fc <HAL_PCD_MspInit+0x144>)
 800c8b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c8b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8ba:	60bb      	str	r3, [r7, #8]
 800c8bc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	204a      	movs	r0, #74	@ 0x4a
 800c8c4:	f7f5 f9ad 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800c8c8:	204a      	movs	r0, #74	@ 0x4a
 800c8ca:	f7f5 f9c4 	bl	8001c56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	204b      	movs	r0, #75	@ 0x4b
 800c8d4:	f7f5 f9a5 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800c8d8:	204b      	movs	r0, #75	@ 0x4b
 800c8da:	f7f5 f9bc 	bl	8001c56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	204d      	movs	r0, #77	@ 0x4d
 800c8e4:	f7f5 f99d 	bl	8001c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c8e8:	204d      	movs	r0, #77	@ 0x4d
 800c8ea:	f7f5 f9b4 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c8ee:	bf00      	nop
 800c8f0:	37e8      	adds	r7, #232	@ 0xe8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	40040000 	.word	0x40040000
 800c8fc:	58024400 	.word	0x58024400
 800c900:	58020000 	.word	0x58020000

0800c904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c918:	4619      	mov	r1, r3
 800c91a:	4610      	mov	r0, r2
 800c91c:	f7fe facb 	bl	800aeb6 <USBD_LL_SetupStage>
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	460b      	mov	r3, r1
 800c932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c93a:	78fa      	ldrb	r2, [r7, #3]
 800c93c:	6879      	ldr	r1, [r7, #4]
 800c93e:	4613      	mov	r3, r2
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	4413      	add	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	440b      	add	r3, r1
 800c948:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	78fb      	ldrb	r3, [r7, #3]
 800c950:	4619      	mov	r1, r3
 800c952:	f7fe fb05 	bl	800af60 <USBD_LL_DataOutStage>
}
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	460b      	mov	r3, r1
 800c968:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c970:	78fa      	ldrb	r2, [r7, #3]
 800c972:	6879      	ldr	r1, [r7, #4]
 800c974:	4613      	mov	r3, r2
 800c976:	00db      	lsls	r3, r3, #3
 800c978:	4413      	add	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	440b      	add	r3, r1
 800c97e:	3320      	adds	r3, #32
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	78fb      	ldrb	r3, [r7, #3]
 800c984:	4619      	mov	r1, r3
 800c986:	f7fe fb9e 	bl	800b0c6 <USBD_LL_DataInStage>
}
 800c98a:	bf00      	nop
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b082      	sub	sp, #8
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fe fcd8 	bl	800b356 <USBD_LL_SOF>
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b084      	sub	sp, #16
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	79db      	ldrb	r3, [r3, #7]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d102      	bne.n	800c9c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
 800c9c6:	e008      	b.n	800c9da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	79db      	ldrb	r3, [r3, #7]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d102      	bne.n	800c9d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	73fb      	strb	r3, [r7, #15]
 800c9d4:	e001      	b.n	800c9da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c9d6:	f7f4 fc17 	bl	8001208 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9e0:	7bfa      	ldrb	r2, [r7, #15]
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fc72 	bl	800b2ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fe fc1a 	bl	800b22a <USBD_LL_Reset>
}
 800c9f6:	bf00      	nop
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe fc6d 	bl	800b2ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	6812      	ldr	r2, [r2, #0]
 800ca22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca26:	f043 0301 	orr.w	r3, r3, #1
 800ca2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7adb      	ldrb	r3, [r3, #11]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d005      	beq.n	800ca40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca34:	4b04      	ldr	r3, [pc, #16]	@ (800ca48 <HAL_PCD_SuspendCallback+0x48>)
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	4a03      	ldr	r2, [pc, #12]	@ (800ca48 <HAL_PCD_SuspendCallback+0x48>)
 800ca3a:	f043 0306 	orr.w	r3, r3, #6
 800ca3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	e000ed00 	.word	0xe000ed00

0800ca4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fc63 	bl	800b326 <USBD_LL_Resume>
}
 800ca60:	bf00      	nop
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	460b      	mov	r3, r1
 800ca72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca7a:	78fa      	ldrb	r2, [r7, #3]
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fe fcbb 	bl	800b3fa <USBD_LL_IsoOUTIncomplete>
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	460b      	mov	r3, r1
 800ca96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca9e:	78fa      	ldrb	r2, [r7, #3]
 800caa0:	4611      	mov	r1, r2
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe fc77 	bl	800b396 <USBD_LL_IsoINIncomplete>
}
 800caa8:	bf00      	nop
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe fccd 	bl	800b45e <USBD_LL_DevConnected>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fcca 	bl	800b474 <USBD_LL_DevDisconnected>
}
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d140      	bne.n	800cb7a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800caf8:	4a22      	ldr	r2, [pc, #136]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a20      	ldr	r2, [pc, #128]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb04:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cb08:	4b1e      	ldr	r3, [pc, #120]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb0a:	4a1f      	ldr	r2, [pc, #124]	@ (800cb88 <USBD_LL_Init+0xa0>)
 800cb0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800cb0e:	4b1d      	ldr	r3, [pc, #116]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb10:	2209      	movs	r2, #9
 800cb12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800cb14:	4b1b      	ldr	r3, [pc, #108]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb16:	2202      	movs	r2, #2
 800cb18:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cb1a:	4b1a      	ldr	r3, [pc, #104]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cb20:	4b18      	ldr	r3, [pc, #96]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb22:	2202      	movs	r2, #2
 800cb24:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cb26:	4b17      	ldr	r3, [pc, #92]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cb2c:	4b15      	ldr	r3, [pc, #84]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800cb32:	4b14      	ldr	r3, [pc, #80]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800cb38:	4b12      	ldr	r3, [pc, #72]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800cb3e:	4b11      	ldr	r3, [pc, #68]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cb44:	4b0f      	ldr	r3, [pc, #60]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800cb4a:	480e      	ldr	r0, [pc, #56]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb4c:	f7f6 fa9c 	bl	8003088 <HAL_PCD_Init>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800cb56:	f7f4 fb57 	bl	8001208 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800cb5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cb5e:	4809      	ldr	r0, [pc, #36]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb60:	f7f7 fcf1 	bl	8004546 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800cb64:	2280      	movs	r2, #128	@ 0x80
 800cb66:	2100      	movs	r1, #0
 800cb68:	4806      	ldr	r0, [pc, #24]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb6a:	f7f7 fca5 	bl	80044b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800cb6e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800cb72:	2101      	movs	r1, #1
 800cb74:	4803      	ldr	r0, [pc, #12]	@ (800cb84 <USBD_LL_Init+0x9c>)
 800cb76:	f7f7 fc9f 	bl	80044b8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	240018d8 	.word	0x240018d8
 800cb88:	40040000 	.word	0x40040000

0800cb8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7f6 fb7c 	bl	80032a0 <HAL_PCD_Start>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 f942 	bl	800ce38 <USBD_Get_USB_Status>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	4608      	mov	r0, r1
 800cbcc:	4611      	mov	r1, r2
 800cbce:	461a      	mov	r2, r3
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	70fb      	strb	r3, [r7, #3]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	70bb      	strb	r3, [r7, #2]
 800cbd8:	4613      	mov	r3, r2
 800cbda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cbea:	78bb      	ldrb	r3, [r7, #2]
 800cbec:	883a      	ldrh	r2, [r7, #0]
 800cbee:	78f9      	ldrb	r1, [r7, #3]
 800cbf0:	f7f7 f87d 	bl	8003cee <HAL_PCD_EP_Open>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 f91c 	bl	800ce38 <USBD_Get_USB_Status>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	460b      	mov	r3, r1
 800cc18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc28:	78fa      	ldrb	r2, [r7, #3]
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7f7 f8c8 	bl	8003dc2 <HAL_PCD_EP_Close>
 800cc32:	4603      	mov	r3, r0
 800cc34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f000 f8fd 	bl	800ce38 <USBD_Get_USB_Status>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc42:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	460b      	mov	r3, r1
 800cc56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc66:	78fa      	ldrb	r2, [r7, #3]
 800cc68:	4611      	mov	r1, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7f7 f980 	bl	8003f70 <HAL_PCD_EP_SetStall>
 800cc70:	4603      	mov	r3, r0
 800cc72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 f8de 	bl	800ce38 <USBD_Get_USB_Status>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc80:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cca4:	78fa      	ldrb	r2, [r7, #3]
 800cca6:	4611      	mov	r1, r2
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f7 f9c4 	bl	8004036 <HAL_PCD_EP_ClrStall>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f8bf 	bl	800ce38 <USBD_Get_USB_Status>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	da0b      	bge.n	800ccfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cce4:	78fb      	ldrb	r3, [r7, #3]
 800cce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccea:	68f9      	ldr	r1, [r7, #12]
 800ccec:	4613      	mov	r3, r2
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	4413      	add	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	440b      	add	r3, r1
 800ccf6:	3316      	adds	r3, #22
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	e00b      	b.n	800cd14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccfc:	78fb      	ldrb	r3, [r7, #3]
 800ccfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd02:	68f9      	ldr	r1, [r7, #12]
 800cd04:	4613      	mov	r3, r2
 800cd06:	00db      	lsls	r3, r3, #3
 800cd08:	4413      	add	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	440b      	add	r3, r1
 800cd0e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cd12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3714      	adds	r7, #20
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd3a:	78fa      	ldrb	r2, [r7, #3]
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7f6 ffb1 	bl	8003ca6 <HAL_PCD_SetAddress>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 f874 	bl	800ce38 <USBD_Get_USB_Status>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b086      	sub	sp, #24
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	60f8      	str	r0, [r7, #12]
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	603b      	str	r3, [r7, #0]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd7c:	7af9      	ldrb	r1, [r7, #11]
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	f7f7 f8bb 	bl	8003efc <HAL_PCD_EP_Transmit>
 800cd86:	4603      	mov	r3, r0
 800cd88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f000 f853 	bl	800ce38 <USBD_Get_USB_Status>
 800cd92:	4603      	mov	r3, r0
 800cd94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd96:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3718      	adds	r7, #24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	607a      	str	r2, [r7, #4]
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	460b      	mov	r3, r1
 800cdae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cdbe:	7af9      	ldrb	r1, [r7, #11]
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	f7f7 f847 	bl	8003e56 <HAL_PCD_EP_Receive>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f000 f832 	bl	800ce38 <USBD_Get_USB_Status>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3718      	adds	r7, #24
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	460b      	mov	r3, r1
 800cdec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdf4:	78fa      	ldrb	r2, [r7, #3]
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7f7 f867 	bl	8003ecc <HAL_PCD_EP_GetRxCount>
 800cdfe:	4603      	mov	r3, r0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce10:	4b03      	ldr	r3, [pc, #12]	@ (800ce20 <USBD_static_malloc+0x18>)
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	24001dbc 	.word	0x24001dbc

0800ce24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ce2c:	bf00      	nop
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce46:	79fb      	ldrb	r3, [r7, #7]
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	d817      	bhi.n	800ce7c <USBD_Get_USB_Status+0x44>
 800ce4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce54 <USBD_Get_USB_Status+0x1c>)
 800ce4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce52:	bf00      	nop
 800ce54:	0800ce65 	.word	0x0800ce65
 800ce58:	0800ce6b 	.word	0x0800ce6b
 800ce5c:	0800ce71 	.word	0x0800ce71
 800ce60:	0800ce77 	.word	0x0800ce77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	73fb      	strb	r3, [r7, #15]
    break;
 800ce68:	e00b      	b.n	800ce82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce6e:	e008      	b.n	800ce82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce70:	2301      	movs	r3, #1
 800ce72:	73fb      	strb	r3, [r7, #15]
    break;
 800ce74:	e005      	b.n	800ce82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce76:	2303      	movs	r3, #3
 800ce78:	73fb      	strb	r3, [r7, #15]
    break;
 800ce7a:	e002      	b.n	800ce82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce80:	bf00      	nop
  }
  return usb_status;
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <std>:
 800ce90:	2300      	movs	r3, #0
 800ce92:	b510      	push	{r4, lr}
 800ce94:	4604      	mov	r4, r0
 800ce96:	e9c0 3300 	strd	r3, r3, [r0]
 800ce9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce9e:	6083      	str	r3, [r0, #8]
 800cea0:	8181      	strh	r1, [r0, #12]
 800cea2:	6643      	str	r3, [r0, #100]	@ 0x64
 800cea4:	81c2      	strh	r2, [r0, #14]
 800cea6:	6183      	str	r3, [r0, #24]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	2208      	movs	r2, #8
 800ceac:	305c      	adds	r0, #92	@ 0x5c
 800ceae:	f000 f90e 	bl	800d0ce <memset>
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cee8 <std+0x58>)
 800ceb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ceec <std+0x5c>)
 800ceb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ceba:	4b0d      	ldr	r3, [pc, #52]	@ (800cef0 <std+0x60>)
 800cebc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cebe:	4b0d      	ldr	r3, [pc, #52]	@ (800cef4 <std+0x64>)
 800cec0:	6323      	str	r3, [r4, #48]	@ 0x30
 800cec2:	4b0d      	ldr	r3, [pc, #52]	@ (800cef8 <std+0x68>)
 800cec4:	6224      	str	r4, [r4, #32]
 800cec6:	429c      	cmp	r4, r3
 800cec8:	d006      	beq.n	800ced8 <std+0x48>
 800ceca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cece:	4294      	cmp	r4, r2
 800ced0:	d002      	beq.n	800ced8 <std+0x48>
 800ced2:	33d0      	adds	r3, #208	@ 0xd0
 800ced4:	429c      	cmp	r4, r3
 800ced6:	d105      	bne.n	800cee4 <std+0x54>
 800ced8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cee0:	f000 b96e 	b.w	800d1c0 <__retarget_lock_init_recursive>
 800cee4:	bd10      	pop	{r4, pc}
 800cee6:	bf00      	nop
 800cee8:	0800d049 	.word	0x0800d049
 800ceec:	0800d06b 	.word	0x0800d06b
 800cef0:	0800d0a3 	.word	0x0800d0a3
 800cef4:	0800d0c7 	.word	0x0800d0c7
 800cef8:	24001fdc 	.word	0x24001fdc

0800cefc <stdio_exit_handler>:
 800cefc:	4a02      	ldr	r2, [pc, #8]	@ (800cf08 <stdio_exit_handler+0xc>)
 800cefe:	4903      	ldr	r1, [pc, #12]	@ (800cf0c <stdio_exit_handler+0x10>)
 800cf00:	4803      	ldr	r0, [pc, #12]	@ (800cf10 <stdio_exit_handler+0x14>)
 800cf02:	f000 b869 	b.w	800cfd8 <_fwalk_sglue>
 800cf06:	bf00      	nop
 800cf08:	24000104 	.word	0x24000104
 800cf0c:	0800da61 	.word	0x0800da61
 800cf10:	24000114 	.word	0x24000114

0800cf14 <cleanup_stdio>:
 800cf14:	6841      	ldr	r1, [r0, #4]
 800cf16:	4b0c      	ldr	r3, [pc, #48]	@ (800cf48 <cleanup_stdio+0x34>)
 800cf18:	4299      	cmp	r1, r3
 800cf1a:	b510      	push	{r4, lr}
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	d001      	beq.n	800cf24 <cleanup_stdio+0x10>
 800cf20:	f000 fd9e 	bl	800da60 <_fflush_r>
 800cf24:	68a1      	ldr	r1, [r4, #8]
 800cf26:	4b09      	ldr	r3, [pc, #36]	@ (800cf4c <cleanup_stdio+0x38>)
 800cf28:	4299      	cmp	r1, r3
 800cf2a:	d002      	beq.n	800cf32 <cleanup_stdio+0x1e>
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 fd97 	bl	800da60 <_fflush_r>
 800cf32:	68e1      	ldr	r1, [r4, #12]
 800cf34:	4b06      	ldr	r3, [pc, #24]	@ (800cf50 <cleanup_stdio+0x3c>)
 800cf36:	4299      	cmp	r1, r3
 800cf38:	d004      	beq.n	800cf44 <cleanup_stdio+0x30>
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf40:	f000 bd8e 	b.w	800da60 <_fflush_r>
 800cf44:	bd10      	pop	{r4, pc}
 800cf46:	bf00      	nop
 800cf48:	24001fdc 	.word	0x24001fdc
 800cf4c:	24002044 	.word	0x24002044
 800cf50:	240020ac 	.word	0x240020ac

0800cf54 <global_stdio_init.part.0>:
 800cf54:	b510      	push	{r4, lr}
 800cf56:	4b0b      	ldr	r3, [pc, #44]	@ (800cf84 <global_stdio_init.part.0+0x30>)
 800cf58:	4c0b      	ldr	r4, [pc, #44]	@ (800cf88 <global_stdio_init.part.0+0x34>)
 800cf5a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf8c <global_stdio_init.part.0+0x38>)
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	2200      	movs	r2, #0
 800cf62:	2104      	movs	r1, #4
 800cf64:	f7ff ff94 	bl	800ce90 <std>
 800cf68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	2109      	movs	r1, #9
 800cf70:	f7ff ff8e 	bl	800ce90 <std>
 800cf74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf78:	2202      	movs	r2, #2
 800cf7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf7e:	2112      	movs	r1, #18
 800cf80:	f7ff bf86 	b.w	800ce90 <std>
 800cf84:	24002114 	.word	0x24002114
 800cf88:	24001fdc 	.word	0x24001fdc
 800cf8c:	0800cefd 	.word	0x0800cefd

0800cf90 <__sfp_lock_acquire>:
 800cf90:	4801      	ldr	r0, [pc, #4]	@ (800cf98 <__sfp_lock_acquire+0x8>)
 800cf92:	f000 b916 	b.w	800d1c2 <__retarget_lock_acquire_recursive>
 800cf96:	bf00      	nop
 800cf98:	2400211d 	.word	0x2400211d

0800cf9c <__sfp_lock_release>:
 800cf9c:	4801      	ldr	r0, [pc, #4]	@ (800cfa4 <__sfp_lock_release+0x8>)
 800cf9e:	f000 b911 	b.w	800d1c4 <__retarget_lock_release_recursive>
 800cfa2:	bf00      	nop
 800cfa4:	2400211d 	.word	0x2400211d

0800cfa8 <__sinit>:
 800cfa8:	b510      	push	{r4, lr}
 800cfaa:	4604      	mov	r4, r0
 800cfac:	f7ff fff0 	bl	800cf90 <__sfp_lock_acquire>
 800cfb0:	6a23      	ldr	r3, [r4, #32]
 800cfb2:	b11b      	cbz	r3, 800cfbc <__sinit+0x14>
 800cfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb8:	f7ff bff0 	b.w	800cf9c <__sfp_lock_release>
 800cfbc:	4b04      	ldr	r3, [pc, #16]	@ (800cfd0 <__sinit+0x28>)
 800cfbe:	6223      	str	r3, [r4, #32]
 800cfc0:	4b04      	ldr	r3, [pc, #16]	@ (800cfd4 <__sinit+0x2c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1f5      	bne.n	800cfb4 <__sinit+0xc>
 800cfc8:	f7ff ffc4 	bl	800cf54 <global_stdio_init.part.0>
 800cfcc:	e7f2      	b.n	800cfb4 <__sinit+0xc>
 800cfce:	bf00      	nop
 800cfd0:	0800cf15 	.word	0x0800cf15
 800cfd4:	24002114 	.word	0x24002114

0800cfd8 <_fwalk_sglue>:
 800cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfdc:	4607      	mov	r7, r0
 800cfde:	4688      	mov	r8, r1
 800cfe0:	4614      	mov	r4, r2
 800cfe2:	2600      	movs	r6, #0
 800cfe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfe8:	f1b9 0901 	subs.w	r9, r9, #1
 800cfec:	d505      	bpl.n	800cffa <_fwalk_sglue+0x22>
 800cfee:	6824      	ldr	r4, [r4, #0]
 800cff0:	2c00      	cmp	r4, #0
 800cff2:	d1f7      	bne.n	800cfe4 <_fwalk_sglue+0xc>
 800cff4:	4630      	mov	r0, r6
 800cff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cffa:	89ab      	ldrh	r3, [r5, #12]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d907      	bls.n	800d010 <_fwalk_sglue+0x38>
 800d000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d004:	3301      	adds	r3, #1
 800d006:	d003      	beq.n	800d010 <_fwalk_sglue+0x38>
 800d008:	4629      	mov	r1, r5
 800d00a:	4638      	mov	r0, r7
 800d00c:	47c0      	blx	r8
 800d00e:	4306      	orrs	r6, r0
 800d010:	3568      	adds	r5, #104	@ 0x68
 800d012:	e7e9      	b.n	800cfe8 <_fwalk_sglue+0x10>

0800d014 <iprintf>:
 800d014:	b40f      	push	{r0, r1, r2, r3}
 800d016:	b507      	push	{r0, r1, r2, lr}
 800d018:	4906      	ldr	r1, [pc, #24]	@ (800d034 <iprintf+0x20>)
 800d01a:	ab04      	add	r3, sp, #16
 800d01c:	6808      	ldr	r0, [r1, #0]
 800d01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d022:	6881      	ldr	r1, [r0, #8]
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	f000 f9f1 	bl	800d40c <_vfiprintf_r>
 800d02a:	b003      	add	sp, #12
 800d02c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d030:	b004      	add	sp, #16
 800d032:	4770      	bx	lr
 800d034:	24000110 	.word	0x24000110

0800d038 <putchar>:
 800d038:	4b02      	ldr	r3, [pc, #8]	@ (800d044 <putchar+0xc>)
 800d03a:	4601      	mov	r1, r0
 800d03c:	6818      	ldr	r0, [r3, #0]
 800d03e:	6882      	ldr	r2, [r0, #8]
 800d040:	f000 bd36 	b.w	800dab0 <_putc_r>
 800d044:	24000110 	.word	0x24000110

0800d048 <__sread>:
 800d048:	b510      	push	{r4, lr}
 800d04a:	460c      	mov	r4, r1
 800d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d050:	f000 f868 	bl	800d124 <_read_r>
 800d054:	2800      	cmp	r0, #0
 800d056:	bfab      	itete	ge
 800d058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d05a:	89a3      	ldrhlt	r3, [r4, #12]
 800d05c:	181b      	addge	r3, r3, r0
 800d05e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d062:	bfac      	ite	ge
 800d064:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d066:	81a3      	strhlt	r3, [r4, #12]
 800d068:	bd10      	pop	{r4, pc}

0800d06a <__swrite>:
 800d06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d06e:	461f      	mov	r7, r3
 800d070:	898b      	ldrh	r3, [r1, #12]
 800d072:	05db      	lsls	r3, r3, #23
 800d074:	4605      	mov	r5, r0
 800d076:	460c      	mov	r4, r1
 800d078:	4616      	mov	r6, r2
 800d07a:	d505      	bpl.n	800d088 <__swrite+0x1e>
 800d07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d080:	2302      	movs	r3, #2
 800d082:	2200      	movs	r2, #0
 800d084:	f000 f83c 	bl	800d100 <_lseek_r>
 800d088:	89a3      	ldrh	r3, [r4, #12]
 800d08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d08e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d092:	81a3      	strh	r3, [r4, #12]
 800d094:	4632      	mov	r2, r6
 800d096:	463b      	mov	r3, r7
 800d098:	4628      	mov	r0, r5
 800d09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d09e:	f000 b853 	b.w	800d148 <_write_r>

0800d0a2 <__sseek>:
 800d0a2:	b510      	push	{r4, lr}
 800d0a4:	460c      	mov	r4, r1
 800d0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0aa:	f000 f829 	bl	800d100 <_lseek_r>
 800d0ae:	1c43      	adds	r3, r0, #1
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	bf15      	itete	ne
 800d0b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0be:	81a3      	strheq	r3, [r4, #12]
 800d0c0:	bf18      	it	ne
 800d0c2:	81a3      	strhne	r3, [r4, #12]
 800d0c4:	bd10      	pop	{r4, pc}

0800d0c6 <__sclose>:
 800d0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ca:	f000 b809 	b.w	800d0e0 <_close_r>

0800d0ce <memset>:
 800d0ce:	4402      	add	r2, r0
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d100      	bne.n	800d0d8 <memset+0xa>
 800d0d6:	4770      	bx	lr
 800d0d8:	f803 1b01 	strb.w	r1, [r3], #1
 800d0dc:	e7f9      	b.n	800d0d2 <memset+0x4>
	...

0800d0e0 <_close_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4d06      	ldr	r5, [pc, #24]	@ (800d0fc <_close_r+0x1c>)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	f7f4 fa87 	bl	80015fe <_close>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_close_r+0x1a>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_close_r+0x1a>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	24002118 	.word	0x24002118

0800d100 <_lseek_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4d07      	ldr	r5, [pc, #28]	@ (800d120 <_lseek_r+0x20>)
 800d104:	4604      	mov	r4, r0
 800d106:	4608      	mov	r0, r1
 800d108:	4611      	mov	r1, r2
 800d10a:	2200      	movs	r2, #0
 800d10c:	602a      	str	r2, [r5, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	f7f4 fa9c 	bl	800164c <_lseek>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_lseek_r+0x1e>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_lseek_r+0x1e>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	24002118 	.word	0x24002118

0800d124 <_read_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d07      	ldr	r5, [pc, #28]	@ (800d144 <_read_r+0x20>)
 800d128:	4604      	mov	r4, r0
 800d12a:	4608      	mov	r0, r1
 800d12c:	4611      	mov	r1, r2
 800d12e:	2200      	movs	r2, #0
 800d130:	602a      	str	r2, [r5, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	f7f4 fa2a 	bl	800158c <_read>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	d102      	bne.n	800d142 <_read_r+0x1e>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	b103      	cbz	r3, 800d142 <_read_r+0x1e>
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	bd38      	pop	{r3, r4, r5, pc}
 800d144:	24002118 	.word	0x24002118

0800d148 <_write_r>:
 800d148:	b538      	push	{r3, r4, r5, lr}
 800d14a:	4d07      	ldr	r5, [pc, #28]	@ (800d168 <_write_r+0x20>)
 800d14c:	4604      	mov	r4, r0
 800d14e:	4608      	mov	r0, r1
 800d150:	4611      	mov	r1, r2
 800d152:	2200      	movs	r2, #0
 800d154:	602a      	str	r2, [r5, #0]
 800d156:	461a      	mov	r2, r3
 800d158:	f7f4 fa35 	bl	80015c6 <_write>
 800d15c:	1c43      	adds	r3, r0, #1
 800d15e:	d102      	bne.n	800d166 <_write_r+0x1e>
 800d160:	682b      	ldr	r3, [r5, #0]
 800d162:	b103      	cbz	r3, 800d166 <_write_r+0x1e>
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	bd38      	pop	{r3, r4, r5, pc}
 800d168:	24002118 	.word	0x24002118

0800d16c <__errno>:
 800d16c:	4b01      	ldr	r3, [pc, #4]	@ (800d174 <__errno+0x8>)
 800d16e:	6818      	ldr	r0, [r3, #0]
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	24000110 	.word	0x24000110

0800d178 <__libc_init_array>:
 800d178:	b570      	push	{r4, r5, r6, lr}
 800d17a:	4d0d      	ldr	r5, [pc, #52]	@ (800d1b0 <__libc_init_array+0x38>)
 800d17c:	4c0d      	ldr	r4, [pc, #52]	@ (800d1b4 <__libc_init_array+0x3c>)
 800d17e:	1b64      	subs	r4, r4, r5
 800d180:	10a4      	asrs	r4, r4, #2
 800d182:	2600      	movs	r6, #0
 800d184:	42a6      	cmp	r6, r4
 800d186:	d109      	bne.n	800d19c <__libc_init_array+0x24>
 800d188:	4d0b      	ldr	r5, [pc, #44]	@ (800d1b8 <__libc_init_array+0x40>)
 800d18a:	4c0c      	ldr	r4, [pc, #48]	@ (800d1bc <__libc_init_array+0x44>)
 800d18c:	f000 fdec 	bl	800dd68 <_init>
 800d190:	1b64      	subs	r4, r4, r5
 800d192:	10a4      	asrs	r4, r4, #2
 800d194:	2600      	movs	r6, #0
 800d196:	42a6      	cmp	r6, r4
 800d198:	d105      	bne.n	800d1a6 <__libc_init_array+0x2e>
 800d19a:	bd70      	pop	{r4, r5, r6, pc}
 800d19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1a0:	4798      	blx	r3
 800d1a2:	3601      	adds	r6, #1
 800d1a4:	e7ee      	b.n	800d184 <__libc_init_array+0xc>
 800d1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1aa:	4798      	blx	r3
 800d1ac:	3601      	adds	r6, #1
 800d1ae:	e7f2      	b.n	800d196 <__libc_init_array+0x1e>
 800d1b0:	0800debc 	.word	0x0800debc
 800d1b4:	0800debc 	.word	0x0800debc
 800d1b8:	0800debc 	.word	0x0800debc
 800d1bc:	0800dec0 	.word	0x0800dec0

0800d1c0 <__retarget_lock_init_recursive>:
 800d1c0:	4770      	bx	lr

0800d1c2 <__retarget_lock_acquire_recursive>:
 800d1c2:	4770      	bx	lr

0800d1c4 <__retarget_lock_release_recursive>:
 800d1c4:	4770      	bx	lr
	...

0800d1c8 <_free_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	2900      	cmp	r1, #0
 800d1ce:	d041      	beq.n	800d254 <_free_r+0x8c>
 800d1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1d4:	1f0c      	subs	r4, r1, #4
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	bfb8      	it	lt
 800d1da:	18e4      	addlt	r4, r4, r3
 800d1dc:	f000 f8e0 	bl	800d3a0 <__malloc_lock>
 800d1e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d258 <_free_r+0x90>)
 800d1e2:	6813      	ldr	r3, [r2, #0]
 800d1e4:	b933      	cbnz	r3, 800d1f4 <_free_r+0x2c>
 800d1e6:	6063      	str	r3, [r4, #4]
 800d1e8:	6014      	str	r4, [r2, #0]
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1f0:	f000 b8dc 	b.w	800d3ac <__malloc_unlock>
 800d1f4:	42a3      	cmp	r3, r4
 800d1f6:	d908      	bls.n	800d20a <_free_r+0x42>
 800d1f8:	6820      	ldr	r0, [r4, #0]
 800d1fa:	1821      	adds	r1, r4, r0
 800d1fc:	428b      	cmp	r3, r1
 800d1fe:	bf01      	itttt	eq
 800d200:	6819      	ldreq	r1, [r3, #0]
 800d202:	685b      	ldreq	r3, [r3, #4]
 800d204:	1809      	addeq	r1, r1, r0
 800d206:	6021      	streq	r1, [r4, #0]
 800d208:	e7ed      	b.n	800d1e6 <_free_r+0x1e>
 800d20a:	461a      	mov	r2, r3
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	b10b      	cbz	r3, 800d214 <_free_r+0x4c>
 800d210:	42a3      	cmp	r3, r4
 800d212:	d9fa      	bls.n	800d20a <_free_r+0x42>
 800d214:	6811      	ldr	r1, [r2, #0]
 800d216:	1850      	adds	r0, r2, r1
 800d218:	42a0      	cmp	r0, r4
 800d21a:	d10b      	bne.n	800d234 <_free_r+0x6c>
 800d21c:	6820      	ldr	r0, [r4, #0]
 800d21e:	4401      	add	r1, r0
 800d220:	1850      	adds	r0, r2, r1
 800d222:	4283      	cmp	r3, r0
 800d224:	6011      	str	r1, [r2, #0]
 800d226:	d1e0      	bne.n	800d1ea <_free_r+0x22>
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	6053      	str	r3, [r2, #4]
 800d22e:	4408      	add	r0, r1
 800d230:	6010      	str	r0, [r2, #0]
 800d232:	e7da      	b.n	800d1ea <_free_r+0x22>
 800d234:	d902      	bls.n	800d23c <_free_r+0x74>
 800d236:	230c      	movs	r3, #12
 800d238:	602b      	str	r3, [r5, #0]
 800d23a:	e7d6      	b.n	800d1ea <_free_r+0x22>
 800d23c:	6820      	ldr	r0, [r4, #0]
 800d23e:	1821      	adds	r1, r4, r0
 800d240:	428b      	cmp	r3, r1
 800d242:	bf04      	itt	eq
 800d244:	6819      	ldreq	r1, [r3, #0]
 800d246:	685b      	ldreq	r3, [r3, #4]
 800d248:	6063      	str	r3, [r4, #4]
 800d24a:	bf04      	itt	eq
 800d24c:	1809      	addeq	r1, r1, r0
 800d24e:	6021      	streq	r1, [r4, #0]
 800d250:	6054      	str	r4, [r2, #4]
 800d252:	e7ca      	b.n	800d1ea <_free_r+0x22>
 800d254:	bd38      	pop	{r3, r4, r5, pc}
 800d256:	bf00      	nop
 800d258:	24002124 	.word	0x24002124

0800d25c <sbrk_aligned>:
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	4e0f      	ldr	r6, [pc, #60]	@ (800d29c <sbrk_aligned+0x40>)
 800d260:	460c      	mov	r4, r1
 800d262:	6831      	ldr	r1, [r6, #0]
 800d264:	4605      	mov	r5, r0
 800d266:	b911      	cbnz	r1, 800d26e <sbrk_aligned+0x12>
 800d268:	f000 fcea 	bl	800dc40 <_sbrk_r>
 800d26c:	6030      	str	r0, [r6, #0]
 800d26e:	4621      	mov	r1, r4
 800d270:	4628      	mov	r0, r5
 800d272:	f000 fce5 	bl	800dc40 <_sbrk_r>
 800d276:	1c43      	adds	r3, r0, #1
 800d278:	d103      	bne.n	800d282 <sbrk_aligned+0x26>
 800d27a:	f04f 34ff 	mov.w	r4, #4294967295
 800d27e:	4620      	mov	r0, r4
 800d280:	bd70      	pop	{r4, r5, r6, pc}
 800d282:	1cc4      	adds	r4, r0, #3
 800d284:	f024 0403 	bic.w	r4, r4, #3
 800d288:	42a0      	cmp	r0, r4
 800d28a:	d0f8      	beq.n	800d27e <sbrk_aligned+0x22>
 800d28c:	1a21      	subs	r1, r4, r0
 800d28e:	4628      	mov	r0, r5
 800d290:	f000 fcd6 	bl	800dc40 <_sbrk_r>
 800d294:	3001      	adds	r0, #1
 800d296:	d1f2      	bne.n	800d27e <sbrk_aligned+0x22>
 800d298:	e7ef      	b.n	800d27a <sbrk_aligned+0x1e>
 800d29a:	bf00      	nop
 800d29c:	24002120 	.word	0x24002120

0800d2a0 <_malloc_r>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	1ccd      	adds	r5, r1, #3
 800d2a6:	f025 0503 	bic.w	r5, r5, #3
 800d2aa:	3508      	adds	r5, #8
 800d2ac:	2d0c      	cmp	r5, #12
 800d2ae:	bf38      	it	cc
 800d2b0:	250c      	movcc	r5, #12
 800d2b2:	2d00      	cmp	r5, #0
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	db01      	blt.n	800d2bc <_malloc_r+0x1c>
 800d2b8:	42a9      	cmp	r1, r5
 800d2ba:	d904      	bls.n	800d2c6 <_malloc_r+0x26>
 800d2bc:	230c      	movs	r3, #12
 800d2be:	6033      	str	r3, [r6, #0]
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d39c <_malloc_r+0xfc>
 800d2ca:	f000 f869 	bl	800d3a0 <__malloc_lock>
 800d2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d2d2:	461c      	mov	r4, r3
 800d2d4:	bb44      	cbnz	r4, 800d328 <_malloc_r+0x88>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7ff ffbf 	bl	800d25c <sbrk_aligned>
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	d158      	bne.n	800d396 <_malloc_r+0xf6>
 800d2e4:	f8d8 4000 	ldr.w	r4, [r8]
 800d2e8:	4627      	mov	r7, r4
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	d143      	bne.n	800d376 <_malloc_r+0xd6>
 800d2ee:	2c00      	cmp	r4, #0
 800d2f0:	d04b      	beq.n	800d38a <_malloc_r+0xea>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	eb04 0903 	add.w	r9, r4, r3
 800d2fc:	f000 fca0 	bl	800dc40 <_sbrk_r>
 800d300:	4581      	cmp	r9, r0
 800d302:	d142      	bne.n	800d38a <_malloc_r+0xea>
 800d304:	6821      	ldr	r1, [r4, #0]
 800d306:	1a6d      	subs	r5, r5, r1
 800d308:	4629      	mov	r1, r5
 800d30a:	4630      	mov	r0, r6
 800d30c:	f7ff ffa6 	bl	800d25c <sbrk_aligned>
 800d310:	3001      	adds	r0, #1
 800d312:	d03a      	beq.n	800d38a <_malloc_r+0xea>
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	442b      	add	r3, r5
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	f8d8 3000 	ldr.w	r3, [r8]
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	bb62      	cbnz	r2, 800d37c <_malloc_r+0xdc>
 800d322:	f8c8 7000 	str.w	r7, [r8]
 800d326:	e00f      	b.n	800d348 <_malloc_r+0xa8>
 800d328:	6822      	ldr	r2, [r4, #0]
 800d32a:	1b52      	subs	r2, r2, r5
 800d32c:	d420      	bmi.n	800d370 <_malloc_r+0xd0>
 800d32e:	2a0b      	cmp	r2, #11
 800d330:	d917      	bls.n	800d362 <_malloc_r+0xc2>
 800d332:	1961      	adds	r1, r4, r5
 800d334:	42a3      	cmp	r3, r4
 800d336:	6025      	str	r5, [r4, #0]
 800d338:	bf18      	it	ne
 800d33a:	6059      	strne	r1, [r3, #4]
 800d33c:	6863      	ldr	r3, [r4, #4]
 800d33e:	bf08      	it	eq
 800d340:	f8c8 1000 	streq.w	r1, [r8]
 800d344:	5162      	str	r2, [r4, r5]
 800d346:	604b      	str	r3, [r1, #4]
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 f82f 	bl	800d3ac <__malloc_unlock>
 800d34e:	f104 000b 	add.w	r0, r4, #11
 800d352:	1d23      	adds	r3, r4, #4
 800d354:	f020 0007 	bic.w	r0, r0, #7
 800d358:	1ac2      	subs	r2, r0, r3
 800d35a:	bf1c      	itt	ne
 800d35c:	1a1b      	subne	r3, r3, r0
 800d35e:	50a3      	strne	r3, [r4, r2]
 800d360:	e7af      	b.n	800d2c2 <_malloc_r+0x22>
 800d362:	6862      	ldr	r2, [r4, #4]
 800d364:	42a3      	cmp	r3, r4
 800d366:	bf0c      	ite	eq
 800d368:	f8c8 2000 	streq.w	r2, [r8]
 800d36c:	605a      	strne	r2, [r3, #4]
 800d36e:	e7eb      	b.n	800d348 <_malloc_r+0xa8>
 800d370:	4623      	mov	r3, r4
 800d372:	6864      	ldr	r4, [r4, #4]
 800d374:	e7ae      	b.n	800d2d4 <_malloc_r+0x34>
 800d376:	463c      	mov	r4, r7
 800d378:	687f      	ldr	r7, [r7, #4]
 800d37a:	e7b6      	b.n	800d2ea <_malloc_r+0x4a>
 800d37c:	461a      	mov	r2, r3
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	42a3      	cmp	r3, r4
 800d382:	d1fb      	bne.n	800d37c <_malloc_r+0xdc>
 800d384:	2300      	movs	r3, #0
 800d386:	6053      	str	r3, [r2, #4]
 800d388:	e7de      	b.n	800d348 <_malloc_r+0xa8>
 800d38a:	230c      	movs	r3, #12
 800d38c:	6033      	str	r3, [r6, #0]
 800d38e:	4630      	mov	r0, r6
 800d390:	f000 f80c 	bl	800d3ac <__malloc_unlock>
 800d394:	e794      	b.n	800d2c0 <_malloc_r+0x20>
 800d396:	6005      	str	r5, [r0, #0]
 800d398:	e7d6      	b.n	800d348 <_malloc_r+0xa8>
 800d39a:	bf00      	nop
 800d39c:	24002124 	.word	0x24002124

0800d3a0 <__malloc_lock>:
 800d3a0:	4801      	ldr	r0, [pc, #4]	@ (800d3a8 <__malloc_lock+0x8>)
 800d3a2:	f7ff bf0e 	b.w	800d1c2 <__retarget_lock_acquire_recursive>
 800d3a6:	bf00      	nop
 800d3a8:	2400211c 	.word	0x2400211c

0800d3ac <__malloc_unlock>:
 800d3ac:	4801      	ldr	r0, [pc, #4]	@ (800d3b4 <__malloc_unlock+0x8>)
 800d3ae:	f7ff bf09 	b.w	800d1c4 <__retarget_lock_release_recursive>
 800d3b2:	bf00      	nop
 800d3b4:	2400211c 	.word	0x2400211c

0800d3b8 <__sfputc_r>:
 800d3b8:	6893      	ldr	r3, [r2, #8]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	b410      	push	{r4}
 800d3c0:	6093      	str	r3, [r2, #8]
 800d3c2:	da08      	bge.n	800d3d6 <__sfputc_r+0x1e>
 800d3c4:	6994      	ldr	r4, [r2, #24]
 800d3c6:	42a3      	cmp	r3, r4
 800d3c8:	db01      	blt.n	800d3ce <__sfputc_r+0x16>
 800d3ca:	290a      	cmp	r1, #10
 800d3cc:	d103      	bne.n	800d3d6 <__sfputc_r+0x1e>
 800d3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3d2:	f000 bba1 	b.w	800db18 <__swbuf_r>
 800d3d6:	6813      	ldr	r3, [r2, #0]
 800d3d8:	1c58      	adds	r0, r3, #1
 800d3da:	6010      	str	r0, [r2, #0]
 800d3dc:	7019      	strb	r1, [r3, #0]
 800d3de:	4608      	mov	r0, r1
 800d3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <__sfputs_r>:
 800d3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e8:	4606      	mov	r6, r0
 800d3ea:	460f      	mov	r7, r1
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	18d5      	adds	r5, r2, r3
 800d3f0:	42ac      	cmp	r4, r5
 800d3f2:	d101      	bne.n	800d3f8 <__sfputs_r+0x12>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	e007      	b.n	800d408 <__sfputs_r+0x22>
 800d3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fc:	463a      	mov	r2, r7
 800d3fe:	4630      	mov	r0, r6
 800d400:	f7ff ffda 	bl	800d3b8 <__sfputc_r>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d1f3      	bne.n	800d3f0 <__sfputs_r+0xa>
 800d408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d40c <_vfiprintf_r>:
 800d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d410:	460d      	mov	r5, r1
 800d412:	b09d      	sub	sp, #116	@ 0x74
 800d414:	4614      	mov	r4, r2
 800d416:	4698      	mov	r8, r3
 800d418:	4606      	mov	r6, r0
 800d41a:	b118      	cbz	r0, 800d424 <_vfiprintf_r+0x18>
 800d41c:	6a03      	ldr	r3, [r0, #32]
 800d41e:	b90b      	cbnz	r3, 800d424 <_vfiprintf_r+0x18>
 800d420:	f7ff fdc2 	bl	800cfa8 <__sinit>
 800d424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d426:	07d9      	lsls	r1, r3, #31
 800d428:	d405      	bmi.n	800d436 <_vfiprintf_r+0x2a>
 800d42a:	89ab      	ldrh	r3, [r5, #12]
 800d42c:	059a      	lsls	r2, r3, #22
 800d42e:	d402      	bmi.n	800d436 <_vfiprintf_r+0x2a>
 800d430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d432:	f7ff fec6 	bl	800d1c2 <__retarget_lock_acquire_recursive>
 800d436:	89ab      	ldrh	r3, [r5, #12]
 800d438:	071b      	lsls	r3, r3, #28
 800d43a:	d501      	bpl.n	800d440 <_vfiprintf_r+0x34>
 800d43c:	692b      	ldr	r3, [r5, #16]
 800d43e:	b99b      	cbnz	r3, 800d468 <_vfiprintf_r+0x5c>
 800d440:	4629      	mov	r1, r5
 800d442:	4630      	mov	r0, r6
 800d444:	f000 fba6 	bl	800db94 <__swsetup_r>
 800d448:	b170      	cbz	r0, 800d468 <_vfiprintf_r+0x5c>
 800d44a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d44c:	07dc      	lsls	r4, r3, #31
 800d44e:	d504      	bpl.n	800d45a <_vfiprintf_r+0x4e>
 800d450:	f04f 30ff 	mov.w	r0, #4294967295
 800d454:	b01d      	add	sp, #116	@ 0x74
 800d456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45a:	89ab      	ldrh	r3, [r5, #12]
 800d45c:	0598      	lsls	r0, r3, #22
 800d45e:	d4f7      	bmi.n	800d450 <_vfiprintf_r+0x44>
 800d460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d462:	f7ff feaf 	bl	800d1c4 <__retarget_lock_release_recursive>
 800d466:	e7f3      	b.n	800d450 <_vfiprintf_r+0x44>
 800d468:	2300      	movs	r3, #0
 800d46a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d46c:	2320      	movs	r3, #32
 800d46e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d472:	f8cd 800c 	str.w	r8, [sp, #12]
 800d476:	2330      	movs	r3, #48	@ 0x30
 800d478:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d628 <_vfiprintf_r+0x21c>
 800d47c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d480:	f04f 0901 	mov.w	r9, #1
 800d484:	4623      	mov	r3, r4
 800d486:	469a      	mov	sl, r3
 800d488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d48c:	b10a      	cbz	r2, 800d492 <_vfiprintf_r+0x86>
 800d48e:	2a25      	cmp	r2, #37	@ 0x25
 800d490:	d1f9      	bne.n	800d486 <_vfiprintf_r+0x7a>
 800d492:	ebba 0b04 	subs.w	fp, sl, r4
 800d496:	d00b      	beq.n	800d4b0 <_vfiprintf_r+0xa4>
 800d498:	465b      	mov	r3, fp
 800d49a:	4622      	mov	r2, r4
 800d49c:	4629      	mov	r1, r5
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f7ff ffa1 	bl	800d3e6 <__sfputs_r>
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	f000 80a7 	beq.w	800d5f8 <_vfiprintf_r+0x1ec>
 800d4aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4ac:	445a      	add	r2, fp
 800d4ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 809f 	beq.w	800d5f8 <_vfiprintf_r+0x1ec>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c4:	f10a 0a01 	add.w	sl, sl, #1
 800d4c8:	9304      	str	r3, [sp, #16]
 800d4ca:	9307      	str	r3, [sp, #28]
 800d4cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4d2:	4654      	mov	r4, sl
 800d4d4:	2205      	movs	r2, #5
 800d4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4da:	4853      	ldr	r0, [pc, #332]	@ (800d628 <_vfiprintf_r+0x21c>)
 800d4dc:	f7f2 ff08 	bl	80002f0 <memchr>
 800d4e0:	9a04      	ldr	r2, [sp, #16]
 800d4e2:	b9d8      	cbnz	r0, 800d51c <_vfiprintf_r+0x110>
 800d4e4:	06d1      	lsls	r1, r2, #27
 800d4e6:	bf44      	itt	mi
 800d4e8:	2320      	movmi	r3, #32
 800d4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ee:	0713      	lsls	r3, r2, #28
 800d4f0:	bf44      	itt	mi
 800d4f2:	232b      	movmi	r3, #43	@ 0x2b
 800d4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4fe:	d015      	beq.n	800d52c <_vfiprintf_r+0x120>
 800d500:	9a07      	ldr	r2, [sp, #28]
 800d502:	4654      	mov	r4, sl
 800d504:	2000      	movs	r0, #0
 800d506:	f04f 0c0a 	mov.w	ip, #10
 800d50a:	4621      	mov	r1, r4
 800d50c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d510:	3b30      	subs	r3, #48	@ 0x30
 800d512:	2b09      	cmp	r3, #9
 800d514:	d94b      	bls.n	800d5ae <_vfiprintf_r+0x1a2>
 800d516:	b1b0      	cbz	r0, 800d546 <_vfiprintf_r+0x13a>
 800d518:	9207      	str	r2, [sp, #28]
 800d51a:	e014      	b.n	800d546 <_vfiprintf_r+0x13a>
 800d51c:	eba0 0308 	sub.w	r3, r0, r8
 800d520:	fa09 f303 	lsl.w	r3, r9, r3
 800d524:	4313      	orrs	r3, r2
 800d526:	9304      	str	r3, [sp, #16]
 800d528:	46a2      	mov	sl, r4
 800d52a:	e7d2      	b.n	800d4d2 <_vfiprintf_r+0xc6>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	1d19      	adds	r1, r3, #4
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	9103      	str	r1, [sp, #12]
 800d534:	2b00      	cmp	r3, #0
 800d536:	bfbb      	ittet	lt
 800d538:	425b      	neglt	r3, r3
 800d53a:	f042 0202 	orrlt.w	r2, r2, #2
 800d53e:	9307      	strge	r3, [sp, #28]
 800d540:	9307      	strlt	r3, [sp, #28]
 800d542:	bfb8      	it	lt
 800d544:	9204      	strlt	r2, [sp, #16]
 800d546:	7823      	ldrb	r3, [r4, #0]
 800d548:	2b2e      	cmp	r3, #46	@ 0x2e
 800d54a:	d10a      	bne.n	800d562 <_vfiprintf_r+0x156>
 800d54c:	7863      	ldrb	r3, [r4, #1]
 800d54e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d550:	d132      	bne.n	800d5b8 <_vfiprintf_r+0x1ac>
 800d552:	9b03      	ldr	r3, [sp, #12]
 800d554:	1d1a      	adds	r2, r3, #4
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	9203      	str	r2, [sp, #12]
 800d55a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d55e:	3402      	adds	r4, #2
 800d560:	9305      	str	r3, [sp, #20]
 800d562:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d638 <_vfiprintf_r+0x22c>
 800d566:	7821      	ldrb	r1, [r4, #0]
 800d568:	2203      	movs	r2, #3
 800d56a:	4650      	mov	r0, sl
 800d56c:	f7f2 fec0 	bl	80002f0 <memchr>
 800d570:	b138      	cbz	r0, 800d582 <_vfiprintf_r+0x176>
 800d572:	9b04      	ldr	r3, [sp, #16]
 800d574:	eba0 000a 	sub.w	r0, r0, sl
 800d578:	2240      	movs	r2, #64	@ 0x40
 800d57a:	4082      	lsls	r2, r0
 800d57c:	4313      	orrs	r3, r2
 800d57e:	3401      	adds	r4, #1
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d586:	4829      	ldr	r0, [pc, #164]	@ (800d62c <_vfiprintf_r+0x220>)
 800d588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d58c:	2206      	movs	r2, #6
 800d58e:	f7f2 feaf 	bl	80002f0 <memchr>
 800d592:	2800      	cmp	r0, #0
 800d594:	d03f      	beq.n	800d616 <_vfiprintf_r+0x20a>
 800d596:	4b26      	ldr	r3, [pc, #152]	@ (800d630 <_vfiprintf_r+0x224>)
 800d598:	bb1b      	cbnz	r3, 800d5e2 <_vfiprintf_r+0x1d6>
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	3307      	adds	r3, #7
 800d59e:	f023 0307 	bic.w	r3, r3, #7
 800d5a2:	3308      	adds	r3, #8
 800d5a4:	9303      	str	r3, [sp, #12]
 800d5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a8:	443b      	add	r3, r7
 800d5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ac:	e76a      	b.n	800d484 <_vfiprintf_r+0x78>
 800d5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	e7a8      	b.n	800d50a <_vfiprintf_r+0xfe>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	3401      	adds	r4, #1
 800d5bc:	9305      	str	r3, [sp, #20]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f04f 0c0a 	mov.w	ip, #10
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ca:	3a30      	subs	r2, #48	@ 0x30
 800d5cc:	2a09      	cmp	r2, #9
 800d5ce:	d903      	bls.n	800d5d8 <_vfiprintf_r+0x1cc>
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d0c6      	beq.n	800d562 <_vfiprintf_r+0x156>
 800d5d4:	9105      	str	r1, [sp, #20]
 800d5d6:	e7c4      	b.n	800d562 <_vfiprintf_r+0x156>
 800d5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5dc:	4604      	mov	r4, r0
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e7f0      	b.n	800d5c4 <_vfiprintf_r+0x1b8>
 800d5e2:	ab03      	add	r3, sp, #12
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	462a      	mov	r2, r5
 800d5e8:	4b12      	ldr	r3, [pc, #72]	@ (800d634 <_vfiprintf_r+0x228>)
 800d5ea:	a904      	add	r1, sp, #16
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f3af 8000 	nop.w
 800d5f2:	4607      	mov	r7, r0
 800d5f4:	1c78      	adds	r0, r7, #1
 800d5f6:	d1d6      	bne.n	800d5a6 <_vfiprintf_r+0x19a>
 800d5f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5fa:	07d9      	lsls	r1, r3, #31
 800d5fc:	d405      	bmi.n	800d60a <_vfiprintf_r+0x1fe>
 800d5fe:	89ab      	ldrh	r3, [r5, #12]
 800d600:	059a      	lsls	r2, r3, #22
 800d602:	d402      	bmi.n	800d60a <_vfiprintf_r+0x1fe>
 800d604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d606:	f7ff fddd 	bl	800d1c4 <__retarget_lock_release_recursive>
 800d60a:	89ab      	ldrh	r3, [r5, #12]
 800d60c:	065b      	lsls	r3, r3, #25
 800d60e:	f53f af1f 	bmi.w	800d450 <_vfiprintf_r+0x44>
 800d612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d614:	e71e      	b.n	800d454 <_vfiprintf_r+0x48>
 800d616:	ab03      	add	r3, sp, #12
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	462a      	mov	r2, r5
 800d61c:	4b05      	ldr	r3, [pc, #20]	@ (800d634 <_vfiprintf_r+0x228>)
 800d61e:	a904      	add	r1, sp, #16
 800d620:	4630      	mov	r0, r6
 800d622:	f000 f879 	bl	800d718 <_printf_i>
 800d626:	e7e4      	b.n	800d5f2 <_vfiprintf_r+0x1e6>
 800d628:	0800de80 	.word	0x0800de80
 800d62c:	0800de8a 	.word	0x0800de8a
 800d630:	00000000 	.word	0x00000000
 800d634:	0800d3e7 	.word	0x0800d3e7
 800d638:	0800de86 	.word	0x0800de86

0800d63c <_printf_common>:
 800d63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d640:	4616      	mov	r6, r2
 800d642:	4698      	mov	r8, r3
 800d644:	688a      	ldr	r2, [r1, #8]
 800d646:	690b      	ldr	r3, [r1, #16]
 800d648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d64c:	4293      	cmp	r3, r2
 800d64e:	bfb8      	it	lt
 800d650:	4613      	movlt	r3, r2
 800d652:	6033      	str	r3, [r6, #0]
 800d654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d658:	4607      	mov	r7, r0
 800d65a:	460c      	mov	r4, r1
 800d65c:	b10a      	cbz	r2, 800d662 <_printf_common+0x26>
 800d65e:	3301      	adds	r3, #1
 800d660:	6033      	str	r3, [r6, #0]
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	0699      	lsls	r1, r3, #26
 800d666:	bf42      	ittt	mi
 800d668:	6833      	ldrmi	r3, [r6, #0]
 800d66a:	3302      	addmi	r3, #2
 800d66c:	6033      	strmi	r3, [r6, #0]
 800d66e:	6825      	ldr	r5, [r4, #0]
 800d670:	f015 0506 	ands.w	r5, r5, #6
 800d674:	d106      	bne.n	800d684 <_printf_common+0x48>
 800d676:	f104 0a19 	add.w	sl, r4, #25
 800d67a:	68e3      	ldr	r3, [r4, #12]
 800d67c:	6832      	ldr	r2, [r6, #0]
 800d67e:	1a9b      	subs	r3, r3, r2
 800d680:	42ab      	cmp	r3, r5
 800d682:	dc26      	bgt.n	800d6d2 <_printf_common+0x96>
 800d684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d688:	6822      	ldr	r2, [r4, #0]
 800d68a:	3b00      	subs	r3, #0
 800d68c:	bf18      	it	ne
 800d68e:	2301      	movne	r3, #1
 800d690:	0692      	lsls	r2, r2, #26
 800d692:	d42b      	bmi.n	800d6ec <_printf_common+0xb0>
 800d694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d698:	4641      	mov	r1, r8
 800d69a:	4638      	mov	r0, r7
 800d69c:	47c8      	blx	r9
 800d69e:	3001      	adds	r0, #1
 800d6a0:	d01e      	beq.n	800d6e0 <_printf_common+0xa4>
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	6922      	ldr	r2, [r4, #16]
 800d6a6:	f003 0306 	and.w	r3, r3, #6
 800d6aa:	2b04      	cmp	r3, #4
 800d6ac:	bf02      	ittt	eq
 800d6ae:	68e5      	ldreq	r5, [r4, #12]
 800d6b0:	6833      	ldreq	r3, [r6, #0]
 800d6b2:	1aed      	subeq	r5, r5, r3
 800d6b4:	68a3      	ldr	r3, [r4, #8]
 800d6b6:	bf0c      	ite	eq
 800d6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6bc:	2500      	movne	r5, #0
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	bfc4      	itt	gt
 800d6c2:	1a9b      	subgt	r3, r3, r2
 800d6c4:	18ed      	addgt	r5, r5, r3
 800d6c6:	2600      	movs	r6, #0
 800d6c8:	341a      	adds	r4, #26
 800d6ca:	42b5      	cmp	r5, r6
 800d6cc:	d11a      	bne.n	800d704 <_printf_common+0xc8>
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	e008      	b.n	800d6e4 <_printf_common+0xa8>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4652      	mov	r2, sl
 800d6d6:	4641      	mov	r1, r8
 800d6d8:	4638      	mov	r0, r7
 800d6da:	47c8      	blx	r9
 800d6dc:	3001      	adds	r0, #1
 800d6de:	d103      	bne.n	800d6e8 <_printf_common+0xac>
 800d6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e8:	3501      	adds	r5, #1
 800d6ea:	e7c6      	b.n	800d67a <_printf_common+0x3e>
 800d6ec:	18e1      	adds	r1, r4, r3
 800d6ee:	1c5a      	adds	r2, r3, #1
 800d6f0:	2030      	movs	r0, #48	@ 0x30
 800d6f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d6f6:	4422      	add	r2, r4
 800d6f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d6fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d700:	3302      	adds	r3, #2
 800d702:	e7c7      	b.n	800d694 <_printf_common+0x58>
 800d704:	2301      	movs	r3, #1
 800d706:	4622      	mov	r2, r4
 800d708:	4641      	mov	r1, r8
 800d70a:	4638      	mov	r0, r7
 800d70c:	47c8      	blx	r9
 800d70e:	3001      	adds	r0, #1
 800d710:	d0e6      	beq.n	800d6e0 <_printf_common+0xa4>
 800d712:	3601      	adds	r6, #1
 800d714:	e7d9      	b.n	800d6ca <_printf_common+0x8e>
	...

0800d718 <_printf_i>:
 800d718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	7e0f      	ldrb	r7, [r1, #24]
 800d71e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d720:	2f78      	cmp	r7, #120	@ 0x78
 800d722:	4691      	mov	r9, r2
 800d724:	4680      	mov	r8, r0
 800d726:	460c      	mov	r4, r1
 800d728:	469a      	mov	sl, r3
 800d72a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d72e:	d807      	bhi.n	800d740 <_printf_i+0x28>
 800d730:	2f62      	cmp	r7, #98	@ 0x62
 800d732:	d80a      	bhi.n	800d74a <_printf_i+0x32>
 800d734:	2f00      	cmp	r7, #0
 800d736:	f000 80d2 	beq.w	800d8de <_printf_i+0x1c6>
 800d73a:	2f58      	cmp	r7, #88	@ 0x58
 800d73c:	f000 80b9 	beq.w	800d8b2 <_printf_i+0x19a>
 800d740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d748:	e03a      	b.n	800d7c0 <_printf_i+0xa8>
 800d74a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d74e:	2b15      	cmp	r3, #21
 800d750:	d8f6      	bhi.n	800d740 <_printf_i+0x28>
 800d752:	a101      	add	r1, pc, #4	@ (adr r1, 800d758 <_printf_i+0x40>)
 800d754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d758:	0800d7b1 	.word	0x0800d7b1
 800d75c:	0800d7c5 	.word	0x0800d7c5
 800d760:	0800d741 	.word	0x0800d741
 800d764:	0800d741 	.word	0x0800d741
 800d768:	0800d741 	.word	0x0800d741
 800d76c:	0800d741 	.word	0x0800d741
 800d770:	0800d7c5 	.word	0x0800d7c5
 800d774:	0800d741 	.word	0x0800d741
 800d778:	0800d741 	.word	0x0800d741
 800d77c:	0800d741 	.word	0x0800d741
 800d780:	0800d741 	.word	0x0800d741
 800d784:	0800d8c5 	.word	0x0800d8c5
 800d788:	0800d7ef 	.word	0x0800d7ef
 800d78c:	0800d87f 	.word	0x0800d87f
 800d790:	0800d741 	.word	0x0800d741
 800d794:	0800d741 	.word	0x0800d741
 800d798:	0800d8e7 	.word	0x0800d8e7
 800d79c:	0800d741 	.word	0x0800d741
 800d7a0:	0800d7ef 	.word	0x0800d7ef
 800d7a4:	0800d741 	.word	0x0800d741
 800d7a8:	0800d741 	.word	0x0800d741
 800d7ac:	0800d887 	.word	0x0800d887
 800d7b0:	6833      	ldr	r3, [r6, #0]
 800d7b2:	1d1a      	adds	r2, r3, #4
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6032      	str	r2, [r6, #0]
 800d7b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e09d      	b.n	800d900 <_printf_i+0x1e8>
 800d7c4:	6833      	ldr	r3, [r6, #0]
 800d7c6:	6820      	ldr	r0, [r4, #0]
 800d7c8:	1d19      	adds	r1, r3, #4
 800d7ca:	6031      	str	r1, [r6, #0]
 800d7cc:	0606      	lsls	r6, r0, #24
 800d7ce:	d501      	bpl.n	800d7d4 <_printf_i+0xbc>
 800d7d0:	681d      	ldr	r5, [r3, #0]
 800d7d2:	e003      	b.n	800d7dc <_printf_i+0xc4>
 800d7d4:	0645      	lsls	r5, r0, #25
 800d7d6:	d5fb      	bpl.n	800d7d0 <_printf_i+0xb8>
 800d7d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7dc:	2d00      	cmp	r5, #0
 800d7de:	da03      	bge.n	800d7e8 <_printf_i+0xd0>
 800d7e0:	232d      	movs	r3, #45	@ 0x2d
 800d7e2:	426d      	negs	r5, r5
 800d7e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7e8:	4859      	ldr	r0, [pc, #356]	@ (800d950 <_printf_i+0x238>)
 800d7ea:	230a      	movs	r3, #10
 800d7ec:	e011      	b.n	800d812 <_printf_i+0xfa>
 800d7ee:	6821      	ldr	r1, [r4, #0]
 800d7f0:	6833      	ldr	r3, [r6, #0]
 800d7f2:	0608      	lsls	r0, r1, #24
 800d7f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7f8:	d402      	bmi.n	800d800 <_printf_i+0xe8>
 800d7fa:	0649      	lsls	r1, r1, #25
 800d7fc:	bf48      	it	mi
 800d7fe:	b2ad      	uxthmi	r5, r5
 800d800:	2f6f      	cmp	r7, #111	@ 0x6f
 800d802:	4853      	ldr	r0, [pc, #332]	@ (800d950 <_printf_i+0x238>)
 800d804:	6033      	str	r3, [r6, #0]
 800d806:	bf14      	ite	ne
 800d808:	230a      	movne	r3, #10
 800d80a:	2308      	moveq	r3, #8
 800d80c:	2100      	movs	r1, #0
 800d80e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d812:	6866      	ldr	r6, [r4, #4]
 800d814:	60a6      	str	r6, [r4, #8]
 800d816:	2e00      	cmp	r6, #0
 800d818:	bfa2      	ittt	ge
 800d81a:	6821      	ldrge	r1, [r4, #0]
 800d81c:	f021 0104 	bicge.w	r1, r1, #4
 800d820:	6021      	strge	r1, [r4, #0]
 800d822:	b90d      	cbnz	r5, 800d828 <_printf_i+0x110>
 800d824:	2e00      	cmp	r6, #0
 800d826:	d04b      	beq.n	800d8c0 <_printf_i+0x1a8>
 800d828:	4616      	mov	r6, r2
 800d82a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d82e:	fb03 5711 	mls	r7, r3, r1, r5
 800d832:	5dc7      	ldrb	r7, [r0, r7]
 800d834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d838:	462f      	mov	r7, r5
 800d83a:	42bb      	cmp	r3, r7
 800d83c:	460d      	mov	r5, r1
 800d83e:	d9f4      	bls.n	800d82a <_printf_i+0x112>
 800d840:	2b08      	cmp	r3, #8
 800d842:	d10b      	bne.n	800d85c <_printf_i+0x144>
 800d844:	6823      	ldr	r3, [r4, #0]
 800d846:	07df      	lsls	r7, r3, #31
 800d848:	d508      	bpl.n	800d85c <_printf_i+0x144>
 800d84a:	6923      	ldr	r3, [r4, #16]
 800d84c:	6861      	ldr	r1, [r4, #4]
 800d84e:	4299      	cmp	r1, r3
 800d850:	bfde      	ittt	le
 800d852:	2330      	movle	r3, #48	@ 0x30
 800d854:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d858:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d85c:	1b92      	subs	r2, r2, r6
 800d85e:	6122      	str	r2, [r4, #16]
 800d860:	f8cd a000 	str.w	sl, [sp]
 800d864:	464b      	mov	r3, r9
 800d866:	aa03      	add	r2, sp, #12
 800d868:	4621      	mov	r1, r4
 800d86a:	4640      	mov	r0, r8
 800d86c:	f7ff fee6 	bl	800d63c <_printf_common>
 800d870:	3001      	adds	r0, #1
 800d872:	d14a      	bne.n	800d90a <_printf_i+0x1f2>
 800d874:	f04f 30ff 	mov.w	r0, #4294967295
 800d878:	b004      	add	sp, #16
 800d87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d87e:	6823      	ldr	r3, [r4, #0]
 800d880:	f043 0320 	orr.w	r3, r3, #32
 800d884:	6023      	str	r3, [r4, #0]
 800d886:	4833      	ldr	r0, [pc, #204]	@ (800d954 <_printf_i+0x23c>)
 800d888:	2778      	movs	r7, #120	@ 0x78
 800d88a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	6831      	ldr	r1, [r6, #0]
 800d892:	061f      	lsls	r7, r3, #24
 800d894:	f851 5b04 	ldr.w	r5, [r1], #4
 800d898:	d402      	bmi.n	800d8a0 <_printf_i+0x188>
 800d89a:	065f      	lsls	r7, r3, #25
 800d89c:	bf48      	it	mi
 800d89e:	b2ad      	uxthmi	r5, r5
 800d8a0:	6031      	str	r1, [r6, #0]
 800d8a2:	07d9      	lsls	r1, r3, #31
 800d8a4:	bf44      	itt	mi
 800d8a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d8aa:	6023      	strmi	r3, [r4, #0]
 800d8ac:	b11d      	cbz	r5, 800d8b6 <_printf_i+0x19e>
 800d8ae:	2310      	movs	r3, #16
 800d8b0:	e7ac      	b.n	800d80c <_printf_i+0xf4>
 800d8b2:	4827      	ldr	r0, [pc, #156]	@ (800d950 <_printf_i+0x238>)
 800d8b4:	e7e9      	b.n	800d88a <_printf_i+0x172>
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	f023 0320 	bic.w	r3, r3, #32
 800d8bc:	6023      	str	r3, [r4, #0]
 800d8be:	e7f6      	b.n	800d8ae <_printf_i+0x196>
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	e7bd      	b.n	800d840 <_printf_i+0x128>
 800d8c4:	6833      	ldr	r3, [r6, #0]
 800d8c6:	6825      	ldr	r5, [r4, #0]
 800d8c8:	6961      	ldr	r1, [r4, #20]
 800d8ca:	1d18      	adds	r0, r3, #4
 800d8cc:	6030      	str	r0, [r6, #0]
 800d8ce:	062e      	lsls	r6, r5, #24
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	d501      	bpl.n	800d8d8 <_printf_i+0x1c0>
 800d8d4:	6019      	str	r1, [r3, #0]
 800d8d6:	e002      	b.n	800d8de <_printf_i+0x1c6>
 800d8d8:	0668      	lsls	r0, r5, #25
 800d8da:	d5fb      	bpl.n	800d8d4 <_printf_i+0x1bc>
 800d8dc:	8019      	strh	r1, [r3, #0]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	6123      	str	r3, [r4, #16]
 800d8e2:	4616      	mov	r6, r2
 800d8e4:	e7bc      	b.n	800d860 <_printf_i+0x148>
 800d8e6:	6833      	ldr	r3, [r6, #0]
 800d8e8:	1d1a      	adds	r2, r3, #4
 800d8ea:	6032      	str	r2, [r6, #0]
 800d8ec:	681e      	ldr	r6, [r3, #0]
 800d8ee:	6862      	ldr	r2, [r4, #4]
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	f7f2 fcfc 	bl	80002f0 <memchr>
 800d8f8:	b108      	cbz	r0, 800d8fe <_printf_i+0x1e6>
 800d8fa:	1b80      	subs	r0, r0, r6
 800d8fc:	6060      	str	r0, [r4, #4]
 800d8fe:	6863      	ldr	r3, [r4, #4]
 800d900:	6123      	str	r3, [r4, #16]
 800d902:	2300      	movs	r3, #0
 800d904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d908:	e7aa      	b.n	800d860 <_printf_i+0x148>
 800d90a:	6923      	ldr	r3, [r4, #16]
 800d90c:	4632      	mov	r2, r6
 800d90e:	4649      	mov	r1, r9
 800d910:	4640      	mov	r0, r8
 800d912:	47d0      	blx	sl
 800d914:	3001      	adds	r0, #1
 800d916:	d0ad      	beq.n	800d874 <_printf_i+0x15c>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	079b      	lsls	r3, r3, #30
 800d91c:	d413      	bmi.n	800d946 <_printf_i+0x22e>
 800d91e:	68e0      	ldr	r0, [r4, #12]
 800d920:	9b03      	ldr	r3, [sp, #12]
 800d922:	4298      	cmp	r0, r3
 800d924:	bfb8      	it	lt
 800d926:	4618      	movlt	r0, r3
 800d928:	e7a6      	b.n	800d878 <_printf_i+0x160>
 800d92a:	2301      	movs	r3, #1
 800d92c:	4632      	mov	r2, r6
 800d92e:	4649      	mov	r1, r9
 800d930:	4640      	mov	r0, r8
 800d932:	47d0      	blx	sl
 800d934:	3001      	adds	r0, #1
 800d936:	d09d      	beq.n	800d874 <_printf_i+0x15c>
 800d938:	3501      	adds	r5, #1
 800d93a:	68e3      	ldr	r3, [r4, #12]
 800d93c:	9903      	ldr	r1, [sp, #12]
 800d93e:	1a5b      	subs	r3, r3, r1
 800d940:	42ab      	cmp	r3, r5
 800d942:	dcf2      	bgt.n	800d92a <_printf_i+0x212>
 800d944:	e7eb      	b.n	800d91e <_printf_i+0x206>
 800d946:	2500      	movs	r5, #0
 800d948:	f104 0619 	add.w	r6, r4, #25
 800d94c:	e7f5      	b.n	800d93a <_printf_i+0x222>
 800d94e:	bf00      	nop
 800d950:	0800de91 	.word	0x0800de91
 800d954:	0800dea2 	.word	0x0800dea2

0800d958 <__sflush_r>:
 800d958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d960:	0716      	lsls	r6, r2, #28
 800d962:	4605      	mov	r5, r0
 800d964:	460c      	mov	r4, r1
 800d966:	d454      	bmi.n	800da12 <__sflush_r+0xba>
 800d968:	684b      	ldr	r3, [r1, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	dc02      	bgt.n	800d974 <__sflush_r+0x1c>
 800d96e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d970:	2b00      	cmp	r3, #0
 800d972:	dd48      	ble.n	800da06 <__sflush_r+0xae>
 800d974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d976:	2e00      	cmp	r6, #0
 800d978:	d045      	beq.n	800da06 <__sflush_r+0xae>
 800d97a:	2300      	movs	r3, #0
 800d97c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d980:	682f      	ldr	r7, [r5, #0]
 800d982:	6a21      	ldr	r1, [r4, #32]
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	d030      	beq.n	800d9ea <__sflush_r+0x92>
 800d988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d98a:	89a3      	ldrh	r3, [r4, #12]
 800d98c:	0759      	lsls	r1, r3, #29
 800d98e:	d505      	bpl.n	800d99c <__sflush_r+0x44>
 800d990:	6863      	ldr	r3, [r4, #4]
 800d992:	1ad2      	subs	r2, r2, r3
 800d994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d996:	b10b      	cbz	r3, 800d99c <__sflush_r+0x44>
 800d998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d99a:	1ad2      	subs	r2, r2, r3
 800d99c:	2300      	movs	r3, #0
 800d99e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9a0:	6a21      	ldr	r1, [r4, #32]
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	47b0      	blx	r6
 800d9a6:	1c43      	adds	r3, r0, #1
 800d9a8:	89a3      	ldrh	r3, [r4, #12]
 800d9aa:	d106      	bne.n	800d9ba <__sflush_r+0x62>
 800d9ac:	6829      	ldr	r1, [r5, #0]
 800d9ae:	291d      	cmp	r1, #29
 800d9b0:	d82b      	bhi.n	800da0a <__sflush_r+0xb2>
 800d9b2:	4a2a      	ldr	r2, [pc, #168]	@ (800da5c <__sflush_r+0x104>)
 800d9b4:	410a      	asrs	r2, r1
 800d9b6:	07d6      	lsls	r6, r2, #31
 800d9b8:	d427      	bmi.n	800da0a <__sflush_r+0xb2>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	6062      	str	r2, [r4, #4]
 800d9be:	04d9      	lsls	r1, r3, #19
 800d9c0:	6922      	ldr	r2, [r4, #16]
 800d9c2:	6022      	str	r2, [r4, #0]
 800d9c4:	d504      	bpl.n	800d9d0 <__sflush_r+0x78>
 800d9c6:	1c42      	adds	r2, r0, #1
 800d9c8:	d101      	bne.n	800d9ce <__sflush_r+0x76>
 800d9ca:	682b      	ldr	r3, [r5, #0]
 800d9cc:	b903      	cbnz	r3, 800d9d0 <__sflush_r+0x78>
 800d9ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9d2:	602f      	str	r7, [r5, #0]
 800d9d4:	b1b9      	cbz	r1, 800da06 <__sflush_r+0xae>
 800d9d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9da:	4299      	cmp	r1, r3
 800d9dc:	d002      	beq.n	800d9e4 <__sflush_r+0x8c>
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f7ff fbf2 	bl	800d1c8 <_free_r>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9e8:	e00d      	b.n	800da06 <__sflush_r+0xae>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	47b0      	blx	r6
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	1c50      	adds	r0, r2, #1
 800d9f4:	d1c9      	bne.n	800d98a <__sflush_r+0x32>
 800d9f6:	682b      	ldr	r3, [r5, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d0c6      	beq.n	800d98a <__sflush_r+0x32>
 800d9fc:	2b1d      	cmp	r3, #29
 800d9fe:	d001      	beq.n	800da04 <__sflush_r+0xac>
 800da00:	2b16      	cmp	r3, #22
 800da02:	d11e      	bne.n	800da42 <__sflush_r+0xea>
 800da04:	602f      	str	r7, [r5, #0]
 800da06:	2000      	movs	r0, #0
 800da08:	e022      	b.n	800da50 <__sflush_r+0xf8>
 800da0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da0e:	b21b      	sxth	r3, r3
 800da10:	e01b      	b.n	800da4a <__sflush_r+0xf2>
 800da12:	690f      	ldr	r7, [r1, #16]
 800da14:	2f00      	cmp	r7, #0
 800da16:	d0f6      	beq.n	800da06 <__sflush_r+0xae>
 800da18:	0793      	lsls	r3, r2, #30
 800da1a:	680e      	ldr	r6, [r1, #0]
 800da1c:	bf08      	it	eq
 800da1e:	694b      	ldreq	r3, [r1, #20]
 800da20:	600f      	str	r7, [r1, #0]
 800da22:	bf18      	it	ne
 800da24:	2300      	movne	r3, #0
 800da26:	eba6 0807 	sub.w	r8, r6, r7
 800da2a:	608b      	str	r3, [r1, #8]
 800da2c:	f1b8 0f00 	cmp.w	r8, #0
 800da30:	dde9      	ble.n	800da06 <__sflush_r+0xae>
 800da32:	6a21      	ldr	r1, [r4, #32]
 800da34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da36:	4643      	mov	r3, r8
 800da38:	463a      	mov	r2, r7
 800da3a:	4628      	mov	r0, r5
 800da3c:	47b0      	blx	r6
 800da3e:	2800      	cmp	r0, #0
 800da40:	dc08      	bgt.n	800da54 <__sflush_r+0xfc>
 800da42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da4a:	81a3      	strh	r3, [r4, #12]
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295
 800da50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da54:	4407      	add	r7, r0
 800da56:	eba8 0800 	sub.w	r8, r8, r0
 800da5a:	e7e7      	b.n	800da2c <__sflush_r+0xd4>
 800da5c:	dfbffffe 	.word	0xdfbffffe

0800da60 <_fflush_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	690b      	ldr	r3, [r1, #16]
 800da64:	4605      	mov	r5, r0
 800da66:	460c      	mov	r4, r1
 800da68:	b913      	cbnz	r3, 800da70 <_fflush_r+0x10>
 800da6a:	2500      	movs	r5, #0
 800da6c:	4628      	mov	r0, r5
 800da6e:	bd38      	pop	{r3, r4, r5, pc}
 800da70:	b118      	cbz	r0, 800da7a <_fflush_r+0x1a>
 800da72:	6a03      	ldr	r3, [r0, #32]
 800da74:	b90b      	cbnz	r3, 800da7a <_fflush_r+0x1a>
 800da76:	f7ff fa97 	bl	800cfa8 <__sinit>
 800da7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d0f3      	beq.n	800da6a <_fflush_r+0xa>
 800da82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da84:	07d0      	lsls	r0, r2, #31
 800da86:	d404      	bmi.n	800da92 <_fflush_r+0x32>
 800da88:	0599      	lsls	r1, r3, #22
 800da8a:	d402      	bmi.n	800da92 <_fflush_r+0x32>
 800da8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da8e:	f7ff fb98 	bl	800d1c2 <__retarget_lock_acquire_recursive>
 800da92:	4628      	mov	r0, r5
 800da94:	4621      	mov	r1, r4
 800da96:	f7ff ff5f 	bl	800d958 <__sflush_r>
 800da9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da9c:	07da      	lsls	r2, r3, #31
 800da9e:	4605      	mov	r5, r0
 800daa0:	d4e4      	bmi.n	800da6c <_fflush_r+0xc>
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	059b      	lsls	r3, r3, #22
 800daa6:	d4e1      	bmi.n	800da6c <_fflush_r+0xc>
 800daa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daaa:	f7ff fb8b 	bl	800d1c4 <__retarget_lock_release_recursive>
 800daae:	e7dd      	b.n	800da6c <_fflush_r+0xc>

0800dab0 <_putc_r>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	460d      	mov	r5, r1
 800dab4:	4614      	mov	r4, r2
 800dab6:	4606      	mov	r6, r0
 800dab8:	b118      	cbz	r0, 800dac2 <_putc_r+0x12>
 800daba:	6a03      	ldr	r3, [r0, #32]
 800dabc:	b90b      	cbnz	r3, 800dac2 <_putc_r+0x12>
 800dabe:	f7ff fa73 	bl	800cfa8 <__sinit>
 800dac2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dac4:	07d8      	lsls	r0, r3, #31
 800dac6:	d405      	bmi.n	800dad4 <_putc_r+0x24>
 800dac8:	89a3      	ldrh	r3, [r4, #12]
 800daca:	0599      	lsls	r1, r3, #22
 800dacc:	d402      	bmi.n	800dad4 <_putc_r+0x24>
 800dace:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dad0:	f7ff fb77 	bl	800d1c2 <__retarget_lock_acquire_recursive>
 800dad4:	68a3      	ldr	r3, [r4, #8]
 800dad6:	3b01      	subs	r3, #1
 800dad8:	2b00      	cmp	r3, #0
 800dada:	60a3      	str	r3, [r4, #8]
 800dadc:	da05      	bge.n	800daea <_putc_r+0x3a>
 800dade:	69a2      	ldr	r2, [r4, #24]
 800dae0:	4293      	cmp	r3, r2
 800dae2:	db12      	blt.n	800db0a <_putc_r+0x5a>
 800dae4:	b2eb      	uxtb	r3, r5
 800dae6:	2b0a      	cmp	r3, #10
 800dae8:	d00f      	beq.n	800db0a <_putc_r+0x5a>
 800daea:	6823      	ldr	r3, [r4, #0]
 800daec:	1c5a      	adds	r2, r3, #1
 800daee:	6022      	str	r2, [r4, #0]
 800daf0:	701d      	strb	r5, [r3, #0]
 800daf2:	b2ed      	uxtb	r5, r5
 800daf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800daf6:	07da      	lsls	r2, r3, #31
 800daf8:	d405      	bmi.n	800db06 <_putc_r+0x56>
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	059b      	lsls	r3, r3, #22
 800dafe:	d402      	bmi.n	800db06 <_putc_r+0x56>
 800db00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db02:	f7ff fb5f 	bl	800d1c4 <__retarget_lock_release_recursive>
 800db06:	4628      	mov	r0, r5
 800db08:	bd70      	pop	{r4, r5, r6, pc}
 800db0a:	4629      	mov	r1, r5
 800db0c:	4622      	mov	r2, r4
 800db0e:	4630      	mov	r0, r6
 800db10:	f000 f802 	bl	800db18 <__swbuf_r>
 800db14:	4605      	mov	r5, r0
 800db16:	e7ed      	b.n	800daf4 <_putc_r+0x44>

0800db18 <__swbuf_r>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	460e      	mov	r6, r1
 800db1c:	4614      	mov	r4, r2
 800db1e:	4605      	mov	r5, r0
 800db20:	b118      	cbz	r0, 800db2a <__swbuf_r+0x12>
 800db22:	6a03      	ldr	r3, [r0, #32]
 800db24:	b90b      	cbnz	r3, 800db2a <__swbuf_r+0x12>
 800db26:	f7ff fa3f 	bl	800cfa8 <__sinit>
 800db2a:	69a3      	ldr	r3, [r4, #24]
 800db2c:	60a3      	str	r3, [r4, #8]
 800db2e:	89a3      	ldrh	r3, [r4, #12]
 800db30:	071a      	lsls	r2, r3, #28
 800db32:	d501      	bpl.n	800db38 <__swbuf_r+0x20>
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	b943      	cbnz	r3, 800db4a <__swbuf_r+0x32>
 800db38:	4621      	mov	r1, r4
 800db3a:	4628      	mov	r0, r5
 800db3c:	f000 f82a 	bl	800db94 <__swsetup_r>
 800db40:	b118      	cbz	r0, 800db4a <__swbuf_r+0x32>
 800db42:	f04f 37ff 	mov.w	r7, #4294967295
 800db46:	4638      	mov	r0, r7
 800db48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	6922      	ldr	r2, [r4, #16]
 800db4e:	1a98      	subs	r0, r3, r2
 800db50:	6963      	ldr	r3, [r4, #20]
 800db52:	b2f6      	uxtb	r6, r6
 800db54:	4283      	cmp	r3, r0
 800db56:	4637      	mov	r7, r6
 800db58:	dc05      	bgt.n	800db66 <__swbuf_r+0x4e>
 800db5a:	4621      	mov	r1, r4
 800db5c:	4628      	mov	r0, r5
 800db5e:	f7ff ff7f 	bl	800da60 <_fflush_r>
 800db62:	2800      	cmp	r0, #0
 800db64:	d1ed      	bne.n	800db42 <__swbuf_r+0x2a>
 800db66:	68a3      	ldr	r3, [r4, #8]
 800db68:	3b01      	subs	r3, #1
 800db6a:	60a3      	str	r3, [r4, #8]
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	6022      	str	r2, [r4, #0]
 800db72:	701e      	strb	r6, [r3, #0]
 800db74:	6962      	ldr	r2, [r4, #20]
 800db76:	1c43      	adds	r3, r0, #1
 800db78:	429a      	cmp	r2, r3
 800db7a:	d004      	beq.n	800db86 <__swbuf_r+0x6e>
 800db7c:	89a3      	ldrh	r3, [r4, #12]
 800db7e:	07db      	lsls	r3, r3, #31
 800db80:	d5e1      	bpl.n	800db46 <__swbuf_r+0x2e>
 800db82:	2e0a      	cmp	r6, #10
 800db84:	d1df      	bne.n	800db46 <__swbuf_r+0x2e>
 800db86:	4621      	mov	r1, r4
 800db88:	4628      	mov	r0, r5
 800db8a:	f7ff ff69 	bl	800da60 <_fflush_r>
 800db8e:	2800      	cmp	r0, #0
 800db90:	d0d9      	beq.n	800db46 <__swbuf_r+0x2e>
 800db92:	e7d6      	b.n	800db42 <__swbuf_r+0x2a>

0800db94 <__swsetup_r>:
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	4b29      	ldr	r3, [pc, #164]	@ (800dc3c <__swsetup_r+0xa8>)
 800db98:	4605      	mov	r5, r0
 800db9a:	6818      	ldr	r0, [r3, #0]
 800db9c:	460c      	mov	r4, r1
 800db9e:	b118      	cbz	r0, 800dba8 <__swsetup_r+0x14>
 800dba0:	6a03      	ldr	r3, [r0, #32]
 800dba2:	b90b      	cbnz	r3, 800dba8 <__swsetup_r+0x14>
 800dba4:	f7ff fa00 	bl	800cfa8 <__sinit>
 800dba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbac:	0719      	lsls	r1, r3, #28
 800dbae:	d422      	bmi.n	800dbf6 <__swsetup_r+0x62>
 800dbb0:	06da      	lsls	r2, r3, #27
 800dbb2:	d407      	bmi.n	800dbc4 <__swsetup_r+0x30>
 800dbb4:	2209      	movs	r2, #9
 800dbb6:	602a      	str	r2, [r5, #0]
 800dbb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbbc:	81a3      	strh	r3, [r4, #12]
 800dbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc2:	e033      	b.n	800dc2c <__swsetup_r+0x98>
 800dbc4:	0758      	lsls	r0, r3, #29
 800dbc6:	d512      	bpl.n	800dbee <__swsetup_r+0x5a>
 800dbc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbca:	b141      	cbz	r1, 800dbde <__swsetup_r+0x4a>
 800dbcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbd0:	4299      	cmp	r1, r3
 800dbd2:	d002      	beq.n	800dbda <__swsetup_r+0x46>
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	f7ff faf7 	bl	800d1c8 <_free_r>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbe4:	81a3      	strh	r3, [r4, #12]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	6063      	str	r3, [r4, #4]
 800dbea:	6923      	ldr	r3, [r4, #16]
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f043 0308 	orr.w	r3, r3, #8
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	6923      	ldr	r3, [r4, #16]
 800dbf8:	b94b      	cbnz	r3, 800dc0e <__swsetup_r+0x7a>
 800dbfa:	89a3      	ldrh	r3, [r4, #12]
 800dbfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc04:	d003      	beq.n	800dc0e <__swsetup_r+0x7a>
 800dc06:	4621      	mov	r1, r4
 800dc08:	4628      	mov	r0, r5
 800dc0a:	f000 f84f 	bl	800dcac <__smakebuf_r>
 800dc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc12:	f013 0201 	ands.w	r2, r3, #1
 800dc16:	d00a      	beq.n	800dc2e <__swsetup_r+0x9a>
 800dc18:	2200      	movs	r2, #0
 800dc1a:	60a2      	str	r2, [r4, #8]
 800dc1c:	6962      	ldr	r2, [r4, #20]
 800dc1e:	4252      	negs	r2, r2
 800dc20:	61a2      	str	r2, [r4, #24]
 800dc22:	6922      	ldr	r2, [r4, #16]
 800dc24:	b942      	cbnz	r2, 800dc38 <__swsetup_r+0xa4>
 800dc26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc2a:	d1c5      	bne.n	800dbb8 <__swsetup_r+0x24>
 800dc2c:	bd38      	pop	{r3, r4, r5, pc}
 800dc2e:	0799      	lsls	r1, r3, #30
 800dc30:	bf58      	it	pl
 800dc32:	6962      	ldrpl	r2, [r4, #20]
 800dc34:	60a2      	str	r2, [r4, #8]
 800dc36:	e7f4      	b.n	800dc22 <__swsetup_r+0x8e>
 800dc38:	2000      	movs	r0, #0
 800dc3a:	e7f7      	b.n	800dc2c <__swsetup_r+0x98>
 800dc3c:	24000110 	.word	0x24000110

0800dc40 <_sbrk_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4d06      	ldr	r5, [pc, #24]	@ (800dc5c <_sbrk_r+0x1c>)
 800dc44:	2300      	movs	r3, #0
 800dc46:	4604      	mov	r4, r0
 800dc48:	4608      	mov	r0, r1
 800dc4a:	602b      	str	r3, [r5, #0]
 800dc4c:	f7f3 fd0c 	bl	8001668 <_sbrk>
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	d102      	bne.n	800dc5a <_sbrk_r+0x1a>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	b103      	cbz	r3, 800dc5a <_sbrk_r+0x1a>
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
 800dc5c:	24002118 	.word	0x24002118

0800dc60 <__swhatbuf_r>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	460c      	mov	r4, r1
 800dc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc68:	2900      	cmp	r1, #0
 800dc6a:	b096      	sub	sp, #88	@ 0x58
 800dc6c:	4615      	mov	r5, r2
 800dc6e:	461e      	mov	r6, r3
 800dc70:	da0d      	bge.n	800dc8e <__swhatbuf_r+0x2e>
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc78:	f04f 0100 	mov.w	r1, #0
 800dc7c:	bf14      	ite	ne
 800dc7e:	2340      	movne	r3, #64	@ 0x40
 800dc80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc84:	2000      	movs	r0, #0
 800dc86:	6031      	str	r1, [r6, #0]
 800dc88:	602b      	str	r3, [r5, #0]
 800dc8a:	b016      	add	sp, #88	@ 0x58
 800dc8c:	bd70      	pop	{r4, r5, r6, pc}
 800dc8e:	466a      	mov	r2, sp
 800dc90:	f000 f848 	bl	800dd24 <_fstat_r>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	dbec      	blt.n	800dc72 <__swhatbuf_r+0x12>
 800dc98:	9901      	ldr	r1, [sp, #4]
 800dc9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dca2:	4259      	negs	r1, r3
 800dca4:	4159      	adcs	r1, r3
 800dca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcaa:	e7eb      	b.n	800dc84 <__swhatbuf_r+0x24>

0800dcac <__smakebuf_r>:
 800dcac:	898b      	ldrh	r3, [r1, #12]
 800dcae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcb0:	079d      	lsls	r5, r3, #30
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	d507      	bpl.n	800dcc8 <__smakebuf_r+0x1c>
 800dcb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	6163      	str	r3, [r4, #20]
 800dcc4:	b003      	add	sp, #12
 800dcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcc8:	ab01      	add	r3, sp, #4
 800dcca:	466a      	mov	r2, sp
 800dccc:	f7ff ffc8 	bl	800dc60 <__swhatbuf_r>
 800dcd0:	9f00      	ldr	r7, [sp, #0]
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f7ff fae2 	bl	800d2a0 <_malloc_r>
 800dcdc:	b948      	cbnz	r0, 800dcf2 <__smakebuf_r+0x46>
 800dcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce2:	059a      	lsls	r2, r3, #22
 800dce4:	d4ee      	bmi.n	800dcc4 <__smakebuf_r+0x18>
 800dce6:	f023 0303 	bic.w	r3, r3, #3
 800dcea:	f043 0302 	orr.w	r3, r3, #2
 800dcee:	81a3      	strh	r3, [r4, #12]
 800dcf0:	e7e2      	b.n	800dcb8 <__smakebuf_r+0xc>
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	6020      	str	r0, [r4, #0]
 800dcf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcfa:	81a3      	strh	r3, [r4, #12]
 800dcfc:	9b01      	ldr	r3, [sp, #4]
 800dcfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd02:	b15b      	cbz	r3, 800dd1c <__smakebuf_r+0x70>
 800dd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f000 f81d 	bl	800dd48 <_isatty_r>
 800dd0e:	b128      	cbz	r0, 800dd1c <__smakebuf_r+0x70>
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	f023 0303 	bic.w	r3, r3, #3
 800dd16:	f043 0301 	orr.w	r3, r3, #1
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	431d      	orrs	r5, r3
 800dd20:	81a5      	strh	r5, [r4, #12]
 800dd22:	e7cf      	b.n	800dcc4 <__smakebuf_r+0x18>

0800dd24 <_fstat_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	@ (800dd44 <_fstat_r+0x20>)
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4608      	mov	r0, r1
 800dd2e:	4611      	mov	r1, r2
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	f7f3 fc70 	bl	8001616 <_fstat>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d102      	bne.n	800dd40 <_fstat_r+0x1c>
 800dd3a:	682b      	ldr	r3, [r5, #0]
 800dd3c:	b103      	cbz	r3, 800dd40 <_fstat_r+0x1c>
 800dd3e:	6023      	str	r3, [r4, #0]
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	bf00      	nop
 800dd44:	24002118 	.word	0x24002118

0800dd48 <_isatty_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d06      	ldr	r5, [pc, #24]	@ (800dd64 <_isatty_r+0x1c>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	602b      	str	r3, [r5, #0]
 800dd54:	f7f3 fc6f 	bl	8001636 <_isatty>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_isatty_r+0x1a>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_isatty_r+0x1a>
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	24002118 	.word	0x24002118

0800dd68 <_init>:
 800dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6a:	bf00      	nop
 800dd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6e:	bc08      	pop	{r3}
 800dd70:	469e      	mov	lr, r3
 800dd72:	4770      	bx	lr

0800dd74 <_fini>:
 800dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd76:	bf00      	nop
 800dd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7a:	bc08      	pop	{r3}
 800dd7c:	469e      	mov	lr, r3
 800dd7e:	4770      	bx	lr
