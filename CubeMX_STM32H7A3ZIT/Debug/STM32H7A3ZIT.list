
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2b0  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800c560  0800c560  0000d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c64c  0800c64c  0000d64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c654  0800c654  0000d654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c658  0800c658  0000d658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800c65c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f7c  24000160  0800c7bc  0000e160  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240020dc  0800c7bc  0000f0dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY
 10 .debug_info   000208b7  00000000  00000000  0000e18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f1c  00000000  00000000  0002ea45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001870  00000000  00000000  00033968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001268  00000000  00000000  000351d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035a55  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000250af  00000000  00000000  0006be95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b436  00000000  00000000  00090f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc37a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006bb8  00000000  00000000  001cc3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001d2f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c548 	.word	0x0800c548

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800c548 	.word	0x0800c548

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	@ 0x40
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8000396:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
 80003c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003c4:	4b48      	ldr	r3, [pc, #288]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003c6:	4a49      	ldr	r2, [pc, #292]	@ (80004ec <MX_FMC_Init+0x15c>)
 80003c8:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003ca:	4b47      	ldr	r3, [pc, #284]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003d0:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003d2:	4b45      	ldr	r3, [pc, #276]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003d8:	4b43      	ldr	r3, [pc, #268]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 80003de:	4b42      	ldr	r3, [pc, #264]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003e4:	4b40      	ldr	r3, [pc, #256]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 80003ea:	4b3f      	ldr	r3, [pc, #252]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 80003f0:	4b3d      	ldr	r3, [pc, #244]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 80003f6:	4b3c      	ldr	r3, [pc, #240]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003f8:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 80003fe:	4b3a      	ldr	r3, [pc, #232]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000400:	2240      	movs	r2, #64	@ 0x40
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 8000404:	4b38      	ldr	r3, [pc, #224]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000406:	2240      	movs	r2, #64	@ 0x40
 8000408:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 800040a:	4b37      	ldr	r3, [pc, #220]	@ (80004e8 <MX_FMC_Init+0x158>)
 800040c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000410:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 0;
 8000412:	4b35      	ldr	r3, [pc, #212]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000418:	4b33      	ldr	r3, [pc, #204]	@ (80004e8 <MX_FMC_Init+0x158>)
 800041a:	2200      	movs	r2, #0
 800041c:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 800041e:	4b32      	ldr	r3, [pc, #200]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000420:	2201      	movs	r2, #1
 8000422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000426:	23fc      	movs	r3, #252	@ 0xfc
 8000428:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 800042a:	23fc      	movs	r3, #252	@ 0xfc
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 800042e:	23fc      	movs	r3, #252	@ 0xfc
 8000430:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 8000432:	23fc      	movs	r3, #252	@ 0xfc
 8000434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000436:	23fc      	movs	r3, #252	@ 0xfc
 8000438:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 800043a:	23fc      	movs	r3, #252	@ 0xfc
 800043c:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000446:	f107 0220 	add.w	r2, r7, #32
 800044a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800044e:	4619      	mov	r1, r3
 8000450:	4825      	ldr	r0, [pc, #148]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000452:	f001 ff15 	bl	8002280 <HAL_NAND_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 800045c:	f000 fddc 	bl	8001018 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000460:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000462:	4a24      	ldr	r2, [pc, #144]	@ (80004f4 <MX_FMC_Init+0x164>)
 8000464:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800046c:	4b20      	ldr	r3, [pc, #128]	@ (80004f0 <MX_FMC_Init+0x160>)
 800046e:	2201      	movs	r2, #1
 8000470:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000472:	4b1f      	ldr	r3, [pc, #124]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000474:	2204      	movs	r2, #4
 8000476:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000478:	4b1d      	ldr	r3, [pc, #116]	@ (80004f0 <MX_FMC_Init+0x160>)
 800047a:	2210      	movs	r2, #16
 800047c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800047e:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000480:	2240      	movs	r2, #64	@ 0x40
 8000482:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000484:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000486:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800048a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <MX_FMC_Init+0x160>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000498:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_FMC_Init+0x160>)
 800049c:	2200      	movs	r2, #0
 800049e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004a0:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004a6:	2302      	movs	r3, #2
 80004a8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004aa:	2309      	movs	r3, #9
 80004ac:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004ae:	2306      	movs	r3, #6
 80004b0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004b2:	2309      	movs	r3, #9
 80004b4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004b6:	2303      	movs	r3, #3
 80004b8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004ba:	2303      	movs	r3, #3
 80004bc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004be:	2303      	movs	r3, #3
 80004c0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	480a      	ldr	r0, [pc, #40]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004c8:	f006 fdc0 	bl	800704c <HAL_SDRAM_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80004d2:	f000 fda1 	bl	8001018 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80004d6:	4908      	ldr	r1, [pc, #32]	@ (80004f8 <MX_FMC_Init+0x168>)
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004da:	f000 fda3 	bl	8001024 <SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 80004de:	bf00      	nop
 80004e0:	3740      	adds	r7, #64	@ 0x40
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2400018c 	.word	0x2400018c
 80004ec:	52004080 	.word	0x52004080
 80004f0:	240001cc 	.word	0x240001cc
 80004f4:	52004140 	.word	0x52004140
 80004f8:	2400017c 	.word	0x2400017c

080004fc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b0b8      	sub	sp, #224	@ 0xe0
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000512:	4b5c      	ldr	r3, [pc, #368]	@ (8000684 <HAL_FMC_MspInit+0x188>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	f040 80af 	bne.w	800067a <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 800051c:	4b59      	ldr	r3, [pc, #356]	@ (8000684 <HAL_FMC_MspInit+0x188>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	22c0      	movs	r2, #192	@ 0xc0
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f00b f9bf 	bl	800b8ae <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000534:	f04f 0300 	mov.w	r3, #0
 8000538:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800053c:	2300      	movs	r3, #0
 800053e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	4618      	mov	r0, r3
 8000546:	f004 f977 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000550:	f000 fd62 	bl	8001018 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000554:	4b4c      	ldr	r3, [pc, #304]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 8000556:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800055a:	4a4b      	ldr	r2, [pc, #300]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 800055c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000560:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000564:	4b48      	ldr	r3, [pc, #288]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 8000566:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800056a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000572:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000576:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058c:	230c      	movs	r3, #12
 800058e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000592:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000596:	4619      	mov	r1, r3
 8000598:	483c      	ldr	r0, [pc, #240]	@ (800068c <HAL_FMC_MspInit+0x190>)
 800059a:	f001 fa29 	bl	80019f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800059e:	230d      	movs	r3, #13
 80005a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005b6:	230c      	movs	r3, #12
 80005b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005c0:	4619      	mov	r1, r3
 80005c2:	4833      	ldr	r0, [pc, #204]	@ (8000690 <HAL_FMC_MspInit+0x194>)
 80005c4:	f001 fa14 	bl	80019f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005c8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005e2:	230c      	movs	r3, #12
 80005e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005ec:	4619      	mov	r1, r3
 80005ee:	4829      	ldr	r0, [pc, #164]	@ (8000694 <HAL_FMC_MspInit+0x198>)
 80005f0:	f001 f9fe 	bl	80019f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005f4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80005f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800060e:	230c      	movs	r3, #12
 8000610:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000614:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000618:	4619      	mov	r1, r3
 800061a:	481f      	ldr	r0, [pc, #124]	@ (8000698 <HAL_FMC_MspInit+0x19c>)
 800061c:	f001 f9e8 	bl	80019f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000620:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 8000624:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800063a:	230c      	movs	r3, #12
 800063c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000640:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000644:	4619      	mov	r1, r3
 8000646:	4815      	ldr	r0, [pc, #84]	@ (800069c <HAL_FMC_MspInit+0x1a0>)
 8000648:	f001 f9d2 	bl	80019f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800064c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000666:	2309      	movs	r3, #9
 8000668:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000670:	4619      	mov	r1, r3
 8000672:	4807      	ldr	r0, [pc, #28]	@ (8000690 <HAL_FMC_MspInit+0x194>)
 8000674:	f001 f9bc 	bl	80019f0 <HAL_GPIO_Init>
 8000678:	e000      	b.n	800067c <HAL_FMC_MspInit+0x180>
    return;
 800067a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800067c:	37e0      	adds	r7, #224	@ 0xe0
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000200 	.word	0x24000200
 8000688:	58024400 	.word	0x58024400
 800068c:	58021400 	.word	0x58021400
 8000690:	58020800 	.word	0x58020800
 8000694:	58021800 	.word	0x58021800
 8000698:	58021000 	.word	0x58021000
 800069c:	58020c00 	.word	0x58020c00

080006a0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80006a8:	f7ff ff28 	bl	80004fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006bc:	f7ff ff1e 	bl	80004fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	@ 0x30
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006de:	4b60      	ldr	r3, [pc, #384]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006e4:	4a5e      	ldr	r2, [pc, #376]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000702:	4a57      	ldr	r2, [pc, #348]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800070c:	4b54      	ldr	r3, [pc, #336]	@ (8000860 <MX_GPIO_Init+0x198>)
 800070e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	4b51      	ldr	r3, [pc, #324]	@ (8000860 <MX_GPIO_Init+0x198>)
 800071c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000720:	4a4f      	ldr	r2, [pc, #316]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800072a:	4b4d      	ldr	r3, [pc, #308]	@ (8000860 <MX_GPIO_Init+0x198>)
 800072c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000730:	f003 0320 	and.w	r3, r3, #32
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b49      	ldr	r3, [pc, #292]	@ (8000860 <MX_GPIO_Init+0x198>)
 800073a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800073e:	4a48      	ldr	r2, [pc, #288]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000748:	4b45      	ldr	r3, [pc, #276]	@ (8000860 <MX_GPIO_Init+0x198>)
 800074a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	4b42      	ldr	r3, [pc, #264]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000758:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800075c:	4a40      	ldr	r2, [pc, #256]	@ (8000860 <MX_GPIO_Init+0x198>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000762:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000766:	4b3e      	ldr	r3, [pc, #248]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000768:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800076c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b3a      	ldr	r3, [pc, #232]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000776:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800077a:	4a39      	ldr	r2, [pc, #228]	@ (8000860 <MX_GPIO_Init+0x198>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000786:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000794:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000798:	4a31      	ldr	r2, [pc, #196]	@ (8000860 <MX_GPIO_Init+0x198>)
 800079a:	f043 0308 	orr.w	r3, r3, #8
 800079e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <MX_GPIO_Init+0x198>)
 80007a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2150      	movs	r1, #80	@ 0x50
 80007b4:	482b      	ldr	r0, [pc, #172]	@ (8000864 <MX_GPIO_Init+0x19c>)
 80007b6:	f001 facb 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c0:	4829      	ldr	r0, [pc, #164]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 80007c2:	f001 fac5 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	21c0      	movs	r1, #192	@ 0xc0
 80007ca:	4828      	ldr	r0, [pc, #160]	@ (800086c <MX_GPIO_Init+0x1a4>)
 80007cc:	f001 fac0 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007d0:	232c      	movs	r3, #44	@ 0x2c
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4820      	ldr	r0, [pc, #128]	@ (8000864 <MX_GPIO_Init+0x19c>)
 80007e4:	f001 f904 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007e8:	2350      	movs	r3, #80	@ 0x50
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4819      	ldr	r0, [pc, #100]	@ (8000864 <MX_GPIO_Init+0x19c>)
 8000800:	f001 f8f6 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 800081e:	f001 f8e7 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000822:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 8000838:	f001 f8da 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083c:	23c0      	movs	r3, #192	@ 0xc0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <MX_GPIO_Init+0x1a4>)
 8000854:	f001 f8cc 	bl	80019f0 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3730      	adds	r7, #48	@ 0x30
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58024400 	.word	0x58024400
 8000864:	58021000 	.word	0x58021000
 8000868:	58020800 	.word	0x58020800
 800086c:	58021400 	.word	0x58021400

08000870 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	f001 fa84 	bl	8001db8 <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 fbaf 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008be:	f001 fb17 	bl	8001ef0 <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f000 fba6 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008d0:	f001 fb59 	bl	8001f86 <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 fb9d 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000204 	.word	0x24000204
 80008e8:	40005400 	.word	0x40005400
 80008ec:	20b0ccff 	.word	0x20b0ccff

080008f0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_I2C2_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <MX_I2C2_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_I2C2_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <MX_I2C2_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <MX_I2C2_Init+0x74>)
 800092c:	f001 fa44 	bl	8001db8 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fb6f 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <MX_I2C2_Init+0x74>)
 800093e:	f001 fad7 	bl	8001ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fb66 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000950:	f001 fb19 	bl	8001f86 <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fb5d 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	24000258 	.word	0x24000258
 8000968:	40005800 	.word	0x40005800
 800096c:	20b0ccff 	.word	0x20b0ccff

08000970 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0bc      	sub	sp, #240	@ 0xf0
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	22c0      	movs	r2, #192	@ 0xc0
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f00a ff8c 	bl	800b8ae <memset>
  if(i2cHandle->Instance==I2C1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a4d      	ldr	r2, [pc, #308]	@ (8000ad0 <HAL_I2C_MspInit+0x160>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d146      	bne.n	8000a2e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009a0:	f04f 0208 	mov.w	r2, #8
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 ff3e 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009c2:	f000 fb29 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b43      	ldr	r3, [pc, #268]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009cc:	4a41      	ldr	r2, [pc, #260]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009d6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e4:	23c0      	movs	r3, #192	@ 0xc0
 80009e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a06:	4619      	mov	r1, r3
 8000a08:	4833      	ldr	r0, [pc, #204]	@ (8000ad8 <HAL_I2C_MspInit+0x168>)
 8000a0a:	f000 fff1 	bl	80019f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a10:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a14:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a20:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a2c:	e04b      	b.n	8000ac6 <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2a      	ldr	r2, [pc, #168]	@ (8000adc <HAL_I2C_MspInit+0x16c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d146      	bne.n	8000ac6 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a38:	f04f 0208 	mov.w	r2, #8
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4a:	f107 0318 	add.w	r3, r7, #24
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fef2 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a5a:	f000 fadd 	bl	8001018 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a64:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a84:	2312      	movs	r3, #18
 8000a86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a96:	2304      	movs	r3, #4
 8000a98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <HAL_I2C_MspInit+0x168>)
 8000aa4:	f000 ffa4 	bl	80019f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000aaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000aae:	4a09      	ldr	r2, [pc, #36]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000ab0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000aba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
}
 8000ac6:	bf00      	nop
 8000ac8:	37f0      	adds	r7, #240	@ 0xf0
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	58020400 	.word	0x58020400
 8000adc:	40005800 	.word	0x40005800

08000ae0 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <MX_I2S1_Init+0x64>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000aec:	2206      	movs	r2, #6
 8000aee:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000af8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afc:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b04:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b08:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b2e:	f001 fa77 	bl	8002020 <HAL_I2S_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 fa6e 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	240002ac 	.word	0x240002ac
 8000b44:	40013000 	.word	0x40013000

08000b48 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <MX_I2S2_Init+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b6e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b72:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b94:	f001 fa44 	bl	8002020 <HAL_I2S_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000b9e:	f000 fa3b 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	24000300 	.word	0x24000300
 8000bac:	40003800 	.word	0x40003800

08000bb0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0be      	sub	sp, #248	@ 0xf8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	22c0      	movs	r2, #192	@ 0xc0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00a fe6c 	bl	800b8ae <memset>
  if(i2sHandle->Instance==SPI1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a71      	ldr	r2, [pc, #452]	@ (8000da0 <HAL_I2S_MspInit+0x1f0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d16b      	bne.n	8000cb8 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000be0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fe1e 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000c02:	f000 fa09 	bl	8001018 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	4b67      	ldr	r3, [pc, #412]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c08:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c0c:	4a65      	ldr	r2, [pc, #404]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c12:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c16:	4b63      	ldr	r3, [pc, #396]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c18:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b5f      	ldr	r3, [pc, #380]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c34:	4b5b      	ldr	r3, [pc, #364]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b58      	ldr	r3, [pc, #352]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c48:	4a56      	ldr	r2, [pc, #344]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c52:	4b54      	ldr	r3, [pc, #336]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c60:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4848      	ldr	r0, [pc, #288]	@ (8000da8 <HAL_I2S_MspInit+0x1f8>)
 8000c88:	f000 feb2 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	483e      	ldr	r0, [pc, #248]	@ (8000dac <HAL_I2S_MspInit+0x1fc>)
 8000cb2:	f000 fe9d 	bl	80019f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cb6:	e06f      	b.n	8000d98 <HAL_I2S_MspInit+0x1e8>
  else if(i2sHandle->Instance==SPI2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8000db0 <HAL_I2S_MspInit+0x200>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d16a      	bne.n	8000d98 <HAL_I2S_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fdad 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_I2S_MspInit+0x138>
      Error_Handler();
 8000ce4:	f000 f998 	bl	8001018 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cee:	4a2d      	ldr	r2, [pc, #180]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cfa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d0c:	4a25      	ldr	r2, [pc, #148]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d16:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d42:	2342      	movs	r3, #66	@ 0x42
 8000d44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4811      	ldr	r0, [pc, #68]	@ (8000dac <HAL_I2S_MspInit+0x1fc>)
 8000d68:	f000 fe42 	bl	80019f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d86:	2305      	movs	r3, #5
 8000d88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <HAL_I2S_MspInit+0x204>)
 8000d94:	f000 fe2c 	bl	80019f0 <HAL_GPIO_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	37f8      	adds	r7, #248	@ 0xf8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013000 	.word	0x40013000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020000 	.word	0x58020000
 8000dac:	58020800 	.word	0x58020800
 8000db0:	40003800 	.word	0x40003800
 8000db4:	58020400 	.word	0x58020400

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b08e      	sub	sp, #56	@ 0x38
 8000dbc:	af00      	add	r7, sp, #0
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dbe:	f000 f8ed 	bl	8000f9c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fbf7 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f871 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f7ff fc7d 	bl	80006c8 <MX_GPIO_Init>
  MX_FMC_Init();
 8000dce:	f7ff fadf 	bl	8000390 <MX_FMC_Init>
  MX_I2S1_Init();
 8000dd2:	f7ff fe85 	bl	8000ae0 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000dd6:	f7ff feb7 	bl	8000b48 <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000dda:	f000 f98f 	bl	80010fc <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000dde:	f7ff fd47 	bl	8000870 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000de2:	f7ff fd85 	bl	80008f0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000de6:	f009 fecf 	bl	800ab88 <MX_USB_DEVICE_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HardFault_Handler();
	  // Write to starting address
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dee:	482c      	ldr	r0, [pc, #176]	@ (8000ea0 <main+0xe8>)
 8000df0:	f000 ffc7 	bl	8001d82 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000df4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df8:	f000 fc6e 	bl	80016d8 <HAL_Delay>
	  //*(__IO uint32_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = 42;


	  //buffer = *(__IO uint16_t*) 0xC0000000;
	  for (volatile int i = 0; i < 4; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e00:	e00c      	b.n	8000e1c <main+0x64>
		  *(__IO uint16_t*) (0xC0000000 + 4*i) = 42 + 2*i;
 8000e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e04:	3315      	adds	r3, #21
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	f102 4240 	add.w	r2, r2, #3221225472	@ 0xc0000000
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	8013      	strh	r3, [r2, #0]
	  for (volatile int i = 0; i < 4; i++) {
 8000e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e18:	3301      	adds	r3, #1
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	ddef      	ble.n	8000e02 <main+0x4a>
	  }
	  for (volatile int i = 0; i < 4; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e26:	e036      	b.n	8000e96 <main+0xde>
	  	 buffer[i] = *(__IO uint32_t*) (0xC0000000 + 4*i);
 8000e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e34:	b292      	uxth	r2, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	3338      	adds	r3, #56	@ 0x38
 8000e3a:	443b      	add	r3, r7
 8000e3c:	f823 2c08 	strh.w	r2, [r3, #-8]
	  	 if (buffer[i] == 42 + 2*i) {
 8000e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	3338      	adds	r3, #56	@ 0x38
 8000e46:	443b      	add	r3, r7
 8000e48:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e52:	3315      	adds	r3, #21
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d10e      	bne.n	8000e78 <main+0xc0>
	  			   uint8_t str[] = "Memory Success\r\n";
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <main+0xec>)
 8000e5c:	f107 0414 	add.w	r4, r7, #20
 8000e60:	461d      	mov	r5, r3
 8000e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e66:	682b      	ldr	r3, [r5, #0]
 8000e68:	7023      	strb	r3, [r4, #0]
	  			   CDC_Transmit_HS(str, sizeof(str));
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2111      	movs	r1, #17
 8000e70:	4618      	mov	r0, r3
 8000e72:	f009 ff49 	bl	800ad08 <CDC_Transmit_HS>
 8000e76:	e00b      	b.n	8000e90 <main+0xd8>
	  		   } else {
	  			   uint8_t str[] = "Memory Failure\r\n";
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <main+0xf0>)
 8000e7a:	463c      	mov	r4, r7
 8000e7c:	461d      	mov	r5, r3
 8000e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	7023      	strb	r3, [r4, #0]
	  			   CDC_Transmit_HS(str, sizeof(str));
 8000e86:	463b      	mov	r3, r7
 8000e88:	2111      	movs	r1, #17
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f009 ff3c 	bl	800ad08 <CDC_Transmit_HS>
	  for (volatile int i = 0; i < 4; i++) {
 8000e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e92:	3301      	adds	r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	ddc5      	ble.n	8000e28 <main+0x70>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e9c:	e7a5      	b.n	8000dea <main+0x32>
 8000e9e:	bf00      	nop
 8000ea0:	58020800 	.word	0x58020800
 8000ea4:	0800c560 	.word	0x0800c560
 8000ea8:	0800c574 	.word	0x0800c574

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09c      	sub	sp, #112	@ 0x70
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb6:	224c      	movs	r2, #76	@ 0x4c
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f00a fcf7 	bl	800b8ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00a fcf1 	bl	800b8ae <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ecc:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <SystemClock_Config+0xe8>)
 8000ece:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f002 fcbc 	bl	8003854 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <SystemClock_Config+0xec>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f98 <SystemClock_Config+0xec>)
 8000ee6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <SystemClock_Config+0xec>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ef8:	bf00      	nop
 8000efa:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <SystemClock_Config+0xec>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f06:	d1f8      	bne.n	8000efa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f08:	2322      	movs	r3, #34	@ 0x22
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000f10:	2340      	movs	r3, #64	@ 0x40
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000f24:	2323      	movs	r3, #35	@ 0x23
 8000f26:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f34:	230c      	movs	r3, #12
 8000f36:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fccf 	bl	80038e8 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000f50:	f000 f862 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	233f      	movs	r3, #63	@ 0x3f
 8000f56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f68:	2340      	movs	r3, #64	@ 0x40
 8000f6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f72:	2340      	movs	r3, #64	@ 0x40
 8000f74:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2106      	movs	r1, #6
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f8e6 	bl	800414c <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000f86:	f000 f847 	bl	8001018 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3770      	adds	r7, #112	@ 0x70
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58024800 	.word	0x58024800

08000f9c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fae:	f000 fcc7 	bl	8001940 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fbe:	231f      	movs	r3, #31
 8000fc0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fc2:	2387      	movs	r3, #135	@ 0x87
 8000fc4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fcc5 	bl	8001970 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8000fea:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000fee:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ff0:	2317      	movs	r3, #23
 8000ff2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001008:	463b      	mov	r3, r7
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fcb0 	bl	8001970 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
 // HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <Error_Handler+0x8>

08001024 <SDRAM_Initialization_Sequence>:
 * 6 Min of 2 auto-refresh cycles
 *
 */
#include "sdram_init.h"

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	 __IO uint32_t tmpmrd =0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
	/* Step 2:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2210      	movs	r2, #16
 800103c:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800104a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f006 f837 	bl	80070c4 <HAL_SDRAM_SendCommand>

	  /* Step 3: Insert 200 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f000 fb3e 	bl	80016d8 <HAL_Delay>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2202      	movs	r2, #2
 8001060:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2210      	movs	r2, #16
 8001066:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2201      	movs	r2, #1
 800106c:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001078:	6839      	ldr	r1, [r7, #0]
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f006 f822 	bl	80070c4 <HAL_SDRAM_SendCommand>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2202      	movs	r2, #2
 8001084:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2210      	movs	r2, #16
 800108a:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2201      	movs	r2, #1
 8001090:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f006 f810 	bl	80070c4 <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80010a4:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80010a8:	60fb      	str	r3, [r7, #12]
	                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_3           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2204      	movs	r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2210      	movs	r2, #16
 80010b4:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f005 fffb 	bl	80070c4 <HAL_SDRAM_SendCommand>

	  /* Step 6 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2203      	movs	r2, #3
 80010d2:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2210      	movs	r2, #16
 80010d8:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 2;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2202      	movs	r2, #2
 80010de:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]

	  /* Send the command twice*/
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f005 ffe9 	bl	80070c4 <HAL_SDRAM_SendCommand>
	  //HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001102:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001106:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_SPDIFRX_Init+0x6c>)
 8001156:	f005 ffeb 	bl	8007130 <HAL_SPDIFRX_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 8001160:	f7ff ff5a 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24000354 	.word	0x24000354

0800116c <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ba      	sub	sp, #232	@ 0xe8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	22c0      	movs	r2, #192	@ 0xc0
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f00a fb8e 	bl	800b8ae <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800119a:	d141      	bne.n	8001220 <HAL_SPDIFRX_MspInit+0xb4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 800119c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fb41 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 80011bc:	f7ff ff2c 	bl	8001018 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_SPDIFRX_MspInit+0xbc>)
 80011c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011c6:	4a18      	ldr	r2, [pc, #96]	@ (8001228 <HAL_SPDIFRX_MspInit+0xbc>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011cc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_SPDIFRX_MspInit+0xbc>)
 80011d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_SPDIFRX_MspInit+0xbc>)
 80011e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011e4:	4a10      	ldr	r2, [pc, #64]	@ (8001228 <HAL_SPDIFRX_MspInit+0xbc>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_SPDIFRX_MspInit+0xbc>)
 80011f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001214:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001218:	4619      	mov	r1, r3
 800121a:	4804      	ldr	r0, [pc, #16]	@ (800122c <HAL_SPDIFRX_MspInit+0xc0>)
 800121c:	f000 fbe8 	bl	80019f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001220:	bf00      	nop
 8001222:	37e8      	adds	r7, #232	@ 0xe8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400
 800122c:	58020c00 	.word	0x58020c00

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_MspInit+0x30>)
 8001238:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800123c:	4a08      	ldr	r2, [pc, #32]	@ (8001260 <HAL_MspInit+0x30>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_MspInit+0x30>)
 8001248:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	58024400 	.word	0x58024400

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001276:	4807      	ldr	r0, [pc, #28]	@ (8001294 <HardFault_Handler+0x28>)
 8001278:	f000 fd83 	bl	8001d82 <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++) {
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	e002      	b.n	8001288 <HardFault_Handler+0x1c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3301      	adds	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a03      	ldr	r2, [pc, #12]	@ (8001298 <HardFault_Handler+0x2c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	ddf8      	ble.n	8001282 <HardFault_Handler+0x16>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001290:	e7ef      	b.n	8001272 <HardFault_Handler+0x6>
 8001292:	bf00      	nop
 8001294:	58020800 	.word	0x58020800
 8001298:	000f423f 	.word	0x000f423f

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <MemManage_Handler+0x4>

080012a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 f9d9 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80012f2:	f001 f950 	bl	8002596 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2400188c 	.word	0x2400188c

08001300 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001306:	f001 f946 	bl	8002596 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400188c 	.word	0x2400188c

08001314 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <OTG_HS_IRQHandler+0x10>)
 800131a:	f001 f93c 	bl	8002596 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2400188c 	.word	0x2400188c

08001328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e00a      	b.n	8001350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133a:	f3af 8000 	nop.w
 800133e:	4601      	mov	r1, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	b2ca      	uxtb	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf0      	blt.n	800133a <_read+0x12>
  }

  return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e009      	b.n	8001388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf1      	blt.n	8001374 <_write+0x12>
  }
  return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_close>:

int _close(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c2:	605a      	str	r2, [r3, #4]
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_isatty>:

int _isatty(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f00a fa8a 	bl	800b94c <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <_sbrk+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	24100000 	.word	0x24100000
 8001464:	00000400 	.word	0x00000400
 8001468:	240003a4 	.word	0x240003a4
 800146c:	240020e0 	.word	0x240020e0

08001470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001474:	4b32      	ldr	r3, [pc, #200]	@ (8001540 <SystemInit+0xd0>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147a:	4a31      	ldr	r2, [pc, #196]	@ (8001540 <SystemInit+0xd0>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001484:	4b2f      	ldr	r3, [pc, #188]	@ (8001544 <SystemInit+0xd4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	2b02      	cmp	r3, #2
 800148e:	d807      	bhi.n	80014a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001490:	4b2c      	ldr	r3, [pc, #176]	@ (8001544 <SystemInit+0xd4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 030f 	bic.w	r3, r3, #15
 8001498:	4a2a      	ldr	r2, [pc, #168]	@ (8001544 <SystemInit+0xd4>)
 800149a:	f043 0303 	orr.w	r3, r3, #3
 800149e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014a0:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <SystemInit+0xd8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a28      	ldr	r2, [pc, #160]	@ (8001548 <SystemInit+0xd8>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014ac:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <SystemInit+0xd8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014b2:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <SystemInit+0xd8>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4924      	ldr	r1, [pc, #144]	@ (8001548 <SystemInit+0xd8>)
 80014b8:	4b24      	ldr	r3, [pc, #144]	@ (800154c <SystemInit+0xdc>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <SystemInit+0xd4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <SystemInit+0xd4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 030f 	bic.w	r3, r3, #15
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <SystemInit+0xd4>)
 80014d4:	f043 0303 	orr.w	r3, r3, #3
 80014d8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80014da:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <SystemInit+0xd8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80014e0:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <SystemInit+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <SystemInit+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <SystemInit+0xd8>)
 80014ee:	4a18      	ldr	r2, [pc, #96]	@ (8001550 <SystemInit+0xe0>)
 80014f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <SystemInit+0xd8>)
 80014f4:	4a17      	ldr	r2, [pc, #92]	@ (8001554 <SystemInit+0xe4>)
 80014f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <SystemInit+0xd8>)
 80014fa:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <SystemInit+0xe8>)
 80014fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014fe:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <SystemInit+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001504:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <SystemInit+0xd8>)
 8001506:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <SystemInit+0xe8>)
 8001508:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <SystemInit+0xd8>)
 800150c:	2200      	movs	r2, #0
 800150e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <SystemInit+0xd8>)
 8001512:	4a11      	ldr	r2, [pc, #68]	@ (8001558 <SystemInit+0xe8>)
 8001514:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <SystemInit+0xd8>)
 8001518:	2200      	movs	r2, #0
 800151a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <SystemInit+0xd8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <SystemInit+0xd8>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001526:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <SystemInit+0xd8>)
 800152a:	2200      	movs	r2, #0
 800152c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <SystemInit+0xec>)
 8001530:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001534:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	52002000 	.word	0x52002000
 8001548:	58024400 	.word	0x58024400
 800154c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001550:	02020200 	.word	0x02020200
 8001554:	01ff0000 	.word	0x01ff0000
 8001558:	01010280 	.word	0x01010280
 800155c:	52004000 	.word	0x52004000

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001598 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001564:	f7ff ff84 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f00a f9e3 	bl	800b958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fc11 	bl	8000db8 <main>
  bx  lr
 8001596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001598:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800159c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a0:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80015a4:	0800c65c 	.word	0x0800c65c
  ldr r2, =_sbss
 80015a8:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80015ac:	240020dc 	.word	0x240020dc

080015b0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ba:	2003      	movs	r0, #3
 80015bc:	f000 f980 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80015c0:	f002 ff7a 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_Init+0x68>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	4913      	ldr	r1, [pc, #76]	@ (8001620 <HAL_Init+0x6c>)
 80015d2:	5ccb      	ldrb	r3, [r1, r3]
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
 80015dc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_Init+0x68>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <HAL_Init+0x6c>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001624 <HAL_Init+0x70>)
 80015f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_Init+0x74>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 f814 	bl	800162c <HAL_InitTick>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e002      	b.n	8001614 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800160e:	f7ff fe0f 	bl	8001230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58024400 	.word	0x58024400
 8001620:	0800c608 	.word	0x0800c608
 8001624:	24000004 	.word	0x24000004
 8001628:	24000000 	.word	0x24000000

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_InitTick+0x60>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e021      	b.n	8001684 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <HAL_InitTick+0x64>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_InitTick+0x60>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f965 	bl	8001926 <HAL_SYSTICK_Config>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e00e      	b.n	8001684 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d80a      	bhi.n	8001682 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 f92f 	bl	80018d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4a06      	ldr	r2, [pc, #24]	@ (8001694 <HAL_InitTick+0x68>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2400000c 	.word	0x2400000c
 8001690:	24000000 	.word	0x24000000
 8001694:	24000008 	.word	0x24000008

08001698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_IncTick+0x20>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x24>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <HAL_IncTick+0x24>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2400000c 	.word	0x2400000c
 80016bc:	240003a8 	.word	0x240003a8

080016c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <HAL_GetTick+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	240003a8 	.word	0x240003a8

080016d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff ffee 	bl	80016c0 <HAL_GetTick>
 80016e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d005      	beq.n	80016fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_Delay+0x44>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fe:	bf00      	nop
 8001700:	f7ff ffde 	bl	80016c0 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	429a      	cmp	r2, r3
 800170e:	d8f7      	bhi.n	8001700 <HAL_Delay+0x28>
  {
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2400000c 	.word	0x2400000c

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <__NVIC_SetPriorityGrouping+0x40>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 800174a:	4313      	orrs	r3, r2
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <__NVIC_SetPriorityGrouping+0x40>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00
 8001764:	05fa0000 	.word	0x05fa0000

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4907      	ldr	r1, [pc, #28]	@ (80017bc <__NVIC_EnableIRQ+0x38>)
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	@ (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	@ (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
         );
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800188c:	d301      	bcc.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e00f      	b.n	80018b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <SysTick_Config+0x40>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	210f      	movs	r1, #15
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f7ff ff8e 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <SysTick_Config+0x40>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <SysTick_Config+0x40>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff29 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff40 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff90 	bl	8001814 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5f 	bl	80017c0 <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff33 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffa4 	bl	800187c <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001944:	f3bf 8f5f 	dmb	sy
}
 8001948:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800194a:	4b07      	ldr	r3, [pc, #28]	@ (8001968 <HAL_MPU_Disable+0x28>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	4a06      	ldr	r2, [pc, #24]	@ (8001968 <HAL_MPU_Disable+0x28>)
 8001950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001954:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_MPU_Disable+0x2c>)
 8001958:	2200      	movs	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	e000ed90 	.word	0xe000ed90

08001970 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	785a      	ldrb	r2, [r3, #1]
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
 800197e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	4a19      	ldr	r2, [pc, #100]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800198c:	4a17      	ldr	r2, [pc, #92]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7adb      	ldrb	r3, [r3, #11]
 800199e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a9b      	ldrb	r3, [r3, #10]
 80019a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7b5b      	ldrb	r3, [r3, #13]
 80019ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7b9b      	ldrb	r3, [r3, #14]
 80019b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7bdb      	ldrb	r3, [r3, #15]
 80019be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7a5b      	ldrb	r3, [r3, #9]
 80019c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7a1b      	ldrb	r3, [r3, #8]
 80019ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019dc:	6113      	str	r3, [r2, #16]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed90 	.word	0xe000ed90

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019fe:	4b89      	ldr	r3, [pc, #548]	@ (8001c24 <HAL_GPIO_Init+0x234>)
 8001a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a02:	e194      	b.n	8001d2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8186 	beq.w	8001d28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d005      	beq.n	8001a34 <HAL_GPIO_Init+0x44>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d130      	bne.n	8001a96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	f003 0201 	and.w	r2, r3, #1
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d017      	beq.n	8001ad2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d123      	bne.n	8001b26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	220f      	movs	r2, #15
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	69b9      	ldr	r1, [r7, #24]
 8001b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0203 	and.w	r2, r3, #3
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80e0 	beq.w	8001d28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b68:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x238>)
 8001b6a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001c28 <HAL_GPIO_Init+0x238>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <HAL_GPIO_Init+0x238>)
 8001b7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b86:	4a29      	ldr	r2, [pc, #164]	@ (8001c2c <HAL_GPIO_Init+0x23c>)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a20      	ldr	r2, [pc, #128]	@ (8001c30 <HAL_GPIO_Init+0x240>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d052      	beq.n	8001c58 <HAL_GPIO_Init+0x268>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c34 <HAL_GPIO_Init+0x244>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d031      	beq.n	8001c1e <HAL_GPIO_Init+0x22e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <HAL_GPIO_Init+0x248>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d02b      	beq.n	8001c1a <HAL_GPIO_Init+0x22a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c3c <HAL_GPIO_Init+0x24c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d025      	beq.n	8001c16 <HAL_GPIO_Init+0x226>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <HAL_GPIO_Init+0x250>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d01f      	beq.n	8001c12 <HAL_GPIO_Init+0x222>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_GPIO_Init+0x254>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d019      	beq.n	8001c0e <HAL_GPIO_Init+0x21e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c48 <HAL_GPIO_Init+0x258>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x21a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_GPIO_Init+0x25c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x216>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a18      	ldr	r2, [pc, #96]	@ (8001c50 <HAL_GPIO_Init+0x260>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x212>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <HAL_GPIO_Init+0x264>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x20e>
 8001bfa:	2309      	movs	r3, #9
 8001bfc:	e02d      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001bfe:	230a      	movs	r3, #10
 8001c00:	e02b      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c02:	2308      	movs	r3, #8
 8001c04:	e029      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c06:	2307      	movs	r3, #7
 8001c08:	e027      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	e025      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c0e:	2305      	movs	r3, #5
 8001c10:	e023      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e021      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e01f      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e01d      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e01b      	b.n	8001c5a <HAL_GPIO_Init+0x26a>
 8001c22:	bf00      	nop
 8001c24:	58000080 	.word	0x58000080
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	58000400 	.word	0x58000400
 8001c30:	58020000 	.word	0x58020000
 8001c34:	58020400 	.word	0x58020400
 8001c38:	58020800 	.word	0x58020800
 8001c3c:	58020c00 	.word	0x58020c00
 8001c40:	58021000 	.word	0x58021000
 8001c44:	58021400 	.word	0x58021400
 8001c48:	58021800 	.word	0x58021800
 8001c4c:	58021c00 	.word	0x58021c00
 8001c50:	58022000 	.word	0x58022000
 8001c54:	58022400 	.word	0x58022400
 8001c58:	2300      	movs	r3, #0
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6a:	4938      	ldr	r1, [pc, #224]	@ (8001d4c <HAL_GPIO_Init+0x35c>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f ae63 	bne.w	8001a04 <HAL_GPIO_Init+0x14>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3724      	adds	r7, #36	@ 0x24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	58000400 	.word	0x58000400

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e08b      	b.n	8001ee2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fdc6 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	@ 0x24
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	e006      	b.n	8001e40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d108      	bne.n	8001e5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	e007      	b.n	8001e6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <HAL_I2C_Init+0x134>)
 8001e76:	430b      	orrs	r3, r1
 8001e78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69d9      	ldr	r1, [r3, #28]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1a      	ldr	r2, [r3, #32]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	02008000 	.word	0x02008000

08001ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d138      	bne.n	8001f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e032      	b.n	8001f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	@ 0x24
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e000      	b.n	8001f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f78:	2302      	movs	r3, #2
  }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d139      	bne.n	8002010 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e033      	b.n	8002012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2224      	movs	r2, #36	@ 0x24
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	e000      	b.n	8002012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002010:	2302      	movs	r3, #2
  }
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e11a      	b.n	8002268 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fdb2 	bl	8000bb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b04      	cmp	r3, #4
 8002080:	d008      	beq.n	8002094 <HAL_I2S_Init+0x74>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b06      	cmp	r3, #6
 8002088:	d004      	beq.n	8002094 <HAL_I2S_Init+0x74>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b0a      	cmp	r3, #10
 8002090:	f040 8094 	bne.w	80021bc <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d067      	beq.n	800216c <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80020a4:	2302      	movs	r3, #2
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e001      	b.n	80020ae <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80020aa:	2301      	movs	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b30      	cmp	r3, #48	@ 0x30
 80020b4:	d003      	beq.n	80020be <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80020ba:	2bb0      	cmp	r3, #176	@ 0xb0
 80020bc:	d102      	bne.n	80020c4 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80020be:	2301      	movs	r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	e001      	b.n	80020c8 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a68      	ldr	r2, [pc, #416]	@ (8002270 <HAL_I2S_Init+0x250>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d107      	bne.n	80020e2 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80020d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020d6:	f04f 0100 	mov.w	r1, #0
 80020da:	f003 fd6b 	bl	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	e006      	b.n	80020f0 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80020e2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	f003 fd63 	bl	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 80020ee:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020f8:	d113      	bne.n	8002122 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80020fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	fbb2 f2f3 	udiv	r2, r2, r3
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	3305      	adds	r3, #5
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e014      	b.n	800214c <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002122:	2220      	movs	r2, #32
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	fbb2 f2f3 	udiv	r2, r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	3305      	adds	r3, #5
 800214a:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4a49      	ldr	r2, [pc, #292]	@ (8002274 <HAL_I2S_Init+0x254>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	085b      	lsrs	r3, r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e003      	b.n	8002174 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800216c:	2302      	movs	r3, #2
 800216e:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_I2S_Init+0x160>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d002      	beq.n	8002186 <HAL_I2S_Init+0x166>
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2bff      	cmp	r3, #255	@ 0xff
 8002184:	d907      	bls.n	8002196 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218a:	f043 0210 	orr.w	r2, r3, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e068      	b.n	8002268 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021a6:	4b34      	ldr	r3, [pc, #208]	@ (8002278 <HAL_I2S_Init+0x258>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	0411      	lsls	r1, r2, #16
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	0612      	lsls	r2, r2, #24
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021c2:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <HAL_I2S_Init+0x25c>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6851      	ldr	r1, [r2, #4]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6892      	ldr	r2, [r2, #8]
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68d2      	ldr	r2, [r2, #12]
 80021d4:	4311      	orrs	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6992      	ldr	r2, [r2, #24]
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6a12      	ldr	r2, [r2, #32]
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6912      	ldr	r2, [r2, #16]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8002202:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002212:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b04      	cmp	r3, #4
 8002230:	d007      	beq.n	8002242 <HAL_I2S_Init+0x222>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d003      	beq.n	8002242 <HAL_I2S_Init+0x222>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b0a      	cmp	r3, #10
 8002240:	d10a      	bne.n	8002258 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	58001400 	.word	0x58001400
 8002274:	cccccccd 	.word	0xcccccccd
 8002278:	fe00ffff 	.word	0xfe00ffff
 800227c:	fdff9040 	.word	0xfdff9040

08002280 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e037      	b.n	8002306 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7fe f9f8 	bl	80006a0 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3304      	adds	r3, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f004 ffa6 	bl	800720c <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	f004 ffc8 	bl	8007260 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	461a      	mov	r2, r3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f004 ffdd 	bl	800729a <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0204 	orr.w	r2, r2, #4
 80022ee:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80022f0:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <HAL_NAND_Init+0x90>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a06      	ldr	r2, [pc, #24]	@ (8002310 <HAL_NAND_Init+0x90>)
 80022f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022fa:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	52004000 	.word	0x52004000

08002314 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af02      	add	r7, sp, #8
 800231a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0fe      	b.n	8002524 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f008 fe2c 	bl	800af98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2203      	movs	r2, #3
 8002344:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f005 f9d0 	bl	80076f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7c1a      	ldrb	r2, [r3, #16]
 800235a:	f88d 2000 	strb.w	r2, [sp]
 800235e:	3304      	adds	r3, #4
 8002360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002362:	f005 f8a1 	bl	80074a8 <USB_CoreInit>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0d5      	b.n	8002524 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f005 f9c8 	bl	8007714 <USB_SetCurrentMode>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0c6      	b.n	8002524 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e04a      	b.n	8002432 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3315      	adds	r3, #21
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3314      	adds	r3, #20
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	b298      	uxth	r0, r3
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	332e      	adds	r3, #46	@ 0x2e
 80023d8:	4602      	mov	r2, r0
 80023da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3318      	adds	r3, #24
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	331c      	adds	r3, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3320      	adds	r3, #32
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3324      	adds	r3, #36	@ 0x24
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	3301      	adds	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	791b      	ldrb	r3, [r3, #4]
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	429a      	cmp	r2, r3
 800243a:	d3af      	bcc.n	800239c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e044      	b.n	80024cc <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3301      	adds	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d3b5      	bcc.n	8002442 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7c1a      	ldrb	r2, [r3, #16]
 80024de:	f88d 2000 	strb.w	r2, [sp]
 80024e2:	3304      	adds	r3, #4
 80024e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e6:	f005 f961 	bl	80077ac <USB_DevInit>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e013      	b.n	8002524 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7b1b      	ldrb	r3, [r3, #12]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f001 f96e 	bl	80037f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f006 f9a4 	bl	800886a <USB_DevDisconnect>

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_PCD_Start+0x1c>
 8002544:	2302      	movs	r3, #2
 8002546:	e022      	b.n	800258e <HAL_PCD_Start+0x62>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d009      	beq.n	8002570 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002568:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f005 f8ab 	bl	80076d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f006 f952 	bl	8008828 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002596:	b590      	push	{r4, r7, lr}
 8002598:	b08d      	sub	sp, #52	@ 0x34
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f006 fa10 	bl	80089d2 <USB_GetMode>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 84b9 	bne.w	8002f2c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f006 f974 	bl	80088ac <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 84af 	beq.w	8002f2a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f006 f961 	bl	80088ac <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d107      	bne.n	8002604 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f002 0202 	and.w	r2, r2, #2
 8002602:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f006 f94f 	bl	80088ac <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b10      	cmp	r3, #16
 8002616:	d161      	bne.n	80026dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0210 	bic.w	r2, r2, #16
 8002626:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 020f 	and.w	r2, r3, #15
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	0c5b      	lsrs	r3, r3, #17
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	2b02      	cmp	r3, #2
 8002652:	d124      	bne.n	800269e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d035      	beq.n	80026cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800266a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6a38      	ldr	r0, [r7, #32]
 8002674:	f005 ff86 	bl	8008584 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002684:	441a      	add	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002696:	441a      	add	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	615a      	str	r2, [r3, #20]
 800269c:	e016      	b.n	80026cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	0c5b      	lsrs	r3, r3, #17
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d110      	bne.n	80026cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026b0:	2208      	movs	r2, #8
 80026b2:	4619      	mov	r1, r3
 80026b4:	6a38      	ldr	r0, [r7, #32]
 80026b6:	f005 ff65 	bl	8008584 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c6:	441a      	add	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0210 	orr.w	r2, r2, #16
 80026da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f006 f8e3 	bl	80088ac <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026f0:	f040 80a7 	bne.w	8002842 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f006 f8e8 	bl	80088d2 <USB_ReadDevAllOutEpInterrupt>
 8002702:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002704:	e099      	b.n	800283a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 808e 	beq.w	800282e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f006 f90c 	bl	800893a <USB_ReadDevOutEPInterrupt>
 8002722:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	2301      	movs	r3, #1
 800273e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002740:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fed0 	bl	80034e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275e:	461a      	mov	r2, r3
 8002760:	2308      	movs	r3, #8
 8002762:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 ffa6 	bl	80036b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002782:	461a      	mov	r2, r3
 8002784:	2310      	movs	r3, #16
 8002786:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d030      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b80      	cmp	r3, #128	@ 0x80
 800279c:	d109      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	3304      	adds	r3, #4
 80027c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	78db      	ldrb	r3, [r3, #3]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d108      	bne.n	80027e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2200      	movs	r2, #0
 80027d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4619      	mov	r1, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f008 fd33 	bl	800b248 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ee:	461a      	mov	r2, r3
 80027f0:	2302      	movs	r3, #2
 80027f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280a:	461a      	mov	r2, r3
 800280c:	2320      	movs	r3, #32
 800280e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4413      	add	r3, r2
 8002822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002826:	461a      	mov	r2, r3
 8002828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800282c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	3301      	adds	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800283a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f af62 	bne.w	8002706 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f006 f830 	bl	80088ac <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002852:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002856:	f040 80db 	bne.w	8002a10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f006 f851 	bl	8008906 <USB_ReadDevAllInEpInterrupt>
 8002864:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800286a:	e0cd      	b.n	8002a08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80c2 	beq.w	80029fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f006 f877 	bl	8008976 <USB_ReadDevInEPInterrupt>
 8002888:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d057      	beq.n	8002944 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	2201      	movs	r2, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69f9      	ldr	r1, [r7, #28]
 80028b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028b4:	4013      	ands	r3, r2
 80028b6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c4:	461a      	mov	r2, r3
 80028c6:	2301      	movs	r3, #1
 80028c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	799b      	ldrb	r3, [r3, #6]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d132      	bne.n	8002938 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3320      	adds	r3, #32
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4403      	add	r3, r0
 80028f2:	331c      	adds	r3, #28
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4419      	add	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4403      	add	r3, r0
 8002906:	3320      	adds	r3, #32
 8002908:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d113      	bne.n	8002938 <HAL_PCD_IRQHandler+0x3a2>
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3324      	adds	r3, #36	@ 0x24
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	f006 f880 	bl	8008a38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f008 fbfd 	bl	800b13e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800295a:	461a      	mov	r2, r3
 800295c:	2308      	movs	r3, #8
 800295e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002976:	461a      	mov	r2, r3
 8002978:	2310      	movs	r3, #16
 800297a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002992:	461a      	mov	r2, r3
 8002994:	2340      	movs	r3, #64	@ 0x40
 8002996:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d023      	beq.n	80029ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029a4:	6a38      	ldr	r0, [r7, #32]
 80029a6:	f005 f85f 	bl	8007a68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	3310      	adds	r3, #16
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	3304      	adds	r3, #4
 80029bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	78db      	ldrb	r3, [r3, #3]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d108      	bne.n	80029d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f008 fc4a 	bl	800b26c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029e4:	461a      	mov	r2, r3
 80029e6:	2302      	movs	r3, #2
 80029e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fcea 	bl	80033d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	3301      	adds	r3, #1
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f47f af2e 	bne.w	800286c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f005 ff49 	bl	80088ac <USB_ReadInterrupts>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a24:	d122      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d108      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fef4 	bl	800383c <HAL_PCDEx_LPM_Callback>
 8002a54:	e002      	b.n	8002a5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f008 fbe8 	bl	800b22c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 ff1b 	bl	80088ac <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a80:	d112      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d102      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f008 fba4 	bl	800b1e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f005 fefd 	bl	80088ac <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002abc:	d121      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002acc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d111      	bne.n	8002afc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002af2:	2101      	movs	r1, #1
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fea1 	bl	800383c <HAL_PCDEx_LPM_Callback>
 8002afa:	e002      	b.n	8002b02 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f008 fb6f 	bl	800b1e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f005 fed0 	bl	80088ac <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b16:	f040 80b7 	bne.w	8002c88 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2110      	movs	r1, #16
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 ff97 	bl	8007a68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b3e:	e046      	b.n	8002bce <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b64:	0151      	lsls	r1, r2, #5
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	440a      	add	r2, r1
 8002b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b80:	461a      	mov	r2, r3
 8002b82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b98:	0151      	lsls	r1, r2, #5
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	440a      	add	r2, r1
 8002b9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ba2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ba6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb8:	0151      	lsls	r1, r2, #5
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	440a      	add	r2, r1
 8002bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bc6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bca:	3301      	adds	r3, #1
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	791b      	ldrb	r3, [r3, #4]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d3b2      	bcc.n	8002b40 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002be8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002bec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7bdb      	ldrb	r3, [r3, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c06:	f043 030b 	orr.w	r3, r3, #11
 8002c0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c1c:	f043 030b 	orr.w	r3, r3, #11
 8002c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c22:	e015      	b.n	8002c50 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c32:	4619      	mov	r1, r3
 8002c34:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c4a:	f043 030b 	orr.w	r3, r3, #11
 8002c4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c72:	461a      	mov	r2, r3
 8002c74:	f005 fee0 	bl	8008a38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f005 fe0d 	bl	80088ac <USB_ReadInterrupts>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c9c:	d123      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f005 fea4 	bl	80089f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 ff54 	bl	8007b5a <USB_GetDevSpeed>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681c      	ldr	r4, [r3, #0]
 8002cbe:	f001 fd75 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8002cc2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f004 fc5e 	bl	800758c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f008 fa5c 	bl	800b18e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f005 fdde 	bl	80088ac <USB_ReadInterrupts>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d10a      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f008 fa39 	bl	800b172 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f002 0208 	and.w	r2, r2, #8
 8002d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f005 fdc9 	bl	80088ac <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d20:	2b80      	cmp	r3, #128	@ 0x80
 8002d22:	d123      	bne.n	8002d6c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d30:	2301      	movs	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d34:	e014      	b.n	8002d60 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fb0a 	bl	800336e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	791b      	ldrb	r3, [r3, #4]
 8002d64:	461a      	mov	r2, r3
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d3e4      	bcc.n	8002d36 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 fd9b 	bl	80088ac <USB_ReadInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d80:	d13c      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d82:	2301      	movs	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d86:	e02b      	b.n	8002de0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3318      	adds	r3, #24
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d115      	bne.n	8002dda <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	da12      	bge.n	8002dda <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3317      	adds	r3, #23
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 faca 	bl	800336e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	3301      	adds	r3, #1
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	791b      	ldrb	r3, [r3, #4]
 8002de4:	461a      	mov	r2, r3
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d3cd      	bcc.n	8002d88 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f005 fd53 	bl	80088ac <USB_ReadInterrupts>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e10:	d156      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e12:	2301      	movs	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e16:	e045      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d12e      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	da2b      	bge.n	8002e9e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	0c1a      	lsrs	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e50:	4053      	eors	r3, r2
 8002e52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d121      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e9a:	6053      	str	r3, [r2, #4]
            break;
 8002e9c:	e008      	b.n	8002eb0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	791b      	ldrb	r3, [r3, #4]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d3b3      	bcc.n	8002e18 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f005 fcf1 	bl	80088ac <USB_ReadInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed4:	d10a      	bne.n	8002eec <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f008 f9da 	bl	800b290 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f005 fcdb 	bl	80088ac <USB_ReadInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d115      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f008 f9ca 	bl	800b2ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	e000      	b.n	8002f2c <HAL_PCD_IRQHandler+0x996>
      return;
 8002f2a:	bf00      	nop
    }
  }
}
 8002f2c:	3734      	adds	r7, #52	@ 0x34
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}

08002f32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_PCD_SetAddress+0x1a>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e012      	b.n	8002f72 <HAL_PCD_SetAddress+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f005 fc3a 	bl	80087dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	4608      	mov	r0, r1
 8002f84:	4611      	mov	r1, r2
 8002f86:	461a      	mov	r2, r3
 8002f88:	4603      	mov	r3, r0
 8002f8a:	70fb      	strb	r3, [r7, #3]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	803b      	strh	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da0f      	bge.n	8002fc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3310      	adds	r3, #16
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	705a      	strb	r2, [r3, #1]
 8002fbe:	e00f      	b.n	8002fe0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002fec:	883b      	ldrh	r3, [r7, #0]
 8002fee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	78ba      	ldrb	r2, [r7, #2]
 8002ffa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d004      	beq.n	800300e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800300e:	78bb      	ldrb	r3, [r7, #2]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d102      	bne.n	800301a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_PCD_EP_Open+0xae>
 8003024:	2302      	movs	r3, #2
 8003026:	e00e      	b.n	8003046 <HAL_PCD_EP_Open+0xcc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68f9      	ldr	r1, [r7, #12]
 8003036:	4618      	mov	r0, r3
 8003038:	f004 fdb4 	bl	8007ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003044:	7afb      	ldrb	r3, [r7, #11]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800305a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800305e:	2b00      	cmp	r3, #0
 8003060:	da0f      	bge.n	8003082 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	3310      	adds	r3, #16
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	3304      	adds	r3, #4
 8003078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	705a      	strb	r2, [r3, #1]
 8003080:	e00f      	b.n	80030a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	3304      	adds	r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_PCD_EP_Close+0x6e>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e00e      	b.n	80030da <HAL_PCD_EP_Close+0x8c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fdf2 	bl	8007cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	460b      	mov	r3, r1
 80030f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f2:	7afb      	ldrb	r3, [r7, #11]
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	3304      	adds	r3, #4
 800310a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003124:	7afb      	ldrb	r3, [r7, #11]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	b2da      	uxtb	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	799b      	ldrb	r3, [r3, #6]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	799b      	ldrb	r3, [r3, #6]
 8003146:	461a      	mov	r2, r3
 8003148:	6979      	ldr	r1, [r7, #20]
 800314a:	f004 fe8f 	bl	8007e6c <USB_EPStartXfer>

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	460b      	mov	r3, r1
 8003196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003198:	7afb      	ldrb	r3, [r7, #11]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	3310      	adds	r3, #16
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2200      	movs	r2, #0
 80031c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2201      	movs	r2, #1
 80031c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c8:	7afb      	ldrb	r3, [r7, #11]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	799b      	ldrb	r3, [r3, #6]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	799b      	ldrb	r3, [r3, #6]
 80031ea:	461a      	mov	r2, r3
 80031ec:	6979      	ldr	r1, [r7, #20]
 80031ee:	f004 fe3d 	bl	8007e6c <USB_EPStartXfer>

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	7912      	ldrb	r2, [r2, #4]
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e04f      	b.n	80032ba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800321a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321e:	2b00      	cmp	r3, #0
 8003220:	da0f      	bge.n	8003242 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	f003 020f 	and.w	r2, r3, #15
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	3310      	adds	r3, #16
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	705a      	strb	r2, [r3, #1]
 8003240:	e00d      	b.n	800325e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_PCD_EP_SetStall+0x82>
 800327a:	2302      	movs	r3, #2
 800327c:	e01d      	b.n	80032ba <HAL_PCD_EP_SetStall+0xbe>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68f9      	ldr	r1, [r7, #12]
 800328c:	4618      	mov	r0, r3
 800328e:	f005 f9d1 	bl	8008634 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7999      	ldrb	r1, [r3, #6]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032aa:	461a      	mov	r2, r3
 80032ac:	f005 fbc4 	bl	8008a38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	7912      	ldrb	r2, [r2, #4]
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e042      	b.n	8003366 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da0f      	bge.n	8003308 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	3310      	adds	r3, #16
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	705a      	strb	r2, [r3, #1]
 8003306:	e00f      	b.n	8003328 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	3304      	adds	r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_PCD_EP_ClrStall+0x86>
 8003344:	2302      	movs	r3, #2
 8003346:	e00e      	b.n	8003366 <HAL_PCD_EP_ClrStall+0xa4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	4618      	mov	r0, r3
 8003358:	f005 f9da 	bl	8008710 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800337a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800337e:	2b00      	cmp	r3, #0
 8003380:	da0c      	bge.n	800339c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	f003 020f 	and.w	r2, r3, #15
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	3310      	adds	r3, #16
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	3304      	adds	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	e00c      	b.n	80033b6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	4618      	mov	r0, r3
 80033be:	f004 fff9 	bl	80083b4 <USB_EPStopXfer>
 80033c2:	4603      	mov	r3, r0
 80033c4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033c6:	7afb      	ldrb	r3, [r7, #11]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	@ 0x28
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	3310      	adds	r3, #16
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	429a      	cmp	r2, r3
 8003402:	d901      	bls.n	8003408 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e06b      	b.n	80034e0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	429a      	cmp	r2, r3
 800341c:	d902      	bls.n	8003424 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3303      	adds	r3, #3
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800342c:	e02a      	b.n	8003484 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	429a      	cmp	r2, r3
 8003442:	d902      	bls.n	800344a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3303      	adds	r3, #3
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	68d9      	ldr	r1, [r3, #12]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	4603      	mov	r3, r0
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f005 f84e 	bl	8008508 <USB_WritePacket>

    ep->xfer_buff  += len;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	441a      	add	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	429a      	cmp	r2, r3
 8003498:	d809      	bhi.n	80034ae <PCD_WriteEmptyTxFifo+0xde>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d203      	bcs.n	80034ae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1bf      	bne.n	800342e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d811      	bhi.n	80034de <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	2201      	movs	r2, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	6939      	ldr	r1, [r7, #16]
 80034d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034da:	4013      	ands	r3, r2
 80034dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	333c      	adds	r3, #60	@ 0x3c
 8003500:	3304      	adds	r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	799b      	ldrb	r3, [r3, #6]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d17b      	bne.n	8003616 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	4a61      	ldr	r2, [pc, #388]	@ (80036b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	f240 80b9 	bls.w	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80b3 	beq.w	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800354a:	461a      	mov	r2, r3
 800354c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003550:	6093      	str	r3, [r2, #8]
 8003552:	e0a7      	b.n	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356a:	461a      	mov	r2, r3
 800356c:	2320      	movs	r3, #32
 800356e:	6093      	str	r3, [r2, #8]
 8003570:	e098      	b.n	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 8093 	bne.w	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	4a4b      	ldr	r2, [pc, #300]	@ (80036b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d90f      	bls.n	80035a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800359c:	461a      	mov	r2, r3
 800359e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035a2:	6093      	str	r3, [r2, #8]
 80035a4:	e07e      	b.n	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	0159      	lsls	r1, r3, #5
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	440b      	add	r3, r1
 80035c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d114      	bne.n	8003608 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035f0:	461a      	mov	r2, r3
 80035f2:	2101      	movs	r1, #1
 80035f4:	f005 fa20 	bl	8008a38 <USB_EP0_OutStart>
 80035f8:	e006      	b.n	8003608 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	441a      	add	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f007 fd7a 	bl	800b108 <HAL_PCD_DataOutStageCallback>
 8003614:	e046      	b.n	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	4a26      	ldr	r2, [pc, #152]	@ (80036b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d124      	bne.n	8003668 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003634:	461a      	mov	r2, r3
 8003636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800363a:	6093      	str	r3, [r2, #8]
 800363c:	e032      	b.n	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003654:	461a      	mov	r2, r3
 8003656:	2320      	movs	r3, #32
 8003658:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f007 fd51 	bl	800b108 <HAL_PCD_DataOutStageCallback>
 8003666:	e01d      	b.n	80036a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d114      	bne.n	8003698 <PCD_EP_OutXfrComplete_int+0x1b0>
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003690:	461a      	mov	r2, r3
 8003692:	2100      	movs	r1, #0
 8003694:	f005 f9d0 	bl	8008a38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	4619      	mov	r1, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f007 fd32 	bl	800b108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	4f54300a 	.word	0x4f54300a
 80036b4:	4f54310a 	.word	0x4f54310a

080036b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	333c      	adds	r3, #60	@ 0x3c
 80036d0:	3304      	adds	r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a15      	ldr	r2, [pc, #84]	@ (8003740 <PCD_EP_OutSetupPacket_int+0x88>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d90e      	bls.n	800370c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f007 fce9 	bl	800b0e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <PCD_EP_OutSetupPacket_int+0x88>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d90c      	bls.n	8003734 <PCD_EP_OutSetupPacket_int+0x7c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	799b      	ldrb	r3, [r3, #6]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d108      	bne.n	8003734 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800372c:	461a      	mov	r2, r3
 800372e:	2101      	movs	r1, #1
 8003730:	f005 f982 	bl	8008a38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	4f54300a 	.word	0x4f54300a

08003744 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
 8003750:	4613      	mov	r3, r2
 8003752:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d107      	bne.n	8003772 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003762:	883b      	ldrh	r3, [r7, #0]
 8003764:	0419      	lsls	r1, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	430a      	orrs	r2, r1
 800376e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003770:	e028      	b.n	80037c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4413      	add	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e00d      	b.n	80037a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	3340      	adds	r3, #64	@ 0x40
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	3301      	adds	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d3ec      	bcc.n	8003786 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037ac:	883b      	ldrh	r3, [r7, #0]
 80037ae:	0418      	lsls	r0, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	4302      	orrs	r2, r0
 80037bc:	3340      	adds	r3, #64	@ 0x40
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003822:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_PCDEx_ActivateLPM+0x44>)
 8003824:	4313      	orrs	r3, r2
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	10000003 	.word	0x10000003

0800383c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800385c:	4b19      	ldr	r3, [pc, #100]	@ (80038c4 <HAL_PWREx_ConfigSupply+0x70>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b04      	cmp	r3, #4
 8003866:	d00a      	beq.n	800387e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003868:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <HAL_PWREx_ConfigSupply+0x70>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d001      	beq.n	800387a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e01f      	b.n	80038ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e01d      	b.n	80038ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800387e:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 0207 	bic.w	r2, r3, #7
 8003886:	490f      	ldr	r1, [pc, #60]	@ (80038c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4313      	orrs	r3, r2
 800388c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800388e:	f7fd ff17 	bl	80016c0 <HAL_GetTick>
 8003892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003894:	e009      	b.n	80038aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003896:	f7fd ff13 	bl	80016c0 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038a4:	d901      	bls.n	80038aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e007      	b.n	80038ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <HAL_PWREx_ConfigSupply+0x70>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b6:	d1ee      	bne.n	8003896 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	58024800 	.word	0x58024800

080038c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d6:	60d3      	str	r3, [r2, #12]
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	58024800 	.word	0x58024800

080038e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	@ 0x30
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f000 bc1f 	b.w	800413a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80b3 	beq.w	8003a70 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390a:	4b95      	ldr	r3, [pc, #596]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003914:	4b92      	ldr	r3, [pc, #584]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800391a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391c:	2b10      	cmp	r3, #16
 800391e:	d007      	beq.n	8003930 <HAL_RCC_OscConfig+0x48>
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	2b18      	cmp	r3, #24
 8003924:	d112      	bne.n	800394c <HAL_RCC_OscConfig+0x64>
 8003926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d10d      	bne.n	800394c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	4b8b      	ldr	r3, [pc, #556]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8098 	beq.w	8003a6e <HAL_RCC_OscConfig+0x186>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 8093 	bne.w	8003a6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e3f6      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x7c>
 8003956:	4b82      	ldr	r3, [pc, #520]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a81      	ldr	r2, [pc, #516]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e058      	b.n	8003a16 <HAL_RCC_OscConfig+0x12e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d112      	bne.n	8003992 <HAL_RCC_OscConfig+0xaa>
 800396c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7b      	ldr	r2, [pc, #492]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b79      	ldr	r3, [pc, #484]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a78      	ldr	r2, [pc, #480]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 800397e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b76      	ldr	r3, [pc, #472]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a75      	ldr	r2, [pc, #468]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	e041      	b.n	8003a16 <HAL_RCC_OscConfig+0x12e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800399a:	d112      	bne.n	80039c2 <HAL_RCC_OscConfig+0xda>
 800399c:	4b70      	ldr	r3, [pc, #448]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a6f      	ldr	r2, [pc, #444]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a6c      	ldr	r2, [pc, #432]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a69      	ldr	r2, [pc, #420]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e029      	b.n	8003a16 <HAL_RCC_OscConfig+0x12e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80039ca:	d112      	bne.n	80039f2 <HAL_RCC_OscConfig+0x10a>
 80039cc:	4b64      	ldr	r3, [pc, #400]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a63      	ldr	r2, [pc, #396]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a60      	ldr	r2, [pc, #384]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e011      	b.n	8003a16 <HAL_RCC_OscConfig+0x12e>
 80039f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 80039f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b58      	ldr	r3, [pc, #352]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a57      	ldr	r2, [pc, #348]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b55      	ldr	r3, [pc, #340]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a54      	ldr	r2, [pc, #336]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d013      	beq.n	8003a46 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fd fe4f 	bl	80016c0 <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a26:	f7fd fe4b 	bl	80016c0 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	@ 0x64
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e380      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a38:	4b49      	ldr	r3, [pc, #292]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x13e>
 8003a44:	e014      	b.n	8003a70 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fd fe3b 	bl	80016c0 <HAL_GetTick>
 8003a4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4e:	f7fd fe37 	bl	80016c0 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	@ 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e36c      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a60:	4b3f      	ldr	r3, [pc, #252]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x166>
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 808c 	beq.w	8003b96 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7e:	4b38      	ldr	r3, [pc, #224]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a86:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a88:	4b35      	ldr	r3, [pc, #212]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x1bc>
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2b18      	cmp	r3, #24
 8003a98:	d137      	bne.n	8003b0a <HAL_RCC_OscConfig+0x222>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d132      	bne.n	8003b0a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_OscConfig+0x1d4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e33e      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003abc:	4b28      	ldr	r3, [pc, #160]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 0219 	bic.w	r2, r3, #25
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4925      	ldr	r1, [pc, #148]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd fdf7 	bl	80016c0 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fd fdf3 	bl	80016c0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e328      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	4917      	ldr	r1, [pc, #92]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b08:	e045      	b.n	8003b96 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d028      	beq.n	8003b64 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 0219 	bic.w	r2, r3, #25
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4910      	ldr	r1, [pc, #64]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fdcc 	bl	80016c0 <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fd fdc8 	bl	80016c0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e2fd      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4a:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	4901      	ldr	r1, [pc, #4]	@ (8003b60 <HAL_RCC_OscConfig+0x278>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
 8003b5e:	e01a      	b.n	8003b96 <HAL_RCC_OscConfig+0x2ae>
 8003b60:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b64:	4b97      	ldr	r3, [pc, #604]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a96      	ldr	r2, [pc, #600]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fda6 	bl	80016c0 <HAL_GetTick>
 8003b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fd fda2 	bl	80016c0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e2d7      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d06a      	beq.n	8003c78 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba2:	4b88      	ldr	r3, [pc, #544]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003baa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bac:	4b85      	ldr	r3, [pc, #532]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d007      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x2e0>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b18      	cmp	r3, #24
 8003bbc:	d11b      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x30e>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d116      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x2f8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b80      	cmp	r3, #128	@ 0x80
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e2ac      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003be0:	4b78      	ldr	r3, [pc, #480]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	4975      	ldr	r1, [pc, #468]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bf4:	e040      	b.n	8003c78 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d023      	beq.n	8003c46 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bfe:	4b71      	ldr	r3, [pc, #452]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a70      	ldr	r2, [pc, #448]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fd fd59 	bl	80016c0 <HAL_GetTick>
 8003c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c12:	f7fd fd55 	bl	80016c0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e28a      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c24:	4b67      	ldr	r3, [pc, #412]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c30:	4b64      	ldr	r3, [pc, #400]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	4961      	ldr	r1, [pc, #388]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60cb      	str	r3, [r1, #12]
 8003c44:	e018      	b.n	8003c78 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c46:	4b5f      	ldr	r3, [pc, #380]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fd fd35 	bl	80016c0 <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c5a:	f7fd fd31 	bl	80016c0 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e266      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c6c:	4b55      	ldr	r3, [pc, #340]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d036      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d019      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c90:	4a4c      	ldr	r2, [pc, #304]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fd fd12 	bl	80016c0 <HAL_GetTick>
 8003c9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fd0e 	bl	80016c0 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e243      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb2:	4b44      	ldr	r3, [pc, #272]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x3b8>
 8003cbe:	e018      	b.n	8003cf2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc0:	4b40      	ldr	r3, [pc, #256]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd fcf8 	bl	80016c0 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fcf4 	bl	80016c0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e229      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ce6:	4b37      	ldr	r3, [pc, #220]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d036      	beq.n	8003d6c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d019      	beq.n	8003d3a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d06:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003d0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d12:	f7fd fcd5 	bl	80016c0 <HAL_GetTick>
 8003d16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d1a:	f7fd fcd1 	bl	80016c0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e206      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d2c:	4b25      	ldr	r3, [pc, #148]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x432>
 8003d38:	e018      	b.n	8003d6c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d3a:	4b22      	ldr	r3, [pc, #136]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a21      	ldr	r2, [pc, #132]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003d40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d46:	f7fd fcbb 	bl	80016c0 <HAL_GetTick>
 8003d4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d4e:	f7fd fcb7 	bl	80016c0 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1ec      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d60:	4b18      	ldr	r3, [pc, #96]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80af 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d7a:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <HAL_RCC_OscConfig+0x4e0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a12      	ldr	r2, [pc, #72]	@ (8003dc8 <HAL_RCC_OscConfig+0x4e0>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d86:	f7fd fc9b 	bl	80016c0 <HAL_GetTick>
 8003d8a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8e:	f7fd fc97 	bl	80016c0 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	@ 0x64
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1cc      	b.n	800413a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da0:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <HAL_RCC_OscConfig+0x4e0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d10b      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4e4>
 8003db4:	4b03      	ldr	r3, [pc, #12]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db8:	4a02      	ldr	r2, [pc, #8]	@ (8003dc4 <HAL_RCC_OscConfig+0x4dc>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc0:	e05b      	b.n	8003e7a <HAL_RCC_OscConfig+0x592>
 8003dc2:	bf00      	nop
 8003dc4:	58024400 	.word	0x58024400
 8003dc8:	58024800 	.word	0x58024800
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d112      	bne.n	8003dfa <HAL_RCC_OscConfig+0x512>
 8003dd4:	4b9d      	ldr	r3, [pc, #628]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd8:	4a9c      	ldr	r2, [pc, #624]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de0:	4b9a      	ldr	r3, [pc, #616]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de4:	4a99      	ldr	r2, [pc, #612]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dec:	4b97      	ldr	r3, [pc, #604]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df0:	4a96      	ldr	r2, [pc, #600]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003df2:	f023 0304 	bic.w	r3, r3, #4
 8003df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df8:	e03f      	b.n	8003e7a <HAL_RCC_OscConfig+0x592>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d112      	bne.n	8003e28 <HAL_RCC_OscConfig+0x540>
 8003e02:	4b92      	ldr	r3, [pc, #584]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	4a91      	ldr	r2, [pc, #580]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a8e      	ldr	r2, [pc, #568]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1a:	4b8c      	ldr	r3, [pc, #560]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	4a8b      	ldr	r2, [pc, #556]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e26:	e028      	b.n	8003e7a <HAL_RCC_OscConfig+0x592>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b85      	cmp	r3, #133	@ 0x85
 8003e2e:	d112      	bne.n	8003e56 <HAL_RCC_OscConfig+0x56e>
 8003e30:	4b86      	ldr	r3, [pc, #536]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a85      	ldr	r2, [pc, #532]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3c:	4b83      	ldr	r3, [pc, #524]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e40:	4a82      	ldr	r2, [pc, #520]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e48:	4b80      	ldr	r3, [pc, #512]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4c:	4a7f      	ldr	r2, [pc, #508]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e54:	e011      	b.n	8003e7a <HAL_RCC_OscConfig+0x592>
 8003e56:	4b7d      	ldr	r3, [pc, #500]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	4a7c      	ldr	r2, [pc, #496]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e62:	4b7a      	ldr	r3, [pc, #488]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	4a79      	ldr	r2, [pc, #484]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6e:	4b77      	ldr	r3, [pc, #476]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	4a76      	ldr	r2, [pc, #472]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d015      	beq.n	8003eae <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fd fc1d 	bl	80016c0 <HAL_GetTick>
 8003e86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fd fc19 	bl	80016c0 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e14c      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ee      	beq.n	8003e8a <HAL_RCC_OscConfig+0x5a2>
 8003eac:	e014      	b.n	8003ed8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eae:	f7fd fc07 	bl	80016c0 <HAL_GetTick>
 8003eb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb6:	f7fd fc03 	bl	80016c0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e136      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ecc:	4b5f      	ldr	r3, [pc, #380]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ee      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 812b 	beq.w	8004138 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eea:	2b18      	cmp	r3, #24
 8003eec:	f000 80bb 	beq.w	8004066 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	f040 8095 	bne.w	8004024 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b54      	ldr	r3, [pc, #336]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a53      	ldr	r2, [pc, #332]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fd fbdb 	bl	80016c0 <HAL_GetTick>
 8003f0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fd fbd7 	bl	80016c0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e10c      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f20:	4b4a      	ldr	r3, [pc, #296]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f2c:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f30:	4b47      	ldr	r3, [pc, #284]	@ (8004050 <HAL_RCC_OscConfig+0x768>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f3c:	0112      	lsls	r2, r2, #4
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	4942      	ldr	r1, [pc, #264]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f54:	3b01      	subs	r3, #1
 8003f56:	025b      	lsls	r3, r3, #9
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	3b01      	subs	r3, #1
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f76:	4935      	ldr	r1, [pc, #212]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f7c:	4b33      	ldr	r3, [pc, #204]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	4a32      	ldr	r2, [pc, #200]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f88:	4b30      	ldr	r3, [pc, #192]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f8c:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <HAL_RCC_OscConfig+0x76c>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f94:	00d2      	lsls	r2, r2, #3
 8003f96:	492d      	ldr	r1, [pc, #180]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	f023 020c 	bic.w	r2, r3, #12
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	4928      	ldr	r1, [pc, #160]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fae:	4b27      	ldr	r3, [pc, #156]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	f023 0202 	bic.w	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	4924      	ldr	r1, [pc, #144]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fc0:	4b22      	ldr	r3, [pc, #136]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	4a21      	ldr	r2, [pc, #132]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fe4:	4b19      	ldr	r3, [pc, #100]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4a18      	ldr	r2, [pc, #96]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff0:	4b16      	ldr	r3, [pc, #88]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a15      	ldr	r2, [pc, #84]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8003ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd fb60 	bl	80016c0 <HAL_GetTick>
 8004000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd fb5c 	bl	80016c0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e091      	b.n	800413a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x71c>
 8004022:	e089      	b.n	8004138 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b09      	ldr	r3, [pc, #36]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a08      	ldr	r2, [pc, #32]	@ (800404c <HAL_RCC_OscConfig+0x764>)
 800402a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fb46 	bl	80016c0 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004036:	e00f      	b.n	8004058 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd fb42 	bl	80016c0 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d908      	bls.n	8004058 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e077      	b.n	800413a <HAL_RCC_OscConfig+0x852>
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400
 8004050:	fffffc0c 	.word	0xfffffc0c
 8004054:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004058:	4b3a      	ldr	r3, [pc, #232]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e9      	bne.n	8004038 <HAL_RCC_OscConfig+0x750>
 8004064:	e068      	b.n	8004138 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800406c:	4b35      	ldr	r3, [pc, #212]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	2b01      	cmp	r3, #1
 8004078:	d031      	beq.n	80040de <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0203 	and.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d12a      	bne.n	80040de <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d122      	bne.n	80040de <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d11a      	bne.n	80040de <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	0a5b      	lsrs	r3, r3, #9
 80040ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d111      	bne.n	80040de <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d108      	bne.n	80040de <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	0e1b      	lsrs	r3, r3, #24
 80040d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d001      	beq.n	80040e2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e02b      	b.n	800413a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040e2:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 80040e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e6:	08db      	lsrs	r3, r3, #3
 80040e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040ec:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d01f      	beq.n	8004138 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040f8:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	4a11      	ldr	r2, [pc, #68]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004104:	f7fd fadc 	bl	80016c0 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800410a:	bf00      	nop
 800410c:	f7fd fad8 	bl	80016c0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	4293      	cmp	r3, r2
 8004116:	d0f9      	beq.n	800410c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004118:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 800411a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_RCC_OscConfig+0x860>)
 800411e:	4013      	ands	r3, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004124:	00d2      	lsls	r2, r2, #3
 8004126:	4907      	ldr	r1, [pc, #28]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	4a04      	ldr	r2, [pc, #16]	@ (8004144 <HAL_RCC_OscConfig+0x85c>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3730      	adds	r7, #48	@ 0x30
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400
 8004148:	ffff0007 	.word	0xffff0007

0800414c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e19c      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004160:	4b8a      	ldr	r3, [pc, #552]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d910      	bls.n	8004190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b87      	ldr	r3, [pc, #540]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 020f 	bic.w	r2, r3, #15
 8004176:	4985      	ldr	r1, [pc, #532]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417e:	4b83      	ldr	r3, [pc, #524]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e184      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d908      	bls.n	80041be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041ac:	4b78      	ldr	r3, [pc, #480]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	4975      	ldr	r1, [pc, #468]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d010      	beq.n	80041ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	4b70      	ldr	r3, [pc, #448]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d908      	bls.n	80041ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041da:	4b6d      	ldr	r3, [pc, #436]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	496a      	ldr	r1, [pc, #424]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d010      	beq.n	800421a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	4b64      	ldr	r3, [pc, #400]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004204:	429a      	cmp	r2, r3
 8004206:	d908      	bls.n	800421a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004208:	4b61      	ldr	r3, [pc, #388]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	495e      	ldr	r1, [pc, #376]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004216:	4313      	orrs	r3, r2
 8004218:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d010      	beq.n	8004248 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	4b59      	ldr	r3, [pc, #356]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004232:	429a      	cmp	r2, r3
 8004234:	d908      	bls.n	8004248 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004236:	4b56      	ldr	r3, [pc, #344]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4953      	ldr	r1, [pc, #332]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004244:	4313      	orrs	r3, r2
 8004246:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d010      	beq.n	8004276 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	4b4d      	ldr	r3, [pc, #308]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	429a      	cmp	r2, r3
 8004262:	d908      	bls.n	8004276 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004264:	4b4a      	ldr	r3, [pc, #296]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f023 020f 	bic.w	r2, r3, #15
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4947      	ldr	r1, [pc, #284]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004272:	4313      	orrs	r3, r2
 8004274:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d055      	beq.n	800432e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004282:	4b43      	ldr	r3, [pc, #268]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4940      	ldr	r1, [pc, #256]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004290:	4313      	orrs	r3, r2
 8004292:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d107      	bne.n	80042ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800429c:	4b3c      	ldr	r3, [pc, #240]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d121      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0f6      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042b4:	4b36      	ldr	r3, [pc, #216]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d115      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0ea      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042cc:	4b30      	ldr	r3, [pc, #192]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0de      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0d6      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ec:	4b28      	ldr	r3, [pc, #160]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f023 0207 	bic.w	r2, r3, #7
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4925      	ldr	r1, [pc, #148]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fe:	f7fd f9df 	bl	80016c0 <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004304:	e00a      	b.n	800431c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004306:	f7fd f9db 	bl	80016c0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0be      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431c:	4b1c      	ldr	r3, [pc, #112]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	429a      	cmp	r2, r3
 800432c:	d1eb      	bne.n	8004306 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b14      	ldr	r3, [pc, #80]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	429a      	cmp	r2, r3
 8004348:	d208      	bcs.n	800435c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434a:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f023 020f 	bic.w	r2, r3, #15
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	490e      	ldr	r1, [pc, #56]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004358:	4313      	orrs	r3, r2
 800435a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d214      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b08      	ldr	r3, [pc, #32]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 020f 	bic.w	r2, r3, #15
 8004372:	4906      	ldr	r1, [pc, #24]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b04      	ldr	r3, [pc, #16]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e086      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
 800438c:	52002000 	.word	0x52002000
 8004390:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	4b3f      	ldr	r3, [pc, #252]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d208      	bcs.n	80043c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043b0:	4b3c      	ldr	r3, [pc, #240]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	4939      	ldr	r1, [pc, #228]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d010      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	4b34      	ldr	r3, [pc, #208]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043da:	429a      	cmp	r2, r3
 80043dc:	d208      	bcs.n	80043f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043de:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	492e      	ldr	r1, [pc, #184]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d010      	beq.n	800441e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	4b28      	ldr	r3, [pc, #160]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004408:	429a      	cmp	r2, r3
 800440a:	d208      	bcs.n	800441e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800440c:	4b25      	ldr	r3, [pc, #148]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	4922      	ldr	r1, [pc, #136]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 800441a:	4313      	orrs	r3, r2
 800441c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d010      	beq.n	800444c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004436:	429a      	cmp	r2, r3
 8004438:	d208      	bcs.n	800444c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800443a:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4917      	ldr	r1, [pc, #92]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 8004448:	4313      	orrs	r3, r2
 800444a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800444c:	f000 f834 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	4912      	ldr	r1, [pc, #72]	@ (80044a8 <HAL_RCC_ClockConfig+0x35c>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800446a:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	4a0d      	ldr	r2, [pc, #52]	@ (80044a8 <HAL_RCC_ClockConfig+0x35c>)
 8004474:	5cd3      	ldrb	r3, [r2, r3]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	4a0a      	ldr	r2, [pc, #40]	@ (80044ac <HAL_RCC_ClockConfig+0x360>)
 8004482:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004484:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <HAL_RCC_ClockConfig+0x364>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800448a:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <HAL_RCC_ClockConfig+0x368>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd f8cc 	bl	800162c <HAL_InitTick>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	58024400 	.word	0x58024400
 80044a8:	0800c608 	.word	0x0800c608
 80044ac:	24000004 	.word	0x24000004
 80044b0:	24000000 	.word	0x24000000
 80044b4:	24000008 	.word	0x24000008

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	@ 0x24
 80044bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044be:	4bb3      	ldr	r3, [pc, #716]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044c6:	2b18      	cmp	r3, #24
 80044c8:	f200 8155 	bhi.w	8004776 <HAL_RCC_GetSysClockFreq+0x2be>
 80044cc:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	08004539 	.word	0x08004539
 80044d8:	08004777 	.word	0x08004777
 80044dc:	08004777 	.word	0x08004777
 80044e0:	08004777 	.word	0x08004777
 80044e4:	08004777 	.word	0x08004777
 80044e8:	08004777 	.word	0x08004777
 80044ec:	08004777 	.word	0x08004777
 80044f0:	08004777 	.word	0x08004777
 80044f4:	0800455f 	.word	0x0800455f
 80044f8:	08004777 	.word	0x08004777
 80044fc:	08004777 	.word	0x08004777
 8004500:	08004777 	.word	0x08004777
 8004504:	08004777 	.word	0x08004777
 8004508:	08004777 	.word	0x08004777
 800450c:	08004777 	.word	0x08004777
 8004510:	08004777 	.word	0x08004777
 8004514:	08004565 	.word	0x08004565
 8004518:	08004777 	.word	0x08004777
 800451c:	08004777 	.word	0x08004777
 8004520:	08004777 	.word	0x08004777
 8004524:	08004777 	.word	0x08004777
 8004528:	08004777 	.word	0x08004777
 800452c:	08004777 	.word	0x08004777
 8004530:	08004777 	.word	0x08004777
 8004534:	0800456b 	.word	0x0800456b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004538:	4b94      	ldr	r3, [pc, #592]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004544:	4b91      	ldr	r3, [pc, #580]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	4a90      	ldr	r2, [pc, #576]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004556:	e111      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004558:	4b8d      	ldr	r3, [pc, #564]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800455a:	61bb      	str	r3, [r7, #24]
      break;
 800455c:	e10e      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800455e:	4b8d      	ldr	r3, [pc, #564]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004560:	61bb      	str	r3, [r7, #24]
      break;
 8004562:	e10b      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004564:	4b8c      	ldr	r3, [pc, #560]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004566:	61bb      	str	r3, [r7, #24]
      break;
 8004568:	e108      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800456a:	4b88      	ldr	r3, [pc, #544]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004574:	4b85      	ldr	r3, [pc, #532]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800457e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004580:	4b82      	ldr	r3, [pc, #520]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800458a:	4b80      	ldr	r3, [pc, #512]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	08db      	lsrs	r3, r3, #3
 8004590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80e1 	beq.w	8004770 <HAL_RCC_GetSysClockFreq+0x2b8>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f000 8083 	beq.w	80046bc <HAL_RCC_GetSysClockFreq+0x204>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f200 80a1 	bhi.w	8004700 <HAL_RCC_GetSysClockFreq+0x248>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x114>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d056      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045ca:	e099      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045cc:	4b6f      	ldr	r3, [pc, #444]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02d      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045d8:	4b6c      	ldr	r3, [pc, #432]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004602:	4b62      	ldr	r3, [pc, #392]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004612:	ed97 6a02 	vldr	s12, [r7, #8]
 8004616:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 800461a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004632:	e087      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b51      	ldr	r3, [pc, #324]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a02 	vldr	s12, [r7, #8]
 800465a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004676:	e065      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b40      	ldr	r3, [pc, #256]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a02 	vldr	s12, [r7, #8]
 800469e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ba:	e043      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b2f      	ldr	r3, [pc, #188]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a02 	vldr	s12, [r7, #8]
 80046e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046fe:	e021      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b1e      	ldr	r3, [pc, #120]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a02 	vldr	s12, [r7, #8]
 8004726:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004742:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004744:	4b11      	ldr	r3, [pc, #68]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	0a5b      	lsrs	r3, r3, #9
 800474a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800474e:	3301      	adds	r3, #1
 8004750:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	ee07 3a90 	vmov	s15, r3
 8004758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800475c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004768:	ee17 3a90 	vmov	r3, s15
 800476c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800476e:	e005      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
      break;
 8004774:	e002      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004776:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004778:	61bb      	str	r3, [r7, #24]
      break;
 800477a:	bf00      	nop
  }

  return sysclockfreq;
 800477c:	69bb      	ldr	r3, [r7, #24]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3724      	adds	r7, #36	@ 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
 8004790:	03d09000 	.word	0x03d09000
 8004794:	003d0900 	.word	0x003d0900
 8004798:	016e3600 	.word	0x016e3600
 800479c:	46000000 	.word	0x46000000
 80047a0:	4c742400 	.word	0x4c742400
 80047a4:	4a742400 	.word	0x4a742400
 80047a8:	4bb71b00 	.word	0x4bb71b00

080047ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80047b2:	f7ff fe81 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80047b6:	4602      	mov	r2, r0
 80047b8:	4b10      	ldr	r3, [pc, #64]	@ (80047fc <HAL_RCC_GetHCLKFreq+0x50>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	490f      	ldr	r1, [pc, #60]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x54>)
 80047c4:	5ccb      	ldrb	r3, [r1, r3]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <HAL_RCC_GetHCLKFreq+0x50>)
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	4a09      	ldr	r2, [pc, #36]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x54>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a07      	ldr	r2, [pc, #28]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x58>)
 80047e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047ea:	4a07      	ldr	r2, [pc, #28]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047f0:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x58>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58024400 	.word	0x58024400
 8004800:	0800c608 	.word	0x0800c608
 8004804:	24000004 	.word	0x24000004
 8004808:	24000000 	.word	0x24000000

0800480c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004810:	f7ff ffcc 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4904      	ldr	r1, [pc, #16]	@ (8004834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	58024400 	.word	0x58024400
 8004834:	0800c608 	.word	0x0800c608

08004838 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800483c:	b0c8      	sub	sp, #288	@ 0x120
 800483e:	af00      	add	r7, sp, #0
 8004840:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004844:	2300      	movs	r3, #0
 8004846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800484a:	2300      	movs	r3, #0
 800484c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800485c:	2500      	movs	r5, #0
 800485e:	ea54 0305 	orrs.w	r3, r4, r5
 8004862:	d049      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004868:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800486a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800486e:	d02f      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004870:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004874:	d828      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004876:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800487a:	d01a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800487c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004880:	d822      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800488a:	d007      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800488c:	e01c      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488e:	4ba7      	ldr	r3, [pc, #668]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004892:	4aa6      	ldr	r2, [pc, #664]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800489a:	e01a      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800489c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048a0:	3308      	adds	r3, #8
 80048a2:	2102      	movs	r1, #2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f002 fa6d 	bl	8006d84 <RCCEx_PLL2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048b0:	e00f      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048b6:	3328      	adds	r3, #40	@ 0x28
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f002 fb14 	bl	8006ee8 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048c6:	e004      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048ce:	e000      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048da:	4b94      	ldr	r3, [pc, #592]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e8:	4a90      	ldr	r2, [pc, #576]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80048ee:	e003      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004904:	f04f 0900 	mov.w	r9, #0
 8004908:	ea58 0309 	orrs.w	r3, r8, r9
 800490c:	d047      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800490e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	2b04      	cmp	r3, #4
 8004916:	d82a      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004935 	.word	0x08004935
 8004924:	08004943 	.word	0x08004943
 8004928:	08004959 	.word	0x08004959
 800492c:	08004977 	.word	0x08004977
 8004930:	08004977 	.word	0x08004977
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004934:	4b7d      	ldr	r3, [pc, #500]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004938:	4a7c      	ldr	r2, [pc, #496]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800493a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800493e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004940:	e01a      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004946:	3308      	adds	r3, #8
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f002 fa1a 	bl	8006d84 <RCCEx_PLL2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004956:	e00f      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800495c:	3328      	adds	r3, #40	@ 0x28
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f002 fac1 	bl	8006ee8 <RCCEx_PLL3_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800496c:	e004      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004980:	4b6a      	ldr	r3, [pc, #424]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004984:	f023 0107 	bic.w	r1, r3, #7
 8004988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	4a67      	ldr	r2, [pc, #412]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004990:	430b      	orrs	r3, r1
 8004992:	6513      	str	r3, [r2, #80]	@ 0x50
 8004994:	e003      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800499a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049aa:	f04f 0b00 	mov.w	fp, #0
 80049ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80049b2:	d054      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80049b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049be:	d036      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80049c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049c4:	d82f      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ca:	d032      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d0:	d829      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d4:	d02f      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80049d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d8:	d825      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049da:	2b80      	cmp	r3, #128	@ 0x80
 80049dc:	d018      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80049de:	2b80      	cmp	r3, #128	@ 0x80
 80049e0:	d821      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80049e6:	2b40      	cmp	r3, #64	@ 0x40
 80049e8:	d007      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80049ea:	e01c      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ec:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f0:	4a4e      	ldr	r2, [pc, #312]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80049f8:	e01e      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049fe:	3308      	adds	r3, #8
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f002 f9be 	bl	8006d84 <RCCEx_PLL2_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a0e:	e013      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a14:	3328      	adds	r3, #40	@ 0x28
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f002 fa65 	bl	8006ee8 <RCCEx_PLL3_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a24:	e008      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a2c:	e004      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a2e:	bf00      	nop
 8004a30:	e002      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a32:	bf00      	nop
 8004a34:	e000      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004a40:	4b3a      	ldr	r3, [pc, #232]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a44:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4e:	4a37      	ldr	r2, [pc, #220]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a5a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a74:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d05c      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a84:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a88:	d03b      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a8a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a8e:	d834      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a94:	d037      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a9a:	d82e      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004aa0:	d033      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004aa2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004aa6:	d828      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aac:	d01a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab2:	d822      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004abc:	d007      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004abe:	e01c      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	4a19      	ldr	r2, [pc, #100]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004acc:	e01e      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 f954 	bl	8006d84 <RCCEx_PLL2_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004ae2:	e013      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae8:	3328      	adds	r3, #40	@ 0x28
 8004aea:	2100      	movs	r1, #0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f002 f9fb 	bl	8006ee8 <RCCEx_PLL3_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b00:	e004      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b02:	bf00      	nop
 8004b04:	e002      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b06:	bf00      	nop
 8004b08:	e000      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10d      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b18:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b22:	4a02      	ldr	r2, [pc, #8]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b28:	e006      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004b2a:	bf00      	nop
 8004b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b52:	460b      	mov	r3, r1
 8004b54:	4313      	orrs	r3, r2
 8004b56:	d03a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5e:	2b30      	cmp	r3, #48	@ 0x30
 8004b60:	d01f      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004b62:	2b30      	cmp	r3, #48	@ 0x30
 8004b64:	d819      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d00c      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d815      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d019      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d111      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b76:	4bae      	ldr	r3, [pc, #696]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	4aad      	ldr	r2, [pc, #692]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b82:	e011      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b88:	3308      	adds	r3, #8
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f002 f8f9 	bl	8006d84 <RCCEx_PLL2_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004b98:	e006      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ba0:	e002      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bb0:	4b9f      	ldr	r3, [pc, #636]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbe:	4a9c      	ldr	r2, [pc, #624]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bc4:	e003      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004bda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004bde:	2300      	movs	r3, #0
 8004be0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004be4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4313      	orrs	r3, r2
 8004bec:	d051      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bf8:	d035      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bfe:	d82e      	bhi.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c04:	d031      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004c06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c0a:	d828      	bhi.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c10:	d01a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c16:	d822      	bhi.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c20:	d007      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004c22:	e01c      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c24:	4b82      	ldr	r3, [pc, #520]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4a81      	ldr	r2, [pc, #516]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c30:	e01c      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c36:	3308      	adds	r3, #8
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f002 f8a2 	bl	8006d84 <RCCEx_PLL2_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c46:	e011      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c4c:	3328      	adds	r3, #40	@ 0x28
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f002 f949 	bl	8006ee8 <RCCEx_PLL3_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c5c:	e006      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c64:	e002      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c74:	4b6e      	ldr	r3, [pc, #440]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c82:	4a6b      	ldr	r2, [pc, #428]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c88:	e003      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ca8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004cac:	460b      	mov	r3, r1
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	d053      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cbc:	d033      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004cbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cc2:	d82c      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004cc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cc8:	d02f      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004cca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cce:	d826      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004cd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cd4:	d02b      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cda:	d820      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce0:	d012      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce6:	d81a      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d022      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d115      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f002 f842 	bl	8006d84 <RCCEx_PLL2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d06:	e015      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d0c:	3328      	adds	r3, #40	@ 0x28
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4618      	mov	r0, r3
 8004d12:	f002 f8e9 	bl	8006ee8 <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d24:	e006      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d26:	bf00      	nop
 8004d28:	e004      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d2a:	bf00      	nop
 8004d2c:	e002      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d4a:	4a39      	ldr	r2, [pc, #228]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d50:	e003      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d70:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d060      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d82:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004d86:	d039      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004d88:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004d8c:	d832      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d92:	d035      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d98:	d82c      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9e:	d031      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da4:	d826      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004da6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004daa:	d02d      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004dac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004db0:	d820      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004db6:	d012      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dbc:	d81a      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d024      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dc6:	d115      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dcc:	3308      	adds	r3, #8
 8004dce:	2101      	movs	r1, #1
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 ffd7 	bl	8006d84 <RCCEx_PLL2_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ddc:	e017      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de2:	3328      	adds	r3, #40	@ 0x28
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f002 f87e 	bl	8006ee8 <RCCEx_PLL3_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004df2:	e00c      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dfa:	e008      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004dfc:	bf00      	nop
 8004dfe:	e006      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e00:	bf00      	nop
 8004e02:	e004      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10e      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e26:	4a02      	ldr	r2, [pc, #8]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e2c:	e006      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e2e:	bf00      	nop
 8004e30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d037      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e66:	d00e      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e6c:	d816      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d018      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e76:	d111      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e78:	4bc4      	ldr	r3, [pc, #784]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	4ac3      	ldr	r2, [pc, #780]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e84:	e00f      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 ff78 	bl	8006d84 <RCCEx_PLL2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e9a:	e004      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004eae:	4bb7      	ldr	r3, [pc, #732]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ebc:	4ab3      	ldr	r2, [pc, #716]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ec8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ee2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	d039      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d81c      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f39 	.word	0x08004f39
 8004f00:	08004f0d 	.word	0x08004f0d
 8004f04:	08004f1b 	.word	0x08004f1b
 8004f08:	08004f39 	.word	0x08004f39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f0c:	4b9f      	ldr	r3, [pc, #636]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	4a9e      	ldr	r2, [pc, #632]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f18:	e00f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f1e:	3308      	adds	r3, #8
 8004f20:	2102      	movs	r1, #2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 ff2e 	bl	8006d84 <RCCEx_PLL2_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f42:	4b92      	ldr	r3, [pc, #584]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f46:	f023 0103 	bic.w	r1, r3, #3
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f50:	4a8e      	ldr	r2, [pc, #568]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f52:	430b      	orrs	r3, r1
 8004f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f56:	e003      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f000 8099 	beq.w	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f82:	4b83      	ldr	r3, [pc, #524]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a82      	ldr	r2, [pc, #520]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f8e:	f7fc fb97 	bl	80016c0 <HAL_GetTick>
 8004f92:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f98:	f7fc fb92 	bl	80016c0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b64      	cmp	r3, #100	@ 0x64
 8004fa6:	d903      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004fae:	e005      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb0:	4b77      	ldr	r3, [pc, #476]	@ (8005190 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0ed      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d173      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fc4:	4b71      	ldr	r3, [pc, #452]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fd0:	4053      	eors	r3, r2
 8004fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d015      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fda:	4b6c      	ldr	r3, [pc, #432]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fe6:	4b69      	ldr	r3, [pc, #420]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	4a68      	ldr	r2, [pc, #416]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff2:	4b66      	ldr	r3, [pc, #408]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	4a65      	ldr	r2, [pc, #404]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ffc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ffe:	4a63      	ldr	r2, [pc, #396]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005004:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800500a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800500e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005012:	d118      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fc fb54 	bl	80016c0 <HAL_GetTick>
 8005018:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800501c:	e00d      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501e:	f7fc fb4f 	bl	80016c0 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800502e:	429a      	cmp	r2, r3
 8005030:	d903      	bls.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005038:	e005      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800503a:	4b54      	ldr	r3, [pc, #336]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0eb      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005046:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800504a:	2b00      	cmp	r3, #0
 800504c:	d129      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800504e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800505e:	d10e      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005060:	4b4a      	ldr	r3, [pc, #296]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800506c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005070:	091a      	lsrs	r2, r3, #4
 8005072:	4b48      	ldr	r3, [pc, #288]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005074:	4013      	ands	r3, r2
 8005076:	4a45      	ldr	r2, [pc, #276]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6113      	str	r3, [r2, #16]
 800507c:	e005      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800507e:	4b43      	ldr	r3, [pc, #268]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	4a42      	ldr	r2, [pc, #264]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005084:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005088:	6113      	str	r3, [r2, #16]
 800508a:	4b40      	ldr	r3, [pc, #256]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800508c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800508e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509a:	4a3c      	ldr	r2, [pc, #240]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509c:	430b      	orrs	r3, r1
 800509e:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a0:	e008      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f002 0301 	and.w	r3, r2, #1
 80050c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f000 8090 	beq.w	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050de:	2b28      	cmp	r3, #40	@ 0x28
 80050e0:	d870      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80050e2:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	080051cd 	.word	0x080051cd
 80050ec:	080051c5 	.word	0x080051c5
 80050f0:	080051c5 	.word	0x080051c5
 80050f4:	080051c5 	.word	0x080051c5
 80050f8:	080051c5 	.word	0x080051c5
 80050fc:	080051c5 	.word	0x080051c5
 8005100:	080051c5 	.word	0x080051c5
 8005104:	080051c5 	.word	0x080051c5
 8005108:	08005199 	.word	0x08005199
 800510c:	080051c5 	.word	0x080051c5
 8005110:	080051c5 	.word	0x080051c5
 8005114:	080051c5 	.word	0x080051c5
 8005118:	080051c5 	.word	0x080051c5
 800511c:	080051c5 	.word	0x080051c5
 8005120:	080051c5 	.word	0x080051c5
 8005124:	080051c5 	.word	0x080051c5
 8005128:	080051af 	.word	0x080051af
 800512c:	080051c5 	.word	0x080051c5
 8005130:	080051c5 	.word	0x080051c5
 8005134:	080051c5 	.word	0x080051c5
 8005138:	080051c5 	.word	0x080051c5
 800513c:	080051c5 	.word	0x080051c5
 8005140:	080051c5 	.word	0x080051c5
 8005144:	080051c5 	.word	0x080051c5
 8005148:	080051cd 	.word	0x080051cd
 800514c:	080051c5 	.word	0x080051c5
 8005150:	080051c5 	.word	0x080051c5
 8005154:	080051c5 	.word	0x080051c5
 8005158:	080051c5 	.word	0x080051c5
 800515c:	080051c5 	.word	0x080051c5
 8005160:	080051c5 	.word	0x080051c5
 8005164:	080051c5 	.word	0x080051c5
 8005168:	080051cd 	.word	0x080051cd
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051c5 	.word	0x080051c5
 8005174:	080051c5 	.word	0x080051c5
 8005178:	080051c5 	.word	0x080051c5
 800517c:	080051c5 	.word	0x080051c5
 8005180:	080051c5 	.word	0x080051c5
 8005184:	080051c5 	.word	0x080051c5
 8005188:	080051cd 	.word	0x080051cd
 800518c:	58024400 	.word	0x58024400
 8005190:	58024800 	.word	0x58024800
 8005194:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800519c:	3308      	adds	r3, #8
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 fdef 	bl	8006d84 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051ac:	e00f      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b2:	3328      	adds	r3, #40	@ 0x28
 80051b4:	2101      	movs	r1, #1
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fe96 	bl	8006ee8 <RCCEx_PLL3_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051c2:	e004      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80051cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10b      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051d6:	4bc0      	ldr	r3, [pc, #768]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e6:	4abc      	ldr	r2, [pc, #752]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80051ec:	e003      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f002 0302 	and.w	r3, r2, #2
 8005202:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800520c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005210:	460b      	mov	r3, r1
 8005212:	4313      	orrs	r3, r2
 8005214:	d043      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800521e:	2b05      	cmp	r3, #5
 8005220:	d824      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005275 	.word	0x08005275
 800522c:	08005241 	.word	0x08005241
 8005230:	08005257 	.word	0x08005257
 8005234:	08005275 	.word	0x08005275
 8005238:	08005275 	.word	0x08005275
 800523c:	08005275 	.word	0x08005275
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005244:	3308      	adds	r3, #8
 8005246:	2101      	movs	r1, #1
 8005248:	4618      	mov	r0, r3
 800524a:	f001 fd9b 	bl	8006d84 <RCCEx_PLL2_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005254:	e00f      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800525a:	3328      	adds	r3, #40	@ 0x28
 800525c:	2101      	movs	r1, #1
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fe42 	bl	8006ee8 <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800526a:	e004      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005272:	e000      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800527e:	4b96      	ldr	r3, [pc, #600]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005282:	f023 0107 	bic.w	r1, r3, #7
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800528e:	4a92      	ldr	r2, [pc, #584]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005290:	430b      	orrs	r3, r1
 8005292:	6553      	str	r3, [r2, #84]	@ 0x54
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800529a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f002 0304 	and.w	r3, r2, #4
 80052aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052b4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d043      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d824      	bhi.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80052ca:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	0800531d 	.word	0x0800531d
 80052d4:	080052e9 	.word	0x080052e9
 80052d8:	080052ff 	.word	0x080052ff
 80052dc:	0800531d 	.word	0x0800531d
 80052e0:	0800531d 	.word	0x0800531d
 80052e4:	0800531d 	.word	0x0800531d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ec:	3308      	adds	r3, #8
 80052ee:	2101      	movs	r1, #1
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 fd47 	bl	8006d84 <RCCEx_PLL2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052fc:	e00f      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005302:	3328      	adds	r3, #40	@ 0x28
 8005304:	2101      	movs	r1, #1
 8005306:	4618      	mov	r0, r3
 8005308:	f001 fdee 	bl	8006ee8 <RCCEx_PLL3_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005312:	e004      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800531a:	e000      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800531c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005326:	4b6c      	ldr	r3, [pc, #432]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	f023 0107 	bic.w	r1, r3, #7
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005332:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005336:	4a68      	ldr	r2, [pc, #416]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005338:	430b      	orrs	r3, r1
 800533a:	6593      	str	r3, [r2, #88]	@ 0x58
 800533c:	e003      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005342:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f002 0320 	and.w	r3, r2, #32
 8005352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005356:	2300      	movs	r3, #0
 8005358:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800535c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005360:	460b      	mov	r3, r1
 8005362:	4313      	orrs	r3, r2
 8005364:	d055      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800536a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800536e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005372:	d033      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005378:	d82c      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800537a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537e:	d02f      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005384:	d826      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800538a:	d02b      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800538c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005390:	d820      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005396:	d012      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800539c:	d81a      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d022      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80053a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a6:	d115      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053ac:	3308      	adds	r3, #8
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 fce7 	bl	8006d84 <RCCEx_PLL2_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053bc:	e015      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c2:	3328      	adds	r3, #40	@ 0x28
 80053c4:	2102      	movs	r1, #2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 fd8e 	bl	8006ee8 <RCCEx_PLL3_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053d2:	e00a      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053da:	e006      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053dc:	bf00      	nop
 80053de:	e004      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053e0:	bf00      	nop
 80053e2:	e002      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053e4:	bf00      	nop
 80053e6:	e000      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80053e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053f2:	4b39      	ldr	r3, [pc, #228]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005402:	4a35      	ldr	r2, [pc, #212]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005404:	430b      	orrs	r3, r1
 8005406:	6553      	str	r3, [r2, #84]	@ 0x54
 8005408:	e003      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800540e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800541e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005422:	2300      	movs	r3, #0
 8005424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005428:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800542c:	460b      	mov	r3, r1
 800542e:	4313      	orrs	r3, r2
 8005430:	d058      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800543a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800543e:	d033      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005440:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005444:	d82c      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544a:	d02f      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005450:	d826      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005452:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005456:	d02b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005458:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800545c:	d820      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005462:	d012      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005468:	d81a      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d022      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005472:	d115      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005478:	3308      	adds	r3, #8
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f001 fc81 	bl	8006d84 <RCCEx_PLL2_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005488:	e015      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800548a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548e:	3328      	adds	r3, #40	@ 0x28
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fd28 	bl	8006ee8 <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800549e:	e00a      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054a6:	e006      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054a8:	bf00      	nop
 80054aa:	e004      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054ac:	bf00      	nop
 80054ae:	e002      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10e      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054be:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054ce:	4a02      	ldr	r2, [pc, #8]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054d4:	e006      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054fe:	460b      	mov	r3, r1
 8005500:	4313      	orrs	r3, r2
 8005502:	d055      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800550c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005510:	d033      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005512:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005516:	d82c      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551c:	d02f      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800551e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005522:	d826      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005524:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005528:	d02b      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800552a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800552e:	d820      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005534:	d012      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800553a:	d81a      	bhi.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d022      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005544:	d115      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800554a:	3308      	adds	r3, #8
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f001 fc18 	bl	8006d84 <RCCEx_PLL2_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800555a:	e015      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800555c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005560:	3328      	adds	r3, #40	@ 0x28
 8005562:	2102      	movs	r1, #2
 8005564:	4618      	mov	r0, r3
 8005566:	f001 fcbf 	bl	8006ee8 <RCCEx_PLL3_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005570:	e00a      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005578:	e006      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800557a:	bf00      	nop
 800557c:	e004      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800557e:	bf00      	nop
 8005580:	e002      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005590:	4ba1      	ldr	r3, [pc, #644]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005594:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800559c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055a0:	4a9d      	ldr	r2, [pc, #628]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a6:	e003      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f002 0308 	and.w	r3, r2, #8
 80055bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d01e      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80055d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e2:	3328      	adds	r3, #40	@ 0x28
 80055e4:	2102      	movs	r1, #2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 fc7e 	bl	8006ee8 <RCCEx_PLL3_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055f8:	4b87      	ldr	r3, [pc, #540]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005608:	4a83      	ldr	r2, [pc, #524]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800560a:	430b      	orrs	r3, r1
 800560c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800560e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f002 0310 	and.w	r3, r2, #16
 800561a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005624:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005628:	460b      	mov	r3, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	d01e      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800562e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005632:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563a:	d10c      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800563c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005640:	3328      	adds	r3, #40	@ 0x28
 8005642:	2102      	movs	r1, #2
 8005644:	4618      	mov	r0, r3
 8005646:	f001 fc4f 	bl	8006ee8 <RCCEx_PLL3_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005656:	4b70      	ldr	r3, [pc, #448]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800565e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005666:	4a6c      	ldr	r2, [pc, #432]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005668:	430b      	orrs	r3, r1
 800566a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800566c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800567c:	2300      	movs	r3, #0
 800567e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005682:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005686:	460b      	mov	r3, r1
 8005688:	4313      	orrs	r3, r2
 800568a:	d03e      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800568c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005690:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005698:	d022      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800569a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800569e:	d81b      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a8:	d00b      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80056aa:	e015      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b0:	3308      	adds	r3, #8
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 fb65 	bl	8006d84 <RCCEx_PLL2_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056c0:	e00f      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056c6:	3328      	adds	r3, #40	@ 0x28
 80056c8:	2102      	movs	r1, #2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 fc0c 	bl	8006ee8 <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056d6:	e004      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80056e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056fa:	4a47      	ldr	r2, [pc, #284]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005700:	e003      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005706:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800570a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005716:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005718:	2300      	movs	r3, #0
 800571a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800571c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005720:	460b      	mov	r3, r1
 8005722:	4313      	orrs	r3, r2
 8005724:	d03b      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005732:	d01f      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005738:	d818      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800573a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800573e:	d003      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005744:	d007      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005746:	e011      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005748:	4b33      	ldr	r3, [pc, #204]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	4a32      	ldr	r2, [pc, #200]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800574e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005754:	e00f      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800575a:	3328      	adds	r3, #40	@ 0x28
 800575c:	2101      	movs	r1, #1
 800575e:	4618      	mov	r0, r3
 8005760:	f001 fbc2 	bl	8006ee8 <RCCEx_PLL3_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800576a:	e004      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005772:	e000      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005776:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800577e:	4b26      	ldr	r3, [pc, #152]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005782:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578e:	4a22      	ldr	r2, [pc, #136]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005790:	430b      	orrs	r3, r1
 8005792:	6553      	str	r3, [r2, #84]	@ 0x54
 8005794:	e003      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005796:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800579a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800579e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80057ac:	2300      	movs	r3, #0
 80057ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80057b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057b4:	460b      	mov	r3, r1
 80057b6:	4313      	orrs	r3, r2
 80057b8:	d034      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c8:	d007      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80057ca:	e011      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057cc:	4b12      	ldr	r3, [pc, #72]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	4a11      	ldr	r2, [pc, #68]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057d8:	e00e      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057de:	3308      	adds	r3, #8
 80057e0:	2102      	movs	r1, #2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 face 	bl	8006d84 <RCCEx_PLL2_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057ee:	e003      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005800:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005804:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800580c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580e:	4a02      	ldr	r2, [pc, #8]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005810:	430b      	orrs	r3, r1
 8005812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005814:	e006      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005816:	bf00      	nop
 8005818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005820:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005832:	2300      	movs	r3, #0
 8005834:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005836:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800583a:	460b      	mov	r3, r1
 800583c:	4313      	orrs	r3, r2
 800583e:	d00c      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005844:	3328      	adds	r3, #40	@ 0x28
 8005846:	2102      	movs	r1, #2
 8005848:	4618      	mov	r0, r3
 800584a:	f001 fb4d 	bl	8006ee8 <RCCEx_PLL3_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005866:	663b      	str	r3, [r7, #96]	@ 0x60
 8005868:	2300      	movs	r3, #0
 800586a:	667b      	str	r3, [r7, #100]	@ 0x64
 800586c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005870:	460b      	mov	r3, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	d038      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005882:	d018      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005888:	d811      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800588a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800588e:	d014      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005894:	d80b      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d011      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800589a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800589e:	d106      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a0:	4bc3      	ldr	r3, [pc, #780]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	4ac2      	ldr	r2, [pc, #776]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058ac:	e008      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058b6:	bf00      	nop
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058c8:	4bb9      	ldr	r3, [pc, #740]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d8:	4ab5      	ldr	r2, [pc, #724]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058da:	430b      	orrs	r3, r1
 80058dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80058de:	e003      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058f6:	2300      	movs	r3, #0
 80058f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005904:	4baa      	ldr	r3, [pc, #680]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005908:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005912:	4aa7      	ldr	r2, [pc, #668]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005914:	430b      	orrs	r3, r1
 8005916:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005924:	653b      	str	r3, [r7, #80]	@ 0x50
 8005926:	2300      	movs	r3, #0
 8005928:	657b      	str	r3, [r7, #84]	@ 0x54
 800592a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005934:	4b9e      	ldr	r3, [pc, #632]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005938:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800593c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005942:	4a9b      	ldr	r2, [pc, #620]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005944:	430b      	orrs	r3, r1
 8005946:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005956:	2300      	movs	r3, #0
 8005958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800595a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800595e:	460b      	mov	r3, r1
 8005960:	4313      	orrs	r3, r2
 8005962:	d009      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005964:	4b92      	ldr	r3, [pc, #584]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005968:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005972:	4a8f      	ldr	r2, [pc, #572]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005974:	430b      	orrs	r3, r1
 8005976:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
 8005986:	2300      	movs	r3, #0
 8005988:	647b      	str	r3, [r7, #68]	@ 0x44
 800598a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800598e:	460b      	mov	r3, r1
 8005990:	4313      	orrs	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005994:	4b86      	ldr	r3, [pc, #536]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	4a85      	ldr	r2, [pc, #532]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800599a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800599e:	6113      	str	r3, [r2, #16]
 80059a0:	4b83      	ldr	r3, [pc, #524]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059a2:	6919      	ldr	r1, [r3, #16]
 80059a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059ac:	4a80      	ldr	r2, [pc, #512]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ae:	430b      	orrs	r3, r1
 80059b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80059be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059c0:	2300      	movs	r3, #0
 80059c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059c8:	460b      	mov	r3, r1
 80059ca:	4313      	orrs	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059ce:	4b78      	ldr	r3, [pc, #480]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059dc:	4a74      	ldr	r2, [pc, #464]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059de:	430b      	orrs	r3, r1
 80059e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f0:	2300      	movs	r3, #0
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059f8:	460b      	mov	r3, r1
 80059fa:	4313      	orrs	r3, r2
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059fe:	4b6c      	ldr	r3, [pc, #432]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a0e:	4a68      	ldr	r2, [pc, #416]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a26:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	d011      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a34:	3308      	adds	r3, #8
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 f9a3 	bl	8006d84 <RCCEx_PLL2_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	6239      	str	r1, [r7, #32]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a66:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	d011      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a74:	3308      	adds	r3, #8
 8005a76:	2101      	movs	r1, #1
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 f983 	bl	8006d84 <RCCEx_PLL2_Config>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	61b9      	str	r1, [r7, #24]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4313      	orrs	r3, r2
 8005aae:	d011      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f963 	bl	8006d84 <RCCEx_PLL2_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ad0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	2100      	movs	r1, #0
 8005ade:	6139      	str	r1, [r7, #16]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d011      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af4:	3328      	adds	r3, #40	@ 0x28
 8005af6:	2100      	movs	r1, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 f9f5 	bl	8006ee8 <RCCEx_PLL3_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	d011      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b34:	3328      	adds	r3, #40	@ 0x28
 8005b36:	2101      	movs	r1, #1
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 f9d5 	bl	8006ee8 <RCCEx_PLL3_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	6039      	str	r1, [r7, #0]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	d011      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b74:	3328      	adds	r3, #40	@ 0x28
 8005b76:	2102      	movs	r1, #2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 f9b5 	bl	8006ee8 <RCCEx_PLL3_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005b94:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400

08005bb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b090      	sub	sp, #64	@ 0x40
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	f040 8094 	bne.w	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005bcc:	4b97      	ldr	r3, [pc, #604]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	f200 8087 	bhi.w	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005bde:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be4:	08005bf9 	.word	0x08005bf9
 8005be8:	08005c21 	.word	0x08005c21
 8005bec:	08005c49 	.word	0x08005c49
 8005bf0:	08005ce5 	.word	0x08005ce5
 8005bf4:	08005c71 	.word	0x08005c71
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bf8:	4b8c      	ldr	r3, [pc, #560]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c04:	d108      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 ff68 	bl	8006ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c14:	f000 bc97 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c1c:	f000 bc93 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c20:	4b82      	ldr	r3, [pc, #520]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c2c:	d108      	bne.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2e:	f107 0318 	add.w	r3, r7, #24
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fcac 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c3c:	f000 bc83 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c44:	f000 bc7f 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c48:	4b78      	ldr	r3, [pc, #480]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c54:	d108      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c56:	f107 030c 	add.w	r3, r7, #12
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fdec 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c64:	f000 bc6f 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c6c:	f000 bc6b 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c70:	4b6e      	ldr	r3, [pc, #440]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c78:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c8c:	4b67      	ldr	r3, [pc, #412]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	08db      	lsrs	r3, r3, #3
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	4a66      	ldr	r2, [pc, #408]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c9e:	e01f      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ca0:	4b62      	ldr	r3, [pc, #392]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cac:	d106      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cb4:	d102      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cba:	e011      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cbc:	4b5b      	ldr	r3, [pc, #364]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cd0:	d102      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cd2:	4b59      	ldr	r3, [pc, #356]	@ (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cd6:	e003      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005cdc:	f000 bc33 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005ce0:	f000 bc31 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ce4:	4b55      	ldr	r3, [pc, #340]	@ (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce8:	f000 bc2d 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf0:	f000 bc29 	b.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	f040 809f 	bne.w	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005d02:	4b4a      	ldr	r3, [pc, #296]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d06:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005d0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d12:	d04d      	beq.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d1a:	f200 8084 	bhi.w	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d22:	d07d      	beq.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d28:	d87d      	bhi.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	2b80      	cmp	r3, #128	@ 0x80
 8005d2e:	d02d      	beq.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	2b80      	cmp	r3, #128	@ 0x80
 8005d34:	d877      	bhi.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	2b40      	cmp	r3, #64	@ 0x40
 8005d40:	d012      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005d42:	e070      	b.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d44:	4b39      	ldr	r3, [pc, #228]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d50:	d107      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fec2 	bl	8006ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d60:	e3f1      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d66:	e3ee      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d68:	4b30      	ldr	r3, [pc, #192]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d74:	d107      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d76:	f107 0318 	add.w	r3, r7, #24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fc08 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d84:	e3df      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8a:	e3dc      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d8c:	4b27      	ldr	r3, [pc, #156]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d98:	d107      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d9a:	f107 030c 	add.w	r3, r7, #12
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fd4a 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005da8:	e3cd      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dae:	e3ca      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005db0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005db8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dba:	4b1c      	ldr	r3, [pc, #112]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d10c      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d109      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dcc:	4b17      	ldr	r3, [pc, #92]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	08db      	lsrs	r3, r3, #3
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	4a16      	ldr	r2, [pc, #88]	@ (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dde:	e01e      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005de0:	4b12      	ldr	r3, [pc, #72]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dec:	d106      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005df4:	d102      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005df6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dfa:	e010      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e08:	d106      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e10:	d102      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e12:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e16:	e002      	b.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e1c:	e393      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005e1e:	e392      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e20:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e24:	e38f      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e2a:	e38c      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	03d09000 	.word	0x03d09000
 8005e34:	003d0900 	.word	0x003d0900
 8005e38:	016e3600 	.word	0x016e3600
 8005e3c:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e44:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	f040 809c 	bne.w	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005e4e:	4b9e      	ldr	r3, [pc, #632]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e52:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005e56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e5e:	d054      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e66:	f200 808b 	bhi.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e70:	f000 8083 	beq.w	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e7a:	f200 8081 	bhi.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e84:	d02f      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e8c:	d878      	bhi.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e9a:	d012      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005e9c:	e070      	b.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e9e:	4b8a      	ldr	r3, [pc, #552]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fe15 	bl	8006ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eba:	e344      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec0:	e341      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ec2:	4b81      	ldr	r3, [pc, #516]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ed0:	f107 0318 	add.w	r3, r7, #24
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fb5b 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ede:	e332      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee4:	e32f      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ee6:	4b78      	ldr	r3, [pc, #480]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef2:	d107      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ef4:	f107 030c 	add.w	r3, r7, #12
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fc9d 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f02:	e320      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f08:	e31d      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f14:	4b6c      	ldr	r3, [pc, #432]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d10c      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f26:	4b68      	ldr	r3, [pc, #416]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	4a66      	ldr	r2, [pc, #408]	@ (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005f32:	fa22 f303 	lsr.w	r3, r2, r3
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f38:	e01e      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f3a:	4b63      	ldr	r3, [pc, #396]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f46:	d106      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f4e:	d102      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f50:	4b5f      	ldr	r3, [pc, #380]	@ (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f54:	e010      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f56:	4b5c      	ldr	r3, [pc, #368]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f62:	d106      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f6a:	d102      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f6c:	4b59      	ldr	r3, [pc, #356]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f70:	e002      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8005f76:	e2e6      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005f78:	e2e5      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f7a:	4b57      	ldr	r3, [pc, #348]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7e:	e2e2      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f84:	e2df      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f8a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	f040 80a7 	bne.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f94:	4b4c      	ldr	r3, [pc, #304]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f98:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005f9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fa4:	d055      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fac:	f200 8096 	bhi.w	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fb6:	f000 8084 	beq.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fc0:	f200 808c 	bhi.w	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fca:	d030      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd2:	f200 8083 	bhi.w	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe2:	d012      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005fe4:	e07a      	b.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fe6:	4b38      	ldr	r3, [pc, #224]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ff2:	d107      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fd71 	bl	8006ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006002:	e2a0      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006008:	e29d      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800600a:	4b2f      	ldr	r3, [pc, #188]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006016:	d107      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006018:	f107 0318 	add.w	r3, r7, #24
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fab7 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006026:	e28e      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602c:	e28b      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800602e:	4b26      	ldr	r3, [pc, #152]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800603a:	d107      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800603c:	f107 030c 	add.w	r3, r7, #12
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fbf9 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800604a:	e27c      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006050:	e279      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006052:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006056:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800605a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800605c:	4b1a      	ldr	r3, [pc, #104]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d10c      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800606e:	4b16      	ldr	r3, [pc, #88]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	08db      	lsrs	r3, r3, #3
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	4a14      	ldr	r2, [pc, #80]	@ (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800607a:	fa22 f303 	lsr.w	r3, r2, r3
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006080:	e01e      	b.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006082:	4b11      	ldr	r3, [pc, #68]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800608e:	d106      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006096:	d102      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006098:	4b0d      	ldr	r3, [pc, #52]	@ (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800609c:	e010      	b.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800609e:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060aa:	d106      	bne.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80060ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b2:	d102      	bne.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060b4:	4b07      	ldr	r3, [pc, #28]	@ (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b8:	e002      	b.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060be:	e242      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80060c0:	e241      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060c2:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c6:	e23e      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80060c8:	58024400 	.word	0x58024400
 80060cc:	03d09000 	.word	0x03d09000
 80060d0:	003d0900 	.word	0x003d0900
 80060d4:	016e3600 	.word	0x016e3600
 80060d8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e0:	e231      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060ea:	430b      	orrs	r3, r1
 80060ec:	f040 8085 	bne.w	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80060f0:	4b9c      	ldr	r3, [pc, #624]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80060f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80060fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006100:	d06b      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006108:	d874      	bhi.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006110:	d056      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006114:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006118:	d86c      	bhi.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006120:	d03b      	beq.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006128:	d864      	bhi.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800612a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006130:	d021      	beq.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006138:	d85c      	bhi.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800613a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006146:	d004      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006148:	e054      	b.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800614a:	f7fe fb5f 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 800614e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006150:	e1f9      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006152:	4b84      	ldr	r3, [pc, #528]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800615a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800615e:	d107      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006160:	f107 0318 	add.w	r3, r7, #24
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fa13 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800616e:	e1ea      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006174:	e1e7      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006176:	4b7b      	ldr	r3, [pc, #492]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800617e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006182:	d107      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006184:	f107 030c 	add.w	r3, r7, #12
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fb55 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006192:	e1d8      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006198:	e1d5      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800619a:	4b72      	ldr	r3, [pc, #456]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d109      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061a6:	4b6f      	ldr	r3, [pc, #444]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	08db      	lsrs	r3, r3, #3
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	4a6d      	ldr	r2, [pc, #436]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80061b2:	fa22 f303 	lsr.w	r3, r2, r3
 80061b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061b8:	e1c5      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061be:	e1c2      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061c0:	4b68      	ldr	r3, [pc, #416]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061cc:	d102      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80061ce:	4b67      	ldr	r3, [pc, #412]	@ (800636c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d2:	e1b8      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d8:	e1b5      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061da:	4b62      	ldr	r3, [pc, #392]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061e6:	d102      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80061e8:	4b61      	ldr	r3, [pc, #388]	@ (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80061ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ec:	e1ab      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f2:	e1a8      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f8:	e1a5      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80061fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061fe:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006202:	430b      	orrs	r3, r1
 8006204:	d173      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006206:	4b57      	ldr	r3, [pc, #348]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800620e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006216:	d02f      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800621e:	d863      	bhi.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800622c:	d012      	beq.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800622e:	e05b      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006230:	4b4c      	ldr	r3, [pc, #304]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800623c:	d107      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800623e:	f107 0318 	add.w	r3, r7, #24
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f9a4 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800624c:	e17b      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006252:	e178      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006254:	4b43      	ldr	r3, [pc, #268]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800625c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006260:	d107      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006262:	f107 030c 	add.w	r3, r7, #12
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fae6 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006270:	e169      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006276:	e166      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006278:	4b3a      	ldr	r3, [pc, #232]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800627a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800627c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006280:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006282:	4b38      	ldr	r3, [pc, #224]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b04      	cmp	r3, #4
 800628c:	d10c      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800628e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006294:	4b33      	ldr	r3, [pc, #204]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	08db      	lsrs	r3, r3, #3
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	4a32      	ldr	r2, [pc, #200]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a6:	e01e      	b.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b4:	d106      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80062b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062bc:	d102      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062be:	4b2b      	ldr	r3, [pc, #172]	@ (800636c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c2:	e010      	b.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062c4:	4b27      	ldr	r3, [pc, #156]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062d0:	d106      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80062d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d8:	d102      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062da:	4b25      	ldr	r3, [pc, #148]	@ (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80062dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062de:	e002      	b.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062e4:	e12f      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80062e6:	e12e      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ec:	e12b      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80062ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80062f6:	430b      	orrs	r3, r1
 80062f8:	d13c      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80062fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006302:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d004      	beq.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800630a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006310:	d012      	beq.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006312:	e023      	b.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006314:	4b13      	ldr	r3, [pc, #76]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006320:	d107      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fbda 	bl	8006ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006330:	e109      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006336:	e106      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006338:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006344:	d107      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006346:	f107 0318 	add.w	r3, r7, #24
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f920 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006354:	e0f7      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800635a:	e0f4      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006360:	e0f1      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006362:	bf00      	nop
 8006364:	58024400 	.word	0x58024400
 8006368:	03d09000 	.word	0x03d09000
 800636c:	003d0900 	.word	0x003d0900
 8006370:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006378:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800637c:	430b      	orrs	r3, r1
 800637e:	f040 8091 	bne.w	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006382:	4b73      	ldr	r3, [pc, #460]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006386:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800638a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006392:	f000 8081 	beq.w	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006398:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800639c:	d87f      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063a4:	d06b      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80063a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063ac:	d877      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b4:	d056      	beq.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063bc:	d86f      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063c4:	d03b      	beq.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063cc:	d867      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d4:	d021      	beq.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063dc:	d85f      	bhi.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80063e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ea:	d004      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80063ec:	e057      	b.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063ee:	f000 f8b9 	bl	8006564 <HAL_RCCEx_GetD3PCLK1Freq>
 80063f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063f4:	e0a7      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063f6:	4b56      	ldr	r3, [pc, #344]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006402:	d107      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006404:	f107 0318 	add.w	r3, r7, #24
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f8c1 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006412:	e098      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006418:	e095      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800641a:	4b4d      	ldr	r3, [pc, #308]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006426:	d107      	bne.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006428:	f107 030c 	add.w	r3, r7, #12
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fa03 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006436:	e086      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800643c:	e083      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800643e:	4b44      	ldr	r3, [pc, #272]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b04      	cmp	r3, #4
 8006448:	d109      	bne.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800644a:	4b41      	ldr	r3, [pc, #260]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	08db      	lsrs	r3, r3, #3
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	4a3f      	ldr	r2, [pc, #252]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006456:	fa22 f303 	lsr.w	r3, r2, r3
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800645c:	e073      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006462:	e070      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006464:	4b3a      	ldr	r3, [pc, #232]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800646c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006470:	d102      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8006472:	4b39      	ldr	r3, [pc, #228]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006476:	e066      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800647c:	e063      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800647e:	4b34      	ldr	r3, [pc, #208]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800648a:	d102      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800648c:	4b33      	ldr	r3, [pc, #204]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800648e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006490:	e059      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006496:	e056      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006498:	4b31      	ldr	r3, [pc, #196]	@ (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800649c:	e053      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a2:	e050      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80064a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80064ac:	430b      	orrs	r3, r1
 80064ae:	d148      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80064b0:	4b27      	ldr	r3, [pc, #156]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80064ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c0:	d02a      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80064c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c8:	d838      	bhi.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80064d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064d6:	d00d      	beq.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80064d8:	e030      	b.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064da:	4b1d      	ldr	r3, [pc, #116]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064e6:	d102      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80064e8:	4b1c      	ldr	r3, [pc, #112]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ec:	e02b      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f2:	e028      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f4:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006500:	d107      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006506:	4618      	mov	r0, r3
 8006508:	f000 faea 	bl	8006ae0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006510:	e019      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006516:	e016      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006518:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006524:	d107      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006526:	f107 0318 	add.w	r3, r7, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f830 	bl	8006590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006534:	e007      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800653a:	e004      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006540:	e001      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006548:	4618      	mov	r0, r3
 800654a:	3740      	adds	r7, #64	@ 0x40
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	58024400 	.word	0x58024400
 8006554:	03d09000 	.word	0x03d09000
 8006558:	003d0900 	.word	0x003d0900
 800655c:	016e3600 	.word	0x016e3600
 8006560:	00bb8000 	.word	0x00bb8000

08006564 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006568:	f7fe f920 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 800656c:	4602      	mov	r2, r0
 800656e:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4904      	ldr	r1, [pc, #16]	@ (800658c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800657a:	5ccb      	ldrb	r3, [r1, r3]
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	58024400 	.word	0x58024400
 800658c:	0800c608 	.word	0x0800c608

08006590 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	@ 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006598:	4ba1      	ldr	r3, [pc, #644]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800659a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80065a2:	4b9f      	ldr	r3, [pc, #636]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	0b1b      	lsrs	r3, r3, #12
 80065a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80065ae:	4b9c      	ldr	r3, [pc, #624]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	091b      	lsrs	r3, r3, #4
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065ba:	4b99      	ldr	r3, [pc, #612]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065be:	08db      	lsrs	r3, r3, #3
 80065c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8111 	beq.w	8006800 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	f000 8083 	beq.w	80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	f200 80a1 	bhi.w	8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d056      	beq.n	80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065fa:	e099      	b.n	8006730 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065fc:	4b88      	ldr	r3, [pc, #544]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d02d      	beq.n	8006664 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006608:	4b85      	ldr	r3, [pc, #532]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	08db      	lsrs	r3, r3, #3
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	4a84      	ldr	r2, [pc, #528]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
 8006618:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006632:	4b7b      	ldr	r3, [pc, #492]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006642:	ed97 6a03 	vldr	s12, [r7, #12]
 8006646:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800664a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006662:	e087      	b.n	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800682c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006676:	4b6a      	ldr	r3, [pc, #424]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006686:	ed97 6a03 	vldr	s12, [r7, #12]
 800668a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800668e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800669a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066a6:	e065      	b.n	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ba:	4b59      	ldr	r3, [pc, #356]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ea:	e043      	b.n	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fe:	4b48      	ldr	r3, [pc, #288]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006712:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800672e:	e021      	b.n	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800673e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006742:	4b37      	ldr	r3, [pc, #220]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006752:	ed97 6a03 	vldr	s12, [r7, #12]
 8006756:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800675a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006772:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006774:	4b2a      	ldr	r3, [pc, #168]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	0a5b      	lsrs	r3, r3, #9
 800677a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006786:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800678a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800678e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800679a:	ee17 2a90 	vmov	r2, s15
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80067a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a6:	0c1b      	lsrs	r3, r3, #16
 80067a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c8:	ee17 2a90 	vmov	r2, s15
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80067d0:	4b13      	ldr	r3, [pc, #76]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d4:	0e1b      	lsrs	r3, r3, #24
 80067d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f6:	ee17 2a90 	vmov	r2, s15
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067fe:	e008      	b.n	8006812 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	609a      	str	r2, [r3, #8]
}
 8006812:	bf00      	nop
 8006814:	3724      	adds	r7, #36	@ 0x24
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	58024400 	.word	0x58024400
 8006824:	03d09000 	.word	0x03d09000
 8006828:	46000000 	.word	0x46000000
 800682c:	4c742400 	.word	0x4c742400
 8006830:	4a742400 	.word	0x4a742400
 8006834:	4bb71b00 	.word	0x4bb71b00

08006838 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006838:	b480      	push	{r7}
 800683a:	b089      	sub	sp, #36	@ 0x24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006840:	4ba1      	ldr	r3, [pc, #644]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800684a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	0d1b      	lsrs	r3, r3, #20
 8006850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006854:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006856:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006862:	4b99      	ldr	r3, [pc, #612]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006866:	08db      	lsrs	r3, r3, #3
 8006868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	fb02 f303 	mul.w	r3, r2, r3
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8111 	beq.w	8006aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b02      	cmp	r3, #2
 800688a:	f000 8083 	beq.w	8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b02      	cmp	r3, #2
 8006892:	f200 80a1 	bhi.w	80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d056      	beq.n	8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80068a2:	e099      	b.n	80069d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068a4:	4b88      	ldr	r3, [pc, #544]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d02d      	beq.n	800690c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068b0:	4b85      	ldr	r3, [pc, #532]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	08db      	lsrs	r3, r3, #3
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	4a84      	ldr	r2, [pc, #528]	@ (8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068bc:	fa22 f303 	lsr.w	r3, r2, r3
 80068c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068da:	4b7b      	ldr	r3, [pc, #492]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006906:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800690a:	e087      	b.n	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006916:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006932:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800694e:	e065      	b.n	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800695e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006962:	4b59      	ldr	r3, [pc, #356]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	ed97 6a03 	vldr	s12, [r7, #12]
 8006976:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006992:	e043      	b.n	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006adc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a6:	4b48      	ldr	r3, [pc, #288]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069d6:	e021      	b.n	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	4b37      	ldr	r3, [pc, #220]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a20:	0a5b      	lsrs	r3, r3, #9
 8006a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a42:	ee17 2a90 	vmov	r2, s15
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4e:	0c1b      	lsrs	r3, r3, #16
 8006a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a70:	ee17 2a90 	vmov	r2, s15
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a78:	4b13      	ldr	r3, [pc, #76]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7c:	0e1b      	lsrs	r3, r3, #24
 8006a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9e:	ee17 2a90 	vmov	r2, s15
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006aa6:	e008      	b.n	8006aba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	609a      	str	r2, [r3, #8]
}
 8006aba:	bf00      	nop
 8006abc:	3724      	adds	r7, #36	@ 0x24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	03d09000 	.word	0x03d09000
 8006ad0:	46000000 	.word	0x46000000
 8006ad4:	4c742400 	.word	0x4c742400
 8006ad8:	4a742400 	.word	0x4a742400
 8006adc:	4bb71b00 	.word	0x4bb71b00

08006ae0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b089      	sub	sp, #36	@ 0x24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ae8:	4ba0      	ldr	r3, [pc, #640]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006af2:	4b9e      	ldr	r3, [pc, #632]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006afc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006afe:	4b9b      	ldr	r3, [pc, #620]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b08:	4b98      	ldr	r3, [pc, #608]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0c:	08db      	lsrs	r3, r3, #3
 8006b0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	fb02 f303 	mul.w	r3, r2, r3
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8111 	beq.w	8006d4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	f000 8083 	beq.w	8006c3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	f200 80a1 	bhi.w	8006c7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d056      	beq.n	8006bf6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b48:	e099      	b.n	8006c7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b4a:	4b88      	ldr	r3, [pc, #544]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d02d      	beq.n	8006bb2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b56:	4b85      	ldr	r3, [pc, #532]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	08db      	lsrs	r3, r3, #3
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	4a83      	ldr	r2, [pc, #524]	@ (8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b62:	fa22 f303 	lsr.w	r3, r2, r3
 8006b66:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b80:	4b7a      	ldr	r3, [pc, #488]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b88:	ee07 3a90 	vmov	s15, r3
 8006b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b90:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b94:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bb0:	e087      	b.n	8006cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc4:	4b69      	ldr	r3, [pc, #420]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf4:	e065      	b.n	8006cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c00:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006d7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c08:	4b58      	ldr	r3, [pc, #352]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	ee07 3a90 	vmov	s15, r3
 8006c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c18:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c1c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c38:	e043      	b.n	8006cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c44:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006d80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c4c:	4b47      	ldr	r3, [pc, #284]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c54:	ee07 3a90 	vmov	s15, r3
 8006c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c60:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c7c:	e021      	b.n	8006cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	ee07 3a90 	vmov	s15, r3
 8006c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c88:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c90:	4b36      	ldr	r3, [pc, #216]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c98:	ee07 3a90 	vmov	s15, r3
 8006c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cc0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	0a5b      	lsrs	r3, r3, #9
 8006cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ccc:	ee07 3a90 	vmov	s15, r3
 8006cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce8:	ee17 2a90 	vmov	r2, s15
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf4:	0c1b      	lsrs	r3, r3, #16
 8006cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d16:	ee17 2a90 	vmov	r2, s15
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006d1e:	4b13      	ldr	r3, [pc, #76]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d22:	0e1b      	lsrs	r3, r3, #24
 8006d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d44:	ee17 2a90 	vmov	r2, s15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d4c:	e008      	b.n	8006d60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	609a      	str	r2, [r3, #8]
}
 8006d60:	bf00      	nop
 8006d62:	3724      	adds	r7, #36	@ 0x24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	03d09000 	.word	0x03d09000
 8006d74:	46000000 	.word	0x46000000
 8006d78:	4c742400 	.word	0x4c742400
 8006d7c:	4a742400 	.word	0x4a742400
 8006d80:	4bb71b00 	.word	0x4bb71b00

08006d84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d92:	4b53      	ldr	r3, [pc, #332]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d101      	bne.n	8006da2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e099      	b.n	8006ed6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006da2:	4b4f      	ldr	r3, [pc, #316]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a4e      	ldr	r2, [pc, #312]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006da8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dae:	f7fa fc87 	bl	80016c0 <HAL_GetTick>
 8006db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006db4:	e008      	b.n	8006dc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006db6:	f7fa fc83 	bl	80016c0 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e086      	b.n	8006ed6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dc8:	4b45      	ldr	r3, [pc, #276]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f0      	bne.n	8006db6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dd4:	4b42      	ldr	r3, [pc, #264]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	031b      	lsls	r3, r3, #12
 8006de2:	493f      	ldr	r1, [pc, #252]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	025b      	lsls	r3, r3, #9
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	061b      	lsls	r3, r3, #24
 8006e14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e18:	4931      	ldr	r1, [pc, #196]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e1e:	4b30      	ldr	r3, [pc, #192]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	492d      	ldr	r1, [pc, #180]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e30:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e34:	f023 0220 	bic.w	r2, r3, #32
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	4928      	ldr	r1, [pc, #160]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e42:	4b27      	ldr	r3, [pc, #156]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	4a26      	ldr	r2, [pc, #152]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e48:	f023 0310 	bic.w	r3, r3, #16
 8006e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e52:	4b24      	ldr	r3, [pc, #144]	@ (8006ee4 <RCCEx_PLL2_Config+0x160>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	69d2      	ldr	r2, [r2, #28]
 8006e5a:	00d2      	lsls	r2, r2, #3
 8006e5c:	4920      	ldr	r1, [pc, #128]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e62:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	f043 0310 	orr.w	r3, r3, #16
 8006e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e78:	4a19      	ldr	r2, [pc, #100]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e80:	e00f      	b.n	8006ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d106      	bne.n	8006e96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e88:	4b15      	ldr	r3, [pc, #84]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e94:	e005      	b.n	8006ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e96:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9a:	4a11      	ldr	r2, [pc, #68]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006ea8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eae:	f7fa fc07 	bl	80016c0 <HAL_GetTick>
 8006eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eb4:	e008      	b.n	8006ec8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006eb6:	f7fa fc03 	bl	80016c0 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e006      	b.n	8006ed6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ec8:	4b05      	ldr	r3, [pc, #20]	@ (8006ee0 <RCCEx_PLL2_Config+0x15c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	58024400 	.word	0x58024400
 8006ee4:	ffff0007 	.word	0xffff0007

08006ee8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ef6:	4b53      	ldr	r3, [pc, #332]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d101      	bne.n	8006f06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e099      	b.n	800703a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f06:	4b4f      	ldr	r3, [pc, #316]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f12:	f7fa fbd5 	bl	80016c0 <HAL_GetTick>
 8006f16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f18:	e008      	b.n	8006f2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f1a:	f7fa fbd1 	bl	80016c0 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e086      	b.n	800703a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f2c:	4b45      	ldr	r3, [pc, #276]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f0      	bne.n	8006f1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f38:	4b42      	ldr	r3, [pc, #264]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	051b      	lsls	r3, r3, #20
 8006f46:	493f      	ldr	r1, [pc, #252]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	025b      	lsls	r3, r3, #9
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	061b      	lsls	r3, r3, #24
 8006f78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f7c:	4931      	ldr	r1, [pc, #196]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f82:	4b30      	ldr	r3, [pc, #192]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	492d      	ldr	r1, [pc, #180]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f94:	4b2b      	ldr	r3, [pc, #172]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	4928      	ldr	r1, [pc, #160]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006fa6:	4b27      	ldr	r3, [pc, #156]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	4a26      	ldr	r2, [pc, #152]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fb2:	4b24      	ldr	r3, [pc, #144]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fb6:	4b24      	ldr	r3, [pc, #144]	@ (8007048 <RCCEx_PLL3_Config+0x160>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	69d2      	ldr	r2, [r2, #28]
 8006fbe:	00d2      	lsls	r2, r2, #3
 8006fc0:	4920      	ldr	r1, [pc, #128]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	4a1e      	ldr	r2, [pc, #120]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fdc:	4a19      	ldr	r2, [pc, #100]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fe4:	e00f      	b.n	8007006 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d106      	bne.n	8006ffa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fec:	4b15      	ldr	r3, [pc, #84]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff0:	4a14      	ldr	r2, [pc, #80]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006ff2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ff8:	e005      	b.n	8007006 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ffa:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	4a11      	ldr	r2, [pc, #68]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8007000:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007004:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007006:	4b0f      	ldr	r3, [pc, #60]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a0e      	ldr	r2, [pc, #56]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 800700c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007012:	f7fa fb55 	bl	80016c0 <HAL_GetTick>
 8007016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007018:	e008      	b.n	800702c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800701a:	f7fa fb51 	bl	80016c0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e006      	b.n	800703a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800702c:	4b05      	ldr	r3, [pc, #20]	@ (8007044 <RCCEx_PLL3_Config+0x15c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
 8007048:	ffff0007 	.word	0xffff0007

0800704c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e02b      	b.n	80070b8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7f9 fb1d 	bl	80006b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2202      	movs	r2, #2
 800707e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	3304      	adds	r3, #4
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f000 f921 	bl	80072d4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	461a      	mov	r2, r3
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	f000 f975 	bl	800738c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80070a2:	4b07      	ldr	r3, [pc, #28]	@ (80070c0 <HAL_SDRAM_Init+0x74>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a06      	ldr	r2, [pc, #24]	@ (80070c0 <HAL_SDRAM_Init+0x74>)
 80070a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070ac:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	52004000 	.word	0x52004000

080070c4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80070d6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d101      	bne.n	80070e2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80070de:	2302      	movs	r3, #2
 80070e0:	e021      	b.n	8007126 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d002      	beq.n	80070ee <HAL_SDRAM_SendCommand+0x2a>
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	d118      	bne.n	8007120 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f9ae 	bl	8007460 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d104      	bne.n	8007116 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2205      	movs	r2, #5
 8007110:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007114:	e006      	b.n	8007124 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800711e:	e001      	b.n	8007124 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e05e      	b.n	8007200 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fa f808 	bl	800116c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0203 	bic.w	r2, r2, #3
 8007172:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	4b22      	ldr	r3, [pc, #136]	@ (8007208 <HAL_SPDIFRX_Init+0xd8>)
 8007180:	4013      	ands	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800718c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8007192:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007198:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800719e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80071a4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80071aa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80071b0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 80071b6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 80071bc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d103      	bne.n	80071d6 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071d4:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d103      	bne.n	80071e8 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	ffc88407 	.word	0xffc88407

0800720c <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b10      	ldr	r3, [pc, #64]	@ (800725c <FMC_NAND_Init+0x50>)
 800721c:	4013      	ands	r3, r2
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	6851      	ldr	r1, [r2, #4]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	6892      	ldr	r2, [r2, #8]
 8007226:	4311      	orrs	r1, r2
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	68d2      	ldr	r2, [r2, #12]
 800722c:	4311      	orrs	r1, r2
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	6912      	ldr	r2, [r2, #16]
 8007232:	4311      	orrs	r1, r2
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	6952      	ldr	r2, [r2, #20]
 8007238:	0252      	lsls	r2, r2, #9
 800723a:	4311      	orrs	r1, r2
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	6992      	ldr	r2, [r2, #24]
 8007240:	0352      	lsls	r2, r2, #13
 8007242:	430a      	orrs	r2, r1
 8007244:	4313      	orrs	r3, r2
 8007246:	f043 0208 	orr.w	r2, r3, #8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	fff00189 	.word	0xfff00189

08007260 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8007276:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800727e:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8007286:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 80072b0:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80072b8:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 80072c0:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d121      	bne.n	800732a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4b27      	ldr	r3, [pc, #156]	@ (8007388 <FMC_SDRAM_Init+0xb4>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	6851      	ldr	r1, [r2, #4]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	6892      	ldr	r2, [r2, #8]
 80072f6:	4311      	orrs	r1, r2
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	68d2      	ldr	r2, [r2, #12]
 80072fc:	4311      	orrs	r1, r2
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	6912      	ldr	r2, [r2, #16]
 8007302:	4311      	orrs	r1, r2
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	6952      	ldr	r2, [r2, #20]
 8007308:	4311      	orrs	r1, r2
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	6992      	ldr	r2, [r2, #24]
 800730e:	4311      	orrs	r1, r2
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	69d2      	ldr	r2, [r2, #28]
 8007314:	4311      	orrs	r1, r2
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	6a12      	ldr	r2, [r2, #32]
 800731a:	4311      	orrs	r1, r2
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007320:	430a      	orrs	r2, r1
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e026      	b.n	8007378 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	69d9      	ldr	r1, [r3, #28]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	4319      	orrs	r1, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007340:	430b      	orrs	r3, r1
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	4b0e      	ldr	r3, [pc, #56]	@ (8007388 <FMC_SDRAM_Init+0xb4>)
 800734e:	4013      	ands	r3, r2
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	6851      	ldr	r1, [r2, #4]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	6892      	ldr	r2, [r2, #8]
 8007358:	4311      	orrs	r1, r2
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	68d2      	ldr	r2, [r2, #12]
 800735e:	4311      	orrs	r1, r2
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	6912      	ldr	r2, [r2, #16]
 8007364:	4311      	orrs	r1, r2
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	6952      	ldr	r2, [r2, #20]
 800736a:	4311      	orrs	r1, r2
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	6992      	ldr	r2, [r2, #24]
 8007370:	430a      	orrs	r2, r1
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	ffff8000 	.word	0xffff8000

0800738c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d128      	bne.n	80073f0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	1e59      	subs	r1, r3, #1
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	4319      	orrs	r1, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	4319      	orrs	r1, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	031b      	lsls	r3, r3, #12
 80073c8:	4319      	orrs	r1, r3
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	4319      	orrs	r1, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	3b01      	subs	r3, #1
 80073da:	051b      	lsls	r3, r3, #20
 80073dc:	4319      	orrs	r1, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	061b      	lsls	r3, r3, #24
 80073e6:	430b      	orrs	r3, r1
 80073e8:	431a      	orrs	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	609a      	str	r2, [r3, #8]
 80073ee:	e02d      	b.n	800744c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	4b19      	ldr	r3, [pc, #100]	@ (800745c <FMC_SDRAM_Timing_Init+0xd0>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	68d2      	ldr	r2, [r2, #12]
 80073fc:	3a01      	subs	r2, #1
 80073fe:	0311      	lsls	r1, r2, #12
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	6952      	ldr	r2, [r2, #20]
 8007404:	3a01      	subs	r2, #1
 8007406:	0512      	lsls	r2, r2, #20
 8007408:	430a      	orrs	r2, r1
 800740a:	431a      	orrs	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	1e59      	subs	r1, r3, #1
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	3b01      	subs	r3, #1
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	4319      	orrs	r1, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	3b01      	subs	r3, #1
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	4319      	orrs	r1, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	3b01      	subs	r3, #1
 8007438:	041b      	lsls	r3, r3, #16
 800743a:	4319      	orrs	r1, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	3b01      	subs	r3, #1
 8007442:	061b      	lsls	r3, r3, #24
 8007444:	430b      	orrs	r3, r1
 8007446:	431a      	orrs	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	ff0f0fff 	.word	0xff0f0fff

08007460 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	4b0c      	ldr	r3, [pc, #48]	@ (80074a4 <FMC_SDRAM_SendCommand+0x44>)
 8007472:	4013      	ands	r3, r2
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	6811      	ldr	r1, [r2, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	6852      	ldr	r2, [r2, #4]
 800747c:	4311      	orrs	r1, r2
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	6892      	ldr	r2, [r2, #8]
 8007482:	3a01      	subs	r2, #1
 8007484:	0152      	lsls	r2, r2, #5
 8007486:	4311      	orrs	r1, r2
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	68d2      	ldr	r2, [r2, #12]
 800748c:	0252      	lsls	r2, r2, #9
 800748e:	430a      	orrs	r2, r1
 8007490:	431a      	orrs	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	ffc00000 	.word	0xffc00000

080074a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074a8:	b084      	sub	sp, #16
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	f107 001c 	add.w	r0, r7, #28
 80074b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d121      	bne.n	8007506 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007584 <USB_CoreInit+0xdc>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d105      	bne.n	80074fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fafa 	bl	8008af4 <USB_CoreReset>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
 8007504:	e01b      	b.n	800753e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 faee 	bl	8008af4 <USB_CoreReset>
 8007518:	4603      	mov	r3, r0
 800751a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800751c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007528:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007530:	e005      	b.n	800753e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007536:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800753e:	7fbb      	ldrb	r3, [r7, #30]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d116      	bne.n	8007572 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007548:	b29a      	uxth	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007552:	4b0d      	ldr	r3, [pc, #52]	@ (8007588 <USB_CoreInit+0xe0>)
 8007554:	4313      	orrs	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f043 0206 	orr.w	r2, r3, #6
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800757e:	b004      	add	sp, #16
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	ffbdffbf 	.word	0xffbdffbf
 8007588:	03ee0000 	.word	0x03ee0000

0800758c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	2b02      	cmp	r3, #2
 800759e:	d165      	bne.n	800766c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4a41      	ldr	r2, [pc, #260]	@ (80076a8 <USB_SetTurnaroundTime+0x11c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d906      	bls.n	80075b6 <USB_SetTurnaroundTime+0x2a>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a40      	ldr	r2, [pc, #256]	@ (80076ac <USB_SetTurnaroundTime+0x120>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d202      	bcs.n	80075b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075b0:	230f      	movs	r3, #15
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e062      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4a3c      	ldr	r2, [pc, #240]	@ (80076ac <USB_SetTurnaroundTime+0x120>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d306      	bcc.n	80075cc <USB_SetTurnaroundTime+0x40>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4a3b      	ldr	r2, [pc, #236]	@ (80076b0 <USB_SetTurnaroundTime+0x124>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d202      	bcs.n	80075cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075c6:	230e      	movs	r3, #14
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	e057      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4a38      	ldr	r2, [pc, #224]	@ (80076b0 <USB_SetTurnaroundTime+0x124>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d306      	bcc.n	80075e2 <USB_SetTurnaroundTime+0x56>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4a37      	ldr	r2, [pc, #220]	@ (80076b4 <USB_SetTurnaroundTime+0x128>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d202      	bcs.n	80075e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80075dc:	230d      	movs	r3, #13
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e04c      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4a33      	ldr	r2, [pc, #204]	@ (80076b4 <USB_SetTurnaroundTime+0x128>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d306      	bcc.n	80075f8 <USB_SetTurnaroundTime+0x6c>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4a32      	ldr	r2, [pc, #200]	@ (80076b8 <USB_SetTurnaroundTime+0x12c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d802      	bhi.n	80075f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80075f2:	230c      	movs	r3, #12
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e041      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4a2f      	ldr	r2, [pc, #188]	@ (80076b8 <USB_SetTurnaroundTime+0x12c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d906      	bls.n	800760e <USB_SetTurnaroundTime+0x82>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4a2e      	ldr	r2, [pc, #184]	@ (80076bc <USB_SetTurnaroundTime+0x130>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d802      	bhi.n	800760e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007608:	230b      	movs	r3, #11
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	e036      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4a2a      	ldr	r2, [pc, #168]	@ (80076bc <USB_SetTurnaroundTime+0x130>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d906      	bls.n	8007624 <USB_SetTurnaroundTime+0x98>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4a29      	ldr	r2, [pc, #164]	@ (80076c0 <USB_SetTurnaroundTime+0x134>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d802      	bhi.n	8007624 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800761e:	230a      	movs	r3, #10
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	e02b      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a26      	ldr	r2, [pc, #152]	@ (80076c0 <USB_SetTurnaroundTime+0x134>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d906      	bls.n	800763a <USB_SetTurnaroundTime+0xae>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4a25      	ldr	r2, [pc, #148]	@ (80076c4 <USB_SetTurnaroundTime+0x138>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d202      	bcs.n	800763a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007634:	2309      	movs	r3, #9
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	e020      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4a21      	ldr	r2, [pc, #132]	@ (80076c4 <USB_SetTurnaroundTime+0x138>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d306      	bcc.n	8007650 <USB_SetTurnaroundTime+0xc4>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	4a20      	ldr	r2, [pc, #128]	@ (80076c8 <USB_SetTurnaroundTime+0x13c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d802      	bhi.n	8007650 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800764a:	2308      	movs	r3, #8
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e015      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4a1d      	ldr	r2, [pc, #116]	@ (80076c8 <USB_SetTurnaroundTime+0x13c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d906      	bls.n	8007666 <USB_SetTurnaroundTime+0xda>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4a1c      	ldr	r2, [pc, #112]	@ (80076cc <USB_SetTurnaroundTime+0x140>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d202      	bcs.n	8007666 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007660:	2307      	movs	r3, #7
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	e00a      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007666:	2306      	movs	r3, #6
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	e007      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007672:	2309      	movs	r3, #9
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e001      	b.n	800767c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007678:	2309      	movs	r3, #9
 800767a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	029b      	lsls	r3, r3, #10
 8007690:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007694:	431a      	orrs	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	00d8acbf 	.word	0x00d8acbf
 80076ac:	00e4e1c0 	.word	0x00e4e1c0
 80076b0:	00f42400 	.word	0x00f42400
 80076b4:	01067380 	.word	0x01067380
 80076b8:	011a499f 	.word	0x011a499f
 80076bc:	01312cff 	.word	0x01312cff
 80076c0:	014ca43f 	.word	0x014ca43f
 80076c4:	016e3600 	.word	0x016e3600
 80076c8:	01a6ab1f 	.word	0x01a6ab1f
 80076cc:	01e84800 	.word	0x01e84800

080076d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f043 0201 	orr.w	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f023 0201 	bic.w	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d115      	bne.n	8007762 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007742:	200a      	movs	r0, #10
 8007744:	f7f9 ffc8 	bl	80016d8 <HAL_Delay>
      ms += 10U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	330a      	adds	r3, #10
 800774c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 f93f 	bl	80089d2 <USB_GetMode>
 8007754:	4603      	mov	r3, r0
 8007756:	2b01      	cmp	r3, #1
 8007758:	d01e      	beq.n	8007798 <USB_SetCurrentMode+0x84>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2bc7      	cmp	r3, #199	@ 0xc7
 800775e:	d9f0      	bls.n	8007742 <USB_SetCurrentMode+0x2e>
 8007760:	e01a      	b.n	8007798 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d115      	bne.n	8007794 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007774:	200a      	movs	r0, #10
 8007776:	f7f9 ffaf 	bl	80016d8 <HAL_Delay>
      ms += 10U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	330a      	adds	r3, #10
 800777e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 f926 	bl	80089d2 <USB_GetMode>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <USB_SetCurrentMode+0x84>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007790:	d9f0      	bls.n	8007774 <USB_SetCurrentMode+0x60>
 8007792:	e001      	b.n	8007798 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e005      	b.n	80077a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2bc8      	cmp	r3, #200	@ 0xc8
 800779c:	d101      	bne.n	80077a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ac:	b084      	sub	sp, #16
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	e009      	b.n	80077e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	3340      	adds	r3, #64	@ 0x40
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	2200      	movs	r2, #0
 80077d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3301      	adds	r3, #1
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b0e      	cmp	r3, #14
 80077e4:	d9f2      	bls.n	80077cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d11c      	bne.n	8007828 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077fc:	f043 0302 	orr.w	r3, r3, #2
 8007800:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e005      	b.n	8007834 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800783a:	461a      	mov	r2, r3
 800783c:	2300      	movs	r3, #0
 800783e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007840:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007844:	2b01      	cmp	r3, #1
 8007846:	d10d      	bne.n	8007864 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007850:	2100      	movs	r1, #0
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f968 	bl	8007b28 <USB_SetDevSpeed>
 8007858:	e008      	b.n	800786c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800785a:	2101      	movs	r1, #1
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f963 	bl	8007b28 <USB_SetDevSpeed>
 8007862:	e003      	b.n	800786c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007864:	2103      	movs	r1, #3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f95e 	bl	8007b28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800786c:	2110      	movs	r1, #16
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8fa 	bl	8007a68 <USB_FlushTxFifo>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f924 	bl	8007acc <USB_FlushRxFifo>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007894:	461a      	mov	r2, r3
 8007896:	2300      	movs	r3, #0
 8007898:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a0:	461a      	mov	r2, r3
 80078a2:	2300      	movs	r3, #0
 80078a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ac:	461a      	mov	r2, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b2:	2300      	movs	r3, #0
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	e043      	b.n	8007940 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078ce:	d118      	bne.n	8007902 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e2:	461a      	mov	r2, r3
 80078e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e013      	b.n	8007914 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f8:	461a      	mov	r2, r3
 80078fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	e008      	b.n	8007914 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800790e:	461a      	mov	r2, r3
 8007910:	2300      	movs	r3, #0
 8007912:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007920:	461a      	mov	r2, r3
 8007922:	2300      	movs	r3, #0
 8007924:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007932:	461a      	mov	r2, r3
 8007934:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007938:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3301      	adds	r3, #1
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007944:	461a      	mov	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	4293      	cmp	r3, r2
 800794a:	d3b5      	bcc.n	80078b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800794c:	2300      	movs	r3, #0
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	e043      	b.n	80079da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007968:	d118      	bne.n	800799c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797c:	461a      	mov	r2, r3
 800797e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	e013      	b.n	80079ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007992:	461a      	mov	r2, r3
 8007994:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e008      	b.n	80079ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a8:	461a      	mov	r2, r3
 80079aa:	2300      	movs	r3, #0
 80079ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ba:	461a      	mov	r2, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079cc:	461a      	mov	r2, r3
 80079ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	3301      	adds	r3, #1
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079de:	461a      	mov	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d3b5      	bcc.n	8007952 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f043 0210 	orr.w	r2, r3, #16
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	4b0f      	ldr	r3, [pc, #60]	@ (8007a60 <USB_DevInit+0x2b4>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f043 0208 	orr.w	r2, r3, #8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d105      	bne.n	8007a50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	4b06      	ldr	r3, [pc, #24]	@ (8007a64 <USB_DevInit+0x2b8>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a5c:	b004      	add	sp, #16
 8007a5e:	4770      	bx	lr
 8007a60:	803c3800 	.word	0x803c3800
 8007a64:	40000004 	.word	0x40000004

08007a68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a82:	d901      	bls.n	8007a88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e01b      	b.n	8007ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	daf2      	bge.n	8007a76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	019b      	lsls	r3, r3, #6
 8007a98:	f043 0220 	orr.w	r2, r3, #32
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aac:	d901      	bls.n	8007ab2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e006      	b.n	8007ac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	d0f0      	beq.n	8007aa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ae4:	d901      	bls.n	8007aea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e018      	b.n	8007b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	daf2      	bge.n	8007ad8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2210      	movs	r2, #16
 8007afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b08:	d901      	bls.n	8007b0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e006      	b.n	8007b1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d0f0      	beq.n	8007afc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0306 	and.w	r3, r3, #6
 8007b72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d102      	bne.n	8007b80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75fb      	strb	r3, [r7, #23]
 8007b7e:	e00a      	b.n	8007b96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d002      	beq.n	8007b8c <USB_GetDevSpeed+0x32>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b06      	cmp	r3, #6
 8007b8a:	d102      	bne.n	8007b92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	75fb      	strb	r3, [r7, #23]
 8007b90:	e001      	b.n	8007b96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b92:	230f      	movs	r3, #15
 8007b94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	785b      	ldrb	r3, [r3, #1]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d139      	bne.n	8007c34 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	68f9      	ldr	r1, [r7, #12]
 8007bda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bde:	4313      	orrs	r3, r2
 8007be0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d153      	bne.n	8007ca0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	059b      	lsls	r3, r3, #22
 8007c1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	0159      	lsls	r1, r3, #5
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	440b      	add	r3, r1
 8007c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4b20      	ldr	r3, [pc, #128]	@ (8007cb0 <USB_ActivateEndpoint+0x10c>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	600b      	str	r3, [r1, #0]
 8007c32:	e035      	b.n	8007ca0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f003 030f 	and.w	r3, r3, #15
 8007c44:	2101      	movs	r1, #1
 8007c46:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	68f9      	ldr	r1, [r7, #12]
 8007c4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d119      	bne.n	8007ca0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	791b      	ldrb	r3, [r3, #4]
 8007c86:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	0159      	lsls	r1, r3, #5
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	440b      	add	r3, r1
 8007c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4b05      	ldr	r3, [pc, #20]	@ (8007cb0 <USB_ActivateEndpoint+0x10c>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	10008000 	.word	0x10008000

08007cb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d161      	bne.n	8007d94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ce6:	d11f      	bne.n	8007d28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	2101      	movs	r1, #1
 8007d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	43db      	mvns	r3, r3
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d48:	4013      	ands	r3, r2
 8007d4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d52:	69da      	ldr	r2, [r3, #28]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	43db      	mvns	r3, r3
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	0159      	lsls	r1, r3, #5
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	440b      	add	r3, r1
 8007d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4b35      	ldr	r3, [pc, #212]	@ (8007e64 <USB_DeactivateEndpoint+0x1b0>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	600b      	str	r3, [r1, #0]
 8007d92:	e060      	b.n	8007e56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007daa:	d11f      	bne.n	8007dec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007dca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007e02:	041b      	lsls	r3, r3, #16
 8007e04:	43db      	mvns	r3, r3
 8007e06:	68f9      	ldr	r1, [r7, #12]
 8007e08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	2101      	movs	r1, #1
 8007e22:	fa01 f303 	lsl.w	r3, r1, r3
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	43db      	mvns	r3, r3
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e30:	4013      	ands	r3, r2
 8007e32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	0159      	lsls	r1, r3, #5
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	440b      	add	r3, r1
 8007e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <USB_DeactivateEndpoint+0x1b4>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	ec337800 	.word	0xec337800
 8007e68:	eff37800 	.word	0xeff37800

08007e6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	@ 0x28
 8007e70:	af02      	add	r7, sp, #8
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	f040 8185 	bne.w	8008198 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d132      	bne.n	8007efc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	0159      	lsls	r1, r3, #5
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	440b      	add	r3, r1
 8007eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4ba7      	ldr	r3, [pc, #668]	@ (8008150 <USB_EPStartXfer+0x2e4>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	0151      	lsls	r1, r2, #5
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	440a      	add	r2, r1
 8007ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ed2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee4:	691a      	ldr	r2, [r3, #16]
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	0159      	lsls	r1, r3, #5
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	440b      	add	r3, r1
 8007eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4b97      	ldr	r3, [pc, #604]	@ (8008154 <USB_EPStartXfer+0x2e8>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	610b      	str	r3, [r1, #16]
 8007efa:	e097      	b.n	800802c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	0159      	lsls	r1, r3, #5
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	440b      	add	r3, r1
 8007f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f16:	4619      	mov	r1, r3
 8007f18:	4b8e      	ldr	r3, [pc, #568]	@ (8008154 <USB_EPStartXfer+0x2e8>)
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	0159      	lsls	r1, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	440b      	add	r3, r1
 8007f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4b85      	ldr	r3, [pc, #532]	@ (8008150 <USB_EPStartXfer+0x2e4>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d11a      	bne.n	8007f7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d903      	bls.n	8007f5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	0151      	lsls	r1, r2, #5
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	440a      	add	r2, r1
 8007f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f78:	6113      	str	r3, [r2, #16]
 8007f7a:	e044      	b.n	8008006 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	4413      	add	r3, r2
 8007f86:	1e5a      	subs	r2, r3, #1
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f90:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	8afb      	ldrh	r3, [r7, #22]
 8007fa2:	04d9      	lsls	r1, r3, #19
 8007fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8008158 <USB_EPStartXfer+0x2ec>)
 8007fa6:	400b      	ands	r3, r1
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	0148      	lsls	r0, r1, #5
 8007fac:	69f9      	ldr	r1, [r7, #28]
 8007fae:	4401      	add	r1, r0
 8007fb0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	791b      	ldrb	r3, [r3, #4]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d122      	bne.n	8008006 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fda:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007fde:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fec:	691a      	ldr	r2, [r3, #16]
 8007fee:	8afb      	ldrh	r3, [r7, #22]
 8007ff0:	075b      	lsls	r3, r3, #29
 8007ff2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007ff6:	69b9      	ldr	r1, [r7, #24]
 8007ff8:	0148      	lsls	r0, r1, #5
 8007ffa:	69f9      	ldr	r1, [r7, #28]
 8007ffc:	4401      	add	r1, r0
 8007ffe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008002:	4313      	orrs	r3, r2
 8008004:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800801c:	69b9      	ldr	r1, [r7, #24]
 800801e:	0148      	lsls	r0, r1, #5
 8008020:	69f9      	ldr	r1, [r7, #28]
 8008022:	4401      	add	r1, r0
 8008024:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008028:	4313      	orrs	r3, r2
 800802a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d14b      	bne.n	80080ca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008046:	461a      	mov	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	791b      	ldrb	r3, [r3, #4]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d128      	bne.n	80080a8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008062:	2b00      	cmp	r3, #0
 8008064:	d110      	bne.n	8008088 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008080:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	e00f      	b.n	80080a8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	0151      	lsls	r1, r2, #5
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	440a      	add	r2, r1
 800809e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080a6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	0151      	lsls	r1, r2, #5
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	440a      	add	r2, r1
 80080be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e169      	b.n	800839e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080e8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	791b      	ldrb	r3, [r3, #4]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d015      	beq.n	800811e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8151 	beq.w	800839e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	69f9      	ldr	r1, [r7, #28]
 8008114:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008118:	4313      	orrs	r3, r2
 800811a:	634b      	str	r3, [r1, #52]	@ 0x34
 800811c:	e13f      	b.n	800839e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812a:	2b00      	cmp	r3, #0
 800812c:	d116      	bne.n	800815c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008148:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	e015      	b.n	800817c <USB_EPStartXfer+0x310>
 8008150:	e007ffff 	.word	0xe007ffff
 8008154:	fff80000 	.word	0xfff80000
 8008158:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	440a      	add	r2, r1
 8008172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800817a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	68d9      	ldr	r1, [r3, #12]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	b298      	uxth	r0, r3
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	4603      	mov	r3, r0
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f9b9 	bl	8008508 <USB_WritePacket>
 8008196:	e102      	b.n	800839e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	0159      	lsls	r1, r3, #5
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	440b      	add	r3, r1
 80081ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b2:	4619      	mov	r1, r3
 80081b4:	4b7c      	ldr	r3, [pc, #496]	@ (80083a8 <USB_EPStartXfer+0x53c>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	0159      	lsls	r1, r3, #5
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	440b      	add	r3, r1
 80081d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d4:	4619      	mov	r1, r3
 80081d6:	4b75      	ldr	r3, [pc, #468]	@ (80083ac <USB_EPStartXfer+0x540>)
 80081d8:	4013      	ands	r3, r2
 80081da:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d12f      	bne.n	8008242 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	689a      	ldr	r2, [r3, #8]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008206:	691a      	ldr	r2, [r3, #16]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008210:	69b9      	ldr	r1, [r7, #24]
 8008212:	0148      	lsls	r0, r1, #5
 8008214:	69f9      	ldr	r1, [r7, #28]
 8008216:	4401      	add	r1, r0
 8008218:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800821c:	4313      	orrs	r3, r2
 800821e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	440a      	add	r2, r1
 8008236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800823a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800823e:	6113      	str	r3, [r2, #16]
 8008240:	e05f      	b.n	8008302 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d123      	bne.n	8008292 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	0148      	lsls	r0, r1, #5
 8008264:	69f9      	ldr	r1, [r7, #28]
 8008266:	4401      	add	r1, r0
 8008268:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800826c:	4313      	orrs	r3, r2
 800826e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	440a      	add	r2, r1
 8008286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800828a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800828e:	6113      	str	r3, [r2, #16]
 8008290:	e037      	b.n	8008302 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	4413      	add	r3, r2
 800829c:	1e5a      	subs	r2, r3, #1
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	8afa      	ldrh	r2, [r7, #22]
 80082ae:	fb03 f202 	mul.w	r2, r3, r2
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	8afb      	ldrh	r3, [r7, #22]
 80082c6:	04d9      	lsls	r1, r3, #19
 80082c8:	4b39      	ldr	r3, [pc, #228]	@ (80083b0 <USB_EPStartXfer+0x544>)
 80082ca:	400b      	ands	r3, r1
 80082cc:	69b9      	ldr	r1, [r7, #24]
 80082ce:	0148      	lsls	r0, r1, #5
 80082d0:	69f9      	ldr	r1, [r7, #28]
 80082d2:	4401      	add	r1, r0
 80082d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082d8:	4313      	orrs	r3, r2
 80082da:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e8:	691a      	ldr	r2, [r3, #16]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082f2:	69b9      	ldr	r1, [r7, #24]
 80082f4:	0148      	lsls	r0, r1, #5
 80082f6:	69f9      	ldr	r1, [r7, #28]
 80082f8:	4401      	add	r1, r0
 80082fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082fe:	4313      	orrs	r3, r2
 8008300:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d10d      	bne.n	8008324 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	68d9      	ldr	r1, [r3, #12]
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008320:	460a      	mov	r2, r1
 8008322:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	791b      	ldrb	r3, [r3, #4]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d128      	bne.n	800837e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008338:	2b00      	cmp	r3, #0
 800833a:	d110      	bne.n	800835e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008356:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	e00f      	b.n	800837e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	0151      	lsls	r1, r2, #5
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	440a      	add	r2, r1
 8008374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800837c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	440a      	add	r2, r1
 8008394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008398:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800839c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	fff80000 	.word	0xfff80000
 80083ac:	e007ffff 	.word	0xe007ffff
 80083b0:	1ff80000 	.word	0x1ff80000

080083b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	785b      	ldrb	r3, [r3, #1]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d14a      	bne.n	8008468 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083ea:	f040 8086 	bne.w	80084fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	7812      	ldrb	r2, [r2, #0]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	440a      	add	r2, r1
 8008408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800840c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008410:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	7812      	ldrb	r2, [r2, #0]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	440a      	add	r2, r1
 800842c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008430:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008434:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008442:	4293      	cmp	r3, r2
 8008444:	d902      	bls.n	800844c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	75fb      	strb	r3, [r7, #23]
          break;
 800844a:	e056      	b.n	80084fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008464:	d0e7      	beq.n	8008436 <USB_EPStopXfer+0x82>
 8008466:	e048      	b.n	80084fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800847c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008480:	d13b      	bne.n	80084fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	7812      	ldrb	r2, [r2, #0]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	440a      	add	r2, r1
 800849c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	7812      	ldrb	r2, [r2, #0]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3301      	adds	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d902      	bls.n	80084e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	75fb      	strb	r3, [r7, #23]
          break;
 80084de:	e00c      	b.n	80084fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084f8:	d0e7      	beq.n	80084ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008508:	b480      	push	{r7}
 800850a:	b089      	sub	sp, #36	@ 0x24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	460b      	mov	r3, r1
 8008518:	71fb      	strb	r3, [r7, #7]
 800851a:	4613      	mov	r3, r2
 800851c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008526:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d123      	bne.n	8008576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800852e:	88bb      	ldrh	r3, [r7, #4]
 8008530:	3303      	adds	r3, #3
 8008532:	089b      	lsrs	r3, r3, #2
 8008534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008536:	2300      	movs	r3, #0
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	e018      	b.n	800856e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	031a      	lsls	r2, r3, #12
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	4413      	add	r3, r2
 8008544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008548:	461a      	mov	r2, r3
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	3301      	adds	r3, #1
 8008554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	3301      	adds	r3, #1
 800855a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	3301      	adds	r3, #1
 8008560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	3301      	adds	r3, #1
 8008566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	3301      	adds	r3, #1
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	429a      	cmp	r2, r3
 8008574:	d3e2      	bcc.n	800853c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3724      	adds	r7, #36	@ 0x24
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008584:	b480      	push	{r7}
 8008586:	b08b      	sub	sp, #44	@ 0x2c
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4613      	mov	r3, r2
 8008590:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	089b      	lsrs	r3, r3, #2
 800859e:	b29b      	uxth	r3, r3
 80085a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085a2:	88fb      	ldrh	r3, [r7, #6]
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085aa:	2300      	movs	r3, #0
 80085ac:	623b      	str	r3, [r7, #32]
 80085ae:	e014      	b.n	80085da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	3301      	adds	r3, #1
 80085c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c4:	3301      	adds	r3, #1
 80085c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	3301      	adds	r3, #1
 80085cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	3301      	adds	r3, #1
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	3301      	adds	r3, #1
 80085d8:	623b      	str	r3, [r7, #32]
 80085da:	6a3a      	ldr	r2, [r7, #32]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d3e6      	bcc.n	80085b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80085e2:	8bfb      	ldrh	r3, [r7, #30]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d01e      	beq.n	8008626 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085f2:	461a      	mov	r2, r3
 80085f4:	f107 0310 	add.w	r3, r7, #16
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	fa22 f303 	lsr.w	r3, r2, r3
 8008608:	b2da      	uxtb	r2, r3
 800860a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860c:	701a      	strb	r2, [r3, #0]
      i++;
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	3301      	adds	r3, #1
 8008612:	623b      	str	r3, [r7, #32]
      pDest++;
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	3301      	adds	r3, #1
 8008618:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800861a:	8bfb      	ldrh	r3, [r7, #30]
 800861c:	3b01      	subs	r3, #1
 800861e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008620:	8bfb      	ldrh	r3, [r7, #30]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1ea      	bne.n	80085fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008628:	4618      	mov	r0, r3
 800862a:	372c      	adds	r7, #44	@ 0x2c
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d12c      	bne.n	80086aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	db12      	blt.n	8008688 <USB_EPSetStall+0x54>
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00f      	beq.n	8008688 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4413      	add	r3, r2
 8008670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	0151      	lsls	r1, r2, #5
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	440a      	add	r2, r1
 800867e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008682:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008686:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	440a      	add	r2, r1
 800869e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	e02b      	b.n	8008702 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	db12      	blt.n	80086e2 <USB_EPSetStall+0xae>
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00f      	beq.n	80086e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	0151      	lsls	r1, r2, #5
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	440a      	add	r2, r1
 80086d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d128      	bne.n	800877e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	0151      	lsls	r1, r2, #5
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	440a      	add	r2, r1
 8008742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008746:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800874a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	791b      	ldrb	r3, [r3, #4]
 8008750:	2b03      	cmp	r3, #3
 8008752:	d003      	beq.n	800875c <USB_EPClearStall+0x4c>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	791b      	ldrb	r3, [r3, #4]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d138      	bne.n	80087ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	440a      	add	r2, r1
 8008772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	e027      	b.n	80087ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	440a      	add	r2, r1
 8008794:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008798:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800879c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	791b      	ldrb	r3, [r3, #4]
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d003      	beq.n	80087ae <USB_EPClearStall+0x9e>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	791b      	ldrb	r3, [r3, #4]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d10f      	bne.n	80087ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80087fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008810:	68f9      	ldr	r1, [r7, #12]
 8008812:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008816:	4313      	orrs	r3, r2
 8008818:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008842:	f023 0303 	bic.w	r3, r3, #3
 8008846:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008856:	f023 0302 	bic.w	r3, r3, #2
 800885a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008884:	f023 0303 	bic.w	r3, r3, #3
 8008888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008898:	f043 0302 	orr.w	r3, r3, #2
 800889c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4013      	ands	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088c4:	68fb      	ldr	r3, [r7, #12]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4013      	ands	r3, r2
 80088f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	0c1b      	lsrs	r3, r3, #16
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008906:	b480      	push	{r7}
 8008908:	b085      	sub	sp, #20
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	4013      	ands	r3, r2
 8008928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	b29b      	uxth	r3, r3
}
 800892e:	4618      	mov	r0, r3
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	4013      	ands	r3, r2
 8008966:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008968:	68bb      	ldr	r3, [r7, #8]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008976:	b480      	push	{r7}
 8008978:	b087      	sub	sp, #28
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008998:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	fa22 f303 	lsr.w	r3, r2, r3
 80089a6:	01db      	lsls	r3, r3, #7
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4013      	ands	r3, r2
 80089c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089c4:	68bb      	ldr	r3, [r7, #8]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f003 0301 	and.w	r3, r3, #1
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
	...

080089f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4b09      	ldr	r3, [pc, #36]	@ (8008a34 <USB_ActivateSetup+0x44>)
 8008a0e:	4013      	ands	r3, r2
 8008a10:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	fffff800 	.word	0xfffff800

08008a38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	460b      	mov	r3, r1
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	333c      	adds	r3, #60	@ 0x3c
 8008a4e:	3304      	adds	r3, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	4a26      	ldr	r2, [pc, #152]	@ (8008af0 <USB_EP0_OutStart+0xb8>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d90a      	bls.n	8008a72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a6c:	d101      	bne.n	8008a72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e037      	b.n	8008ae2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a78:	461a      	mov	r2, r3
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aa0:	f043 0318 	orr.w	r3, r3, #24
 8008aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ab4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008ab8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d10f      	bne.n	8008ae0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ada:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008ade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	4f54300a 	.word	0x4f54300a

08008af4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b0c:	d901      	bls.n	8008b12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e01b      	b.n	8008b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	daf2      	bge.n	8008b00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f043 0201 	orr.w	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b36:	d901      	bls.n	8008b3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e006      	b.n	8008b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d0f0      	beq.n	8008b2a <USB_CoreReset+0x36>

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
	...

08008b58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b64:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008b68:	f002 fd3e 	bl	800b5e8 <USBD_static_malloc>
 8008b6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d109      	bne.n	8008b88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	32b0      	adds	r2, #176	@ 0xb0
 8008b7e:	2100      	movs	r1, #0
 8008b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008b84:	2302      	movs	r3, #2
 8008b86:	e0d4      	b.n	8008d32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008b88:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f002 fe8d 	bl	800b8ae <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32b0      	adds	r2, #176	@ 0xb0
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32b0      	adds	r2, #176	@ 0xb0
 8008bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7c1b      	ldrb	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d138      	bne.n	8008c32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8008d3c <USBD_CDC_Init+0x1e4>)
 8008bc2:	7819      	ldrb	r1, [r3, #0]
 8008bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bc8:	2202      	movs	r2, #2
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f002 fbe9 	bl	800b3a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8008d3c <USBD_CDC_Init+0x1e4>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	f003 020f 	and.w	r2, r3, #15
 8008bd8:	6879      	ldr	r1, [r7, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	3324      	adds	r3, #36	@ 0x24
 8008be6:	2201      	movs	r2, #1
 8008be8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bea:	4b55      	ldr	r3, [pc, #340]	@ (8008d40 <USBD_CDC_Init+0x1e8>)
 8008bec:	7819      	ldrb	r1, [r3, #0]
 8008bee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f002 fbd4 	bl	800b3a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008bfa:	4b51      	ldr	r3, [pc, #324]	@ (8008d40 <USBD_CDC_Init+0x1e8>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	f003 020f 	and.w	r2, r3, #15
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	440b      	add	r3, r1
 8008c0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c12:	2201      	movs	r2, #1
 8008c14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c16:	4b4b      	ldr	r3, [pc, #300]	@ (8008d44 <USBD_CDC_Init+0x1ec>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	f003 020f 	and.w	r2, r3, #15
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	440b      	add	r3, r1
 8008c2a:	3326      	adds	r3, #38	@ 0x26
 8008c2c:	2210      	movs	r2, #16
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	e035      	b.n	8008c9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c32:	4b42      	ldr	r3, [pc, #264]	@ (8008d3c <USBD_CDC_Init+0x1e4>)
 8008c34:	7819      	ldrb	r1, [r3, #0]
 8008c36:	2340      	movs	r3, #64	@ 0x40
 8008c38:	2202      	movs	r2, #2
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f002 fbb1 	bl	800b3a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008c40:	4b3e      	ldr	r3, [pc, #248]	@ (8008d3c <USBD_CDC_Init+0x1e4>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	f003 020f 	and.w	r2, r3, #15
 8008c48:	6879      	ldr	r1, [r7, #4]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	440b      	add	r3, r1
 8008c54:	3324      	adds	r3, #36	@ 0x24
 8008c56:	2201      	movs	r2, #1
 8008c58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c5a:	4b39      	ldr	r3, [pc, #228]	@ (8008d40 <USBD_CDC_Init+0x1e8>)
 8008c5c:	7819      	ldrb	r1, [r3, #0]
 8008c5e:	2340      	movs	r3, #64	@ 0x40
 8008c60:	2202      	movs	r2, #2
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f002 fb9d 	bl	800b3a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c68:	4b35      	ldr	r3, [pc, #212]	@ (8008d40 <USBD_CDC_Init+0x1e8>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	f003 020f 	and.w	r2, r3, #15
 8008c70:	6879      	ldr	r1, [r7, #4]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c80:	2201      	movs	r2, #1
 8008c82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008c84:	4b2f      	ldr	r3, [pc, #188]	@ (8008d44 <USBD_CDC_Init+0x1ec>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	f003 020f 	and.w	r2, r3, #15
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	3326      	adds	r3, #38	@ 0x26
 8008c9a:	2210      	movs	r2, #16
 8008c9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c9e:	4b29      	ldr	r3, [pc, #164]	@ (8008d44 <USBD_CDC_Init+0x1ec>)
 8008ca0:	7819      	ldrb	r1, [r3, #0]
 8008ca2:	2308      	movs	r3, #8
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f002 fb7b 	bl	800b3a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008cac:	4b25      	ldr	r3, [pc, #148]	@ (8008d44 <USBD_CDC_Init+0x1ec>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	3324      	adds	r3, #36	@ 0x24
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	33b0      	adds	r3, #176	@ 0xb0
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e018      	b.n	8008d32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	7c1b      	ldrb	r3, [r3, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d08:	4b0d      	ldr	r3, [pc, #52]	@ (8008d40 <USBD_CDC_Init+0x1e8>)
 8008d0a:	7819      	ldrb	r1, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f002 fc32 	bl	800b580 <USBD_LL_PrepareReceive>
 8008d1c:	e008      	b.n	8008d30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d1e:	4b08      	ldr	r3, [pc, #32]	@ (8008d40 <USBD_CDC_Init+0x1e8>)
 8008d20:	7819      	ldrb	r1, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d28:	2340      	movs	r3, #64	@ 0x40
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f002 fc28 	bl	800b580 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	24000097 	.word	0x24000097
 8008d40:	24000098 	.word	0x24000098
 8008d44:	24000099 	.word	0x24000099

08008d48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008d54:	4b3a      	ldr	r3, [pc, #232]	@ (8008e40 <USBD_CDC_DeInit+0xf8>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f002 fb47 	bl	800b3ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008d60:	4b37      	ldr	r3, [pc, #220]	@ (8008e40 <USBD_CDC_DeInit+0xf8>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 020f 	and.w	r2, r3, #15
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	3324      	adds	r3, #36	@ 0x24
 8008d76:	2200      	movs	r2, #0
 8008d78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008d7a:	4b32      	ldr	r3, [pc, #200]	@ (8008e44 <USBD_CDC_DeInit+0xfc>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f002 fb34 	bl	800b3ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008d86:	4b2f      	ldr	r3, [pc, #188]	@ (8008e44 <USBD_CDC_DeInit+0xfc>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	f003 020f 	and.w	r2, r3, #15
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d9e:	2200      	movs	r2, #0
 8008da0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008da2:	4b29      	ldr	r3, [pc, #164]	@ (8008e48 <USBD_CDC_DeInit+0x100>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f002 fb20 	bl	800b3ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008dae:	4b26      	ldr	r3, [pc, #152]	@ (8008e48 <USBD_CDC_DeInit+0x100>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	f003 020f 	and.w	r2, r3, #15
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	3324      	adds	r3, #36	@ 0x24
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8008e48 <USBD_CDC_DeInit+0x100>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	f003 020f 	and.w	r2, r3, #15
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	3326      	adds	r3, #38	@ 0x26
 8008dde:	2200      	movs	r2, #0
 8008de0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	32b0      	adds	r2, #176	@ 0xb0
 8008dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01f      	beq.n	8008e34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	33b0      	adds	r3, #176	@ 0xb0
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	32b0      	adds	r2, #176	@ 0xb0
 8008e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f002 fbf4 	bl	800b604 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	32b0      	adds	r2, #176	@ 0xb0
 8008e26:	2100      	movs	r1, #0
 8008e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	24000097 	.word	0x24000097
 8008e44:	24000098 	.word	0x24000098
 8008e48:	24000099 	.word	0x24000099

08008e4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	32b0      	adds	r2, #176	@ 0xb0
 8008e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e0bf      	b.n	8008ffc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d050      	beq.n	8008f2a <USBD_CDC_Setup+0xde>
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	f040 80af 	bne.w	8008fec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	88db      	ldrh	r3, [r3, #6]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d03a      	beq.n	8008f0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	da1b      	bge.n	8008ed8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	33b0      	adds	r3, #176	@ 0xb0
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008eb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	88d2      	ldrh	r2, [r2, #6]
 8008ebc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	88db      	ldrh	r3, [r3, #6]
 8008ec2:	2b07      	cmp	r3, #7
 8008ec4:	bf28      	it	cs
 8008ec6:	2307      	movcs	r3, #7
 8008ec8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	89fa      	ldrh	r2, [r7, #14]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 fdd9 	bl	800aa88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008ed6:	e090      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	785a      	ldrb	r2, [r3, #1]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	88db      	ldrh	r3, [r3, #6]
 8008ee6:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ee8:	d803      	bhi.n	8008ef2 <USBD_CDC_Setup+0xa6>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	88db      	ldrh	r3, [r3, #6]
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	e000      	b.n	8008ef4 <USBD_CDC_Setup+0xa8>
 8008ef2:	2240      	movs	r2, #64	@ 0x40
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008efa:	6939      	ldr	r1, [r7, #16]
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008f02:	461a      	mov	r2, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fdeb 	bl	800aae0 <USBD_CtlPrepareRx>
      break;
 8008f0a:	e076      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	33b0      	adds	r3, #176	@ 0xb0
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	7850      	ldrb	r0, [r2, #1]
 8008f22:	2200      	movs	r2, #0
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	4798      	blx	r3
      break;
 8008f28:	e067      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b0b      	cmp	r3, #11
 8008f30:	d851      	bhi.n	8008fd6 <USBD_CDC_Setup+0x18a>
 8008f32:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <USBD_CDC_Setup+0xec>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f69 	.word	0x08008f69
 8008f3c:	08008fe5 	.word	0x08008fe5
 8008f40:	08008fd7 	.word	0x08008fd7
 8008f44:	08008fd7 	.word	0x08008fd7
 8008f48:	08008fd7 	.word	0x08008fd7
 8008f4c:	08008fd7 	.word	0x08008fd7
 8008f50:	08008fd7 	.word	0x08008fd7
 8008f54:	08008fd7 	.word	0x08008fd7
 8008f58:	08008fd7 	.word	0x08008fd7
 8008f5c:	08008fd7 	.word	0x08008fd7
 8008f60:	08008f93 	.word	0x08008f93
 8008f64:	08008fbd 	.word	0x08008fbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d107      	bne.n	8008f84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f74:	f107 030a 	add.w	r3, r7, #10
 8008f78:	2202      	movs	r2, #2
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fd83 	bl	800aa88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f82:	e032      	b.n	8008fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fd01 	bl	800a98e <USBD_CtlError>
            ret = USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8008f90:	e02b      	b.n	8008fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d107      	bne.n	8008fae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f9e:	f107 030d 	add.w	r3, r7, #13
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fd6e 	bl	800aa88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fac:	e01d      	b.n	8008fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 fcec 	bl	800a98e <USBD_CtlError>
            ret = USBD_FAIL;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8008fba:	e016      	b.n	8008fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d00f      	beq.n	8008fe8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fcdf 	bl	800a98e <USBD_CtlError>
            ret = USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008fd4:	e008      	b.n	8008fe8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 fcd8 	bl	800a98e <USBD_CtlError>
          ret = USBD_FAIL;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fe2:	e002      	b.n	8008fea <USBD_CDC_Setup+0x19e>
          break;
 8008fe4:	bf00      	nop
 8008fe6:	e008      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>
          break;
 8008fe8:	bf00      	nop
      }
      break;
 8008fea:	e006      	b.n	8008ffa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fccd 	bl	800a98e <USBD_CtlError>
      ret = USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	32b0      	adds	r2, #176	@ 0xb0
 8009022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800902a:	2303      	movs	r3, #3
 800902c:	e065      	b.n	80090fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	32b0      	adds	r2, #176	@ 0xb0
 8009038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f003 020f 	and.w	r2, r3, #15
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	440b      	add	r3, r1
 8009050:	3318      	adds	r3, #24
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d02f      	beq.n	80090b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	f003 020f 	and.w	r2, r3, #15
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4613      	mov	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	3318      	adds	r3, #24
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	f003 010f 	and.w	r1, r3, #15
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	460b      	mov	r3, r1
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	440b      	add	r3, r1
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4403      	add	r3, r0
 8009080:	331c      	adds	r3, #28
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	fbb2 f1f3 	udiv	r1, r2, r3
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800908e:	2b00      	cmp	r3, #0
 8009090:	d112      	bne.n	80090b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	3318      	adds	r3, #24
 80090a6:	2200      	movs	r2, #0
 80090a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090aa:	78f9      	ldrb	r1, [r7, #3]
 80090ac:	2300      	movs	r3, #0
 80090ae:	2200      	movs	r2, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f002 fa44 	bl	800b53e <USBD_LL_Transmit>
 80090b6:	e01f      	b.n	80090f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	33b0      	adds	r3, #176	@ 0xb0
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d010      	beq.n	80090f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	33b0      	adds	r3, #176	@ 0xb0
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80090f4:	78fa      	ldrb	r2, [r7, #3]
 80090f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	32b0      	adds	r2, #176	@ 0xb0
 8009118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	32b0      	adds	r2, #176	@ 0xb0
 8009128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009130:	2303      	movs	r3, #3
 8009132:	e01a      	b.n	800916a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f002 fa42 	bl	800b5c2 <USBD_LL_GetRxDataSize>
 800913e:	4602      	mov	r2, r0
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	33b0      	adds	r3, #176	@ 0xb0
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009164:	4611      	mov	r1, r2
 8009166:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	32b0      	adds	r2, #176	@ 0xb0
 8009184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009188:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009190:	2303      	movs	r3, #3
 8009192:	e024      	b.n	80091de <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	33b0      	adds	r3, #176	@ 0xb0
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d019      	beq.n	80091dc <USBD_CDC_EP0_RxReady+0x6a>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80091ae:	2bff      	cmp	r3, #255	@ 0xff
 80091b0:	d014      	beq.n	80091dc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	33b0      	adds	r3, #176	@ 0xb0
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80091ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	22ff      	movs	r2, #255	@ 0xff
 80091d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091f0:	2182      	movs	r1, #130	@ 0x82
 80091f2:	4818      	ldr	r0, [pc, #96]	@ (8009254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091f4:	f000 fd6b 	bl	8009cce <USBD_GetEpDesc>
 80091f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091fa:	2101      	movs	r1, #1
 80091fc:	4815      	ldr	r0, [pc, #84]	@ (8009254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80091fe:	f000 fd66 	bl	8009cce <USBD_GetEpDesc>
 8009202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009204:	2181      	movs	r1, #129	@ 0x81
 8009206:	4813      	ldr	r0, [pc, #76]	@ (8009254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009208:	f000 fd61 	bl	8009cce <USBD_GetEpDesc>
 800920c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2210      	movs	r2, #16
 8009218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d006      	beq.n	800922e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	2200      	movs	r2, #0
 8009224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009228:	711a      	strb	r2, [r3, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d006      	beq.n	8009242 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800923c:	711a      	strb	r2, [r3, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2243      	movs	r2, #67	@ 0x43
 8009246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009248:	4b02      	ldr	r3, [pc, #8]	@ (8009254 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	24000054 	.word	0x24000054

08009258 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009260:	2182      	movs	r1, #130	@ 0x82
 8009262:	4818      	ldr	r0, [pc, #96]	@ (80092c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009264:	f000 fd33 	bl	8009cce <USBD_GetEpDesc>
 8009268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800926a:	2101      	movs	r1, #1
 800926c:	4815      	ldr	r0, [pc, #84]	@ (80092c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800926e:	f000 fd2e 	bl	8009cce <USBD_GetEpDesc>
 8009272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009274:	2181      	movs	r1, #129	@ 0x81
 8009276:	4813      	ldr	r0, [pc, #76]	@ (80092c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009278:	f000 fd29 	bl	8009cce <USBD_GetEpDesc>
 800927c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2210      	movs	r2, #16
 8009288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d006      	beq.n	800929e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2200      	movs	r2, #0
 8009294:	711a      	strb	r2, [r3, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f042 0202 	orr.w	r2, r2, #2
 800929c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d006      	beq.n	80092b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	711a      	strb	r2, [r3, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f042 0202 	orr.w	r2, r2, #2
 80092b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2243      	movs	r2, #67	@ 0x43
 80092b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092b8:	4b02      	ldr	r3, [pc, #8]	@ (80092c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	24000054 	.word	0x24000054

080092c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092d0:	2182      	movs	r1, #130	@ 0x82
 80092d2:	4818      	ldr	r0, [pc, #96]	@ (8009334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092d4:	f000 fcfb 	bl	8009cce <USBD_GetEpDesc>
 80092d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092da:	2101      	movs	r1, #1
 80092dc:	4815      	ldr	r0, [pc, #84]	@ (8009334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092de:	f000 fcf6 	bl	8009cce <USBD_GetEpDesc>
 80092e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092e4:	2181      	movs	r1, #129	@ 0x81
 80092e6:	4813      	ldr	r0, [pc, #76]	@ (8009334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092e8:	f000 fcf1 	bl	8009cce <USBD_GetEpDesc>
 80092ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2210      	movs	r2, #16
 80092f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d006      	beq.n	800930e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2200      	movs	r2, #0
 8009304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009308:	711a      	strb	r2, [r3, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d006      	beq.n	8009322 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800931c:	711a      	strb	r2, [r3, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2243      	movs	r2, #67	@ 0x43
 8009326:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009328:	4b02      	ldr	r3, [pc, #8]	@ (8009334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	24000054 	.word	0x24000054

08009338 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	220a      	movs	r2, #10
 8009344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009346:	4b03      	ldr	r3, [pc, #12]	@ (8009354 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	24000010 	.word	0x24000010

08009358 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009368:	2303      	movs	r3, #3
 800936a:	e009      	b.n	8009380 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	33b0      	adds	r3, #176	@ 0xb0
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	32b0      	adds	r2, #176	@ 0xb0
 80093a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e008      	b.n	80093c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32b0      	adds	r2, #176	@ 0xb0
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e004      	b.n	80093fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	32b0      	adds	r2, #176	@ 0xb0
 800941e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009422:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800942e:	2303      	movs	r3, #3
 8009430:	e025      	b.n	800947e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009438:	2b00      	cmp	r3, #0
 800943a:	d11f      	bne.n	800947c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2201      	movs	r2, #1
 8009440:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009444:	4b10      	ldr	r3, [pc, #64]	@ (8009488 <USBD_CDC_TransmitPacket+0x7c>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 020f 	and.w	r2, r3, #15
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4403      	add	r3, r0
 800945e:	3318      	adds	r3, #24
 8009460:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009462:	4b09      	ldr	r3, [pc, #36]	@ (8009488 <USBD_CDC_TransmitPacket+0x7c>)
 8009464:	7819      	ldrb	r1, [r3, #0]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f002 f863 	bl	800b53e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	24000097 	.word	0x24000097

0800948c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	32b0      	adds	r2, #176	@ 0xb0
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	32b0      	adds	r2, #176	@ 0xb0
 80094ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e018      	b.n	80094ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	7c1b      	ldrb	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094c2:	4b0c      	ldr	r3, [pc, #48]	@ (80094f4 <USBD_CDC_ReceivePacket+0x68>)
 80094c4:	7819      	ldrb	r1, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f002 f855 	bl	800b580 <USBD_LL_PrepareReceive>
 80094d6:	e008      	b.n	80094ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094d8:	4b06      	ldr	r3, [pc, #24]	@ (80094f4 <USBD_CDC_ReceivePacket+0x68>)
 80094da:	7819      	ldrb	r1, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094e2:	2340      	movs	r3, #64	@ 0x40
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f002 f84b 	bl	800b580 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	24000098 	.word	0x24000098

080094f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	4613      	mov	r3, r2
 8009504:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800950c:	4817      	ldr	r0, [pc, #92]	@ (800956c <USBD_Init+0x74>)
 800950e:	f002 f971 	bl	800b7f4 <iprintf>
 8009512:	4817      	ldr	r0, [pc, #92]	@ (8009570 <USBD_Init+0x78>)
 8009514:	f002 f96e 	bl	800b7f4 <iprintf>
 8009518:	200a      	movs	r0, #10
 800951a:	f002 f97d 	bl	800b818 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800951e:	2303      	movs	r3, #3
 8009520:	e01f      	b.n	8009562 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	79fa      	ldrb	r2, [r7, #7]
 8009554:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f001 feb6 	bl	800b2c8 <USBD_LL_Init>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009560:	7dfb      	ldrb	r3, [r7, #23]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	0800c588 	.word	0x0800c588
 8009570:	0800c590 	.word	0x0800c590

08009574 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8009588:	481a      	ldr	r0, [pc, #104]	@ (80095f4 <USBD_RegisterClass+0x80>)
 800958a:	f002 f933 	bl	800b7f4 <iprintf>
 800958e:	481a      	ldr	r0, [pc, #104]	@ (80095f8 <USBD_RegisterClass+0x84>)
 8009590:	f002 f930 	bl	800b7f4 <iprintf>
 8009594:	200a      	movs	r0, #10
 8009596:	f002 f93f 	bl	800b818 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800959a:	2303      	movs	r3, #3
 800959c:	e025      	b.n	80095ea <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	32ae      	adds	r2, #174	@ 0xae
 80095b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00f      	beq.n	80095da <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	32ae      	adds	r2, #174	@ 0xae
 80095c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	f107 020e 	add.w	r2, r7, #14
 80095ce:	4610      	mov	r0, r2
 80095d0:	4798      	blx	r3
 80095d2:	4602      	mov	r2, r0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	0800c588 	.word	0x0800c588
 80095f8:	0800c5a8 	.word	0x0800c5a8

080095fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f001 feb1 	bl	800b36c <USBD_LL_Start>
 800960a:	4603      	mov	r3, r0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009640:	2b00      	cmp	r3, #0
 8009642:	d009      	beq.n	8009658 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	78fa      	ldrb	r2, [r7, #3]
 800964e:	4611      	mov	r1, r2
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4798      	blx	r3
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	78fa      	ldrb	r2, [r7, #3]
 800967c:	4611      	mov	r1, r2
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	4798      	blx	r3
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009688:	2303      	movs	r3, #3
 800968a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f001 f936 	bl	800a91a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80096bc:	461a      	mov	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096ca:	f003 031f 	and.w	r3, r3, #31
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d01a      	beq.n	8009708 <USBD_LL_SetupStage+0x72>
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d822      	bhi.n	800971c <USBD_LL_SetupStage+0x86>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <USBD_LL_SetupStage+0x4a>
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d00a      	beq.n	80096f4 <USBD_LL_SetupStage+0x5e>
 80096de:	e01d      	b.n	800971c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fb63 	bl	8009db4 <USBD_StdDevReq>
 80096ee:	4603      	mov	r3, r0
 80096f0:	73fb      	strb	r3, [r7, #15]
      break;
 80096f2:	e020      	b.n	8009736 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fbcb 	bl	8009e98 <USBD_StdItfReq>
 8009702:	4603      	mov	r3, r0
 8009704:	73fb      	strb	r3, [r7, #15]
      break;
 8009706:	e016      	b.n	8009736 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fc2d 	bl	8009f70 <USBD_StdEPReq>
 8009716:	4603      	mov	r3, r0
 8009718:	73fb      	strb	r3, [r7, #15]
      break;
 800971a:	e00c      	b.n	8009736 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009722:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009726:	b2db      	uxtb	r3, r3
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f001 fe7e 	bl	800b42c <USBD_LL_StallEP>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]
      break;
 8009734:	bf00      	nop
  }

  return ret;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	460b      	mov	r3, r1
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d16e      	bne.n	8009836 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800975e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009766:	2b03      	cmp	r3, #3
 8009768:	f040 8098 	bne.w	800989c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	429a      	cmp	r2, r3
 8009776:	d913      	bls.n	80097a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	1ad2      	subs	r2, r2, r3
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	4293      	cmp	r3, r2
 8009790:	bf28      	it	cs
 8009792:	4613      	movcs	r3, r2
 8009794:	461a      	mov	r2, r3
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f001 f9be 	bl	800ab1a <USBD_CtlContinueRx>
 800979e:	e07d      	b.n	800989c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097a6:	f003 031f 	and.w	r3, r3, #31
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d014      	beq.n	80097d8 <USBD_LL_DataOutStage+0x98>
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d81d      	bhi.n	80097ee <USBD_LL_DataOutStage+0xae>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d002      	beq.n	80097bc <USBD_LL_DataOutStage+0x7c>
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d003      	beq.n	80097c2 <USBD_LL_DataOutStage+0x82>
 80097ba:	e018      	b.n	80097ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	75bb      	strb	r3, [r7, #22]
            break;
 80097c0:	e018      	b.n	80097f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	4619      	mov	r1, r3
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f000 fa64 	bl	8009c9a <USBD_CoreFindIF>
 80097d2:	4603      	mov	r3, r0
 80097d4:	75bb      	strb	r3, [r7, #22]
            break;
 80097d6:	e00d      	b.n	80097f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	4619      	mov	r1, r3
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 fa66 	bl	8009cb4 <USBD_CoreFindEP>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75bb      	strb	r3, [r7, #22]
            break;
 80097ec:	e002      	b.n	80097f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	75bb      	strb	r3, [r7, #22]
            break;
 80097f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80097f4:	7dbb      	ldrb	r3, [r7, #22]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d119      	bne.n	800982e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b03      	cmp	r3, #3
 8009804:	d113      	bne.n	800982e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009806:	7dba      	ldrb	r2, [r7, #22]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	32ae      	adds	r2, #174	@ 0xae
 800980c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00b      	beq.n	800982e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009816:	7dba      	ldrb	r2, [r7, #22]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800981e:	7dba      	ldrb	r2, [r7, #22]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	32ae      	adds	r2, #174	@ 0xae
 8009824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f001 f984 	bl	800ab3c <USBD_CtlSendStatus>
 8009834:	e032      	b.n	800989c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009836:	7afb      	ldrb	r3, [r7, #11]
 8009838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800983c:	b2db      	uxtb	r3, r3
 800983e:	4619      	mov	r1, r3
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 fa37 	bl	8009cb4 <USBD_CoreFindEP>
 8009846:	4603      	mov	r3, r0
 8009848:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800984a:	7dbb      	ldrb	r3, [r7, #22]
 800984c:	2bff      	cmp	r3, #255	@ 0xff
 800984e:	d025      	beq.n	800989c <USBD_LL_DataOutStage+0x15c>
 8009850:	7dbb      	ldrb	r3, [r7, #22]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d122      	bne.n	800989c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b03      	cmp	r3, #3
 8009860:	d117      	bne.n	8009892 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009862:	7dba      	ldrb	r2, [r7, #22]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	32ae      	adds	r2, #174	@ 0xae
 8009868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00f      	beq.n	8009892 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009872:	7dba      	ldrb	r2, [r7, #22]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800987a:	7dba      	ldrb	r2, [r7, #22]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	32ae      	adds	r2, #174	@ 0xae
 8009880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	7afa      	ldrb	r2, [r7, #11]
 8009888:	4611      	mov	r1, r2
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	4798      	blx	r3
 800988e:	4603      	mov	r3, r0
 8009890:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	e000      	b.n	800989e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b086      	sub	sp, #24
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	460b      	mov	r3, r1
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d16f      	bne.n	800999a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3314      	adds	r3, #20
 80098be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d15a      	bne.n	8009980 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d914      	bls.n	8009900 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	689a      	ldr	r2, [r3, #8]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	461a      	mov	r2, r3
 80098ea:	6879      	ldr	r1, [r7, #4]
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f001 f8e6 	bl	800aabe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098f2:	2300      	movs	r3, #0
 80098f4:	2200      	movs	r2, #0
 80098f6:	2100      	movs	r1, #0
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f001 fe41 	bl	800b580 <USBD_LL_PrepareReceive>
 80098fe:	e03f      	b.n	8009980 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	429a      	cmp	r2, r3
 800990a:	d11c      	bne.n	8009946 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009914:	429a      	cmp	r2, r3
 8009916:	d316      	bcc.n	8009946 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009922:	429a      	cmp	r2, r3
 8009924:	d20f      	bcs.n	8009946 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009926:	2200      	movs	r2, #0
 8009928:	2100      	movs	r1, #0
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f001 f8c7 	bl	800aabe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009938:	2300      	movs	r3, #0
 800993a:	2200      	movs	r2, #0
 800993c:	2100      	movs	r1, #0
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f001 fe1e 	bl	800b580 <USBD_LL_PrepareReceive>
 8009944:	e01c      	b.n	8009980 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b03      	cmp	r3, #3
 8009950:	d10f      	bne.n	8009972 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009972:	2180      	movs	r1, #128	@ 0x80
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f001 fd59 	bl	800b42c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f001 f8f1 	bl	800ab62 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d03a      	beq.n	8009a00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff fe42 	bl	8009614 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009998:	e032      	b.n	8009a00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800999a:	7afb      	ldrb	r3, [r7, #11]
 800999c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	4619      	mov	r1, r3
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f985 	bl	8009cb4 <USBD_CoreFindEP>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	2bff      	cmp	r3, #255	@ 0xff
 80099b2:	d025      	beq.n	8009a00 <USBD_LL_DataInStage+0x15a>
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d122      	bne.n	8009a00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d11c      	bne.n	8009a00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80099c6:	7dfa      	ldrb	r2, [r7, #23]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	32ae      	adds	r2, #174	@ 0xae
 80099cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d014      	beq.n	8009a00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80099d6:	7dfa      	ldrb	r2, [r7, #23]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80099de:	7dfa      	ldrb	r2, [r7, #23]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	32ae      	adds	r2, #174	@ 0xae
 80099e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	7afa      	ldrb	r2, [r7, #11]
 80099ec:	4611      	mov	r1, r2
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	4798      	blx	r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80099f6:	7dbb      	ldrb	r3, [r7, #22]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80099fc:	7dbb      	ldrb	r3, [r7, #22]
 80099fe:	e000      	b.n	8009a02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d014      	beq.n	8009a70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00e      	beq.n	8009a70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6852      	ldr	r2, [r2, #4]
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	4611      	mov	r1, r2
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	4798      	blx	r3
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a70:	2340      	movs	r3, #64	@ 0x40
 8009a72:	2200      	movs	r2, #0
 8009a74:	2100      	movs	r1, #0
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f001 fc93 	bl	800b3a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2240      	movs	r2, #64	@ 0x40
 8009a88:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a8c:	2340      	movs	r3, #64	@ 0x40
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2180      	movs	r1, #128	@ 0x80
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f001 fc85 	bl	800b3a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2240      	movs	r2, #64	@ 0x40
 8009aa2:	621a      	str	r2, [r3, #32]

  return ret;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b083      	sub	sp, #12
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	78fa      	ldrb	r2, [r7, #3]
 8009abe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d006      	beq.n	8009af0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2204      	movs	r2, #4
 8009af4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d106      	bne.n	8009b28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d110      	bne.n	8009b6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	32ae      	adds	r2, #174	@ 0xae
 8009b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e01c      	b.n	8009bd2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d115      	bne.n	8009bd0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32ae      	adds	r2, #174	@ 0xae
 8009bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00b      	beq.n	8009bd0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	32ae      	adds	r2, #174	@ 0xae
 8009bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	78fa      	ldrb	r2, [r7, #3]
 8009bca:	4611      	mov	r1, r2
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	460b      	mov	r3, r1
 8009be4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	32ae      	adds	r2, #174	@ 0xae
 8009bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e01c      	b.n	8009c36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d115      	bne.n	8009c34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	32ae      	adds	r2, #174	@ 0xae
 8009c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00b      	beq.n	8009c34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	32ae      	adds	r2, #174	@ 0xae
 8009c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2c:	78fa      	ldrb	r2, [r7, #3]
 8009c2e:	4611      	mov	r1, r2
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00e      	beq.n	8009c90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6852      	ldr	r2, [r2, #4]
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	4611      	mov	r1, r2
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	4798      	blx	r3
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ca6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	370c      	adds	r7, #12
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	885b      	ldrh	r3, [r3, #2]
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d91f      	bls.n	8009d34 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009cfa:	e013      	b.n	8009d24 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009cfc:	f107 030a 	add.w	r3, r7, #10
 8009d00:	4619      	mov	r1, r3
 8009d02:	6978      	ldr	r0, [r7, #20]
 8009d04:	f000 f81b 	bl	8009d3e <USBD_GetNextDesc>
 8009d08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	785b      	ldrb	r3, [r3, #1]
 8009d0e:	2b05      	cmp	r3, #5
 8009d10:	d108      	bne.n	8009d24 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	789b      	ldrb	r3, [r3, #2]
 8009d1a:	78fa      	ldrb	r2, [r7, #3]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d008      	beq.n	8009d32 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	885b      	ldrh	r3, [r3, #2]
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	897b      	ldrh	r3, [r7, #10]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d8e5      	bhi.n	8009cfc <USBD_GetEpDesc+0x2e>
 8009d30:	e000      	b.n	8009d34 <USBD_GetEpDesc+0x66>
          break;
 8009d32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d34:	693b      	ldr	r3, [r7, #16]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	7812      	ldrb	r2, [r2, #0]
 8009d54:	4413      	add	r3, r2
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4413      	add	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d68:	68fb      	ldr	r3, [r7, #12]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b087      	sub	sp, #28
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009d94:	8a3b      	ldrh	r3, [r7, #16]
 8009d96:	021b      	lsls	r3, r3, #8
 8009d98:	b21a      	sxth	r2, r3
 8009d9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	b21b      	sxth	r3, r3
 8009da2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009da4:	89fb      	ldrh	r3, [r7, #14]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dca:	2b40      	cmp	r3, #64	@ 0x40
 8009dcc:	d005      	beq.n	8009dda <USBD_StdDevReq+0x26>
 8009dce:	2b40      	cmp	r3, #64	@ 0x40
 8009dd0:	d857      	bhi.n	8009e82 <USBD_StdDevReq+0xce>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00f      	beq.n	8009df6 <USBD_StdDevReq+0x42>
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d153      	bne.n	8009e82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	32ae      	adds	r2, #174	@ 0xae
 8009de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	4798      	blx	r3
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
      break;
 8009df4:	e04a      	b.n	8009e8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b09      	cmp	r3, #9
 8009dfc:	d83b      	bhi.n	8009e76 <USBD_StdDevReq+0xc2>
 8009dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009e04 <USBD_StdDevReq+0x50>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e59 	.word	0x08009e59
 8009e08:	08009e6d 	.word	0x08009e6d
 8009e0c:	08009e77 	.word	0x08009e77
 8009e10:	08009e63 	.word	0x08009e63
 8009e14:	08009e77 	.word	0x08009e77
 8009e18:	08009e37 	.word	0x08009e37
 8009e1c:	08009e2d 	.word	0x08009e2d
 8009e20:	08009e77 	.word	0x08009e77
 8009e24:	08009e4f 	.word	0x08009e4f
 8009e28:	08009e41 	.word	0x08009e41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fa3c 	bl	800a2ac <USBD_GetDescriptor>
          break;
 8009e34:	e024      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fbcb 	bl	800a5d4 <USBD_SetAddress>
          break;
 8009e3e:	e01f      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fc0a 	bl	800a65c <USBD_SetConfig>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]
          break;
 8009e4c:	e018      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fcad 	bl	800a7b0 <USBD_GetConfig>
          break;
 8009e56:	e013      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fcde 	bl	800a81c <USBD_GetStatus>
          break;
 8009e60:	e00e      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fd0d 	bl	800a884 <USBD_SetFeature>
          break;
 8009e6a:	e009      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fd31 	bl	800a8d6 <USBD_ClrFeature>
          break;
 8009e74:	e004      	b.n	8009e80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fd88 	bl	800a98e <USBD_CtlError>
          break;
 8009e7e:	bf00      	nop
      }
      break;
 8009e80:	e004      	b.n	8009e8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fd82 	bl	800a98e <USBD_CtlError>
      break;
 8009e8a:	bf00      	nop
  }

  return ret;
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop

08009e98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009eae:	2b40      	cmp	r3, #64	@ 0x40
 8009eb0:	d005      	beq.n	8009ebe <USBD_StdItfReq+0x26>
 8009eb2:	2b40      	cmp	r3, #64	@ 0x40
 8009eb4:	d852      	bhi.n	8009f5c <USBD_StdItfReq+0xc4>
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <USBD_StdItfReq+0x26>
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	d14e      	bne.n	8009f5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d840      	bhi.n	8009f4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	889b      	ldrh	r3, [r3, #4]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d836      	bhi.n	8009f44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	889b      	ldrh	r3, [r3, #4]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff fedb 	bl	8009c9a <USBD_CoreFindIF>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	2bff      	cmp	r3, #255	@ 0xff
 8009eec:	d01d      	beq.n	8009f2a <USBD_StdItfReq+0x92>
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d11a      	bne.n	8009f2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009ef4:	7bba      	ldrb	r2, [r7, #14]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	32ae      	adds	r2, #174	@ 0xae
 8009efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00f      	beq.n	8009f24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f04:	7bba      	ldrb	r2, [r7, #14]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f0c:	7bba      	ldrb	r2, [r7, #14]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	32ae      	adds	r2, #174	@ 0xae
 8009f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	4798      	blx	r3
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f22:	e004      	b.n	8009f2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f28:	e001      	b.n	8009f2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	88db      	ldrh	r3, [r3, #6]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d110      	bne.n	8009f58 <USBD_StdItfReq+0xc0>
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10d      	bne.n	8009f58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fdfd 	bl	800ab3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f42:	e009      	b.n	8009f58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fd21 	bl	800a98e <USBD_CtlError>
          break;
 8009f4c:	e004      	b.n	8009f58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fd1c 	bl	800a98e <USBD_CtlError>
          break;
 8009f56:	e000      	b.n	8009f5a <USBD_StdItfReq+0xc2>
          break;
 8009f58:	bf00      	nop
      }
      break;
 8009f5a:	e004      	b.n	8009f66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fd15 	bl	800a98e <USBD_CtlError>
      break;
 8009f64:	bf00      	nop
  }

  return ret;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	889b      	ldrh	r3, [r3, #4]
 8009f82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f8c:	2b40      	cmp	r3, #64	@ 0x40
 8009f8e:	d007      	beq.n	8009fa0 <USBD_StdEPReq+0x30>
 8009f90:	2b40      	cmp	r3, #64	@ 0x40
 8009f92:	f200 817f 	bhi.w	800a294 <USBD_StdEPReq+0x324>
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d02a      	beq.n	8009ff0 <USBD_StdEPReq+0x80>
 8009f9a:	2b20      	cmp	r3, #32
 8009f9c:	f040 817a 	bne.w	800a294 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff fe85 	bl	8009cb4 <USBD_CoreFindEP>
 8009faa:	4603      	mov	r3, r0
 8009fac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fae:	7b7b      	ldrb	r3, [r7, #13]
 8009fb0:	2bff      	cmp	r3, #255	@ 0xff
 8009fb2:	f000 8174 	beq.w	800a29e <USBD_StdEPReq+0x32e>
 8009fb6:	7b7b      	ldrb	r3, [r7, #13]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f040 8170 	bne.w	800a29e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009fbe:	7b7a      	ldrb	r2, [r7, #13]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009fc6:	7b7a      	ldrb	r2, [r7, #13]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	32ae      	adds	r2, #174	@ 0xae
 8009fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 8163 	beq.w	800a29e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009fd8:	7b7a      	ldrb	r2, [r7, #13]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	32ae      	adds	r2, #174	@ 0xae
 8009fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009fee:	e156      	b.n	800a29e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d008      	beq.n	800a00a <USBD_StdEPReq+0x9a>
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	f300 8145 	bgt.w	800a288 <USBD_StdEPReq+0x318>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 809b 	beq.w	800a13a <USBD_StdEPReq+0x1ca>
 800a004:	2b01      	cmp	r3, #1
 800a006:	d03c      	beq.n	800a082 <USBD_StdEPReq+0x112>
 800a008:	e13e      	b.n	800a288 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b02      	cmp	r3, #2
 800a014:	d002      	beq.n	800a01c <USBD_StdEPReq+0xac>
 800a016:	2b03      	cmp	r3, #3
 800a018:	d016      	beq.n	800a048 <USBD_StdEPReq+0xd8>
 800a01a:	e02c      	b.n	800a076 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00d      	beq.n	800a03e <USBD_StdEPReq+0xce>
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b80      	cmp	r3, #128	@ 0x80
 800a026:	d00a      	beq.n	800a03e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 f9fd 	bl	800b42c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a032:	2180      	movs	r1, #128	@ 0x80
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 f9f9 	bl	800b42c <USBD_LL_StallEP>
 800a03a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a03c:	e020      	b.n	800a080 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fca4 	bl	800a98e <USBD_CtlError>
              break;
 800a046:	e01b      	b.n	800a080 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	885b      	ldrh	r3, [r3, #2]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10e      	bne.n	800a06e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00b      	beq.n	800a06e <USBD_StdEPReq+0xfe>
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	2b80      	cmp	r3, #128	@ 0x80
 800a05a:	d008      	beq.n	800a06e <USBD_StdEPReq+0xfe>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	88db      	ldrh	r3, [r3, #6]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d104      	bne.n	800a06e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f9df 	bl	800b42c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fd64 	bl	800ab3c <USBD_CtlSendStatus>

              break;
 800a074:	e004      	b.n	800a080 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fc88 	bl	800a98e <USBD_CtlError>
              break;
 800a07e:	bf00      	nop
          }
          break;
 800a080:	e107      	b.n	800a292 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d002      	beq.n	800a094 <USBD_StdEPReq+0x124>
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d016      	beq.n	800a0c0 <USBD_StdEPReq+0x150>
 800a092:	e04b      	b.n	800a12c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00d      	beq.n	800a0b6 <USBD_StdEPReq+0x146>
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	2b80      	cmp	r3, #128	@ 0x80
 800a09e:	d00a      	beq.n	800a0b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 f9c1 	bl	800b42c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0aa:	2180      	movs	r1, #128	@ 0x80
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 f9bd 	bl	800b42c <USBD_LL_StallEP>
 800a0b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0b4:	e040      	b.n	800a138 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fc68 	bl	800a98e <USBD_CtlError>
              break;
 800a0be:	e03b      	b.n	800a138 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	885b      	ldrh	r3, [r3, #2]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d136      	bne.n	800a136 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a0c8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d004      	beq.n	800a0dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f001 f9c7 	bl	800b46a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fd2d 	bl	800ab3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fde4 	bl	8009cb4 <USBD_CoreFindEP>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0f0:	7b7b      	ldrb	r3, [r7, #13]
 800a0f2:	2bff      	cmp	r3, #255	@ 0xff
 800a0f4:	d01f      	beq.n	800a136 <USBD_StdEPReq+0x1c6>
 800a0f6:	7b7b      	ldrb	r3, [r7, #13]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d11c      	bne.n	800a136 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a0fc:	7b7a      	ldrb	r2, [r7, #13]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a104:	7b7a      	ldrb	r2, [r7, #13]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	32ae      	adds	r2, #174	@ 0xae
 800a10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d010      	beq.n	800a136 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a114:	7b7a      	ldrb	r2, [r7, #13]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	32ae      	adds	r2, #174	@ 0xae
 800a11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	4798      	blx	r3
 800a126:	4603      	mov	r3, r0
 800a128:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a12a:	e004      	b.n	800a136 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fc2d 	bl	800a98e <USBD_CtlError>
              break;
 800a134:	e000      	b.n	800a138 <USBD_StdEPReq+0x1c8>
              break;
 800a136:	bf00      	nop
          }
          break;
 800a138:	e0ab      	b.n	800a292 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b02      	cmp	r3, #2
 800a144:	d002      	beq.n	800a14c <USBD_StdEPReq+0x1dc>
 800a146:	2b03      	cmp	r3, #3
 800a148:	d032      	beq.n	800a1b0 <USBD_StdEPReq+0x240>
 800a14a:	e097      	b.n	800a27c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d007      	beq.n	800a162 <USBD_StdEPReq+0x1f2>
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	2b80      	cmp	r3, #128	@ 0x80
 800a156:	d004      	beq.n	800a162 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fc17 	bl	800a98e <USBD_CtlError>
                break;
 800a160:	e091      	b.n	800a286 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a166:	2b00      	cmp	r3, #0
 800a168:	da0b      	bge.n	800a182 <USBD_StdEPReq+0x212>
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	3310      	adds	r3, #16
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	4413      	add	r3, r2
 800a17e:	3304      	adds	r3, #4
 800a180:	e00b      	b.n	800a19a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	4413      	add	r3, r2
 800a198:	3304      	adds	r3, #4
 800a19a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fc6d 	bl	800aa88 <USBD_CtlSendData>
              break;
 800a1ae:	e06a      	b.n	800a286 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da11      	bge.n	800a1dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	f003 020f 	and.w	r2, r3, #15
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	440b      	add	r3, r1
 800a1ca:	3324      	adds	r3, #36	@ 0x24
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d117      	bne.n	800a202 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fbda 	bl	800a98e <USBD_CtlError>
                  break;
 800a1da:	e054      	b.n	800a286 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	f003 020f 	and.w	r2, r3, #15
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	440b      	add	r3, r1
 800a1ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fbc7 	bl	800a98e <USBD_CtlError>
                  break;
 800a200:	e041      	b.n	800a286 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a206:	2b00      	cmp	r3, #0
 800a208:	da0b      	bge.n	800a222 <USBD_StdEPReq+0x2b2>
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
 800a20c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	3310      	adds	r3, #16
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	4413      	add	r3, r2
 800a21e:	3304      	adds	r3, #4
 800a220:	e00b      	b.n	800a23a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	4413      	add	r3, r2
 800a238:	3304      	adds	r3, #4
 800a23a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <USBD_StdEPReq+0x2d8>
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	2b80      	cmp	r3, #128	@ 0x80
 800a246:	d103      	bne.n	800a250 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	e00e      	b.n	800a26e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 f927 	bl	800b4a8 <USBD_LL_IsStallEP>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e002      	b.n	800a26e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2202      	movs	r2, #2
 800a272:	4619      	mov	r1, r3
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fc07 	bl	800aa88 <USBD_CtlSendData>
              break;
 800a27a:	e004      	b.n	800a286 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fb85 	bl	800a98e <USBD_CtlError>
              break;
 800a284:	bf00      	nop
          }
          break;
 800a286:	e004      	b.n	800a292 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fb7f 	bl	800a98e <USBD_CtlError>
          break;
 800a290:	bf00      	nop
      }
      break;
 800a292:	e005      	b.n	800a2a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fb79 	bl	800a98e <USBD_CtlError>
      break;
 800a29c:	e000      	b.n	800a2a0 <USBD_StdEPReq+0x330>
      break;
 800a29e:	bf00      	nop
  }

  return ret;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	885b      	ldrh	r3, [r3, #2]
 800a2c6:	0a1b      	lsrs	r3, r3, #8
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	2b0e      	cmp	r3, #14
 800a2ce:	f200 8152 	bhi.w	800a576 <USBD_GetDescriptor+0x2ca>
 800a2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d8 <USBD_GetDescriptor+0x2c>)
 800a2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d8:	0800a349 	.word	0x0800a349
 800a2dc:	0800a361 	.word	0x0800a361
 800a2e0:	0800a3a1 	.word	0x0800a3a1
 800a2e4:	0800a577 	.word	0x0800a577
 800a2e8:	0800a577 	.word	0x0800a577
 800a2ec:	0800a517 	.word	0x0800a517
 800a2f0:	0800a543 	.word	0x0800a543
 800a2f4:	0800a577 	.word	0x0800a577
 800a2f8:	0800a577 	.word	0x0800a577
 800a2fc:	0800a577 	.word	0x0800a577
 800a300:	0800a577 	.word	0x0800a577
 800a304:	0800a577 	.word	0x0800a577
 800a308:	0800a577 	.word	0x0800a577
 800a30c:	0800a577 	.word	0x0800a577
 800a310:	0800a315 	.word	0x0800a315
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	7c12      	ldrb	r2, [r2, #16]
 800a32c:	f107 0108 	add.w	r1, r7, #8
 800a330:	4610      	mov	r0, r2
 800a332:	4798      	blx	r3
 800a334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a336:	e126      	b.n	800a586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fb27 	bl	800a98e <USBD_CtlError>
        err++;
 800a340:	7afb      	ldrb	r3, [r7, #11]
 800a342:	3301      	adds	r3, #1
 800a344:	72fb      	strb	r3, [r7, #11]
      break;
 800a346:	e11e      	b.n	800a586 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	7c12      	ldrb	r2, [r2, #16]
 800a354:	f107 0108 	add.w	r1, r7, #8
 800a358:	4610      	mov	r0, r2
 800a35a:	4798      	blx	r3
 800a35c:	60f8      	str	r0, [r7, #12]
      break;
 800a35e:	e112      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	7c1b      	ldrb	r3, [r3, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10d      	bne.n	800a384 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a370:	f107 0208 	add.w	r2, r7, #8
 800a374:	4610      	mov	r0, r2
 800a376:	4798      	blx	r3
 800a378:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	2202      	movs	r2, #2
 800a380:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a382:	e100      	b.n	800a586 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38c:	f107 0208 	add.w	r2, r7, #8
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
 800a394:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3301      	adds	r3, #1
 800a39a:	2202      	movs	r2, #2
 800a39c:	701a      	strb	r2, [r3, #0]
      break;
 800a39e:	e0f2      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	885b      	ldrh	r3, [r3, #2]
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	f200 80ac 	bhi.w	800a504 <USBD_GetDescriptor+0x258>
 800a3ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a3b4 <USBD_GetDescriptor+0x108>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3cd 	.word	0x0800a3cd
 800a3b8:	0800a401 	.word	0x0800a401
 800a3bc:	0800a435 	.word	0x0800a435
 800a3c0:	0800a469 	.word	0x0800a469
 800a3c4:	0800a49d 	.word	0x0800a49d
 800a3c8:	0800a4d1 	.word	0x0800a4d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00b      	beq.n	800a3f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	7c12      	ldrb	r2, [r2, #16]
 800a3e4:	f107 0108 	add.w	r1, r7, #8
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4798      	blx	r3
 800a3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ee:	e091      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 facb 	bl	800a98e <USBD_CtlError>
            err++;
 800a3f8:	7afb      	ldrb	r3, [r7, #11]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3fe:	e089      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	7c12      	ldrb	r2, [r2, #16]
 800a418:	f107 0108 	add.w	r1, r7, #8
 800a41c:	4610      	mov	r0, r2
 800a41e:	4798      	blx	r3
 800a420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a422:	e077      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fab1 	bl	800a98e <USBD_CtlError>
            err++;
 800a42c:	7afb      	ldrb	r3, [r7, #11]
 800a42e:	3301      	adds	r3, #1
 800a430:	72fb      	strb	r3, [r7, #11]
          break;
 800a432:	e06f      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00b      	beq.n	800a458 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	7c12      	ldrb	r2, [r2, #16]
 800a44c:	f107 0108 	add.w	r1, r7, #8
 800a450:	4610      	mov	r0, r2
 800a452:	4798      	blx	r3
 800a454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a456:	e05d      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa97 	bl	800a98e <USBD_CtlError>
            err++;
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	3301      	adds	r3, #1
 800a464:	72fb      	strb	r3, [r7, #11]
          break;
 800a466:	e055      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	7c12      	ldrb	r2, [r2, #16]
 800a480:	f107 0108 	add.w	r1, r7, #8
 800a484:	4610      	mov	r0, r2
 800a486:	4798      	blx	r3
 800a488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a48a:	e043      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa7d 	bl	800a98e <USBD_CtlError>
            err++;
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	3301      	adds	r3, #1
 800a498:	72fb      	strb	r3, [r7, #11]
          break;
 800a49a:	e03b      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	7c12      	ldrb	r2, [r2, #16]
 800a4b4:	f107 0108 	add.w	r1, r7, #8
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
 800a4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4be:	e029      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fa63 	bl	800a98e <USBD_CtlError>
            err++;
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ce:	e021      	b.n	800a514 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00b      	beq.n	800a4f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	7c12      	ldrb	r2, [r2, #16]
 800a4e8:	f107 0108 	add.w	r1, r7, #8
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	4798      	blx	r3
 800a4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4f2:	e00f      	b.n	800a514 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fa49 	bl	800a98e <USBD_CtlError>
            err++;
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	3301      	adds	r3, #1
 800a500:	72fb      	strb	r3, [r7, #11]
          break;
 800a502:	e007      	b.n	800a514 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa41 	bl	800a98e <USBD_CtlError>
          err++;
 800a50c:	7afb      	ldrb	r3, [r7, #11]
 800a50e:	3301      	adds	r3, #1
 800a510:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a512:	bf00      	nop
      }
      break;
 800a514:	e037      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	7c1b      	ldrb	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d109      	bne.n	800a532 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a526:	f107 0208 	add.w	r2, r7, #8
 800a52a:	4610      	mov	r0, r2
 800a52c:	4798      	blx	r3
 800a52e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a530:	e029      	b.n	800a586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fa2a 	bl	800a98e <USBD_CtlError>
        err++;
 800a53a:	7afb      	ldrb	r3, [r7, #11]
 800a53c:	3301      	adds	r3, #1
 800a53e:	72fb      	strb	r3, [r7, #11]
      break;
 800a540:	e021      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	7c1b      	ldrb	r3, [r3, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10d      	bne.n	800a566 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a552:	f107 0208 	add.w	r2, r7, #8
 800a556:	4610      	mov	r0, r2
 800a558:	4798      	blx	r3
 800a55a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3301      	adds	r3, #1
 800a560:	2207      	movs	r2, #7
 800a562:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a564:	e00f      	b.n	800a586 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a566:	6839      	ldr	r1, [r7, #0]
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fa10 	bl	800a98e <USBD_CtlError>
        err++;
 800a56e:	7afb      	ldrb	r3, [r7, #11]
 800a570:	3301      	adds	r3, #1
 800a572:	72fb      	strb	r3, [r7, #11]
      break;
 800a574:	e007      	b.n	800a586 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fa08 	bl	800a98e <USBD_CtlError>
      err++;
 800a57e:	7afb      	ldrb	r3, [r7, #11]
 800a580:	3301      	adds	r3, #1
 800a582:	72fb      	strb	r3, [r7, #11]
      break;
 800a584:	bf00      	nop
  }

  if (err != 0U)
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d11e      	bne.n	800a5ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	88db      	ldrh	r3, [r3, #6]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d016      	beq.n	800a5c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a594:	893b      	ldrh	r3, [r7, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00e      	beq.n	800a5b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	88da      	ldrh	r2, [r3, #6]
 800a59e:	893b      	ldrh	r3, [r7, #8]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	bf28      	it	cs
 800a5a4:	4613      	movcs	r3, r2
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5aa:	893b      	ldrh	r3, [r7, #8]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	68f9      	ldr	r1, [r7, #12]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fa69 	bl	800aa88 <USBD_CtlSendData>
 800a5b6:	e009      	b.n	800a5cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f9e7 	bl	800a98e <USBD_CtlError>
 800a5c0:	e004      	b.n	800a5cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 faba 	bl	800ab3c <USBD_CtlSendStatus>
 800a5c8:	e000      	b.n	800a5cc <USBD_GetDescriptor+0x320>
    return;
 800a5ca:	bf00      	nop
  }
}
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop

0800a5d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	889b      	ldrh	r3, [r3, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d131      	bne.n	800a64a <USBD_SetAddress+0x76>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	88db      	ldrh	r3, [r3, #6]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d12d      	bne.n	800a64a <USBD_SetAddress+0x76>
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	885b      	ldrh	r3, [r3, #2]
 800a5f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5f4:	d829      	bhi.n	800a64a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	885b      	ldrh	r3, [r3, #2]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a600:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d104      	bne.n	800a618 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f9bc 	bl	800a98e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a616:	e01d      	b.n	800a654 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	7bfa      	ldrb	r2, [r7, #15]
 800a61c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 ff6b 	bl	800b500 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fa86 	bl	800ab3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d004      	beq.n	800a640 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2202      	movs	r2, #2
 800a63a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63e:	e009      	b.n	800a654 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a648:	e004      	b.n	800a654 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f99e 	bl	800a98e <USBD_CtlError>
  }
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	885b      	ldrh	r3, [r3, #2]
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	4b4e      	ldr	r3, [pc, #312]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a672:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a674:	4b4d      	ldr	r3, [pc, #308]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d905      	bls.n	800a688 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f985 	bl	800a98e <USBD_CtlError>
    return USBD_FAIL;
 800a684:	2303      	movs	r3, #3
 800a686:	e08c      	b.n	800a7a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b02      	cmp	r3, #2
 800a692:	d002      	beq.n	800a69a <USBD_SetConfig+0x3e>
 800a694:	2b03      	cmp	r3, #3
 800a696:	d029      	beq.n	800a6ec <USBD_SetConfig+0x90>
 800a698:	e075      	b.n	800a786 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a69a:	4b44      	ldr	r3, [pc, #272]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d020      	beq.n	800a6e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a6a2:	4b42      	ldr	r3, [pc, #264]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6ac:	4b3f      	ldr	r3, [pc, #252]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7fe ffb9 	bl	800962a <USBD_SetClassConfig>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d008      	beq.n	800a6d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f962 	bl	800a98e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6d2:	e065      	b.n	800a7a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fa31 	bl	800ab3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2203      	movs	r2, #3
 800a6de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a6e2:	e05d      	b.n	800a7a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fa29 	bl	800ab3c <USBD_CtlSendStatus>
      break;
 800a6ea:	e059      	b.n	800a7a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a6ec:	4b2f      	ldr	r3, [pc, #188]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d112      	bne.n	800a71a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a6fc:	4b2b      	ldr	r3, [pc, #172]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a706:	4b29      	ldr	r3, [pc, #164]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7fe ffa8 	bl	8009662 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa12 	bl	800ab3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a718:	e042      	b.n	800a7a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a71a:	4b24      	ldr	r3, [pc, #144]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	429a      	cmp	r2, r3
 800a726:	d02a      	beq.n	800a77e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7fe ff96 	bl	8009662 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a736:	4b1d      	ldr	r3, [pc, #116]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a740:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	4619      	mov	r1, r3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7fe ff6f 	bl	800962a <USBD_SetClassConfig>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00f      	beq.n	800a776 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f918 	bl	800a98e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7fe ff7b 	bl	8009662 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2202      	movs	r2, #2
 800a770:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a774:	e014      	b.n	800a7a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f9e0 	bl	800ab3c <USBD_CtlSendStatus>
      break;
 800a77c:	e010      	b.n	800a7a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f9dc 	bl	800ab3c <USBD_CtlSendStatus>
      break;
 800a784:	e00c      	b.n	800a7a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f900 	bl	800a98e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a78e:	4b07      	ldr	r3, [pc, #28]	@ (800a7ac <USBD_SetConfig+0x150>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7fe ff64 	bl	8009662 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a79a:	2303      	movs	r3, #3
 800a79c:	73fb      	strb	r3, [r7, #15]
      break;
 800a79e:	bf00      	nop
  }

  return ret;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	240003ac 	.word	0x240003ac

0800a7b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	88db      	ldrh	r3, [r3, #6]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d004      	beq.n	800a7cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f8e2 	bl	800a98e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7ca:	e023      	b.n	800a814 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	dc02      	bgt.n	800a7de <USBD_GetConfig+0x2e>
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dc03      	bgt.n	800a7e4 <USBD_GetConfig+0x34>
 800a7dc:	e015      	b.n	800a80a <USBD_GetConfig+0x5a>
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d00b      	beq.n	800a7fa <USBD_GetConfig+0x4a>
 800a7e2:	e012      	b.n	800a80a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f948 	bl	800aa88 <USBD_CtlSendData>
        break;
 800a7f8:	e00c      	b.n	800a814 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	2201      	movs	r2, #1
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f940 	bl	800aa88 <USBD_CtlSendData>
        break;
 800a808:	e004      	b.n	800a814 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f8be 	bl	800a98e <USBD_CtlError>
        break;
 800a812:	bf00      	nop
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	2b02      	cmp	r3, #2
 800a832:	d81e      	bhi.n	800a872 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	88db      	ldrh	r3, [r3, #6]
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d004      	beq.n	800a846 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f8a5 	bl	800a98e <USBD_CtlError>
        break;
 800a844:	e01a      	b.n	800a87c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f043 0202 	orr.w	r2, r3, #2
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	330c      	adds	r3, #12
 800a866:	2202      	movs	r2, #2
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f90c 	bl	800aa88 <USBD_CtlSendData>
      break;
 800a870:	e004      	b.n	800a87c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f88a 	bl	800a98e <USBD_CtlError>
      break;
 800a87a:	bf00      	nop
  }
}
 800a87c:	bf00      	nop
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	885b      	ldrh	r3, [r3, #2]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d107      	bne.n	800a8a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f94c 	bl	800ab3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a8a4:	e013      	b.n	800a8ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	885b      	ldrh	r3, [r3, #2]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d10b      	bne.n	800a8c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	889b      	ldrh	r3, [r3, #4]
 800a8b2:	0a1b      	lsrs	r3, r3, #8
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f93c 	bl	800ab3c <USBD_CtlSendStatus>
}
 800a8c4:	e003      	b.n	800a8ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f860 	bl	800a98e <USBD_CtlError>
}
 800a8ce:	bf00      	nop
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d80b      	bhi.n	800a906 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	885b      	ldrh	r3, [r3, #2]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d10c      	bne.n	800a910 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f91c 	bl	800ab3c <USBD_CtlSendStatus>
      }
      break;
 800a904:	e004      	b.n	800a910 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f840 	bl	800a98e <USBD_CtlError>
      break;
 800a90e:	e000      	b.n	800a912 <USBD_ClrFeature+0x3c>
      break;
 800a910:	bf00      	nop
  }
}
 800a912:	bf00      	nop
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	781a      	ldrb	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3301      	adds	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	781a      	ldrb	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3301      	adds	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7ff fa16 	bl	8009d76 <SWAPBYTE>
 800a94a:	4603      	mov	r3, r0
 800a94c:	461a      	mov	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3301      	adds	r3, #1
 800a95c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff fa09 	bl	8009d76 <SWAPBYTE>
 800a964:	4603      	mov	r3, r0
 800a966:	461a      	mov	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3301      	adds	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7ff f9fc 	bl	8009d76 <SWAPBYTE>
 800a97e:	4603      	mov	r3, r0
 800a980:	461a      	mov	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	80da      	strh	r2, [r3, #6]
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a998:	2180      	movs	r1, #128	@ 0x80
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fd46 	bl	800b42c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fd42 	bl	800b42c <USBD_LL_StallEP>
}
 800a9a8:	bf00      	nop
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d042      	beq.n	800aa4c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a9ca:	6938      	ldr	r0, [r7, #16]
 800a9cc:	f000 f842 	bl	800aa54 <USBD_GetLen>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9da:	d808      	bhi.n	800a9ee <USBD_GetString+0x3e>
 800a9dc:	6938      	ldr	r0, [r7, #16]
 800a9de:	f000 f839 	bl	800aa54 <USBD_GetLen>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	e001      	b.n	800a9f2 <USBD_GetString+0x42>
 800a9ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	7812      	ldrb	r2, [r2, #0]
 800aa00:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
 800aa04:	3301      	adds	r3, #1
 800aa06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	2203      	movs	r2, #3
 800aa10:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	3301      	adds	r3, #1
 800aa16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa18:	e013      	b.n	800aa42 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	4413      	add	r3, r2
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	613b      	str	r3, [r7, #16]
    idx++;
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	4413      	add	r3, r2
 800aa38:	2200      	movs	r2, #0
 800aa3a:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1e7      	bne.n	800aa1a <USBD_GetString+0x6a>
 800aa4a:	e000      	b.n	800aa4e <USBD_GetString+0x9e>
    return;
 800aa4c:	bf00      	nop
  }
}
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa64:	e005      	b.n	800aa72 <USBD_GetLen+0x1e>
  {
    len++;
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1f5      	bne.n	800aa66 <USBD_GetLen+0x12>
  }

  return len;
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	2100      	movs	r1, #0
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 fd45 	bl	800b53e <USBD_LL_Transmit>

  return USBD_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	60f8      	str	r0, [r7, #12]
 800aac6:	60b9      	str	r1, [r7, #8]
 800aac8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	2100      	movs	r1, #0
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 fd34 	bl	800b53e <USBD_LL_Transmit>

  return USBD_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2203      	movs	r2, #3
 800aaf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	2100      	movs	r1, #0
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f000 fd38 	bl	800b580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f000 fd27 	bl	800b580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2204      	movs	r2, #4
 800ab48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fcf3 	bl	800b53e <USBD_LL_Transmit>

  return USBD_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b082      	sub	sp, #8
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2205      	movs	r2, #5
 800ab6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab72:	2300      	movs	r3, #0
 800ab74:	2200      	movs	r2, #0
 800ab76:	2100      	movs	r1, #0
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fd01 	bl	800b580 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	4913      	ldr	r1, [pc, #76]	@ (800abdc <MX_USB_DEVICE_Init+0x54>)
 800ab90:	4813      	ldr	r0, [pc, #76]	@ (800abe0 <MX_USB_DEVICE_Init+0x58>)
 800ab92:	f7fe fcb1 	bl	80094f8 <USBD_Init>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d001      	beq.n	800aba0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab9c:	f7f6 fa3c 	bl	8001018 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800aba0:	4910      	ldr	r1, [pc, #64]	@ (800abe4 <MX_USB_DEVICE_Init+0x5c>)
 800aba2:	480f      	ldr	r0, [pc, #60]	@ (800abe0 <MX_USB_DEVICE_Init+0x58>)
 800aba4:	f7fe fce6 	bl	8009574 <USBD_RegisterClass>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800abae:	f7f6 fa33 	bl	8001018 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800abb2:	490d      	ldr	r1, [pc, #52]	@ (800abe8 <MX_USB_DEVICE_Init+0x60>)
 800abb4:	480a      	ldr	r0, [pc, #40]	@ (800abe0 <MX_USB_DEVICE_Init+0x58>)
 800abb6:	f7fe fbcf 	bl	8009358 <USBD_CDC_RegisterInterface>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800abc0:	f7f6 fa2a 	bl	8001018 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800abc4:	4806      	ldr	r0, [pc, #24]	@ (800abe0 <MX_USB_DEVICE_Init+0x58>)
 800abc6:	f7fe fd19 	bl	80095fc <USBD_Start>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800abd0:	f7f6 fa22 	bl	8001018 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800abd4:	f7f8 fe78 	bl	80038c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800abd8:	bf00      	nop
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	240000b0 	.word	0x240000b0
 800abe0:	240003b0 	.word	0x240003b0
 800abe4:	2400001c 	.word	0x2400001c
 800abe8:	2400009c 	.word	0x2400009c

0800abec <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800abf0:	2200      	movs	r2, #0
 800abf2:	4905      	ldr	r1, [pc, #20]	@ (800ac08 <CDC_Init_HS+0x1c>)
 800abf4:	4805      	ldr	r0, [pc, #20]	@ (800ac0c <CDC_Init_HS+0x20>)
 800abf6:	f7fe fbc9 	bl	800938c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800abfa:	4905      	ldr	r1, [pc, #20]	@ (800ac10 <CDC_Init_HS+0x24>)
 800abfc:	4803      	ldr	r0, [pc, #12]	@ (800ac0c <CDC_Init_HS+0x20>)
 800abfe:	f7fe fbe7 	bl	80093d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ac02:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	24000e8c 	.word	0x24000e8c
 800ac0c:	240003b0 	.word	0x240003b0
 800ac10:	2400068c 	.word	0x2400068c

0800ac14 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ac14:	b480      	push	{r7}
 800ac16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ac18:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
 800ac30:	4613      	mov	r3, r2
 800ac32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ac34:	79fb      	ldrb	r3, [r7, #7]
 800ac36:	2b23      	cmp	r3, #35	@ 0x23
 800ac38:	d84a      	bhi.n	800acd0 <CDC_Control_HS+0xac>
 800ac3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac40 <CDC_Control_HS+0x1c>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800acd1 	.word	0x0800acd1
 800ac44:	0800acd1 	.word	0x0800acd1
 800ac48:	0800acd1 	.word	0x0800acd1
 800ac4c:	0800acd1 	.word	0x0800acd1
 800ac50:	0800acd1 	.word	0x0800acd1
 800ac54:	0800acd1 	.word	0x0800acd1
 800ac58:	0800acd1 	.word	0x0800acd1
 800ac5c:	0800acd1 	.word	0x0800acd1
 800ac60:	0800acd1 	.word	0x0800acd1
 800ac64:	0800acd1 	.word	0x0800acd1
 800ac68:	0800acd1 	.word	0x0800acd1
 800ac6c:	0800acd1 	.word	0x0800acd1
 800ac70:	0800acd1 	.word	0x0800acd1
 800ac74:	0800acd1 	.word	0x0800acd1
 800ac78:	0800acd1 	.word	0x0800acd1
 800ac7c:	0800acd1 	.word	0x0800acd1
 800ac80:	0800acd1 	.word	0x0800acd1
 800ac84:	0800acd1 	.word	0x0800acd1
 800ac88:	0800acd1 	.word	0x0800acd1
 800ac8c:	0800acd1 	.word	0x0800acd1
 800ac90:	0800acd1 	.word	0x0800acd1
 800ac94:	0800acd1 	.word	0x0800acd1
 800ac98:	0800acd1 	.word	0x0800acd1
 800ac9c:	0800acd1 	.word	0x0800acd1
 800aca0:	0800acd1 	.word	0x0800acd1
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd1 	.word	0x0800acd1
 800acb0:	0800acd1 	.word	0x0800acd1
 800acb4:	0800acd1 	.word	0x0800acd1
 800acb8:	0800acd1 	.word	0x0800acd1
 800acbc:	0800acd1 	.word	0x0800acd1
 800acc0:	0800acd1 	.word	0x0800acd1
 800acc4:	0800acd1 	.word	0x0800acd1
 800acc8:	0800acd1 	.word	0x0800acd1
 800accc:	0800acd1 	.word	0x0800acd1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800acd0:	bf00      	nop
  }

  return (USBD_OK);
 800acd2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	4805      	ldr	r0, [pc, #20]	@ (800ad04 <CDC_Receive_HS+0x24>)
 800acee:	f7fe fb6f 	bl	80093d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800acf2:	4804      	ldr	r0, [pc, #16]	@ (800ad04 <CDC_Receive_HS+0x24>)
 800acf4:	f7fe fbca 	bl	800948c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800acf8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	240003b0 	.word	0x240003b0

0800ad08 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ad18:	4b0d      	ldr	r3, [pc, #52]	@ (800ad50 <CDC_Transmit_HS+0x48>)
 800ad1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e00b      	b.n	800ad46 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800ad2e:	887b      	ldrh	r3, [r7, #2]
 800ad30:	461a      	mov	r2, r3
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	4806      	ldr	r0, [pc, #24]	@ (800ad50 <CDC_Transmit_HS+0x48>)
 800ad36:	f7fe fb29 	bl	800938c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800ad3a:	4805      	ldr	r0, [pc, #20]	@ (800ad50 <CDC_Transmit_HS+0x48>)
 800ad3c:	f7fe fb66 	bl	800940c <USBD_CDC_TransmitPacket>
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	240003b0 	.word	0x240003b0

0800ad54 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b087      	sub	sp, #28
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ad66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	371c      	adds	r7, #28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
	...

0800ad78 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	6039      	str	r1, [r7, #0]
 800ad82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2212      	movs	r2, #18
 800ad88:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ad8a:	4b03      	ldr	r3, [pc, #12]	@ (800ad98 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	240000d0 	.word	0x240000d0

0800ad9c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	6039      	str	r1, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	2204      	movs	r2, #4
 800adac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800adae:	4b03      	ldr	r3, [pc, #12]	@ (800adbc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	240000e4 	.word	0x240000e4

0800adc0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	4603      	mov	r3, r0
 800adc8:	6039      	str	r1, [r7, #0]
 800adca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d105      	bne.n	800adde <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	4907      	ldr	r1, [pc, #28]	@ (800adf4 <USBD_HS_ProductStrDescriptor+0x34>)
 800add6:	4808      	ldr	r0, [pc, #32]	@ (800adf8 <USBD_HS_ProductStrDescriptor+0x38>)
 800add8:	f7ff fdea 	bl	800a9b0 <USBD_GetString>
 800addc:	e004      	b.n	800ade8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	4904      	ldr	r1, [pc, #16]	@ (800adf4 <USBD_HS_ProductStrDescriptor+0x34>)
 800ade2:	4805      	ldr	r0, [pc, #20]	@ (800adf8 <USBD_HS_ProductStrDescriptor+0x38>)
 800ade4:	f7ff fde4 	bl	800a9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ade8:	4b02      	ldr	r3, [pc, #8]	@ (800adf4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800adea:	4618      	mov	r0, r3
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	2400168c 	.word	0x2400168c
 800adf8:	0800c5c0 	.word	0x0800c5c0

0800adfc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	4603      	mov	r3, r0
 800ae04:	6039      	str	r1, [r7, #0]
 800ae06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	4904      	ldr	r1, [pc, #16]	@ (800ae1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ae0c:	4804      	ldr	r0, [pc, #16]	@ (800ae20 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ae0e:	f7ff fdcf 	bl	800a9b0 <USBD_GetString>
  return USBD_StrDesc;
 800ae12:	4b02      	ldr	r3, [pc, #8]	@ (800ae1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	2400168c 	.word	0x2400168c
 800ae20:	0800c5d8 	.word	0x0800c5d8

0800ae24 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	6039      	str	r1, [r7, #0]
 800ae2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	221a      	movs	r2, #26
 800ae34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae36:	f000 f843 	bl	800aec0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ae3a:	4b02      	ldr	r3, [pc, #8]	@ (800ae44 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	240000e8 	.word	0x240000e8

0800ae48 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	6039      	str	r1, [r7, #0]
 800ae52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae54:	79fb      	ldrb	r3, [r7, #7]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d105      	bne.n	800ae66 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ae5a:	683a      	ldr	r2, [r7, #0]
 800ae5c:	4907      	ldr	r1, [pc, #28]	@ (800ae7c <USBD_HS_ConfigStrDescriptor+0x34>)
 800ae5e:	4808      	ldr	r0, [pc, #32]	@ (800ae80 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ae60:	f7ff fda6 	bl	800a9b0 <USBD_GetString>
 800ae64:	e004      	b.n	800ae70 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	4904      	ldr	r1, [pc, #16]	@ (800ae7c <USBD_HS_ConfigStrDescriptor+0x34>)
 800ae6a:	4805      	ldr	r0, [pc, #20]	@ (800ae80 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ae6c:	f7ff fda0 	bl	800a9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae70:	4b02      	ldr	r3, [pc, #8]	@ (800ae7c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	2400168c 	.word	0x2400168c
 800ae80:	0800c5ec 	.word	0x0800c5ec

0800ae84 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	6039      	str	r1, [r7, #0]
 800ae8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d105      	bne.n	800aea2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	4907      	ldr	r1, [pc, #28]	@ (800aeb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ae9a:	4808      	ldr	r0, [pc, #32]	@ (800aebc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ae9c:	f7ff fd88 	bl	800a9b0 <USBD_GetString>
 800aea0:	e004      	b.n	800aeac <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	4904      	ldr	r1, [pc, #16]	@ (800aeb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aea6:	4805      	ldr	r0, [pc, #20]	@ (800aebc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aea8:	f7ff fd82 	bl	800a9b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aeac:	4b02      	ldr	r3, [pc, #8]	@ (800aeb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	2400168c 	.word	0x2400168c
 800aebc:	0800c5f8 	.word	0x0800c5f8

0800aec0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aec6:	4b0f      	ldr	r3, [pc, #60]	@ (800af04 <Get_SerialNum+0x44>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aecc:	4b0e      	ldr	r3, [pc, #56]	@ (800af08 <Get_SerialNum+0x48>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aed2:	4b0e      	ldr	r3, [pc, #56]	@ (800af0c <Get_SerialNum+0x4c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4413      	add	r3, r2
 800aede:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d009      	beq.n	800aefa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aee6:	2208      	movs	r2, #8
 800aee8:	4909      	ldr	r1, [pc, #36]	@ (800af10 <Get_SerialNum+0x50>)
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 f814 	bl	800af18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aef0:	2204      	movs	r2, #4
 800aef2:	4908      	ldr	r1, [pc, #32]	@ (800af14 <Get_SerialNum+0x54>)
 800aef4:	68b8      	ldr	r0, [r7, #8]
 800aef6:	f000 f80f 	bl	800af18 <IntToUnicode>
  }
}
 800aefa:	bf00      	nop
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	08fff800 	.word	0x08fff800
 800af08:	08fff804 	.word	0x08fff804
 800af0c:	08fff808 	.word	0x08fff808
 800af10:	240000ea 	.word	0x240000ea
 800af14:	240000fa 	.word	0x240000fa

0800af18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	4613      	mov	r3, r2
 800af24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af2a:	2300      	movs	r3, #0
 800af2c:	75fb      	strb	r3, [r7, #23]
 800af2e:	e027      	b.n	800af80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	0f1b      	lsrs	r3, r3, #28
 800af34:	2b09      	cmp	r3, #9
 800af36:	d80b      	bhi.n	800af50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	0f1b      	lsrs	r3, r3, #28
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	4619      	mov	r1, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	440b      	add	r3, r1
 800af48:	3230      	adds	r2, #48	@ 0x30
 800af4a:	b2d2      	uxtb	r2, r2
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	e00a      	b.n	800af66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	0f1b      	lsrs	r3, r3, #28
 800af54:	b2da      	uxtb	r2, r3
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	4619      	mov	r1, r3
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	440b      	add	r3, r1
 800af60:	3237      	adds	r2, #55	@ 0x37
 800af62:	b2d2      	uxtb	r2, r2
 800af64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	011b      	lsls	r3, r3, #4
 800af6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	3301      	adds	r3, #1
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	4413      	add	r3, r2
 800af76:	2200      	movs	r2, #0
 800af78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	3301      	adds	r3, #1
 800af7e:	75fb      	strb	r3, [r7, #23]
 800af80:	7dfa      	ldrb	r2, [r7, #23]
 800af82:	79fb      	ldrb	r3, [r7, #7]
 800af84:	429a      	cmp	r2, r3
 800af86:	d3d3      	bcc.n	800af30 <IntToUnicode+0x18>
  }
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
	...

0800af98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b0ba      	sub	sp, #232	@ 0xe8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afa0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800afa4:	2200      	movs	r2, #0
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	605a      	str	r2, [r3, #4]
 800afaa:	609a      	str	r2, [r3, #8]
 800afac:	60da      	str	r2, [r3, #12]
 800afae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800afb0:	f107 0310 	add.w	r3, r7, #16
 800afb4:	22c0      	movs	r2, #192	@ 0xc0
 800afb6:	2100      	movs	r1, #0
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fc78 	bl	800b8ae <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a45      	ldr	r2, [pc, #276]	@ (800b0d8 <HAL_PCD_MspInit+0x140>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	f040 8082 	bne.w	800b0ce <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800afca:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800afce:	f04f 0300 	mov.w	r3, #0
 800afd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800afd6:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800afda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800afde:	f107 0310 	add.w	r3, r7, #16
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7f9 fc28 	bl	8004838 <HAL_RCCEx_PeriphCLKConfig>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800afee:	f7f6 f813 	bl	8001018 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800aff2:	f7f8 fc69 	bl	80038c8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aff6:	4b39      	ldr	r3, [pc, #228]	@ (800b0dc <HAL_PCD_MspInit+0x144>)
 800aff8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800affc:	4a37      	ldr	r2, [pc, #220]	@ (800b0dc <HAL_PCD_MspInit+0x144>)
 800affe:	f043 0301 	orr.w	r3, r3, #1
 800b002:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b006:	4b35      	ldr	r3, [pc, #212]	@ (800b0dc <HAL_PCD_MspInit+0x144>)
 800b008:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b018:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b01c:	2300      	movs	r3, #0
 800b01e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b022:	2300      	movs	r3, #0
 800b024:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b028:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b02c:	4619      	mov	r1, r3
 800b02e:	482c      	ldr	r0, [pc, #176]	@ (800b0e0 <HAL_PCD_MspInit+0x148>)
 800b030:	f7f6 fcde 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b034:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b038:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b03c:	2302      	movs	r3, #2
 800b03e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b042:	2300      	movs	r3, #0
 800b044:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b048:	2300      	movs	r3, #0
 800b04a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b04e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b052:	4619      	mov	r1, r3
 800b054:	4822      	ldr	r0, [pc, #136]	@ (800b0e0 <HAL_PCD_MspInit+0x148>)
 800b056:	f7f6 fccb 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800b05a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b05e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b062:	2302      	movs	r3, #2
 800b064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b068:	2301      	movs	r3, #1
 800b06a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b06e:	2300      	movs	r3, #0
 800b070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b074:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b078:	4619      	mov	r1, r3
 800b07a:	4819      	ldr	r0, [pc, #100]	@ (800b0e0 <HAL_PCD_MspInit+0x148>)
 800b07c:	f7f6 fcb8 	bl	80019f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b080:	4b16      	ldr	r3, [pc, #88]	@ (800b0dc <HAL_PCD_MspInit+0x144>)
 800b082:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b086:	4a15      	ldr	r2, [pc, #84]	@ (800b0dc <HAL_PCD_MspInit+0x144>)
 800b088:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b08c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800b090:	4b12      	ldr	r3, [pc, #72]	@ (800b0dc <HAL_PCD_MspInit+0x144>)
 800b092:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b09a:	60bb      	str	r3, [r7, #8]
 800b09c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	204a      	movs	r0, #74	@ 0x4a
 800b0a4:	f7f6 fc17 	bl	80018d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800b0a8:	204a      	movs	r0, #74	@ 0x4a
 800b0aa:	f7f6 fc2e 	bl	800190a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	204b      	movs	r0, #75	@ 0x4b
 800b0b4:	f7f6 fc0f 	bl	80018d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800b0b8:	204b      	movs	r0, #75	@ 0x4b
 800b0ba:	f7f6 fc26 	bl	800190a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	204d      	movs	r0, #77	@ 0x4d
 800b0c4:	f7f6 fc07 	bl	80018d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b0c8:	204d      	movs	r0, #77	@ 0x4d
 800b0ca:	f7f6 fc1e 	bl	800190a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b0ce:	bf00      	nop
 800b0d0:	37e8      	adds	r7, #232	@ 0xe8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	40040000 	.word	0x40040000
 800b0dc:	58024400 	.word	0x58024400
 800b0e0:	58020000 	.word	0x58020000

0800b0e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fe facb 	bl	8009696 <USBD_LL_SetupStage>
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b11a:	78fa      	ldrb	r2, [r7, #3]
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	4613      	mov	r3, r2
 800b120:	00db      	lsls	r3, r3, #3
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	440b      	add	r3, r1
 800b128:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	78fb      	ldrb	r3, [r7, #3]
 800b130:	4619      	mov	r1, r3
 800b132:	f7fe fb05 	bl	8009740 <USBD_LL_DataOutStage>
}
 800b136:	bf00      	nop
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b082      	sub	sp, #8
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	460b      	mov	r3, r1
 800b148:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b150:	78fa      	ldrb	r2, [r7, #3]
 800b152:	6879      	ldr	r1, [r7, #4]
 800b154:	4613      	mov	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	440b      	add	r3, r1
 800b15e:	3320      	adds	r3, #32
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	78fb      	ldrb	r3, [r7, #3]
 800b164:	4619      	mov	r1, r3
 800b166:	f7fe fb9e 	bl	80098a6 <USBD_LL_DataInStage>
}
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b180:	4618      	mov	r0, r3
 800b182:	f7fe fcd8 	bl	8009b36 <USBD_LL_SOF>
}
 800b186:	bf00      	nop
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b196:	2301      	movs	r3, #1
 800b198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	79db      	ldrb	r3, [r3, #7]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d102      	bne.n	800b1a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]
 800b1a6:	e008      	b.n	800b1ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	79db      	ldrb	r3, [r3, #7]
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d102      	bne.n	800b1b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	73fb      	strb	r3, [r7, #15]
 800b1b4:	e001      	b.n	800b1ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b1b6:	f7f5 ff2f 	bl	8001018 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1c0:	7bfa      	ldrb	r2, [r7, #15]
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe fc72 	bl	8009aae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fe fc1a 	bl	8009a0a <USBD_LL_Reset>
}
 800b1d6:	bf00      	nop
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe fc6d 	bl	8009ace <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	6812      	ldr	r2, [r2, #0]
 800b202:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b206:	f043 0301 	orr.w	r3, r3, #1
 800b20a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	7adb      	ldrb	r3, [r3, #11]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b214:	4b04      	ldr	r3, [pc, #16]	@ (800b228 <HAL_PCD_SuspendCallback+0x48>)
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	4a03      	ldr	r2, [pc, #12]	@ (800b228 <HAL_PCD_SuspendCallback+0x48>)
 800b21a:	f043 0306 	orr.w	r3, r3, #6
 800b21e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	e000ed00 	.word	0xe000ed00

0800b22c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fe fc63 	bl	8009b06 <USBD_LL_Resume>
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b25a:	78fa      	ldrb	r2, [r7, #3]
 800b25c:	4611      	mov	r1, r2
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fcbb 	bl	8009bda <USBD_LL_IsoOUTIncomplete>
}
 800b264:	bf00      	nop
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b27e:	78fa      	ldrb	r2, [r7, #3]
 800b280:	4611      	mov	r1, r2
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe fc77 	bl	8009b76 <USBD_LL_IsoINIncomplete>
}
 800b288:	bf00      	nop
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe fccd 	bl	8009c3e <USBD_LL_DevConnected>
}
 800b2a4:	bf00      	nop
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe fcca 	bl	8009c54 <USBD_LL_DevDisconnected>
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d140      	bne.n	800b35a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b2d8:	4a22      	ldr	r2, [pc, #136]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a20      	ldr	r2, [pc, #128]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b2e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b2e8:	4b1e      	ldr	r3, [pc, #120]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b2ea:	4a1f      	ldr	r2, [pc, #124]	@ (800b368 <USBD_LL_Init+0xa0>)
 800b2ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800b2ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b2f0:	2209      	movs	r2, #9
 800b2f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b2f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b2fa:	4b1a      	ldr	r3, [pc, #104]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b300:	4b18      	ldr	r3, [pc, #96]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b302:	2202      	movs	r2, #2
 800b304:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b306:	4b17      	ldr	r3, [pc, #92]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b308:	2200      	movs	r2, #0
 800b30a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b30c:	4b15      	ldr	r3, [pc, #84]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b30e:	2200      	movs	r2, #0
 800b310:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b312:	4b14      	ldr	r3, [pc, #80]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b314:	2200      	movs	r2, #0
 800b316:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800b318:	4b12      	ldr	r3, [pc, #72]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b31a:	2201      	movs	r2, #1
 800b31c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b31e:	4b11      	ldr	r3, [pc, #68]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b320:	2200      	movs	r2, #0
 800b322:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b324:	4b0f      	ldr	r3, [pc, #60]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b326:	2200      	movs	r2, #0
 800b328:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b32a:	480e      	ldr	r0, [pc, #56]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b32c:	f7f6 fff2 	bl	8002314 <HAL_PCD_Init>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b336:	f7f5 fe6f 	bl	8001018 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b33a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b33e:	4809      	ldr	r0, [pc, #36]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b340:	f7f8 fa47 	bl	80037d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b344:	2280      	movs	r2, #128	@ 0x80
 800b346:	2100      	movs	r1, #0
 800b348:	4806      	ldr	r0, [pc, #24]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b34a:	f7f8 f9fb 	bl	8003744 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b34e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b352:	2101      	movs	r1, #1
 800b354:	4803      	ldr	r0, [pc, #12]	@ (800b364 <USBD_LL_Init+0x9c>)
 800b356:	f7f8 f9f5 	bl	8003744 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	2400188c 	.word	0x2400188c
 800b368:	40040000 	.word	0x40040000

0800b36c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b382:	4618      	mov	r0, r3
 800b384:	f7f7 f8d2 	bl	800252c <HAL_PCD_Start>
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 f942 	bl	800b618 <USBD_Get_USB_Status>
 800b394:	4603      	mov	r3, r0
 800b396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b398:	7bbb      	ldrb	r3, [r7, #14]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	4608      	mov	r0, r1
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	70fb      	strb	r3, [r7, #3]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	70bb      	strb	r3, [r7, #2]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b3ca:	78bb      	ldrb	r3, [r7, #2]
 800b3cc:	883a      	ldrh	r2, [r7, #0]
 800b3ce:	78f9      	ldrb	r1, [r7, #3]
 800b3d0:	f7f7 fdd3 	bl	8002f7a <HAL_PCD_EP_Open>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 f91c 	bl	800b618 <USBD_Get_USB_Status>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b408:	78fa      	ldrb	r2, [r7, #3]
 800b40a:	4611      	mov	r1, r2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7f7 fe1e 	bl	800304e <HAL_PCD_EP_Close>
 800b412:	4603      	mov	r3, r0
 800b414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 f8fd 	bl	800b618 <USBD_Get_USB_Status>
 800b41e:	4603      	mov	r3, r0
 800b420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b422:	7bbb      	ldrb	r3, [r7, #14]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b446:	78fa      	ldrb	r2, [r7, #3]
 800b448:	4611      	mov	r1, r2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7f7 fed6 	bl	80031fc <HAL_PCD_EP_SetStall>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f8de 	bl	800b618 <USBD_Get_USB_Status>
 800b45c:	4603      	mov	r3, r0
 800b45e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b460:	7bbb      	ldrb	r3, [r7, #14]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b084      	sub	sp, #16
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	460b      	mov	r3, r1
 800b474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b484:	78fa      	ldrb	r2, [r7, #3]
 800b486:	4611      	mov	r1, r2
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f7 ff1a 	bl	80032c2 <HAL_PCD_EP_ClrStall>
 800b48e:	4603      	mov	r3, r0
 800b490:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	4618      	mov	r0, r3
 800b496:	f000 f8bf 	bl	800b618 <USBD_Get_USB_Status>
 800b49a:	4603      	mov	r3, r0
 800b49c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	da0b      	bge.n	800b4dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4ca:	68f9      	ldr	r1, [r7, #12]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	440b      	add	r3, r1
 800b4d6:	3316      	adds	r3, #22
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	e00b      	b.n	800b4f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4dc:	78fb      	ldrb	r3, [r7, #3]
 800b4de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4e2:	68f9      	ldr	r1, [r7, #12]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	4413      	add	r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	440b      	add	r3, r1
 800b4ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b4f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	4611      	mov	r1, r2
 800b51e:	4618      	mov	r0, r3
 800b520:	f7f7 fd07 	bl	8002f32 <HAL_PCD_SetAddress>
 800b524:	4603      	mov	r3, r0
 800b526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b528:	7bfb      	ldrb	r3, [r7, #15]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 f874 	bl	800b618 <USBD_Get_USB_Status>
 800b530:	4603      	mov	r3, r0
 800b532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b534:	7bbb      	ldrb	r3, [r7, #14]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b086      	sub	sp, #24
 800b542:	af00      	add	r7, sp, #0
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	607a      	str	r2, [r7, #4]
 800b548:	603b      	str	r3, [r7, #0]
 800b54a:	460b      	mov	r3, r1
 800b54c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b55c:	7af9      	ldrb	r1, [r7, #11]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	f7f7 fe11 	bl	8003188 <HAL_PCD_EP_Transmit>
 800b566:	4603      	mov	r3, r0
 800b568:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 f853 	bl	800b618 <USBD_Get_USB_Status>
 800b572:	4603      	mov	r3, r0
 800b574:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b576:	7dbb      	ldrb	r3, [r7, #22]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	607a      	str	r2, [r7, #4]
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	460b      	mov	r3, r1
 800b58e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b590:	2300      	movs	r3, #0
 800b592:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b59e:	7af9      	ldrb	r1, [r7, #11]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	f7f7 fd9d 	bl	80030e2 <HAL_PCD_EP_Receive>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 f832 	bl	800b618 <USBD_Get_USB_Status>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3718      	adds	r7, #24
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5d4:	78fa      	ldrb	r2, [r7, #3]
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7f7 fdbd 	bl	8003158 <HAL_PCD_EP_GetRxCount>
 800b5de:	4603      	mov	r3, r0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5f0:	4b03      	ldr	r3, [pc, #12]	@ (800b600 <USBD_static_malloc+0x18>)
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	24001d70 	.word	0x24001d70

0800b604 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d817      	bhi.n	800b65c <USBD_Get_USB_Status+0x44>
 800b62c:	a201      	add	r2, pc, #4	@ (adr r2, 800b634 <USBD_Get_USB_Status+0x1c>)
 800b62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b632:	bf00      	nop
 800b634:	0800b645 	.word	0x0800b645
 800b638:	0800b64b 	.word	0x0800b64b
 800b63c:	0800b651 	.word	0x0800b651
 800b640:	0800b657 	.word	0x0800b657
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	73fb      	strb	r3, [r7, #15]
    break;
 800b648:	e00b      	b.n	800b662 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b64a:	2303      	movs	r3, #3
 800b64c:	73fb      	strb	r3, [r7, #15]
    break;
 800b64e:	e008      	b.n	800b662 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b650:	2301      	movs	r3, #1
 800b652:	73fb      	strb	r3, [r7, #15]
    break;
 800b654:	e005      	b.n	800b662 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b656:	2303      	movs	r3, #3
 800b658:	73fb      	strb	r3, [r7, #15]
    break;
 800b65a:	e002      	b.n	800b662 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b65c:	2303      	movs	r3, #3
 800b65e:	73fb      	strb	r3, [r7, #15]
    break;
 800b660:	bf00      	nop
  }
  return usb_status;
 800b662:	7bfb      	ldrb	r3, [r7, #15]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <std>:
 800b670:	2300      	movs	r3, #0
 800b672:	b510      	push	{r4, lr}
 800b674:	4604      	mov	r4, r0
 800b676:	e9c0 3300 	strd	r3, r3, [r0]
 800b67a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b67e:	6083      	str	r3, [r0, #8]
 800b680:	8181      	strh	r1, [r0, #12]
 800b682:	6643      	str	r3, [r0, #100]	@ 0x64
 800b684:	81c2      	strh	r2, [r0, #14]
 800b686:	6183      	str	r3, [r0, #24]
 800b688:	4619      	mov	r1, r3
 800b68a:	2208      	movs	r2, #8
 800b68c:	305c      	adds	r0, #92	@ 0x5c
 800b68e:	f000 f90e 	bl	800b8ae <memset>
 800b692:	4b0d      	ldr	r3, [pc, #52]	@ (800b6c8 <std+0x58>)
 800b694:	6263      	str	r3, [r4, #36]	@ 0x24
 800b696:	4b0d      	ldr	r3, [pc, #52]	@ (800b6cc <std+0x5c>)
 800b698:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b69a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d0 <std+0x60>)
 800b69c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b69e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d4 <std+0x64>)
 800b6a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d8 <std+0x68>)
 800b6a4:	6224      	str	r4, [r4, #32]
 800b6a6:	429c      	cmp	r4, r3
 800b6a8:	d006      	beq.n	800b6b8 <std+0x48>
 800b6aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6ae:	4294      	cmp	r4, r2
 800b6b0:	d002      	beq.n	800b6b8 <std+0x48>
 800b6b2:	33d0      	adds	r3, #208	@ 0xd0
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	d105      	bne.n	800b6c4 <std+0x54>
 800b6b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c0:	f000 b96e 	b.w	800b9a0 <__retarget_lock_init_recursive>
 800b6c4:	bd10      	pop	{r4, pc}
 800b6c6:	bf00      	nop
 800b6c8:	0800b829 	.word	0x0800b829
 800b6cc:	0800b84b 	.word	0x0800b84b
 800b6d0:	0800b883 	.word	0x0800b883
 800b6d4:	0800b8a7 	.word	0x0800b8a7
 800b6d8:	24001f90 	.word	0x24001f90

0800b6dc <stdio_exit_handler>:
 800b6dc:	4a02      	ldr	r2, [pc, #8]	@ (800b6e8 <stdio_exit_handler+0xc>)
 800b6de:	4903      	ldr	r1, [pc, #12]	@ (800b6ec <stdio_exit_handler+0x10>)
 800b6e0:	4803      	ldr	r0, [pc, #12]	@ (800b6f0 <stdio_exit_handler+0x14>)
 800b6e2:	f000 b869 	b.w	800b7b8 <_fwalk_sglue>
 800b6e6:	bf00      	nop
 800b6e8:	24000104 	.word	0x24000104
 800b6ec:	0800c241 	.word	0x0800c241
 800b6f0:	24000114 	.word	0x24000114

0800b6f4 <cleanup_stdio>:
 800b6f4:	6841      	ldr	r1, [r0, #4]
 800b6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b728 <cleanup_stdio+0x34>)
 800b6f8:	4299      	cmp	r1, r3
 800b6fa:	b510      	push	{r4, lr}
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	d001      	beq.n	800b704 <cleanup_stdio+0x10>
 800b700:	f000 fd9e 	bl	800c240 <_fflush_r>
 800b704:	68a1      	ldr	r1, [r4, #8]
 800b706:	4b09      	ldr	r3, [pc, #36]	@ (800b72c <cleanup_stdio+0x38>)
 800b708:	4299      	cmp	r1, r3
 800b70a:	d002      	beq.n	800b712 <cleanup_stdio+0x1e>
 800b70c:	4620      	mov	r0, r4
 800b70e:	f000 fd97 	bl	800c240 <_fflush_r>
 800b712:	68e1      	ldr	r1, [r4, #12]
 800b714:	4b06      	ldr	r3, [pc, #24]	@ (800b730 <cleanup_stdio+0x3c>)
 800b716:	4299      	cmp	r1, r3
 800b718:	d004      	beq.n	800b724 <cleanup_stdio+0x30>
 800b71a:	4620      	mov	r0, r4
 800b71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b720:	f000 bd8e 	b.w	800c240 <_fflush_r>
 800b724:	bd10      	pop	{r4, pc}
 800b726:	bf00      	nop
 800b728:	24001f90 	.word	0x24001f90
 800b72c:	24001ff8 	.word	0x24001ff8
 800b730:	24002060 	.word	0x24002060

0800b734 <global_stdio_init.part.0>:
 800b734:	b510      	push	{r4, lr}
 800b736:	4b0b      	ldr	r3, [pc, #44]	@ (800b764 <global_stdio_init.part.0+0x30>)
 800b738:	4c0b      	ldr	r4, [pc, #44]	@ (800b768 <global_stdio_init.part.0+0x34>)
 800b73a:	4a0c      	ldr	r2, [pc, #48]	@ (800b76c <global_stdio_init.part.0+0x38>)
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	4620      	mov	r0, r4
 800b740:	2200      	movs	r2, #0
 800b742:	2104      	movs	r1, #4
 800b744:	f7ff ff94 	bl	800b670 <std>
 800b748:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b74c:	2201      	movs	r2, #1
 800b74e:	2109      	movs	r1, #9
 800b750:	f7ff ff8e 	bl	800b670 <std>
 800b754:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b758:	2202      	movs	r2, #2
 800b75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b75e:	2112      	movs	r1, #18
 800b760:	f7ff bf86 	b.w	800b670 <std>
 800b764:	240020c8 	.word	0x240020c8
 800b768:	24001f90 	.word	0x24001f90
 800b76c:	0800b6dd 	.word	0x0800b6dd

0800b770 <__sfp_lock_acquire>:
 800b770:	4801      	ldr	r0, [pc, #4]	@ (800b778 <__sfp_lock_acquire+0x8>)
 800b772:	f000 b916 	b.w	800b9a2 <__retarget_lock_acquire_recursive>
 800b776:	bf00      	nop
 800b778:	240020d1 	.word	0x240020d1

0800b77c <__sfp_lock_release>:
 800b77c:	4801      	ldr	r0, [pc, #4]	@ (800b784 <__sfp_lock_release+0x8>)
 800b77e:	f000 b911 	b.w	800b9a4 <__retarget_lock_release_recursive>
 800b782:	bf00      	nop
 800b784:	240020d1 	.word	0x240020d1

0800b788 <__sinit>:
 800b788:	b510      	push	{r4, lr}
 800b78a:	4604      	mov	r4, r0
 800b78c:	f7ff fff0 	bl	800b770 <__sfp_lock_acquire>
 800b790:	6a23      	ldr	r3, [r4, #32]
 800b792:	b11b      	cbz	r3, 800b79c <__sinit+0x14>
 800b794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b798:	f7ff bff0 	b.w	800b77c <__sfp_lock_release>
 800b79c:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <__sinit+0x28>)
 800b79e:	6223      	str	r3, [r4, #32]
 800b7a0:	4b04      	ldr	r3, [pc, #16]	@ (800b7b4 <__sinit+0x2c>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d1f5      	bne.n	800b794 <__sinit+0xc>
 800b7a8:	f7ff ffc4 	bl	800b734 <global_stdio_init.part.0>
 800b7ac:	e7f2      	b.n	800b794 <__sinit+0xc>
 800b7ae:	bf00      	nop
 800b7b0:	0800b6f5 	.word	0x0800b6f5
 800b7b4:	240020c8 	.word	0x240020c8

0800b7b8 <_fwalk_sglue>:
 800b7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7bc:	4607      	mov	r7, r0
 800b7be:	4688      	mov	r8, r1
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b7cc:	d505      	bpl.n	800b7da <_fwalk_sglue+0x22>
 800b7ce:	6824      	ldr	r4, [r4, #0]
 800b7d0:	2c00      	cmp	r4, #0
 800b7d2:	d1f7      	bne.n	800b7c4 <_fwalk_sglue+0xc>
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7da:	89ab      	ldrh	r3, [r5, #12]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d907      	bls.n	800b7f0 <_fwalk_sglue+0x38>
 800b7e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	d003      	beq.n	800b7f0 <_fwalk_sglue+0x38>
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	47c0      	blx	r8
 800b7ee:	4306      	orrs	r6, r0
 800b7f0:	3568      	adds	r5, #104	@ 0x68
 800b7f2:	e7e9      	b.n	800b7c8 <_fwalk_sglue+0x10>

0800b7f4 <iprintf>:
 800b7f4:	b40f      	push	{r0, r1, r2, r3}
 800b7f6:	b507      	push	{r0, r1, r2, lr}
 800b7f8:	4906      	ldr	r1, [pc, #24]	@ (800b814 <iprintf+0x20>)
 800b7fa:	ab04      	add	r3, sp, #16
 800b7fc:	6808      	ldr	r0, [r1, #0]
 800b7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b802:	6881      	ldr	r1, [r0, #8]
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	f000 f9f1 	bl	800bbec <_vfiprintf_r>
 800b80a:	b003      	add	sp, #12
 800b80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b810:	b004      	add	sp, #16
 800b812:	4770      	bx	lr
 800b814:	24000110 	.word	0x24000110

0800b818 <putchar>:
 800b818:	4b02      	ldr	r3, [pc, #8]	@ (800b824 <putchar+0xc>)
 800b81a:	4601      	mov	r1, r0
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	6882      	ldr	r2, [r0, #8]
 800b820:	f000 bd36 	b.w	800c290 <_putc_r>
 800b824:	24000110 	.word	0x24000110

0800b828 <__sread>:
 800b828:	b510      	push	{r4, lr}
 800b82a:	460c      	mov	r4, r1
 800b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b830:	f000 f868 	bl	800b904 <_read_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	bfab      	itete	ge
 800b838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b83a:	89a3      	ldrhlt	r3, [r4, #12]
 800b83c:	181b      	addge	r3, r3, r0
 800b83e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b842:	bfac      	ite	ge
 800b844:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b846:	81a3      	strhlt	r3, [r4, #12]
 800b848:	bd10      	pop	{r4, pc}

0800b84a <__swrite>:
 800b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	461f      	mov	r7, r3
 800b850:	898b      	ldrh	r3, [r1, #12]
 800b852:	05db      	lsls	r3, r3, #23
 800b854:	4605      	mov	r5, r0
 800b856:	460c      	mov	r4, r1
 800b858:	4616      	mov	r6, r2
 800b85a:	d505      	bpl.n	800b868 <__swrite+0x1e>
 800b85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b860:	2302      	movs	r3, #2
 800b862:	2200      	movs	r2, #0
 800b864:	f000 f83c 	bl	800b8e0 <_lseek_r>
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b86e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	4632      	mov	r2, r6
 800b876:	463b      	mov	r3, r7
 800b878:	4628      	mov	r0, r5
 800b87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b87e:	f000 b853 	b.w	800b928 <_write_r>

0800b882 <__sseek>:
 800b882:	b510      	push	{r4, lr}
 800b884:	460c      	mov	r4, r1
 800b886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88a:	f000 f829 	bl	800b8e0 <_lseek_r>
 800b88e:	1c43      	adds	r3, r0, #1
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	bf15      	itete	ne
 800b894:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b89a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b89e:	81a3      	strheq	r3, [r4, #12]
 800b8a0:	bf18      	it	ne
 800b8a2:	81a3      	strhne	r3, [r4, #12]
 800b8a4:	bd10      	pop	{r4, pc}

0800b8a6 <__sclose>:
 800b8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8aa:	f000 b809 	b.w	800b8c0 <_close_r>

0800b8ae <memset>:
 800b8ae:	4402      	add	r2, r0
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d100      	bne.n	800b8b8 <memset+0xa>
 800b8b6:	4770      	bx	lr
 800b8b8:	f803 1b01 	strb.w	r1, [r3], #1
 800b8bc:	e7f9      	b.n	800b8b2 <memset+0x4>
	...

0800b8c0 <_close_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4d06      	ldr	r5, [pc, #24]	@ (800b8dc <_close_r+0x1c>)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	602b      	str	r3, [r5, #0]
 800b8cc:	f7f5 fd65 	bl	800139a <_close>
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d102      	bne.n	800b8da <_close_r+0x1a>
 800b8d4:	682b      	ldr	r3, [r5, #0]
 800b8d6:	b103      	cbz	r3, 800b8da <_close_r+0x1a>
 800b8d8:	6023      	str	r3, [r4, #0]
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	240020cc 	.word	0x240020cc

0800b8e0 <_lseek_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d07      	ldr	r5, [pc, #28]	@ (800b900 <_lseek_r+0x20>)
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	602a      	str	r2, [r5, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f7f5 fd7a 	bl	80013e8 <_lseek>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d102      	bne.n	800b8fe <_lseek_r+0x1e>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	b103      	cbz	r3, 800b8fe <_lseek_r+0x1e>
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	240020cc 	.word	0x240020cc

0800b904 <_read_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	@ (800b924 <_read_r+0x20>)
 800b908:	4604      	mov	r4, r0
 800b90a:	4608      	mov	r0, r1
 800b90c:	4611      	mov	r1, r2
 800b90e:	2200      	movs	r2, #0
 800b910:	602a      	str	r2, [r5, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	f7f5 fd08 	bl	8001328 <_read>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	d102      	bne.n	800b922 <_read_r+0x1e>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b103      	cbz	r3, 800b922 <_read_r+0x1e>
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	240020cc 	.word	0x240020cc

0800b928 <_write_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d07      	ldr	r5, [pc, #28]	@ (800b948 <_write_r+0x20>)
 800b92c:	4604      	mov	r4, r0
 800b92e:	4608      	mov	r0, r1
 800b930:	4611      	mov	r1, r2
 800b932:	2200      	movs	r2, #0
 800b934:	602a      	str	r2, [r5, #0]
 800b936:	461a      	mov	r2, r3
 800b938:	f7f5 fd13 	bl	8001362 <_write>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_write_r+0x1e>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_write_r+0x1e>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	240020cc 	.word	0x240020cc

0800b94c <__errno>:
 800b94c:	4b01      	ldr	r3, [pc, #4]	@ (800b954 <__errno+0x8>)
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	24000110 	.word	0x24000110

0800b958 <__libc_init_array>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	4d0d      	ldr	r5, [pc, #52]	@ (800b990 <__libc_init_array+0x38>)
 800b95c:	4c0d      	ldr	r4, [pc, #52]	@ (800b994 <__libc_init_array+0x3c>)
 800b95e:	1b64      	subs	r4, r4, r5
 800b960:	10a4      	asrs	r4, r4, #2
 800b962:	2600      	movs	r6, #0
 800b964:	42a6      	cmp	r6, r4
 800b966:	d109      	bne.n	800b97c <__libc_init_array+0x24>
 800b968:	4d0b      	ldr	r5, [pc, #44]	@ (800b998 <__libc_init_array+0x40>)
 800b96a:	4c0c      	ldr	r4, [pc, #48]	@ (800b99c <__libc_init_array+0x44>)
 800b96c:	f000 fdec 	bl	800c548 <_init>
 800b970:	1b64      	subs	r4, r4, r5
 800b972:	10a4      	asrs	r4, r4, #2
 800b974:	2600      	movs	r6, #0
 800b976:	42a6      	cmp	r6, r4
 800b978:	d105      	bne.n	800b986 <__libc_init_array+0x2e>
 800b97a:	bd70      	pop	{r4, r5, r6, pc}
 800b97c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b980:	4798      	blx	r3
 800b982:	3601      	adds	r6, #1
 800b984:	e7ee      	b.n	800b964 <__libc_init_array+0xc>
 800b986:	f855 3b04 	ldr.w	r3, [r5], #4
 800b98a:	4798      	blx	r3
 800b98c:	3601      	adds	r6, #1
 800b98e:	e7f2      	b.n	800b976 <__libc_init_array+0x1e>
 800b990:	0800c654 	.word	0x0800c654
 800b994:	0800c654 	.word	0x0800c654
 800b998:	0800c654 	.word	0x0800c654
 800b99c:	0800c658 	.word	0x0800c658

0800b9a0 <__retarget_lock_init_recursive>:
 800b9a0:	4770      	bx	lr

0800b9a2 <__retarget_lock_acquire_recursive>:
 800b9a2:	4770      	bx	lr

0800b9a4 <__retarget_lock_release_recursive>:
 800b9a4:	4770      	bx	lr
	...

0800b9a8 <_free_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	d041      	beq.n	800ba34 <_free_r+0x8c>
 800b9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9b4:	1f0c      	subs	r4, r1, #4
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	bfb8      	it	lt
 800b9ba:	18e4      	addlt	r4, r4, r3
 800b9bc:	f000 f8e0 	bl	800bb80 <__malloc_lock>
 800b9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba38 <_free_r+0x90>)
 800b9c2:	6813      	ldr	r3, [r2, #0]
 800b9c4:	b933      	cbnz	r3, 800b9d4 <_free_r+0x2c>
 800b9c6:	6063      	str	r3, [r4, #4]
 800b9c8:	6014      	str	r4, [r2, #0]
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9d0:	f000 b8dc 	b.w	800bb8c <__malloc_unlock>
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	d908      	bls.n	800b9ea <_free_r+0x42>
 800b9d8:	6820      	ldr	r0, [r4, #0]
 800b9da:	1821      	adds	r1, r4, r0
 800b9dc:	428b      	cmp	r3, r1
 800b9de:	bf01      	itttt	eq
 800b9e0:	6819      	ldreq	r1, [r3, #0]
 800b9e2:	685b      	ldreq	r3, [r3, #4]
 800b9e4:	1809      	addeq	r1, r1, r0
 800b9e6:	6021      	streq	r1, [r4, #0]
 800b9e8:	e7ed      	b.n	800b9c6 <_free_r+0x1e>
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	b10b      	cbz	r3, 800b9f4 <_free_r+0x4c>
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	d9fa      	bls.n	800b9ea <_free_r+0x42>
 800b9f4:	6811      	ldr	r1, [r2, #0]
 800b9f6:	1850      	adds	r0, r2, r1
 800b9f8:	42a0      	cmp	r0, r4
 800b9fa:	d10b      	bne.n	800ba14 <_free_r+0x6c>
 800b9fc:	6820      	ldr	r0, [r4, #0]
 800b9fe:	4401      	add	r1, r0
 800ba00:	1850      	adds	r0, r2, r1
 800ba02:	4283      	cmp	r3, r0
 800ba04:	6011      	str	r1, [r2, #0]
 800ba06:	d1e0      	bne.n	800b9ca <_free_r+0x22>
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	6053      	str	r3, [r2, #4]
 800ba0e:	4408      	add	r0, r1
 800ba10:	6010      	str	r0, [r2, #0]
 800ba12:	e7da      	b.n	800b9ca <_free_r+0x22>
 800ba14:	d902      	bls.n	800ba1c <_free_r+0x74>
 800ba16:	230c      	movs	r3, #12
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	e7d6      	b.n	800b9ca <_free_r+0x22>
 800ba1c:	6820      	ldr	r0, [r4, #0]
 800ba1e:	1821      	adds	r1, r4, r0
 800ba20:	428b      	cmp	r3, r1
 800ba22:	bf04      	itt	eq
 800ba24:	6819      	ldreq	r1, [r3, #0]
 800ba26:	685b      	ldreq	r3, [r3, #4]
 800ba28:	6063      	str	r3, [r4, #4]
 800ba2a:	bf04      	itt	eq
 800ba2c:	1809      	addeq	r1, r1, r0
 800ba2e:	6021      	streq	r1, [r4, #0]
 800ba30:	6054      	str	r4, [r2, #4]
 800ba32:	e7ca      	b.n	800b9ca <_free_r+0x22>
 800ba34:	bd38      	pop	{r3, r4, r5, pc}
 800ba36:	bf00      	nop
 800ba38:	240020d8 	.word	0x240020d8

0800ba3c <sbrk_aligned>:
 800ba3c:	b570      	push	{r4, r5, r6, lr}
 800ba3e:	4e0f      	ldr	r6, [pc, #60]	@ (800ba7c <sbrk_aligned+0x40>)
 800ba40:	460c      	mov	r4, r1
 800ba42:	6831      	ldr	r1, [r6, #0]
 800ba44:	4605      	mov	r5, r0
 800ba46:	b911      	cbnz	r1, 800ba4e <sbrk_aligned+0x12>
 800ba48:	f000 fcea 	bl	800c420 <_sbrk_r>
 800ba4c:	6030      	str	r0, [r6, #0]
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4628      	mov	r0, r5
 800ba52:	f000 fce5 	bl	800c420 <_sbrk_r>
 800ba56:	1c43      	adds	r3, r0, #1
 800ba58:	d103      	bne.n	800ba62 <sbrk_aligned+0x26>
 800ba5a:	f04f 34ff 	mov.w	r4, #4294967295
 800ba5e:	4620      	mov	r0, r4
 800ba60:	bd70      	pop	{r4, r5, r6, pc}
 800ba62:	1cc4      	adds	r4, r0, #3
 800ba64:	f024 0403 	bic.w	r4, r4, #3
 800ba68:	42a0      	cmp	r0, r4
 800ba6a:	d0f8      	beq.n	800ba5e <sbrk_aligned+0x22>
 800ba6c:	1a21      	subs	r1, r4, r0
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f000 fcd6 	bl	800c420 <_sbrk_r>
 800ba74:	3001      	adds	r0, #1
 800ba76:	d1f2      	bne.n	800ba5e <sbrk_aligned+0x22>
 800ba78:	e7ef      	b.n	800ba5a <sbrk_aligned+0x1e>
 800ba7a:	bf00      	nop
 800ba7c:	240020d4 	.word	0x240020d4

0800ba80 <_malloc_r>:
 800ba80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba84:	1ccd      	adds	r5, r1, #3
 800ba86:	f025 0503 	bic.w	r5, r5, #3
 800ba8a:	3508      	adds	r5, #8
 800ba8c:	2d0c      	cmp	r5, #12
 800ba8e:	bf38      	it	cc
 800ba90:	250c      	movcc	r5, #12
 800ba92:	2d00      	cmp	r5, #0
 800ba94:	4606      	mov	r6, r0
 800ba96:	db01      	blt.n	800ba9c <_malloc_r+0x1c>
 800ba98:	42a9      	cmp	r1, r5
 800ba9a:	d904      	bls.n	800baa6 <_malloc_r+0x26>
 800ba9c:	230c      	movs	r3, #12
 800ba9e:	6033      	str	r3, [r6, #0]
 800baa0:	2000      	movs	r0, #0
 800baa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb7c <_malloc_r+0xfc>
 800baaa:	f000 f869 	bl	800bb80 <__malloc_lock>
 800baae:	f8d8 3000 	ldr.w	r3, [r8]
 800bab2:	461c      	mov	r4, r3
 800bab4:	bb44      	cbnz	r4, 800bb08 <_malloc_r+0x88>
 800bab6:	4629      	mov	r1, r5
 800bab8:	4630      	mov	r0, r6
 800baba:	f7ff ffbf 	bl	800ba3c <sbrk_aligned>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	4604      	mov	r4, r0
 800bac2:	d158      	bne.n	800bb76 <_malloc_r+0xf6>
 800bac4:	f8d8 4000 	ldr.w	r4, [r8]
 800bac8:	4627      	mov	r7, r4
 800baca:	2f00      	cmp	r7, #0
 800bacc:	d143      	bne.n	800bb56 <_malloc_r+0xd6>
 800bace:	2c00      	cmp	r4, #0
 800bad0:	d04b      	beq.n	800bb6a <_malloc_r+0xea>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	4639      	mov	r1, r7
 800bad6:	4630      	mov	r0, r6
 800bad8:	eb04 0903 	add.w	r9, r4, r3
 800badc:	f000 fca0 	bl	800c420 <_sbrk_r>
 800bae0:	4581      	cmp	r9, r0
 800bae2:	d142      	bne.n	800bb6a <_malloc_r+0xea>
 800bae4:	6821      	ldr	r1, [r4, #0]
 800bae6:	1a6d      	subs	r5, r5, r1
 800bae8:	4629      	mov	r1, r5
 800baea:	4630      	mov	r0, r6
 800baec:	f7ff ffa6 	bl	800ba3c <sbrk_aligned>
 800baf0:	3001      	adds	r0, #1
 800baf2:	d03a      	beq.n	800bb6a <_malloc_r+0xea>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	442b      	add	r3, r5
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	f8d8 3000 	ldr.w	r3, [r8]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	bb62      	cbnz	r2, 800bb5c <_malloc_r+0xdc>
 800bb02:	f8c8 7000 	str.w	r7, [r8]
 800bb06:	e00f      	b.n	800bb28 <_malloc_r+0xa8>
 800bb08:	6822      	ldr	r2, [r4, #0]
 800bb0a:	1b52      	subs	r2, r2, r5
 800bb0c:	d420      	bmi.n	800bb50 <_malloc_r+0xd0>
 800bb0e:	2a0b      	cmp	r2, #11
 800bb10:	d917      	bls.n	800bb42 <_malloc_r+0xc2>
 800bb12:	1961      	adds	r1, r4, r5
 800bb14:	42a3      	cmp	r3, r4
 800bb16:	6025      	str	r5, [r4, #0]
 800bb18:	bf18      	it	ne
 800bb1a:	6059      	strne	r1, [r3, #4]
 800bb1c:	6863      	ldr	r3, [r4, #4]
 800bb1e:	bf08      	it	eq
 800bb20:	f8c8 1000 	streq.w	r1, [r8]
 800bb24:	5162      	str	r2, [r4, r5]
 800bb26:	604b      	str	r3, [r1, #4]
 800bb28:	4630      	mov	r0, r6
 800bb2a:	f000 f82f 	bl	800bb8c <__malloc_unlock>
 800bb2e:	f104 000b 	add.w	r0, r4, #11
 800bb32:	1d23      	adds	r3, r4, #4
 800bb34:	f020 0007 	bic.w	r0, r0, #7
 800bb38:	1ac2      	subs	r2, r0, r3
 800bb3a:	bf1c      	itt	ne
 800bb3c:	1a1b      	subne	r3, r3, r0
 800bb3e:	50a3      	strne	r3, [r4, r2]
 800bb40:	e7af      	b.n	800baa2 <_malloc_r+0x22>
 800bb42:	6862      	ldr	r2, [r4, #4]
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	bf0c      	ite	eq
 800bb48:	f8c8 2000 	streq.w	r2, [r8]
 800bb4c:	605a      	strne	r2, [r3, #4]
 800bb4e:	e7eb      	b.n	800bb28 <_malloc_r+0xa8>
 800bb50:	4623      	mov	r3, r4
 800bb52:	6864      	ldr	r4, [r4, #4]
 800bb54:	e7ae      	b.n	800bab4 <_malloc_r+0x34>
 800bb56:	463c      	mov	r4, r7
 800bb58:	687f      	ldr	r7, [r7, #4]
 800bb5a:	e7b6      	b.n	800baca <_malloc_r+0x4a>
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	42a3      	cmp	r3, r4
 800bb62:	d1fb      	bne.n	800bb5c <_malloc_r+0xdc>
 800bb64:	2300      	movs	r3, #0
 800bb66:	6053      	str	r3, [r2, #4]
 800bb68:	e7de      	b.n	800bb28 <_malloc_r+0xa8>
 800bb6a:	230c      	movs	r3, #12
 800bb6c:	6033      	str	r3, [r6, #0]
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f000 f80c 	bl	800bb8c <__malloc_unlock>
 800bb74:	e794      	b.n	800baa0 <_malloc_r+0x20>
 800bb76:	6005      	str	r5, [r0, #0]
 800bb78:	e7d6      	b.n	800bb28 <_malloc_r+0xa8>
 800bb7a:	bf00      	nop
 800bb7c:	240020d8 	.word	0x240020d8

0800bb80 <__malloc_lock>:
 800bb80:	4801      	ldr	r0, [pc, #4]	@ (800bb88 <__malloc_lock+0x8>)
 800bb82:	f7ff bf0e 	b.w	800b9a2 <__retarget_lock_acquire_recursive>
 800bb86:	bf00      	nop
 800bb88:	240020d0 	.word	0x240020d0

0800bb8c <__malloc_unlock>:
 800bb8c:	4801      	ldr	r0, [pc, #4]	@ (800bb94 <__malloc_unlock+0x8>)
 800bb8e:	f7ff bf09 	b.w	800b9a4 <__retarget_lock_release_recursive>
 800bb92:	bf00      	nop
 800bb94:	240020d0 	.word	0x240020d0

0800bb98 <__sfputc_r>:
 800bb98:	6893      	ldr	r3, [r2, #8]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	b410      	push	{r4}
 800bba0:	6093      	str	r3, [r2, #8]
 800bba2:	da08      	bge.n	800bbb6 <__sfputc_r+0x1e>
 800bba4:	6994      	ldr	r4, [r2, #24]
 800bba6:	42a3      	cmp	r3, r4
 800bba8:	db01      	blt.n	800bbae <__sfputc_r+0x16>
 800bbaa:	290a      	cmp	r1, #10
 800bbac:	d103      	bne.n	800bbb6 <__sfputc_r+0x1e>
 800bbae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbb2:	f000 bba1 	b.w	800c2f8 <__swbuf_r>
 800bbb6:	6813      	ldr	r3, [r2, #0]
 800bbb8:	1c58      	adds	r0, r3, #1
 800bbba:	6010      	str	r0, [r2, #0]
 800bbbc:	7019      	strb	r1, [r3, #0]
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <__sfputs_r>:
 800bbc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc8:	4606      	mov	r6, r0
 800bbca:	460f      	mov	r7, r1
 800bbcc:	4614      	mov	r4, r2
 800bbce:	18d5      	adds	r5, r2, r3
 800bbd0:	42ac      	cmp	r4, r5
 800bbd2:	d101      	bne.n	800bbd8 <__sfputs_r+0x12>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	e007      	b.n	800bbe8 <__sfputs_r+0x22>
 800bbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbdc:	463a      	mov	r2, r7
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7ff ffda 	bl	800bb98 <__sfputc_r>
 800bbe4:	1c43      	adds	r3, r0, #1
 800bbe6:	d1f3      	bne.n	800bbd0 <__sfputs_r+0xa>
 800bbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbec <_vfiprintf_r>:
 800bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	460d      	mov	r5, r1
 800bbf2:	b09d      	sub	sp, #116	@ 0x74
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	4698      	mov	r8, r3
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	b118      	cbz	r0, 800bc04 <_vfiprintf_r+0x18>
 800bbfc:	6a03      	ldr	r3, [r0, #32]
 800bbfe:	b90b      	cbnz	r3, 800bc04 <_vfiprintf_r+0x18>
 800bc00:	f7ff fdc2 	bl	800b788 <__sinit>
 800bc04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc06:	07d9      	lsls	r1, r3, #31
 800bc08:	d405      	bmi.n	800bc16 <_vfiprintf_r+0x2a>
 800bc0a:	89ab      	ldrh	r3, [r5, #12]
 800bc0c:	059a      	lsls	r2, r3, #22
 800bc0e:	d402      	bmi.n	800bc16 <_vfiprintf_r+0x2a>
 800bc10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc12:	f7ff fec6 	bl	800b9a2 <__retarget_lock_acquire_recursive>
 800bc16:	89ab      	ldrh	r3, [r5, #12]
 800bc18:	071b      	lsls	r3, r3, #28
 800bc1a:	d501      	bpl.n	800bc20 <_vfiprintf_r+0x34>
 800bc1c:	692b      	ldr	r3, [r5, #16]
 800bc1e:	b99b      	cbnz	r3, 800bc48 <_vfiprintf_r+0x5c>
 800bc20:	4629      	mov	r1, r5
 800bc22:	4630      	mov	r0, r6
 800bc24:	f000 fba6 	bl	800c374 <__swsetup_r>
 800bc28:	b170      	cbz	r0, 800bc48 <_vfiprintf_r+0x5c>
 800bc2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc2c:	07dc      	lsls	r4, r3, #31
 800bc2e:	d504      	bpl.n	800bc3a <_vfiprintf_r+0x4e>
 800bc30:	f04f 30ff 	mov.w	r0, #4294967295
 800bc34:	b01d      	add	sp, #116	@ 0x74
 800bc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3a:	89ab      	ldrh	r3, [r5, #12]
 800bc3c:	0598      	lsls	r0, r3, #22
 800bc3e:	d4f7      	bmi.n	800bc30 <_vfiprintf_r+0x44>
 800bc40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc42:	f7ff feaf 	bl	800b9a4 <__retarget_lock_release_recursive>
 800bc46:	e7f3      	b.n	800bc30 <_vfiprintf_r+0x44>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc52:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc56:	2330      	movs	r3, #48	@ 0x30
 800bc58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be08 <_vfiprintf_r+0x21c>
 800bc5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc60:	f04f 0901 	mov.w	r9, #1
 800bc64:	4623      	mov	r3, r4
 800bc66:	469a      	mov	sl, r3
 800bc68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc6c:	b10a      	cbz	r2, 800bc72 <_vfiprintf_r+0x86>
 800bc6e:	2a25      	cmp	r2, #37	@ 0x25
 800bc70:	d1f9      	bne.n	800bc66 <_vfiprintf_r+0x7a>
 800bc72:	ebba 0b04 	subs.w	fp, sl, r4
 800bc76:	d00b      	beq.n	800bc90 <_vfiprintf_r+0xa4>
 800bc78:	465b      	mov	r3, fp
 800bc7a:	4622      	mov	r2, r4
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f7ff ffa1 	bl	800bbc6 <__sfputs_r>
 800bc84:	3001      	adds	r0, #1
 800bc86:	f000 80a7 	beq.w	800bdd8 <_vfiprintf_r+0x1ec>
 800bc8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc8c:	445a      	add	r2, fp
 800bc8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc90:	f89a 3000 	ldrb.w	r3, [sl]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 809f 	beq.w	800bdd8 <_vfiprintf_r+0x1ec>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bca4:	f10a 0a01 	add.w	sl, sl, #1
 800bca8:	9304      	str	r3, [sp, #16]
 800bcaa:	9307      	str	r3, [sp, #28]
 800bcac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcb2:	4654      	mov	r4, sl
 800bcb4:	2205      	movs	r2, #5
 800bcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcba:	4853      	ldr	r0, [pc, #332]	@ (800be08 <_vfiprintf_r+0x21c>)
 800bcbc:	f7f4 fb18 	bl	80002f0 <memchr>
 800bcc0:	9a04      	ldr	r2, [sp, #16]
 800bcc2:	b9d8      	cbnz	r0, 800bcfc <_vfiprintf_r+0x110>
 800bcc4:	06d1      	lsls	r1, r2, #27
 800bcc6:	bf44      	itt	mi
 800bcc8:	2320      	movmi	r3, #32
 800bcca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcce:	0713      	lsls	r3, r2, #28
 800bcd0:	bf44      	itt	mi
 800bcd2:	232b      	movmi	r3, #43	@ 0x2b
 800bcd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcde:	d015      	beq.n	800bd0c <_vfiprintf_r+0x120>
 800bce0:	9a07      	ldr	r2, [sp, #28]
 800bce2:	4654      	mov	r4, sl
 800bce4:	2000      	movs	r0, #0
 800bce6:	f04f 0c0a 	mov.w	ip, #10
 800bcea:	4621      	mov	r1, r4
 800bcec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcf0:	3b30      	subs	r3, #48	@ 0x30
 800bcf2:	2b09      	cmp	r3, #9
 800bcf4:	d94b      	bls.n	800bd8e <_vfiprintf_r+0x1a2>
 800bcf6:	b1b0      	cbz	r0, 800bd26 <_vfiprintf_r+0x13a>
 800bcf8:	9207      	str	r2, [sp, #28]
 800bcfa:	e014      	b.n	800bd26 <_vfiprintf_r+0x13a>
 800bcfc:	eba0 0308 	sub.w	r3, r0, r8
 800bd00:	fa09 f303 	lsl.w	r3, r9, r3
 800bd04:	4313      	orrs	r3, r2
 800bd06:	9304      	str	r3, [sp, #16]
 800bd08:	46a2      	mov	sl, r4
 800bd0a:	e7d2      	b.n	800bcb2 <_vfiprintf_r+0xc6>
 800bd0c:	9b03      	ldr	r3, [sp, #12]
 800bd0e:	1d19      	adds	r1, r3, #4
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	9103      	str	r1, [sp, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	bfbb      	ittet	lt
 800bd18:	425b      	neglt	r3, r3
 800bd1a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd1e:	9307      	strge	r3, [sp, #28]
 800bd20:	9307      	strlt	r3, [sp, #28]
 800bd22:	bfb8      	it	lt
 800bd24:	9204      	strlt	r2, [sp, #16]
 800bd26:	7823      	ldrb	r3, [r4, #0]
 800bd28:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd2a:	d10a      	bne.n	800bd42 <_vfiprintf_r+0x156>
 800bd2c:	7863      	ldrb	r3, [r4, #1]
 800bd2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd30:	d132      	bne.n	800bd98 <_vfiprintf_r+0x1ac>
 800bd32:	9b03      	ldr	r3, [sp, #12]
 800bd34:	1d1a      	adds	r2, r3, #4
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	9203      	str	r2, [sp, #12]
 800bd3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd3e:	3402      	adds	r4, #2
 800bd40:	9305      	str	r3, [sp, #20]
 800bd42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be18 <_vfiprintf_r+0x22c>
 800bd46:	7821      	ldrb	r1, [r4, #0]
 800bd48:	2203      	movs	r2, #3
 800bd4a:	4650      	mov	r0, sl
 800bd4c:	f7f4 fad0 	bl	80002f0 <memchr>
 800bd50:	b138      	cbz	r0, 800bd62 <_vfiprintf_r+0x176>
 800bd52:	9b04      	ldr	r3, [sp, #16]
 800bd54:	eba0 000a 	sub.w	r0, r0, sl
 800bd58:	2240      	movs	r2, #64	@ 0x40
 800bd5a:	4082      	lsls	r2, r0
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	3401      	adds	r4, #1
 800bd60:	9304      	str	r3, [sp, #16]
 800bd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd66:	4829      	ldr	r0, [pc, #164]	@ (800be0c <_vfiprintf_r+0x220>)
 800bd68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd6c:	2206      	movs	r2, #6
 800bd6e:	f7f4 fabf 	bl	80002f0 <memchr>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d03f      	beq.n	800bdf6 <_vfiprintf_r+0x20a>
 800bd76:	4b26      	ldr	r3, [pc, #152]	@ (800be10 <_vfiprintf_r+0x224>)
 800bd78:	bb1b      	cbnz	r3, 800bdc2 <_vfiprintf_r+0x1d6>
 800bd7a:	9b03      	ldr	r3, [sp, #12]
 800bd7c:	3307      	adds	r3, #7
 800bd7e:	f023 0307 	bic.w	r3, r3, #7
 800bd82:	3308      	adds	r3, #8
 800bd84:	9303      	str	r3, [sp, #12]
 800bd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd88:	443b      	add	r3, r7
 800bd8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd8c:	e76a      	b.n	800bc64 <_vfiprintf_r+0x78>
 800bd8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd92:	460c      	mov	r4, r1
 800bd94:	2001      	movs	r0, #1
 800bd96:	e7a8      	b.n	800bcea <_vfiprintf_r+0xfe>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	3401      	adds	r4, #1
 800bd9c:	9305      	str	r3, [sp, #20]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	f04f 0c0a 	mov.w	ip, #10
 800bda4:	4620      	mov	r0, r4
 800bda6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdaa:	3a30      	subs	r2, #48	@ 0x30
 800bdac:	2a09      	cmp	r2, #9
 800bdae:	d903      	bls.n	800bdb8 <_vfiprintf_r+0x1cc>
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d0c6      	beq.n	800bd42 <_vfiprintf_r+0x156>
 800bdb4:	9105      	str	r1, [sp, #20]
 800bdb6:	e7c4      	b.n	800bd42 <_vfiprintf_r+0x156>
 800bdb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e7f0      	b.n	800bda4 <_vfiprintf_r+0x1b8>
 800bdc2:	ab03      	add	r3, sp, #12
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	4b12      	ldr	r3, [pc, #72]	@ (800be14 <_vfiprintf_r+0x228>)
 800bdca:	a904      	add	r1, sp, #16
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f3af 8000 	nop.w
 800bdd2:	4607      	mov	r7, r0
 800bdd4:	1c78      	adds	r0, r7, #1
 800bdd6:	d1d6      	bne.n	800bd86 <_vfiprintf_r+0x19a>
 800bdd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdda:	07d9      	lsls	r1, r3, #31
 800bddc:	d405      	bmi.n	800bdea <_vfiprintf_r+0x1fe>
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	059a      	lsls	r2, r3, #22
 800bde2:	d402      	bmi.n	800bdea <_vfiprintf_r+0x1fe>
 800bde4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bde6:	f7ff fddd 	bl	800b9a4 <__retarget_lock_release_recursive>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	065b      	lsls	r3, r3, #25
 800bdee:	f53f af1f 	bmi.w	800bc30 <_vfiprintf_r+0x44>
 800bdf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdf4:	e71e      	b.n	800bc34 <_vfiprintf_r+0x48>
 800bdf6:	ab03      	add	r3, sp, #12
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	462a      	mov	r2, r5
 800bdfc:	4b05      	ldr	r3, [pc, #20]	@ (800be14 <_vfiprintf_r+0x228>)
 800bdfe:	a904      	add	r1, sp, #16
 800be00:	4630      	mov	r0, r6
 800be02:	f000 f879 	bl	800bef8 <_printf_i>
 800be06:	e7e4      	b.n	800bdd2 <_vfiprintf_r+0x1e6>
 800be08:	0800c618 	.word	0x0800c618
 800be0c:	0800c622 	.word	0x0800c622
 800be10:	00000000 	.word	0x00000000
 800be14:	0800bbc7 	.word	0x0800bbc7
 800be18:	0800c61e 	.word	0x0800c61e

0800be1c <_printf_common>:
 800be1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be20:	4616      	mov	r6, r2
 800be22:	4698      	mov	r8, r3
 800be24:	688a      	ldr	r2, [r1, #8]
 800be26:	690b      	ldr	r3, [r1, #16]
 800be28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be2c:	4293      	cmp	r3, r2
 800be2e:	bfb8      	it	lt
 800be30:	4613      	movlt	r3, r2
 800be32:	6033      	str	r3, [r6, #0]
 800be34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be38:	4607      	mov	r7, r0
 800be3a:	460c      	mov	r4, r1
 800be3c:	b10a      	cbz	r2, 800be42 <_printf_common+0x26>
 800be3e:	3301      	adds	r3, #1
 800be40:	6033      	str	r3, [r6, #0]
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	0699      	lsls	r1, r3, #26
 800be46:	bf42      	ittt	mi
 800be48:	6833      	ldrmi	r3, [r6, #0]
 800be4a:	3302      	addmi	r3, #2
 800be4c:	6033      	strmi	r3, [r6, #0]
 800be4e:	6825      	ldr	r5, [r4, #0]
 800be50:	f015 0506 	ands.w	r5, r5, #6
 800be54:	d106      	bne.n	800be64 <_printf_common+0x48>
 800be56:	f104 0a19 	add.w	sl, r4, #25
 800be5a:	68e3      	ldr	r3, [r4, #12]
 800be5c:	6832      	ldr	r2, [r6, #0]
 800be5e:	1a9b      	subs	r3, r3, r2
 800be60:	42ab      	cmp	r3, r5
 800be62:	dc26      	bgt.n	800beb2 <_printf_common+0x96>
 800be64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be68:	6822      	ldr	r2, [r4, #0]
 800be6a:	3b00      	subs	r3, #0
 800be6c:	bf18      	it	ne
 800be6e:	2301      	movne	r3, #1
 800be70:	0692      	lsls	r2, r2, #26
 800be72:	d42b      	bmi.n	800becc <_printf_common+0xb0>
 800be74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be78:	4641      	mov	r1, r8
 800be7a:	4638      	mov	r0, r7
 800be7c:	47c8      	blx	r9
 800be7e:	3001      	adds	r0, #1
 800be80:	d01e      	beq.n	800bec0 <_printf_common+0xa4>
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	6922      	ldr	r2, [r4, #16]
 800be86:	f003 0306 	and.w	r3, r3, #6
 800be8a:	2b04      	cmp	r3, #4
 800be8c:	bf02      	ittt	eq
 800be8e:	68e5      	ldreq	r5, [r4, #12]
 800be90:	6833      	ldreq	r3, [r6, #0]
 800be92:	1aed      	subeq	r5, r5, r3
 800be94:	68a3      	ldr	r3, [r4, #8]
 800be96:	bf0c      	ite	eq
 800be98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be9c:	2500      	movne	r5, #0
 800be9e:	4293      	cmp	r3, r2
 800bea0:	bfc4      	itt	gt
 800bea2:	1a9b      	subgt	r3, r3, r2
 800bea4:	18ed      	addgt	r5, r5, r3
 800bea6:	2600      	movs	r6, #0
 800bea8:	341a      	adds	r4, #26
 800beaa:	42b5      	cmp	r5, r6
 800beac:	d11a      	bne.n	800bee4 <_printf_common+0xc8>
 800beae:	2000      	movs	r0, #0
 800beb0:	e008      	b.n	800bec4 <_printf_common+0xa8>
 800beb2:	2301      	movs	r3, #1
 800beb4:	4652      	mov	r2, sl
 800beb6:	4641      	mov	r1, r8
 800beb8:	4638      	mov	r0, r7
 800beba:	47c8      	blx	r9
 800bebc:	3001      	adds	r0, #1
 800bebe:	d103      	bne.n	800bec8 <_printf_common+0xac>
 800bec0:	f04f 30ff 	mov.w	r0, #4294967295
 800bec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec8:	3501      	adds	r5, #1
 800beca:	e7c6      	b.n	800be5a <_printf_common+0x3e>
 800becc:	18e1      	adds	r1, r4, r3
 800bece:	1c5a      	adds	r2, r3, #1
 800bed0:	2030      	movs	r0, #48	@ 0x30
 800bed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bed6:	4422      	add	r2, r4
 800bed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bedc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bee0:	3302      	adds	r3, #2
 800bee2:	e7c7      	b.n	800be74 <_printf_common+0x58>
 800bee4:	2301      	movs	r3, #1
 800bee6:	4622      	mov	r2, r4
 800bee8:	4641      	mov	r1, r8
 800beea:	4638      	mov	r0, r7
 800beec:	47c8      	blx	r9
 800beee:	3001      	adds	r0, #1
 800bef0:	d0e6      	beq.n	800bec0 <_printf_common+0xa4>
 800bef2:	3601      	adds	r6, #1
 800bef4:	e7d9      	b.n	800beaa <_printf_common+0x8e>
	...

0800bef8 <_printf_i>:
 800bef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	7e0f      	ldrb	r7, [r1, #24]
 800befe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf00:	2f78      	cmp	r7, #120	@ 0x78
 800bf02:	4691      	mov	r9, r2
 800bf04:	4680      	mov	r8, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	469a      	mov	sl, r3
 800bf0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf0e:	d807      	bhi.n	800bf20 <_printf_i+0x28>
 800bf10:	2f62      	cmp	r7, #98	@ 0x62
 800bf12:	d80a      	bhi.n	800bf2a <_printf_i+0x32>
 800bf14:	2f00      	cmp	r7, #0
 800bf16:	f000 80d2 	beq.w	800c0be <_printf_i+0x1c6>
 800bf1a:	2f58      	cmp	r7, #88	@ 0x58
 800bf1c:	f000 80b9 	beq.w	800c092 <_printf_i+0x19a>
 800bf20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf28:	e03a      	b.n	800bfa0 <_printf_i+0xa8>
 800bf2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf2e:	2b15      	cmp	r3, #21
 800bf30:	d8f6      	bhi.n	800bf20 <_printf_i+0x28>
 800bf32:	a101      	add	r1, pc, #4	@ (adr r1, 800bf38 <_printf_i+0x40>)
 800bf34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf38:	0800bf91 	.word	0x0800bf91
 800bf3c:	0800bfa5 	.word	0x0800bfa5
 800bf40:	0800bf21 	.word	0x0800bf21
 800bf44:	0800bf21 	.word	0x0800bf21
 800bf48:	0800bf21 	.word	0x0800bf21
 800bf4c:	0800bf21 	.word	0x0800bf21
 800bf50:	0800bfa5 	.word	0x0800bfa5
 800bf54:	0800bf21 	.word	0x0800bf21
 800bf58:	0800bf21 	.word	0x0800bf21
 800bf5c:	0800bf21 	.word	0x0800bf21
 800bf60:	0800bf21 	.word	0x0800bf21
 800bf64:	0800c0a5 	.word	0x0800c0a5
 800bf68:	0800bfcf 	.word	0x0800bfcf
 800bf6c:	0800c05f 	.word	0x0800c05f
 800bf70:	0800bf21 	.word	0x0800bf21
 800bf74:	0800bf21 	.word	0x0800bf21
 800bf78:	0800c0c7 	.word	0x0800c0c7
 800bf7c:	0800bf21 	.word	0x0800bf21
 800bf80:	0800bfcf 	.word	0x0800bfcf
 800bf84:	0800bf21 	.word	0x0800bf21
 800bf88:	0800bf21 	.word	0x0800bf21
 800bf8c:	0800c067 	.word	0x0800c067
 800bf90:	6833      	ldr	r3, [r6, #0]
 800bf92:	1d1a      	adds	r2, r3, #4
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6032      	str	r2, [r6, #0]
 800bf98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e09d      	b.n	800c0e0 <_printf_i+0x1e8>
 800bfa4:	6833      	ldr	r3, [r6, #0]
 800bfa6:	6820      	ldr	r0, [r4, #0]
 800bfa8:	1d19      	adds	r1, r3, #4
 800bfaa:	6031      	str	r1, [r6, #0]
 800bfac:	0606      	lsls	r6, r0, #24
 800bfae:	d501      	bpl.n	800bfb4 <_printf_i+0xbc>
 800bfb0:	681d      	ldr	r5, [r3, #0]
 800bfb2:	e003      	b.n	800bfbc <_printf_i+0xc4>
 800bfb4:	0645      	lsls	r5, r0, #25
 800bfb6:	d5fb      	bpl.n	800bfb0 <_printf_i+0xb8>
 800bfb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfbc:	2d00      	cmp	r5, #0
 800bfbe:	da03      	bge.n	800bfc8 <_printf_i+0xd0>
 800bfc0:	232d      	movs	r3, #45	@ 0x2d
 800bfc2:	426d      	negs	r5, r5
 800bfc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfc8:	4859      	ldr	r0, [pc, #356]	@ (800c130 <_printf_i+0x238>)
 800bfca:	230a      	movs	r3, #10
 800bfcc:	e011      	b.n	800bff2 <_printf_i+0xfa>
 800bfce:	6821      	ldr	r1, [r4, #0]
 800bfd0:	6833      	ldr	r3, [r6, #0]
 800bfd2:	0608      	lsls	r0, r1, #24
 800bfd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfd8:	d402      	bmi.n	800bfe0 <_printf_i+0xe8>
 800bfda:	0649      	lsls	r1, r1, #25
 800bfdc:	bf48      	it	mi
 800bfde:	b2ad      	uxthmi	r5, r5
 800bfe0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfe2:	4853      	ldr	r0, [pc, #332]	@ (800c130 <_printf_i+0x238>)
 800bfe4:	6033      	str	r3, [r6, #0]
 800bfe6:	bf14      	ite	ne
 800bfe8:	230a      	movne	r3, #10
 800bfea:	2308      	moveq	r3, #8
 800bfec:	2100      	movs	r1, #0
 800bfee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bff2:	6866      	ldr	r6, [r4, #4]
 800bff4:	60a6      	str	r6, [r4, #8]
 800bff6:	2e00      	cmp	r6, #0
 800bff8:	bfa2      	ittt	ge
 800bffa:	6821      	ldrge	r1, [r4, #0]
 800bffc:	f021 0104 	bicge.w	r1, r1, #4
 800c000:	6021      	strge	r1, [r4, #0]
 800c002:	b90d      	cbnz	r5, 800c008 <_printf_i+0x110>
 800c004:	2e00      	cmp	r6, #0
 800c006:	d04b      	beq.n	800c0a0 <_printf_i+0x1a8>
 800c008:	4616      	mov	r6, r2
 800c00a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c00e:	fb03 5711 	mls	r7, r3, r1, r5
 800c012:	5dc7      	ldrb	r7, [r0, r7]
 800c014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c018:	462f      	mov	r7, r5
 800c01a:	42bb      	cmp	r3, r7
 800c01c:	460d      	mov	r5, r1
 800c01e:	d9f4      	bls.n	800c00a <_printf_i+0x112>
 800c020:	2b08      	cmp	r3, #8
 800c022:	d10b      	bne.n	800c03c <_printf_i+0x144>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	07df      	lsls	r7, r3, #31
 800c028:	d508      	bpl.n	800c03c <_printf_i+0x144>
 800c02a:	6923      	ldr	r3, [r4, #16]
 800c02c:	6861      	ldr	r1, [r4, #4]
 800c02e:	4299      	cmp	r1, r3
 800c030:	bfde      	ittt	le
 800c032:	2330      	movle	r3, #48	@ 0x30
 800c034:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c038:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c03c:	1b92      	subs	r2, r2, r6
 800c03e:	6122      	str	r2, [r4, #16]
 800c040:	f8cd a000 	str.w	sl, [sp]
 800c044:	464b      	mov	r3, r9
 800c046:	aa03      	add	r2, sp, #12
 800c048:	4621      	mov	r1, r4
 800c04a:	4640      	mov	r0, r8
 800c04c:	f7ff fee6 	bl	800be1c <_printf_common>
 800c050:	3001      	adds	r0, #1
 800c052:	d14a      	bne.n	800c0ea <_printf_i+0x1f2>
 800c054:	f04f 30ff 	mov.w	r0, #4294967295
 800c058:	b004      	add	sp, #16
 800c05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	f043 0320 	orr.w	r3, r3, #32
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	4833      	ldr	r0, [pc, #204]	@ (800c134 <_printf_i+0x23c>)
 800c068:	2778      	movs	r7, #120	@ 0x78
 800c06a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	6831      	ldr	r1, [r6, #0]
 800c072:	061f      	lsls	r7, r3, #24
 800c074:	f851 5b04 	ldr.w	r5, [r1], #4
 800c078:	d402      	bmi.n	800c080 <_printf_i+0x188>
 800c07a:	065f      	lsls	r7, r3, #25
 800c07c:	bf48      	it	mi
 800c07e:	b2ad      	uxthmi	r5, r5
 800c080:	6031      	str	r1, [r6, #0]
 800c082:	07d9      	lsls	r1, r3, #31
 800c084:	bf44      	itt	mi
 800c086:	f043 0320 	orrmi.w	r3, r3, #32
 800c08a:	6023      	strmi	r3, [r4, #0]
 800c08c:	b11d      	cbz	r5, 800c096 <_printf_i+0x19e>
 800c08e:	2310      	movs	r3, #16
 800c090:	e7ac      	b.n	800bfec <_printf_i+0xf4>
 800c092:	4827      	ldr	r0, [pc, #156]	@ (800c130 <_printf_i+0x238>)
 800c094:	e7e9      	b.n	800c06a <_printf_i+0x172>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	f023 0320 	bic.w	r3, r3, #32
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	e7f6      	b.n	800c08e <_printf_i+0x196>
 800c0a0:	4616      	mov	r6, r2
 800c0a2:	e7bd      	b.n	800c020 <_printf_i+0x128>
 800c0a4:	6833      	ldr	r3, [r6, #0]
 800c0a6:	6825      	ldr	r5, [r4, #0]
 800c0a8:	6961      	ldr	r1, [r4, #20]
 800c0aa:	1d18      	adds	r0, r3, #4
 800c0ac:	6030      	str	r0, [r6, #0]
 800c0ae:	062e      	lsls	r6, r5, #24
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	d501      	bpl.n	800c0b8 <_printf_i+0x1c0>
 800c0b4:	6019      	str	r1, [r3, #0]
 800c0b6:	e002      	b.n	800c0be <_printf_i+0x1c6>
 800c0b8:	0668      	lsls	r0, r5, #25
 800c0ba:	d5fb      	bpl.n	800c0b4 <_printf_i+0x1bc>
 800c0bc:	8019      	strh	r1, [r3, #0]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6123      	str	r3, [r4, #16]
 800c0c2:	4616      	mov	r6, r2
 800c0c4:	e7bc      	b.n	800c040 <_printf_i+0x148>
 800c0c6:	6833      	ldr	r3, [r6, #0]
 800c0c8:	1d1a      	adds	r2, r3, #4
 800c0ca:	6032      	str	r2, [r6, #0]
 800c0cc:	681e      	ldr	r6, [r3, #0]
 800c0ce:	6862      	ldr	r2, [r4, #4]
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7f4 f90c 	bl	80002f0 <memchr>
 800c0d8:	b108      	cbz	r0, 800c0de <_printf_i+0x1e6>
 800c0da:	1b80      	subs	r0, r0, r6
 800c0dc:	6060      	str	r0, [r4, #4]
 800c0de:	6863      	ldr	r3, [r4, #4]
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0e8:	e7aa      	b.n	800c040 <_printf_i+0x148>
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	47d0      	blx	sl
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	d0ad      	beq.n	800c054 <_printf_i+0x15c>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	079b      	lsls	r3, r3, #30
 800c0fc:	d413      	bmi.n	800c126 <_printf_i+0x22e>
 800c0fe:	68e0      	ldr	r0, [r4, #12]
 800c100:	9b03      	ldr	r3, [sp, #12]
 800c102:	4298      	cmp	r0, r3
 800c104:	bfb8      	it	lt
 800c106:	4618      	movlt	r0, r3
 800c108:	e7a6      	b.n	800c058 <_printf_i+0x160>
 800c10a:	2301      	movs	r3, #1
 800c10c:	4632      	mov	r2, r6
 800c10e:	4649      	mov	r1, r9
 800c110:	4640      	mov	r0, r8
 800c112:	47d0      	blx	sl
 800c114:	3001      	adds	r0, #1
 800c116:	d09d      	beq.n	800c054 <_printf_i+0x15c>
 800c118:	3501      	adds	r5, #1
 800c11a:	68e3      	ldr	r3, [r4, #12]
 800c11c:	9903      	ldr	r1, [sp, #12]
 800c11e:	1a5b      	subs	r3, r3, r1
 800c120:	42ab      	cmp	r3, r5
 800c122:	dcf2      	bgt.n	800c10a <_printf_i+0x212>
 800c124:	e7eb      	b.n	800c0fe <_printf_i+0x206>
 800c126:	2500      	movs	r5, #0
 800c128:	f104 0619 	add.w	r6, r4, #25
 800c12c:	e7f5      	b.n	800c11a <_printf_i+0x222>
 800c12e:	bf00      	nop
 800c130:	0800c629 	.word	0x0800c629
 800c134:	0800c63a 	.word	0x0800c63a

0800c138 <__sflush_r>:
 800c138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c140:	0716      	lsls	r6, r2, #28
 800c142:	4605      	mov	r5, r0
 800c144:	460c      	mov	r4, r1
 800c146:	d454      	bmi.n	800c1f2 <__sflush_r+0xba>
 800c148:	684b      	ldr	r3, [r1, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dc02      	bgt.n	800c154 <__sflush_r+0x1c>
 800c14e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c150:	2b00      	cmp	r3, #0
 800c152:	dd48      	ble.n	800c1e6 <__sflush_r+0xae>
 800c154:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c156:	2e00      	cmp	r6, #0
 800c158:	d045      	beq.n	800c1e6 <__sflush_r+0xae>
 800c15a:	2300      	movs	r3, #0
 800c15c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c160:	682f      	ldr	r7, [r5, #0]
 800c162:	6a21      	ldr	r1, [r4, #32]
 800c164:	602b      	str	r3, [r5, #0]
 800c166:	d030      	beq.n	800c1ca <__sflush_r+0x92>
 800c168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	0759      	lsls	r1, r3, #29
 800c16e:	d505      	bpl.n	800c17c <__sflush_r+0x44>
 800c170:	6863      	ldr	r3, [r4, #4]
 800c172:	1ad2      	subs	r2, r2, r3
 800c174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c176:	b10b      	cbz	r3, 800c17c <__sflush_r+0x44>
 800c178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c17a:	1ad2      	subs	r2, r2, r3
 800c17c:	2300      	movs	r3, #0
 800c17e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c180:	6a21      	ldr	r1, [r4, #32]
 800c182:	4628      	mov	r0, r5
 800c184:	47b0      	blx	r6
 800c186:	1c43      	adds	r3, r0, #1
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	d106      	bne.n	800c19a <__sflush_r+0x62>
 800c18c:	6829      	ldr	r1, [r5, #0]
 800c18e:	291d      	cmp	r1, #29
 800c190:	d82b      	bhi.n	800c1ea <__sflush_r+0xb2>
 800c192:	4a2a      	ldr	r2, [pc, #168]	@ (800c23c <__sflush_r+0x104>)
 800c194:	410a      	asrs	r2, r1
 800c196:	07d6      	lsls	r6, r2, #31
 800c198:	d427      	bmi.n	800c1ea <__sflush_r+0xb2>
 800c19a:	2200      	movs	r2, #0
 800c19c:	6062      	str	r2, [r4, #4]
 800c19e:	04d9      	lsls	r1, r3, #19
 800c1a0:	6922      	ldr	r2, [r4, #16]
 800c1a2:	6022      	str	r2, [r4, #0]
 800c1a4:	d504      	bpl.n	800c1b0 <__sflush_r+0x78>
 800c1a6:	1c42      	adds	r2, r0, #1
 800c1a8:	d101      	bne.n	800c1ae <__sflush_r+0x76>
 800c1aa:	682b      	ldr	r3, [r5, #0]
 800c1ac:	b903      	cbnz	r3, 800c1b0 <__sflush_r+0x78>
 800c1ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1b2:	602f      	str	r7, [r5, #0]
 800c1b4:	b1b9      	cbz	r1, 800c1e6 <__sflush_r+0xae>
 800c1b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1ba:	4299      	cmp	r1, r3
 800c1bc:	d002      	beq.n	800c1c4 <__sflush_r+0x8c>
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f7ff fbf2 	bl	800b9a8 <_free_r>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1c8:	e00d      	b.n	800c1e6 <__sflush_r+0xae>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b0      	blx	r6
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	1c50      	adds	r0, r2, #1
 800c1d4:	d1c9      	bne.n	800c16a <__sflush_r+0x32>
 800c1d6:	682b      	ldr	r3, [r5, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0c6      	beq.n	800c16a <__sflush_r+0x32>
 800c1dc:	2b1d      	cmp	r3, #29
 800c1de:	d001      	beq.n	800c1e4 <__sflush_r+0xac>
 800c1e0:	2b16      	cmp	r3, #22
 800c1e2:	d11e      	bne.n	800c222 <__sflush_r+0xea>
 800c1e4:	602f      	str	r7, [r5, #0]
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	e022      	b.n	800c230 <__sflush_r+0xf8>
 800c1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ee:	b21b      	sxth	r3, r3
 800c1f0:	e01b      	b.n	800c22a <__sflush_r+0xf2>
 800c1f2:	690f      	ldr	r7, [r1, #16]
 800c1f4:	2f00      	cmp	r7, #0
 800c1f6:	d0f6      	beq.n	800c1e6 <__sflush_r+0xae>
 800c1f8:	0793      	lsls	r3, r2, #30
 800c1fa:	680e      	ldr	r6, [r1, #0]
 800c1fc:	bf08      	it	eq
 800c1fe:	694b      	ldreq	r3, [r1, #20]
 800c200:	600f      	str	r7, [r1, #0]
 800c202:	bf18      	it	ne
 800c204:	2300      	movne	r3, #0
 800c206:	eba6 0807 	sub.w	r8, r6, r7
 800c20a:	608b      	str	r3, [r1, #8]
 800c20c:	f1b8 0f00 	cmp.w	r8, #0
 800c210:	dde9      	ble.n	800c1e6 <__sflush_r+0xae>
 800c212:	6a21      	ldr	r1, [r4, #32]
 800c214:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c216:	4643      	mov	r3, r8
 800c218:	463a      	mov	r2, r7
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b0      	blx	r6
 800c21e:	2800      	cmp	r0, #0
 800c220:	dc08      	bgt.n	800c234 <__sflush_r+0xfc>
 800c222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c234:	4407      	add	r7, r0
 800c236:	eba8 0800 	sub.w	r8, r8, r0
 800c23a:	e7e7      	b.n	800c20c <__sflush_r+0xd4>
 800c23c:	dfbffffe 	.word	0xdfbffffe

0800c240 <_fflush_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	690b      	ldr	r3, [r1, #16]
 800c244:	4605      	mov	r5, r0
 800c246:	460c      	mov	r4, r1
 800c248:	b913      	cbnz	r3, 800c250 <_fflush_r+0x10>
 800c24a:	2500      	movs	r5, #0
 800c24c:	4628      	mov	r0, r5
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	b118      	cbz	r0, 800c25a <_fflush_r+0x1a>
 800c252:	6a03      	ldr	r3, [r0, #32]
 800c254:	b90b      	cbnz	r3, 800c25a <_fflush_r+0x1a>
 800c256:	f7ff fa97 	bl	800b788 <__sinit>
 800c25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d0f3      	beq.n	800c24a <_fflush_r+0xa>
 800c262:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c264:	07d0      	lsls	r0, r2, #31
 800c266:	d404      	bmi.n	800c272 <_fflush_r+0x32>
 800c268:	0599      	lsls	r1, r3, #22
 800c26a:	d402      	bmi.n	800c272 <_fflush_r+0x32>
 800c26c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c26e:	f7ff fb98 	bl	800b9a2 <__retarget_lock_acquire_recursive>
 800c272:	4628      	mov	r0, r5
 800c274:	4621      	mov	r1, r4
 800c276:	f7ff ff5f 	bl	800c138 <__sflush_r>
 800c27a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c27c:	07da      	lsls	r2, r3, #31
 800c27e:	4605      	mov	r5, r0
 800c280:	d4e4      	bmi.n	800c24c <_fflush_r+0xc>
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	059b      	lsls	r3, r3, #22
 800c286:	d4e1      	bmi.n	800c24c <_fflush_r+0xc>
 800c288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c28a:	f7ff fb8b 	bl	800b9a4 <__retarget_lock_release_recursive>
 800c28e:	e7dd      	b.n	800c24c <_fflush_r+0xc>

0800c290 <_putc_r>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	460d      	mov	r5, r1
 800c294:	4614      	mov	r4, r2
 800c296:	4606      	mov	r6, r0
 800c298:	b118      	cbz	r0, 800c2a2 <_putc_r+0x12>
 800c29a:	6a03      	ldr	r3, [r0, #32]
 800c29c:	b90b      	cbnz	r3, 800c2a2 <_putc_r+0x12>
 800c29e:	f7ff fa73 	bl	800b788 <__sinit>
 800c2a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2a4:	07d8      	lsls	r0, r3, #31
 800c2a6:	d405      	bmi.n	800c2b4 <_putc_r+0x24>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	0599      	lsls	r1, r3, #22
 800c2ac:	d402      	bmi.n	800c2b4 <_putc_r+0x24>
 800c2ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2b0:	f7ff fb77 	bl	800b9a2 <__retarget_lock_acquire_recursive>
 800c2b4:	68a3      	ldr	r3, [r4, #8]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	60a3      	str	r3, [r4, #8]
 800c2bc:	da05      	bge.n	800c2ca <_putc_r+0x3a>
 800c2be:	69a2      	ldr	r2, [r4, #24]
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	db12      	blt.n	800c2ea <_putc_r+0x5a>
 800c2c4:	b2eb      	uxtb	r3, r5
 800c2c6:	2b0a      	cmp	r3, #10
 800c2c8:	d00f      	beq.n	800c2ea <_putc_r+0x5a>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	6022      	str	r2, [r4, #0]
 800c2d0:	701d      	strb	r5, [r3, #0]
 800c2d2:	b2ed      	uxtb	r5, r5
 800c2d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2d6:	07da      	lsls	r2, r3, #31
 800c2d8:	d405      	bmi.n	800c2e6 <_putc_r+0x56>
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	059b      	lsls	r3, r3, #22
 800c2de:	d402      	bmi.n	800c2e6 <_putc_r+0x56>
 800c2e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2e2:	f7ff fb5f 	bl	800b9a4 <__retarget_lock_release_recursive>
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	f000 f802 	bl	800c2f8 <__swbuf_r>
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	e7ed      	b.n	800c2d4 <_putc_r+0x44>

0800c2f8 <__swbuf_r>:
 800c2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fa:	460e      	mov	r6, r1
 800c2fc:	4614      	mov	r4, r2
 800c2fe:	4605      	mov	r5, r0
 800c300:	b118      	cbz	r0, 800c30a <__swbuf_r+0x12>
 800c302:	6a03      	ldr	r3, [r0, #32]
 800c304:	b90b      	cbnz	r3, 800c30a <__swbuf_r+0x12>
 800c306:	f7ff fa3f 	bl	800b788 <__sinit>
 800c30a:	69a3      	ldr	r3, [r4, #24]
 800c30c:	60a3      	str	r3, [r4, #8]
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	071a      	lsls	r2, r3, #28
 800c312:	d501      	bpl.n	800c318 <__swbuf_r+0x20>
 800c314:	6923      	ldr	r3, [r4, #16]
 800c316:	b943      	cbnz	r3, 800c32a <__swbuf_r+0x32>
 800c318:	4621      	mov	r1, r4
 800c31a:	4628      	mov	r0, r5
 800c31c:	f000 f82a 	bl	800c374 <__swsetup_r>
 800c320:	b118      	cbz	r0, 800c32a <__swbuf_r+0x32>
 800c322:	f04f 37ff 	mov.w	r7, #4294967295
 800c326:	4638      	mov	r0, r7
 800c328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c32a:	6823      	ldr	r3, [r4, #0]
 800c32c:	6922      	ldr	r2, [r4, #16]
 800c32e:	1a98      	subs	r0, r3, r2
 800c330:	6963      	ldr	r3, [r4, #20]
 800c332:	b2f6      	uxtb	r6, r6
 800c334:	4283      	cmp	r3, r0
 800c336:	4637      	mov	r7, r6
 800c338:	dc05      	bgt.n	800c346 <__swbuf_r+0x4e>
 800c33a:	4621      	mov	r1, r4
 800c33c:	4628      	mov	r0, r5
 800c33e:	f7ff ff7f 	bl	800c240 <_fflush_r>
 800c342:	2800      	cmp	r0, #0
 800c344:	d1ed      	bne.n	800c322 <__swbuf_r+0x2a>
 800c346:	68a3      	ldr	r3, [r4, #8]
 800c348:	3b01      	subs	r3, #1
 800c34a:	60a3      	str	r3, [r4, #8]
 800c34c:	6823      	ldr	r3, [r4, #0]
 800c34e:	1c5a      	adds	r2, r3, #1
 800c350:	6022      	str	r2, [r4, #0]
 800c352:	701e      	strb	r6, [r3, #0]
 800c354:	6962      	ldr	r2, [r4, #20]
 800c356:	1c43      	adds	r3, r0, #1
 800c358:	429a      	cmp	r2, r3
 800c35a:	d004      	beq.n	800c366 <__swbuf_r+0x6e>
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	07db      	lsls	r3, r3, #31
 800c360:	d5e1      	bpl.n	800c326 <__swbuf_r+0x2e>
 800c362:	2e0a      	cmp	r6, #10
 800c364:	d1df      	bne.n	800c326 <__swbuf_r+0x2e>
 800c366:	4621      	mov	r1, r4
 800c368:	4628      	mov	r0, r5
 800c36a:	f7ff ff69 	bl	800c240 <_fflush_r>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d0d9      	beq.n	800c326 <__swbuf_r+0x2e>
 800c372:	e7d6      	b.n	800c322 <__swbuf_r+0x2a>

0800c374 <__swsetup_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4b29      	ldr	r3, [pc, #164]	@ (800c41c <__swsetup_r+0xa8>)
 800c378:	4605      	mov	r5, r0
 800c37a:	6818      	ldr	r0, [r3, #0]
 800c37c:	460c      	mov	r4, r1
 800c37e:	b118      	cbz	r0, 800c388 <__swsetup_r+0x14>
 800c380:	6a03      	ldr	r3, [r0, #32]
 800c382:	b90b      	cbnz	r3, 800c388 <__swsetup_r+0x14>
 800c384:	f7ff fa00 	bl	800b788 <__sinit>
 800c388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c38c:	0719      	lsls	r1, r3, #28
 800c38e:	d422      	bmi.n	800c3d6 <__swsetup_r+0x62>
 800c390:	06da      	lsls	r2, r3, #27
 800c392:	d407      	bmi.n	800c3a4 <__swsetup_r+0x30>
 800c394:	2209      	movs	r2, #9
 800c396:	602a      	str	r2, [r5, #0]
 800c398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c39c:	81a3      	strh	r3, [r4, #12]
 800c39e:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a2:	e033      	b.n	800c40c <__swsetup_r+0x98>
 800c3a4:	0758      	lsls	r0, r3, #29
 800c3a6:	d512      	bpl.n	800c3ce <__swsetup_r+0x5a>
 800c3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3aa:	b141      	cbz	r1, 800c3be <__swsetup_r+0x4a>
 800c3ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3b0:	4299      	cmp	r1, r3
 800c3b2:	d002      	beq.n	800c3ba <__swsetup_r+0x46>
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f7ff faf7 	bl	800b9a8 <_free_r>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3be:	89a3      	ldrh	r3, [r4, #12]
 800c3c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3c4:	81a3      	strh	r3, [r4, #12]
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	6063      	str	r3, [r4, #4]
 800c3ca:	6923      	ldr	r3, [r4, #16]
 800c3cc:	6023      	str	r3, [r4, #0]
 800c3ce:	89a3      	ldrh	r3, [r4, #12]
 800c3d0:	f043 0308 	orr.w	r3, r3, #8
 800c3d4:	81a3      	strh	r3, [r4, #12]
 800c3d6:	6923      	ldr	r3, [r4, #16]
 800c3d8:	b94b      	cbnz	r3, 800c3ee <__swsetup_r+0x7a>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c3e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3e4:	d003      	beq.n	800c3ee <__swsetup_r+0x7a>
 800c3e6:	4621      	mov	r1, r4
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	f000 f84f 	bl	800c48c <__smakebuf_r>
 800c3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f2:	f013 0201 	ands.w	r2, r3, #1
 800c3f6:	d00a      	beq.n	800c40e <__swsetup_r+0x9a>
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	60a2      	str	r2, [r4, #8]
 800c3fc:	6962      	ldr	r2, [r4, #20]
 800c3fe:	4252      	negs	r2, r2
 800c400:	61a2      	str	r2, [r4, #24]
 800c402:	6922      	ldr	r2, [r4, #16]
 800c404:	b942      	cbnz	r2, 800c418 <__swsetup_r+0xa4>
 800c406:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c40a:	d1c5      	bne.n	800c398 <__swsetup_r+0x24>
 800c40c:	bd38      	pop	{r3, r4, r5, pc}
 800c40e:	0799      	lsls	r1, r3, #30
 800c410:	bf58      	it	pl
 800c412:	6962      	ldrpl	r2, [r4, #20]
 800c414:	60a2      	str	r2, [r4, #8]
 800c416:	e7f4      	b.n	800c402 <__swsetup_r+0x8e>
 800c418:	2000      	movs	r0, #0
 800c41a:	e7f7      	b.n	800c40c <__swsetup_r+0x98>
 800c41c:	24000110 	.word	0x24000110

0800c420 <_sbrk_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4d06      	ldr	r5, [pc, #24]	@ (800c43c <_sbrk_r+0x1c>)
 800c424:	2300      	movs	r3, #0
 800c426:	4604      	mov	r4, r0
 800c428:	4608      	mov	r0, r1
 800c42a:	602b      	str	r3, [r5, #0]
 800c42c:	f7f4 ffea 	bl	8001404 <_sbrk>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_sbrk_r+0x1a>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b103      	cbz	r3, 800c43a <_sbrk_r+0x1a>
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	240020cc 	.word	0x240020cc

0800c440 <__swhatbuf_r>:
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	460c      	mov	r4, r1
 800c444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c448:	2900      	cmp	r1, #0
 800c44a:	b096      	sub	sp, #88	@ 0x58
 800c44c:	4615      	mov	r5, r2
 800c44e:	461e      	mov	r6, r3
 800c450:	da0d      	bge.n	800c46e <__swhatbuf_r+0x2e>
 800c452:	89a3      	ldrh	r3, [r4, #12]
 800c454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c458:	f04f 0100 	mov.w	r1, #0
 800c45c:	bf14      	ite	ne
 800c45e:	2340      	movne	r3, #64	@ 0x40
 800c460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c464:	2000      	movs	r0, #0
 800c466:	6031      	str	r1, [r6, #0]
 800c468:	602b      	str	r3, [r5, #0]
 800c46a:	b016      	add	sp, #88	@ 0x58
 800c46c:	bd70      	pop	{r4, r5, r6, pc}
 800c46e:	466a      	mov	r2, sp
 800c470:	f000 f848 	bl	800c504 <_fstat_r>
 800c474:	2800      	cmp	r0, #0
 800c476:	dbec      	blt.n	800c452 <__swhatbuf_r+0x12>
 800c478:	9901      	ldr	r1, [sp, #4]
 800c47a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c47e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c482:	4259      	negs	r1, r3
 800c484:	4159      	adcs	r1, r3
 800c486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c48a:	e7eb      	b.n	800c464 <__swhatbuf_r+0x24>

0800c48c <__smakebuf_r>:
 800c48c:	898b      	ldrh	r3, [r1, #12]
 800c48e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c490:	079d      	lsls	r5, r3, #30
 800c492:	4606      	mov	r6, r0
 800c494:	460c      	mov	r4, r1
 800c496:	d507      	bpl.n	800c4a8 <__smakebuf_r+0x1c>
 800c498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	6123      	str	r3, [r4, #16]
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	6163      	str	r3, [r4, #20]
 800c4a4:	b003      	add	sp, #12
 800c4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a8:	ab01      	add	r3, sp, #4
 800c4aa:	466a      	mov	r2, sp
 800c4ac:	f7ff ffc8 	bl	800c440 <__swhatbuf_r>
 800c4b0:	9f00      	ldr	r7, [sp, #0]
 800c4b2:	4605      	mov	r5, r0
 800c4b4:	4639      	mov	r1, r7
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f7ff fae2 	bl	800ba80 <_malloc_r>
 800c4bc:	b948      	cbnz	r0, 800c4d2 <__smakebuf_r+0x46>
 800c4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c2:	059a      	lsls	r2, r3, #22
 800c4c4:	d4ee      	bmi.n	800c4a4 <__smakebuf_r+0x18>
 800c4c6:	f023 0303 	bic.w	r3, r3, #3
 800c4ca:	f043 0302 	orr.w	r3, r3, #2
 800c4ce:	81a3      	strh	r3, [r4, #12]
 800c4d0:	e7e2      	b.n	800c498 <__smakebuf_r+0xc>
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	6020      	str	r0, [r4, #0]
 800c4d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	9b01      	ldr	r3, [sp, #4]
 800c4de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4e2:	b15b      	cbz	r3, 800c4fc <__smakebuf_r+0x70>
 800c4e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f000 f81d 	bl	800c528 <_isatty_r>
 800c4ee:	b128      	cbz	r0, 800c4fc <__smakebuf_r+0x70>
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	f023 0303 	bic.w	r3, r3, #3
 800c4f6:	f043 0301 	orr.w	r3, r3, #1
 800c4fa:	81a3      	strh	r3, [r4, #12]
 800c4fc:	89a3      	ldrh	r3, [r4, #12]
 800c4fe:	431d      	orrs	r5, r3
 800c500:	81a5      	strh	r5, [r4, #12]
 800c502:	e7cf      	b.n	800c4a4 <__smakebuf_r+0x18>

0800c504 <_fstat_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d07      	ldr	r5, [pc, #28]	@ (800c524 <_fstat_r+0x20>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	4611      	mov	r1, r2
 800c510:	602b      	str	r3, [r5, #0]
 800c512:	f7f4 ff4e 	bl	80013b2 <_fstat>
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	d102      	bne.n	800c520 <_fstat_r+0x1c>
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	b103      	cbz	r3, 800c520 <_fstat_r+0x1c>
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	bd38      	pop	{r3, r4, r5, pc}
 800c522:	bf00      	nop
 800c524:	240020cc 	.word	0x240020cc

0800c528 <_isatty_r>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	4d06      	ldr	r5, [pc, #24]	@ (800c544 <_isatty_r+0x1c>)
 800c52c:	2300      	movs	r3, #0
 800c52e:	4604      	mov	r4, r0
 800c530:	4608      	mov	r0, r1
 800c532:	602b      	str	r3, [r5, #0]
 800c534:	f7f4 ff4d 	bl	80013d2 <_isatty>
 800c538:	1c43      	adds	r3, r0, #1
 800c53a:	d102      	bne.n	800c542 <_isatty_r+0x1a>
 800c53c:	682b      	ldr	r3, [r5, #0]
 800c53e:	b103      	cbz	r3, 800c542 <_isatty_r+0x1a>
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	bd38      	pop	{r3, r4, r5, pc}
 800c544:	240020cc 	.word	0x240020cc

0800c548 <_init>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	bf00      	nop
 800c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54e:	bc08      	pop	{r3}
 800c550:	469e      	mov	lr, r3
 800c552:	4770      	bx	lr

0800c554 <_fini>:
 800c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c556:	bf00      	nop
 800c558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c55a:	bc08      	pop	{r3}
 800c55c:	469e      	mov	lr, r3
 800c55e:	4770      	bx	lr
