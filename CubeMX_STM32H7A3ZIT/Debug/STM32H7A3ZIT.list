
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2d4  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800c584  0800c584  0000d584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c67c  0800c67c  0000d67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c684  0800c684  0000d684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c688  0800c688  0000d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800c68c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f7c  24000160  0800c7ec  0000e160  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240020dc  0800c7ec  0000f0dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY
 10 .debug_info   000208e7  00000000  00000000  0000e18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f1c  00000000  00000000  0002ea75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001870  00000000  00000000  00033998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001268  00000000  00000000  00035208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035a5b  00000000  00000000  00036470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000250b2  00000000  00000000  0006becb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b447  00000000  00000000  00090f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc3c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006bb8  00000000  00000000  001cc408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001d2fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c56c 	.word	0x0800c56c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800c56c 	.word	0x0800c56c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	@ 0x40
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8000396:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
 80003c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003c4:	4b48      	ldr	r3, [pc, #288]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003c6:	4a49      	ldr	r2, [pc, #292]	@ (80004ec <MX_FMC_Init+0x15c>)
 80003c8:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003ca:	4b47      	ldr	r3, [pc, #284]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003d0:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003d2:	4b45      	ldr	r3, [pc, #276]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003d8:	4b43      	ldr	r3, [pc, #268]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 80003de:	4b42      	ldr	r3, [pc, #264]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003e4:	4b40      	ldr	r3, [pc, #256]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 80003ea:	4b3f      	ldr	r3, [pc, #252]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 80003f0:	4b3d      	ldr	r3, [pc, #244]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 80003f6:	4b3c      	ldr	r3, [pc, #240]	@ (80004e8 <MX_FMC_Init+0x158>)
 80003f8:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 80003fe:	4b3a      	ldr	r3, [pc, #232]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000400:	2240      	movs	r2, #64	@ 0x40
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 8000404:	4b38      	ldr	r3, [pc, #224]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000406:	2240      	movs	r2, #64	@ 0x40
 8000408:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 800040a:	4b37      	ldr	r3, [pc, #220]	@ (80004e8 <MX_FMC_Init+0x158>)
 800040c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000410:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 0;
 8000412:	4b35      	ldr	r3, [pc, #212]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000418:	4b33      	ldr	r3, [pc, #204]	@ (80004e8 <MX_FMC_Init+0x158>)
 800041a:	2200      	movs	r2, #0
 800041c:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 800041e:	4b32      	ldr	r3, [pc, #200]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000420:	2201      	movs	r2, #1
 8000422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000426:	23fc      	movs	r3, #252	@ 0xfc
 8000428:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 800042a:	23fc      	movs	r3, #252	@ 0xfc
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 800042e:	23fc      	movs	r3, #252	@ 0xfc
 8000430:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 8000432:	23fc      	movs	r3, #252	@ 0xfc
 8000434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000436:	23fc      	movs	r3, #252	@ 0xfc
 8000438:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 800043a:	23fc      	movs	r3, #252	@ 0xfc
 800043c:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000446:	f107 0220 	add.w	r2, r7, #32
 800044a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800044e:	4619      	mov	r1, r3
 8000450:	4825      	ldr	r0, [pc, #148]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000452:	f001 ff27 	bl	80022a4 <HAL_NAND_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 800045c:	f000 fdee 	bl	800103c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000460:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000462:	4a24      	ldr	r2, [pc, #144]	@ (80004f4 <MX_FMC_Init+0x164>)
 8000464:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000466:	4b22      	ldr	r3, [pc, #136]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800046c:	4b20      	ldr	r3, [pc, #128]	@ (80004f0 <MX_FMC_Init+0x160>)
 800046e:	2201      	movs	r2, #1
 8000470:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000472:	4b1f      	ldr	r3, [pc, #124]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000474:	2204      	movs	r2, #4
 8000476:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000478:	4b1d      	ldr	r3, [pc, #116]	@ (80004f0 <MX_FMC_Init+0x160>)
 800047a:	2210      	movs	r2, #16
 800047c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800047e:	4b1c      	ldr	r3, [pc, #112]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000480:	2240      	movs	r2, #64	@ 0x40
 8000482:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000484:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000486:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800048a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <MX_FMC_Init+0x160>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_FMC_Init+0x160>)
 8000494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000498:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_FMC_Init+0x160>)
 800049c:	2200      	movs	r2, #0
 800049e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004a0:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004a6:	2302      	movs	r3, #2
 80004a8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004aa:	2309      	movs	r3, #9
 80004ac:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004ae:	2306      	movs	r3, #6
 80004b0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004b2:	2309      	movs	r3, #9
 80004b4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004b6:	2303      	movs	r3, #3
 80004b8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004ba:	2303      	movs	r3, #3
 80004bc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004be:	2303      	movs	r3, #3
 80004c0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	480a      	ldr	r0, [pc, #40]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004c8:	f006 fdd2 	bl	8007070 <HAL_SDRAM_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80004d2:	f000 fdb3 	bl	800103c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80004d6:	4908      	ldr	r1, [pc, #32]	@ (80004f8 <MX_FMC_Init+0x168>)
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_FMC_Init+0x160>)
 80004da:	f000 fdb5 	bl	8001048 <SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 80004de:	bf00      	nop
 80004e0:	3740      	adds	r7, #64	@ 0x40
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2400018c 	.word	0x2400018c
 80004ec:	52004080 	.word	0x52004080
 80004f0:	240001cc 	.word	0x240001cc
 80004f4:	52004140 	.word	0x52004140
 80004f8:	2400017c 	.word	0x2400017c

080004fc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b0b8      	sub	sp, #224	@ 0xe0
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000512:	4b5c      	ldr	r3, [pc, #368]	@ (8000684 <HAL_FMC_MspInit+0x188>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	f040 80af 	bne.w	800067a <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 800051c:	4b59      	ldr	r3, [pc, #356]	@ (8000684 <HAL_FMC_MspInit+0x188>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	22c0      	movs	r2, #192	@ 0xc0
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f00b f9d1 	bl	800b8d2 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000534:	f04f 0300 	mov.w	r3, #0
 8000538:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800053c:	2300      	movs	r3, #0
 800053e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	4618      	mov	r0, r3
 8000546:	f004 f989 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000550:	f000 fd74 	bl	800103c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000554:	4b4c      	ldr	r3, [pc, #304]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 8000556:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800055a:	4a4b      	ldr	r2, [pc, #300]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 800055c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000560:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000564:	4b48      	ldr	r3, [pc, #288]	@ (8000688 <HAL_FMC_MspInit+0x18c>)
 8000566:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800056a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000572:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000576:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058c:	230c      	movs	r3, #12
 800058e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000592:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000596:	4619      	mov	r1, r3
 8000598:	483c      	ldr	r0, [pc, #240]	@ (800068c <HAL_FMC_MspInit+0x190>)
 800059a:	f001 fa3b 	bl	8001a14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800059e:	230d      	movs	r3, #13
 80005a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005b6:	230c      	movs	r3, #12
 80005b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005c0:	4619      	mov	r1, r3
 80005c2:	4833      	ldr	r0, [pc, #204]	@ (8000690 <HAL_FMC_MspInit+0x194>)
 80005c4:	f001 fa26 	bl	8001a14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005c8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005e2:	230c      	movs	r3, #12
 80005e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005ec:	4619      	mov	r1, r3
 80005ee:	4829      	ldr	r0, [pc, #164]	@ (8000694 <HAL_FMC_MspInit+0x198>)
 80005f0:	f001 fa10 	bl	8001a14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005f4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80005f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800060e:	230c      	movs	r3, #12
 8000610:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000614:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000618:	4619      	mov	r1, r3
 800061a:	481f      	ldr	r0, [pc, #124]	@ (8000698 <HAL_FMC_MspInit+0x19c>)
 800061c:	f001 f9fa 	bl	8001a14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000620:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 8000624:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800063a:	230c      	movs	r3, #12
 800063c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000640:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000644:	4619      	mov	r1, r3
 8000646:	4815      	ldr	r0, [pc, #84]	@ (800069c <HAL_FMC_MspInit+0x1a0>)
 8000648:	f001 f9e4 	bl	8001a14 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800064c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000666:	2309      	movs	r3, #9
 8000668:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000670:	4619      	mov	r1, r3
 8000672:	4807      	ldr	r0, [pc, #28]	@ (8000690 <HAL_FMC_MspInit+0x194>)
 8000674:	f001 f9ce 	bl	8001a14 <HAL_GPIO_Init>
 8000678:	e000      	b.n	800067c <HAL_FMC_MspInit+0x180>
    return;
 800067a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800067c:	37e0      	adds	r7, #224	@ 0xe0
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	24000200 	.word	0x24000200
 8000688:	58024400 	.word	0x58024400
 800068c:	58021400 	.word	0x58021400
 8000690:	58020800 	.word	0x58020800
 8000694:	58021800 	.word	0x58021800
 8000698:	58021000 	.word	0x58021000
 800069c:	58020c00 	.word	0x58020c00

080006a0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80006a8:	f7ff ff28 	bl	80004fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006bc:	f7ff ff1e 	bl	80004fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	@ 0x30
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006de:	4b60      	ldr	r3, [pc, #384]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006e4:	4a5e      	ldr	r2, [pc, #376]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <MX_GPIO_Init+0x198>)
 80006fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000702:	4a57      	ldr	r2, [pc, #348]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800070c:	4b54      	ldr	r3, [pc, #336]	@ (8000860 <MX_GPIO_Init+0x198>)
 800070e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071a:	4b51      	ldr	r3, [pc, #324]	@ (8000860 <MX_GPIO_Init+0x198>)
 800071c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000720:	4a4f      	ldr	r2, [pc, #316]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800072a:	4b4d      	ldr	r3, [pc, #308]	@ (8000860 <MX_GPIO_Init+0x198>)
 800072c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000730:	f003 0320 	and.w	r3, r3, #32
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b49      	ldr	r3, [pc, #292]	@ (8000860 <MX_GPIO_Init+0x198>)
 800073a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800073e:	4a48      	ldr	r2, [pc, #288]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000748:	4b45      	ldr	r3, [pc, #276]	@ (8000860 <MX_GPIO_Init+0x198>)
 800074a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	4b42      	ldr	r3, [pc, #264]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000758:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800075c:	4a40      	ldr	r2, [pc, #256]	@ (8000860 <MX_GPIO_Init+0x198>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000762:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000766:	4b3e      	ldr	r3, [pc, #248]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000768:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800076c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	4b3a      	ldr	r3, [pc, #232]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000776:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800077a:	4a39      	ldr	r2, [pc, #228]	@ (8000860 <MX_GPIO_Init+0x198>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000786:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <MX_GPIO_Init+0x198>)
 8000794:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000798:	4a31      	ldr	r2, [pc, #196]	@ (8000860 <MX_GPIO_Init+0x198>)
 800079a:	f043 0308 	orr.w	r3, r3, #8
 800079e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <MX_GPIO_Init+0x198>)
 80007a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2150      	movs	r1, #80	@ 0x50
 80007b4:	482b      	ldr	r0, [pc, #172]	@ (8000864 <MX_GPIO_Init+0x19c>)
 80007b6:	f001 fadd 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c0:	4829      	ldr	r0, [pc, #164]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 80007c2:	f001 fad7 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	21c0      	movs	r1, #192	@ 0xc0
 80007ca:	4828      	ldr	r0, [pc, #160]	@ (800086c <MX_GPIO_Init+0x1a4>)
 80007cc:	f001 fad2 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007d0:	232c      	movs	r3, #44	@ 0x2c
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4820      	ldr	r0, [pc, #128]	@ (8000864 <MX_GPIO_Init+0x19c>)
 80007e4:	f001 f916 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007e8:	2350      	movs	r3, #80	@ 0x50
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4819      	ldr	r0, [pc, #100]	@ (8000864 <MX_GPIO_Init+0x19c>)
 8000800:	f001 f908 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 800081e:	f001 f8f9 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000822:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <MX_GPIO_Init+0x1a0>)
 8000838:	f001 f8ec 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083c:	23c0      	movs	r3, #192	@ 0xc0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <MX_GPIO_Init+0x1a4>)
 8000854:	f001 f8de 	bl	8001a14 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3730      	adds	r7, #48	@ 0x30
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58024400 	.word	0x58024400
 8000864:	58021000 	.word	0x58021000
 8000868:	58020800 	.word	0x58020800
 800086c:	58021400 	.word	0x58021400

08000870 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	f001 fa96 	bl	8001ddc <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 fbc1 	bl	800103c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008be:	f001 fb29 	bl	8001f14 <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f000 fbb8 	bl	800103c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_I2C1_Init+0x74>)
 80008d0:	f001 fb6b 	bl	8001faa <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 fbaf 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000204 	.word	0x24000204
 80008e8:	40005400 	.word	0x40005400
 80008ec:	20b0ccff 	.word	0x20b0ccff

080008f0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_I2C2_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <MX_I2C2_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_I2C2_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <MX_I2C2_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	@ (8000964 <MX_I2C2_Init+0x74>)
 800092c:	f001 fa56 	bl	8001ddc <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fb81 	bl	800103c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <MX_I2C2_Init+0x74>)
 800093e:	f001 fae9 	bl	8001f14 <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fb78 	bl	800103c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_I2C2_Init+0x74>)
 8000950:	f001 fb2b 	bl	8001faa <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 fb6f 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	24000258 	.word	0x24000258
 8000968:	40005800 	.word	0x40005800
 800096c:	20b0ccff 	.word	0x20b0ccff

08000970 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0bc      	sub	sp, #240	@ 0xf0
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	22c0      	movs	r2, #192	@ 0xc0
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f00a ff9e 	bl	800b8d2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a4d      	ldr	r2, [pc, #308]	@ (8000ad0 <HAL_I2C_MspInit+0x160>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d146      	bne.n	8000a2e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009a0:	f04f 0208 	mov.w	r2, #8
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 ff50 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009c2:	f000 fb3b 	bl	800103c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b43      	ldr	r3, [pc, #268]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009cc:	4a41      	ldr	r2, [pc, #260]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009d6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e4:	23c0      	movs	r3, #192	@ 0xc0
 80009e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a06:	4619      	mov	r1, r3
 8000a08:	4833      	ldr	r0, [pc, #204]	@ (8000ad8 <HAL_I2C_MspInit+0x168>)
 8000a0a:	f001 f803 	bl	8001a14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a10:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a14:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a20:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a2c:	e04b      	b.n	8000ac6 <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2a      	ldr	r2, [pc, #168]	@ (8000adc <HAL_I2C_MspInit+0x16c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d146      	bne.n	8000ac6 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a38:	f04f 0208 	mov.w	r2, #8
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4a:	f107 0318 	add.w	r3, r7, #24
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 ff04 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a5a:	f000 faef 	bl	800103c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a64:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a84:	2312      	movs	r3, #18
 8000a86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a96:	2304      	movs	r3, #4
 8000a98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <HAL_I2C_MspInit+0x168>)
 8000aa4:	f000 ffb6 	bl	8001a14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000aaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000aae:	4a09      	ldr	r2, [pc, #36]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000ab0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_I2C_MspInit+0x164>)
 8000aba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
}
 8000ac6:	bf00      	nop
 8000ac8:	37f0      	adds	r7, #240	@ 0xf0
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	58020400 	.word	0x58020400
 8000adc:	40005800 	.word	0x40005800

08000ae0 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <MX_I2S1_Init+0x64>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000aec:	2206      	movs	r2, #6
 8000aee:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000af8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afc:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b04:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b08:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <MX_I2S1_Init+0x60>)
 8000b2e:	f001 fa89 	bl	8002044 <HAL_I2S_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 fa80 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	240002ac 	.word	0x240002ac
 8000b44:	40013000 	.word	0x40013000

08000b48 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	@ (8000bac <MX_I2S2_Init+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b6e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b72:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_I2S2_Init+0x60>)
 8000b94:	f001 fa56 	bl	8002044 <HAL_I2S_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000b9e:	f000 fa4d 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	24000300 	.word	0x24000300
 8000bac:	40003800 	.word	0x40003800

08000bb0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0be      	sub	sp, #248	@ 0xf8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	22c0      	movs	r2, #192	@ 0xc0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00a fe7e 	bl	800b8d2 <memset>
  if(i2sHandle->Instance==SPI1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a71      	ldr	r2, [pc, #452]	@ (8000da0 <HAL_I2S_MspInit+0x1f0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d16b      	bne.n	8000cb8 <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000be0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fe30 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000c02:	f000 fa1b 	bl	800103c <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	4b67      	ldr	r3, [pc, #412]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c08:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c0c:	4a65      	ldr	r2, [pc, #404]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c12:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c16:	4b63      	ldr	r3, [pc, #396]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c18:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b5f      	ldr	r3, [pc, #380]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c34:	4b5b      	ldr	r3, [pc, #364]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b58      	ldr	r3, [pc, #352]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c48:	4a56      	ldr	r2, [pc, #344]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c52:	4b54      	ldr	r3, [pc, #336]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c60:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4848      	ldr	r0, [pc, #288]	@ (8000da8 <HAL_I2S_MspInit+0x1f8>)
 8000c88:	f000 fec4 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	483e      	ldr	r0, [pc, #248]	@ (8000dac <HAL_I2S_MspInit+0x1fc>)
 8000cb2:	f000 feaf 	bl	8001a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cb6:	e06f      	b.n	8000d98 <HAL_I2S_MspInit+0x1e8>
  else if(i2sHandle->Instance==SPI2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a3c      	ldr	r2, [pc, #240]	@ (8000db0 <HAL_I2S_MspInit+0x200>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d16a      	bne.n	8000d98 <HAL_I2S_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fdbf 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_I2S_MspInit+0x138>
      Error_Handler();
 8000ce4:	f000 f9aa 	bl	800103c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cee:	4a2d      	ldr	r2, [pc, #180]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000cfa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d0c:	4a25      	ldr	r2, [pc, #148]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d16:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <HAL_I2S_MspInit+0x1f4>)
 8000d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d42:	2342      	movs	r3, #66	@ 0x42
 8000d44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4811      	ldr	r0, [pc, #68]	@ (8000dac <HAL_I2S_MspInit+0x1fc>)
 8000d68:	f000 fe54 	bl	8001a14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d86:	2305      	movs	r3, #5
 8000d88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <HAL_I2S_MspInit+0x204>)
 8000d94:	f000 fe3e 	bl	8001a14 <HAL_GPIO_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	37f8      	adds	r7, #248	@ 0xf8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013000 	.word	0x40013000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020000 	.word	0x58020000
 8000dac:	58020800 	.word	0x58020800
 8000db0:	40003800 	.word	0x40003800
 8000db4:	58020400 	.word	0x58020400

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b0c2      	sub	sp, #264	@ 0x108
 8000dbc:	af00      	add	r7, sp, #0
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dbe:	f000 f8ff 	bl	8000fc0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fc09 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f883 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f7ff fc7d 	bl	80006c8 <MX_GPIO_Init>
  MX_FMC_Init();
 8000dce:	f7ff fadf 	bl	8000390 <MX_FMC_Init>
  MX_I2S1_Init();
 8000dd2:	f7ff fe85 	bl	8000ae0 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000dd6:	f7ff feb7 	bl	8000b48 <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000dda:	f000 f9a1 	bl	8001120 <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000dde:	f7ff fd47 	bl	8000870 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000de2:	f7ff fd85 	bl	80008f0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000de6:	f009 fee1 	bl	800abac <MX_USB_DEVICE_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HardFault_Handler();
	  // Write to starting address
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dee:	4835      	ldr	r0, [pc, #212]	@ (8000ec4 <main+0x10c>)
 8000df0:	f000 ffd9 	bl	8001da6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000df4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df8:	f000 fc80 	bl	80016fc <HAL_Delay>
	  //*(__IO uint32_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = 42;

	  int memtest = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	  //buffer = *(__IO uint16_t*) 0xC0000000;
	  for (volatile int i = 0; i < TEST; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e06:	e009      	b.n	8000e1c <main+0x64>
		  *(__IO uint16_t*) (0xC0000000 + 4*i) = 0xAAAA;
 8000e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8000e10:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000e14:	801a      	strh	r2, [r3, #0]
	  for (volatile int i = 0; i < TEST; i++) {
 8000e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e18:	3301      	adds	r3, #1
 8000e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e1e:	2b63      	cmp	r3, #99	@ 0x63
 8000e20:	ddf2      	ble.n	8000e08 <main+0x50>
	  }
	  for (volatile int i = 0; i < TEST; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e26:	e01e      	b.n	8000e66 <main+0xae>
	  	 buffer[i] = *(__IO uint32_t*) (0xC0000000 + 4*i);
 8000e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e34:	b292      	uxth	r2, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000e3c:	443b      	add	r3, r7
 8000e3e:	f823 2ccc 	strh.w	r2, [r3, #-204]
	  	 if (buffer[i] == 0xAAAA) {
 8000e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000e4a:	443b      	add	r3, r7
 8000e4c:	f833 3ccc 	ldrh.w	r3, [r3, #-204]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d002      	beq.n	8000e60 <main+0xa8>

	  		   } else {
	  			   memtest = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	  for (volatile int i = 0; i < TEST; i++) {
 8000e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e62:	3301      	adds	r3, #1
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e68:	2b63      	cmp	r3, #99	@ 0x63
 8000e6a:	dddd      	ble.n	8000e28 <main+0x70>
	  		   }
	  }
	  if(memtest) {
 8000e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d014      	beq.n	8000e9e <main+0xe6>
		  uint8_t str[] = "Total Memory Success\r\n";
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <main+0x110>)
 8000e76:	f107 041c 	add.w	r4, r7, #28
 8000e7a:	461d      	mov	r5, r3
 8000e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e84:	6020      	str	r0, [r4, #0]
 8000e86:	3404      	adds	r4, #4
 8000e88:	8021      	strh	r1, [r4, #0]
 8000e8a:	3402      	adds	r4, #2
 8000e8c:	0c0b      	lsrs	r3, r1, #16
 8000e8e:	7023      	strb	r3, [r4, #0]
		  CDC_Transmit_HS(str, sizeof(str));
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	2117      	movs	r1, #23
 8000e96:	4618      	mov	r0, r3
 8000e98:	f009 ff48 	bl	800ad2c <CDC_Transmit_HS>
 8000e9c:	e7a5      	b.n	8000dea <main+0x32>
	  } else {
		  uint8_t str[] = "Partial Memory Failure\r\n";
 8000e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ea6:	4a09      	ldr	r2, [pc, #36]	@ (8000ecc <main+0x114>)
 8000ea8:	461c      	mov	r4, r3
 8000eaa:	4615      	mov	r5, r2
 8000eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000eb4:	c403      	stmia	r4!, {r0, r1}
 8000eb6:	7022      	strb	r2, [r4, #0]
		  CDC_Transmit_HS(str, sizeof(str));
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2119      	movs	r1, #25
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f009 ff35 	bl	800ad2c <CDC_Transmit_HS>
  {
 8000ec2:	e792      	b.n	8000dea <main+0x32>
 8000ec4:	58020800 	.word	0x58020800
 8000ec8:	0800c584 	.word	0x0800c584
 8000ecc:	0800c59c 	.word	0x0800c59c

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09c      	sub	sp, #112	@ 0x70
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	224c      	movs	r2, #76	@ 0x4c
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00a fcf7 	bl	800b8d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00a fcf1 	bl	800b8d2 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ef0:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <SystemClock_Config+0xe8>)
 8000ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000efa:	2002      	movs	r0, #2
 8000efc:	f002 fcbc 	bl	8003878 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <SystemClock_Config+0xec>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a2c      	ldr	r2, [pc, #176]	@ (8000fbc <SystemClock_Config+0xec>)
 8000f0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <SystemClock_Config+0xec>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f1c:	bf00      	nop
 8000f1e:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <SystemClock_Config+0xec>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f2a:	d1f8      	bne.n	8000f1e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000f2c:	2322      	movs	r3, #34	@ 0x22
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000f34:	2340      	movs	r3, #64	@ 0x40
 8000f36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000f48:	2323      	movs	r3, #35	@ 0x23
 8000f4a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 fccf 	bl	800390c <HAL_RCC_OscConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000f74:	f000 f862 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f78:	233f      	movs	r3, #63	@ 0x3f
 8000f7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f88:	2340      	movs	r3, #64	@ 0x40
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f8c:	2340      	movs	r3, #64	@ 0x40
 8000f8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f96:	2340      	movs	r3, #64	@ 0x40
 8000f98:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2106      	movs	r1, #6
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 f8e6 	bl	8004170 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000faa:	f000 f847 	bl	800103c <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3770      	adds	r7, #112	@ 0x70
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58024800 	.word	0x58024800

08000fc0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fd2:	f000 fcc7 	bl	8001964 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fe6:	2387      	movs	r3, #135	@ 0x87
 8000fe8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fcc5 	bl	8001994 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800100a:	2301      	movs	r3, #1
 800100c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 800100e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001012:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001014:	2317      	movs	r3, #23
 8001016:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001018:	2300      	movs	r3, #0
 800101a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800101c:	2301      	movs	r3, #1
 800101e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001020:	2303      	movs	r3, #3
 8001022:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800102c:	463b      	mov	r3, r7
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fcb0 	bl	8001994 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
 // HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <Error_Handler+0x8>

08001048 <SDRAM_Initialization_Sequence>:
 * 6 Min of 2 auto-refresh cycles
 *
 */
#include "sdram_init.h"

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	 __IO uint32_t tmpmrd =0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	/* Step 2:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2210      	movs	r2, #16
 8001060:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2201      	movs	r2, #1
 8001066:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800106e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001072:	6839      	ldr	r1, [r7, #0]
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f006 f837 	bl	80070e8 <HAL_SDRAM_SendCommand>

	  /* Step 3: Insert 200 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f000 fb3e 	bl	80016fc <HAL_Delay>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2202      	movs	r2, #2
 8001084:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2210      	movs	r2, #16
 800108a:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2201      	movs	r2, #1
 8001090:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f006 f822 	bl	80070e8 <HAL_SDRAM_SendCommand>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2202      	movs	r2, #2
 80010a8:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2210      	movs	r2, #16
 80010ae:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2201      	movs	r2, #1
 80010b4:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f006 f810 	bl	80070e8 <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80010c8:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80010cc:	60fb      	str	r3, [r7, #12]
	                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_3           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2204      	movs	r2, #4
 80010d2:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2210      	movs	r2, #16
 80010d8:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ea:	6839      	ldr	r1, [r7, #0]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f005 fffb 	bl	80070e8 <HAL_SDRAM_SendCommand>

	  /* Step 6 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2203      	movs	r2, #3
 80010f6:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2210      	movs	r2, #16
 80010fc:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 2;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2202      	movs	r2, #2
 8001102:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]

	  /* Send the command twice*/
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800110a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800110e:	6839      	ldr	r1, [r7, #0]
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f005 ffe9 	bl	80070e8 <HAL_SDRAM_SendCommand>
	  //HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);

}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 8001126:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800112a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_SPDIFRX_Init+0x6c>)
 800117a:	f005 ffeb 	bl	8007154 <HAL_SPDIFRX_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 8001184:	f7ff ff5a 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24000354 	.word	0x24000354

08001190 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0ba      	sub	sp, #232	@ 0xe8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	22c0      	movs	r2, #192	@ 0xc0
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00a fb8e 	bl	800b8d2 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80011be:	d141      	bne.n	8001244 <HAL_SPDIFRX_MspInit+0xb4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80011c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fb41 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 80011e0:	f7ff ff2c 	bl	800103c <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80011e4:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_SPDIFRX_MspInit+0xbc>)
 80011e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011ea:	4a18      	ldr	r2, [pc, #96]	@ (800124c <HAL_SPDIFRX_MspInit+0xbc>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_SPDIFRX_MspInit+0xbc>)
 80011f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_SPDIFRX_MspInit+0xbc>)
 8001204:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001208:	4a10      	ldr	r2, [pc, #64]	@ (800124c <HAL_SPDIFRX_MspInit+0xbc>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_SPDIFRX_MspInit+0xbc>)
 8001214:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001238:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800123c:	4619      	mov	r1, r3
 800123e:	4804      	ldr	r0, [pc, #16]	@ (8001250 <HAL_SPDIFRX_MspInit+0xc0>)
 8001240:	f000 fbe8 	bl	8001a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	37e8      	adds	r7, #232	@ 0xe8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58024400 	.word	0x58024400
 8001250:	58020c00 	.word	0x58020c00

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_MspInit+0x30>)
 800125c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001260:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_MspInit+0x30>)
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_MspInit+0x30>)
 800126c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	58024400 	.word	0x58024400

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <NMI_Handler+0x4>

08001290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001296:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129a:	4807      	ldr	r0, [pc, #28]	@ (80012b8 <HardFault_Handler+0x28>)
 800129c:	f000 fd83 	bl	8001da6 <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e002      	b.n	80012ac <HardFault_Handler+0x1c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3301      	adds	r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a03      	ldr	r2, [pc, #12]	@ (80012bc <HardFault_Handler+0x2c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	ddf8      	ble.n	80012a6 <HardFault_Handler+0x16>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012b4:	e7ef      	b.n	8001296 <HardFault_Handler+0x6>
 80012b6:	bf00      	nop
 80012b8:	58020800 	.word	0x58020800
 80012bc:	000f423f 	.word	0x000f423f

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001306:	f000 f9d9 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001316:	f001 f950 	bl	80025ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2400188c 	.word	0x2400188c

08001324 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 800132a:	f001 f946 	bl	80025ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2400188c 	.word	0x2400188c

08001338 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <OTG_HS_IRQHandler+0x10>)
 800133e:	f001 f93c 	bl	80025ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2400188c 	.word	0x2400188c

0800134c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e00a      	b.n	8001374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800135e:	f3af 8000 	nop.w
 8001362:	4601      	mov	r1, r0
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60ba      	str	r2, [r7, #8]
 800136a:	b2ca      	uxtb	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbf0      	blt.n	800135e <_read+0x12>
  }

  return len;
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e009      	b.n	80013ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbf1      	blt.n	8001398 <_write+0x12>
  }
  return len;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_close>:

int _close(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e6:	605a      	str	r2, [r3, #4]
  return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_isatty>:

int _isatty(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f00a fa8a 	bl	800b970 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	@ (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	@ (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	24100000 	.word	0x24100000
 8001488:	00000400 	.word	0x00000400
 800148c:	240003a4 	.word	0x240003a4
 8001490:	240020e0 	.word	0x240020e0

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <SystemInit+0xd0>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149e:	4a31      	ldr	r2, [pc, #196]	@ (8001564 <SystemInit+0xd0>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001568 <SystemInit+0xd4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d807      	bhi.n	80014c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <SystemInit+0xd4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 030f 	bic.w	r3, r3, #15
 80014bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001568 <SystemInit+0xd4>)
 80014be:	f043 0303 	orr.w	r3, r3, #3
 80014c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <SystemInit+0xd8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a28      	ldr	r2, [pc, #160]	@ (800156c <SystemInit+0xd8>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014d0:	4b26      	ldr	r3, [pc, #152]	@ (800156c <SystemInit+0xd8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014d6:	4b25      	ldr	r3, [pc, #148]	@ (800156c <SystemInit+0xd8>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4924      	ldr	r1, [pc, #144]	@ (800156c <SystemInit+0xd8>)
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <SystemInit+0xdc>)
 80014de:	4013      	ands	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <SystemInit+0xd4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <SystemInit+0xd4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 030f 	bic.w	r3, r3, #15
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <SystemInit+0xd4>)
 80014f8:	f043 0303 	orr.w	r3, r3, #3
 80014fc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <SystemInit+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <SystemInit+0xd8>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <SystemInit+0xd8>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <SystemInit+0xd8>)
 8001512:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <SystemInit+0xe0>)
 8001514:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <SystemInit+0xd8>)
 8001518:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <SystemInit+0xe4>)
 800151a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <SystemInit+0xd8>)
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <SystemInit+0xe8>)
 8001520:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <SystemInit+0xd8>)
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <SystemInit+0xd8>)
 800152a:	4a14      	ldr	r2, [pc, #80]	@ (800157c <SystemInit+0xe8>)
 800152c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <SystemInit+0xd8>)
 8001530:	2200      	movs	r2, #0
 8001532:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <SystemInit+0xd8>)
 8001536:	4a11      	ldr	r2, [pc, #68]	@ (800157c <SystemInit+0xe8>)
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <SystemInit+0xd8>)
 800153c:	2200      	movs	r2, #0
 800153e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <SystemInit+0xd8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <SystemInit+0xd8>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <SystemInit+0xd8>)
 800154e:	2200      	movs	r2, #0
 8001550:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <SystemInit+0xec>)
 8001554:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001558:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	52002000 	.word	0x52002000
 800156c:	58024400 	.word	0x58024400
 8001570:	eaf6ed7f 	.word	0xeaf6ed7f
 8001574:	02020200 	.word	0x02020200
 8001578:	01ff0000 	.word	0x01ff0000
 800157c:	01010280 	.word	0x01010280
 8001580:	52004000 	.word	0x52004000

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001588:	f7ff ff84 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f00a f9e3 	bl	800b97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fbff 	bl	8000db8 <main>
  bx  lr
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80015c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015c4:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80015c8:	0800c68c 	.word	0x0800c68c
  ldr r2, =_sbss
 80015cc:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80015d0:	240020dc 	.word	0x240020dc

080015d4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015de:	2003      	movs	r0, #3
 80015e0:	f000 f980 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80015e4:	f002 ff7a 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_Init+0x68>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	4913      	ldr	r1, [pc, #76]	@ (8001644 <HAL_Init+0x6c>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <HAL_Init+0x68>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	4a0e      	ldr	r2, [pc, #56]	@ (8001644 <HAL_Init+0x6c>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	4a0b      	ldr	r2, [pc, #44]	@ (8001648 <HAL_Init+0x70>)
 800161a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_Init+0x74>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001622:	200f      	movs	r0, #15
 8001624:	f000 f814 	bl	8001650 <HAL_InitTick>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e002      	b.n	8001638 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001632:	f7ff fe0f 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	58024400 	.word	0x58024400
 8001644:	0800c638 	.word	0x0800c638
 8001648:	24000004 	.word	0x24000004
 800164c:	24000000 	.word	0x24000000

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <HAL_InitTick+0x60>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e021      	b.n	80016a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_InitTick+0x64>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_InitTick+0x60>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f965 	bl	800194a <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f92f 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_InitTick+0x68>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2400000c 	.word	0x2400000c
 80016b4:	24000000 	.word	0x24000000
 80016b8:	24000008 	.word	0x24000008

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2400000c 	.word	0x2400000c
 80016e0:	240003a8 	.word	0x240003a8

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	240003a8 	.word	0x240003a8

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2400000c 	.word	0x2400000c

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <__NVIC_SetPriorityGrouping+0x40>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	4313      	orrs	r3, r2
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <__NVIC_SetPriorityGrouping+0x40>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	05fa0000 	.word	0x05fa0000

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	@ (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff40 	bl	800178c <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff90 	bl	8001838 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff33 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa4 	bl	80018a0 <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001968:	f3bf 8f5f 	dmb	sy
}
 800196c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <HAL_MPU_Disable+0x28>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	4a06      	ldr	r2, [pc, #24]	@ (800198c <HAL_MPU_Disable+0x28>)
 8001974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001978:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_MPU_Disable+0x2c>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	e000ed90 	.word	0xe000ed90

08001994 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	785a      	ldrb	r2, [r3, #1]
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <HAL_MPU_ConfigRegion+0x7c>)
 80019a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <HAL_MPU_ConfigRegion+0x7c>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	4a19      	ldr	r2, [pc, #100]	@ (8001a10 <HAL_MPU_ConfigRegion+0x7c>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019b0:	4a17      	ldr	r2, [pc, #92]	@ (8001a10 <HAL_MPU_ConfigRegion+0x7c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7b1b      	ldrb	r3, [r3, #12]
 80019bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7adb      	ldrb	r3, [r3, #11]
 80019c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7a9b      	ldrb	r3, [r3, #10]
 80019ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7b5b      	ldrb	r3, [r3, #13]
 80019d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7b9b      	ldrb	r3, [r3, #14]
 80019da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7bdb      	ldrb	r3, [r3, #15]
 80019e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7a5b      	ldrb	r3, [r3, #9]
 80019ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7a1b      	ldrb	r3, [r3, #8]
 80019f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a00:	6113      	str	r3, [r2, #16]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed90 	.word	0xe000ed90

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	@ 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a22:	4b89      	ldr	r3, [pc, #548]	@ (8001c48 <HAL_GPIO_Init+0x234>)
 8001a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a26:	e194      	b.n	8001d52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8186 	beq.w	8001d4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d005      	beq.n	8001a58 <HAL_GPIO_Init+0x44>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d130      	bne.n	8001aba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8e:	2201      	movs	r2, #1
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	f003 0201 	and.w	r2, r3, #1
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d017      	beq.n	8001af6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d123      	bne.n	8001b4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	69b9      	ldr	r1, [r7, #24]
 8001b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0203 	and.w	r2, r3, #3
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80e0 	beq.w	8001d4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <HAL_GPIO_Init+0x238>)
 8001b8e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001b92:	4a2e      	ldr	r2, [pc, #184]	@ (8001c4c <HAL_GPIO_Init+0x238>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c4c <HAL_GPIO_Init+0x238>)
 8001b9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001baa:	4a29      	ldr	r2, [pc, #164]	@ (8001c50 <HAL_GPIO_Init+0x23c>)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	@ (8001c54 <HAL_GPIO_Init+0x240>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d052      	beq.n	8001c7c <HAL_GPIO_Init+0x268>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_GPIO_Init+0x244>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d031      	beq.n	8001c42 <HAL_GPIO_Init+0x22e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c5c <HAL_GPIO_Init+0x248>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02b      	beq.n	8001c3e <HAL_GPIO_Init+0x22a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <HAL_GPIO_Init+0x24c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d025      	beq.n	8001c3a <HAL_GPIO_Init+0x226>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <HAL_GPIO_Init+0x250>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01f      	beq.n	8001c36 <HAL_GPIO_Init+0x222>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c68 <HAL_GPIO_Init+0x254>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <HAL_GPIO_Init+0x21e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <HAL_GPIO_Init+0x258>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x21a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_GPIO_Init+0x25c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_GPIO_Init+0x216>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a18      	ldr	r2, [pc, #96]	@ (8001c74 <HAL_GPIO_Init+0x260>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_GPIO_Init+0x212>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <HAL_GPIO_Init+0x264>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c1e:	2309      	movs	r3, #9
 8001c20:	e02d      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c22:	230a      	movs	r3, #10
 8001c24:	e02b      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c26:	2308      	movs	r3, #8
 8001c28:	e029      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e027      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e025      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e023      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e021      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e01f      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e01d      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e01b      	b.n	8001c7e <HAL_GPIO_Init+0x26a>
 8001c46:	bf00      	nop
 8001c48:	58000080 	.word	0x58000080
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	58000400 	.word	0x58000400
 8001c54:	58020000 	.word	0x58020000
 8001c58:	58020400 	.word	0x58020400
 8001c5c:	58020800 	.word	0x58020800
 8001c60:	58020c00 	.word	0x58020c00
 8001c64:	58021000 	.word	0x58021000
 8001c68:	58021400 	.word	0x58021400
 8001c6c:	58021800 	.word	0x58021800
 8001c70:	58021c00 	.word	0x58021c00
 8001c74:	58022000 	.word	0x58022000
 8001c78:	58022400 	.word	0x58022400
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	f002 0203 	and.w	r2, r2, #3
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	4093      	lsls	r3, r2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8e:	4938      	ldr	r1, [pc, #224]	@ (8001d70 <HAL_GPIO_Init+0x35c>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f47f ae63 	bne.w	8001a28 <HAL_GPIO_Init+0x14>
  }
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	3724      	adds	r7, #36	@ 0x24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	58000400 	.word	0x58000400

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	041a      	lsls	r2, r3, #16
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	619a      	str	r2, [r3, #24]
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e08b      	b.n	8001f06 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fdb4 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	@ 0x24
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e006      	b.n	8001e64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d108      	bne.n	8001e7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	e007      	b.n	8001e8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <HAL_I2C_Init+0x134>)
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	02008000 	.word	0x02008000

08001f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d138      	bne.n	8001f9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e032      	b.n	8001f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	@ 0x24
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d139      	bne.n	8002034 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e033      	b.n	8002036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2224      	movs	r2, #36	@ 0x24
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ffc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	e000      	b.n	8002036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
  }
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e11a      	b.n	800228c <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fda0 	bl	8000bb0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2200      	movs	r2, #0
 800209c:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d008      	beq.n	80020b8 <HAL_I2S_Init+0x74>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d004      	beq.n	80020b8 <HAL_I2S_Init+0x74>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b0a      	cmp	r3, #10
 80020b4:	f040 8094 	bne.w	80021e0 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d067      	beq.n	8002190 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80020c8:	2302      	movs	r3, #2
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e001      	b.n	80020d2 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80020ce:	2301      	movs	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b30      	cmp	r3, #48	@ 0x30
 80020d8:	d003      	beq.n	80020e2 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80020de:	2bb0      	cmp	r3, #176	@ 0xb0
 80020e0:	d102      	bne.n	80020e8 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80020e2:	2301      	movs	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	e001      	b.n	80020ec <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a68      	ldr	r2, [pc, #416]	@ (8002294 <HAL_I2S_Init+0x250>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d107      	bne.n	8002106 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80020f6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020fa:	f04f 0100 	mov.w	r1, #0
 80020fe:	f003 fd6b 	bl	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	e006      	b.n	8002114 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002106:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	f003 fd63 	bl	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002112:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800211c:	d113      	bne.n	8002146 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800211e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	fbb2 f2f3 	udiv	r2, r2, r3
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	3305      	adds	r3, #5
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e014      	b.n	8002170 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002146:	2220      	movs	r2, #32
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	fbb2 f2f3 	udiv	r2, r2, r3
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	461a      	mov	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	fbb2 f3f3 	udiv	r3, r2, r3
 800216c:	3305      	adds	r3, #5
 800216e:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4a49      	ldr	r2, [pc, #292]	@ (8002298 <HAL_I2S_Init+0x254>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e003      	b.n	8002198 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8002190:	2302      	movs	r3, #2
 8002192:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_I2S_Init+0x160>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d002      	beq.n	80021aa <HAL_I2S_Init+0x166>
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2bff      	cmp	r3, #255	@ 0xff
 80021a8:	d907      	bls.n	80021ba <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e068      	b.n	800228c <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 80021c0:	2301      	movs	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ca:	4b34      	ldr	r3, [pc, #208]	@ (800229c <HAL_I2S_Init+0x258>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	0411      	lsls	r1, r2, #16
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	0612      	lsls	r2, r2, #24
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	430b      	orrs	r3, r1
 80021de:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021e6:	4b2e      	ldr	r3, [pc, #184]	@ (80022a0 <HAL_I2S_Init+0x25c>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6851      	ldr	r1, [r2, #4]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6892      	ldr	r2, [r2, #8]
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68d2      	ldr	r2, [r2, #12]
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6992      	ldr	r2, [r2, #24]
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6a12      	ldr	r2, [r2, #32]
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6912      	ldr	r2, [r2, #16]
 8002210:	430a      	orrs	r2, r1
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8002226:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002236:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d007      	beq.n	8002266 <HAL_I2S_Init+0x222>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b06      	cmp	r3, #6
 800225c:	d003      	beq.n	8002266 <HAL_I2S_Init+0x222>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b0a      	cmp	r3, #10
 8002264:	d10a      	bne.n	800227c <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	58001400 	.word	0x58001400
 8002298:	cccccccd 	.word	0xcccccccd
 800229c:	fe00ffff 	.word	0xfe00ffff
 80022a0:	fdff9040 	.word	0xfdff9040

080022a4 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e037      	b.n	800232a <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7fe f9e6 	bl	80006a0 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3304      	adds	r3, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f004 ffa6 	bl	8007230 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	f004 ffc8 	bl	8007284 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	461a      	mov	r2, r3
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f004 ffdd 	bl	80072be <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0204 	orr.w	r2, r2, #4
 8002312:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002314:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <HAL_NAND_Init+0x90>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a06      	ldr	r2, [pc, #24]	@ (8002334 <HAL_NAND_Init+0x90>)
 800231a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800231e:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	52004000 	.word	0x52004000

08002338 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af02      	add	r7, sp, #8
 800233e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0fe      	b.n	8002548 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f008 fe2c 	bl	800afbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2203      	movs	r2, #3
 8002368:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f005 f9d0 	bl	8007716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7c1a      	ldrb	r2, [r3, #16]
 800237e:	f88d 2000 	strb.w	r2, [sp]
 8002382:	3304      	adds	r3, #4
 8002384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002386:	f005 f8a1 	bl	80074cc <USB_CoreInit>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0d5      	b.n	8002548 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 f9c8 	bl	8007738 <USB_SetCurrentMode>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0c6      	b.n	8002548 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e04a      	b.n	8002456 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3315      	adds	r3, #21
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3314      	adds	r3, #20
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	b298      	uxth	r0, r3
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	332e      	adds	r3, #46	@ 0x2e
 80023fc:	4602      	mov	r2, r0
 80023fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3318      	adds	r3, #24
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	331c      	adds	r3, #28
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3320      	adds	r3, #32
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3324      	adds	r3, #36	@ 0x24
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	3301      	adds	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	791b      	ldrb	r3, [r3, #4]
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3af      	bcc.n	80023c0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e044      	b.n	80024f0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	3301      	adds	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	791b      	ldrb	r3, [r3, #4]
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3b5      	bcc.n	8002466 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7c1a      	ldrb	r2, [r3, #16]
 8002502:	f88d 2000 	strb.w	r2, [sp]
 8002506:	3304      	adds	r3, #4
 8002508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800250a:	f005 f961 	bl	80077d0 <USB_DevInit>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e013      	b.n	8002548 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7b1b      	ldrb	r3, [r3, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f001 f96e 	bl	8003818 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f006 f9a4 	bl	800888e <USB_DevDisconnect>

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_PCD_Start+0x1c>
 8002568:	2302      	movs	r3, #2
 800256a:	e022      	b.n	80025b2 <HAL_PCD_Start+0x62>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f005 f8ab 	bl	80076f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f006 f952 	bl	800884c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ba:	b590      	push	{r4, r7, lr}
 80025bc:	b08d      	sub	sp, #52	@ 0x34
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f006 fa10 	bl	80089f6 <USB_GetMode>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 84b9 	bne.w	8002f50 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f006 f974 	bl	80088d0 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 84af 	beq.w	8002f4e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f006 f961 	bl	80088d0 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b02      	cmp	r3, #2
 8002616:	d107      	bne.n	8002628 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f002 0202 	and.w	r2, r2, #2
 8002626:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f006 f94f 	bl	80088d0 <USB_ReadInterrupts>
 8002632:	4603      	mov	r3, r0
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b10      	cmp	r3, #16
 800263a:	d161      	bne.n	8002700 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0210 	bic.w	r2, r2, #16
 800264a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	0c5b      	lsrs	r3, r3, #17
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	2b02      	cmp	r3, #2
 8002676:	d124      	bne.n	80026c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d035      	beq.n	80026f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800268e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	6a38      	ldr	r0, [r7, #32]
 8002698:	f005 ff86 	bl	80085a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a8:	441a      	add	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ba:	441a      	add	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	615a      	str	r2, [r3, #20]
 80026c0:	e016      	b.n	80026f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	0c5b      	lsrs	r3, r3, #17
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d110      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026d4:	2208      	movs	r2, #8
 80026d6:	4619      	mov	r1, r3
 80026d8:	6a38      	ldr	r0, [r7, #32]
 80026da:	f005 ff65 	bl	80085a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ea:	441a      	add	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0210 	orr.w	r2, r2, #16
 80026fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f006 f8e3 	bl	80088d0 <USB_ReadInterrupts>
 800270a:	4603      	mov	r3, r0
 800270c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002710:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002714:	f040 80a7 	bne.w	8002866 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f006 f8e8 	bl	80088f6 <USB_ReadDevAllOutEpInterrupt>
 8002726:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002728:	e099      	b.n	800285e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800272a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 808e 	beq.w	8002852 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f006 f90c 	bl	800895e <USB_ReadDevOutEPInterrupt>
 8002746:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275e:	461a      	mov	r2, r3
 8002760:	2301      	movs	r3, #1
 8002762:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fed0 	bl	800350c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002782:	461a      	mov	r2, r3
 8002784:	2308      	movs	r3, #8
 8002786:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002788:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 ffa6 	bl	80036dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a6:	461a      	mov	r2, r3
 80027a8:	2310      	movs	r3, #16
 80027aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d030      	beq.n	8002818 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027be:	2b80      	cmp	r3, #128	@ 0x80
 80027c0:	d109      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	3304      	adds	r3, #4
 80027ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	78db      	ldrb	r3, [r3, #3]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d108      	bne.n	8002806 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2200      	movs	r2, #0
 80027f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f008 fd33 	bl	800b26c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002812:	461a      	mov	r2, r3
 8002814:	2302      	movs	r3, #2
 8002816:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282e:	461a      	mov	r2, r3
 8002830:	2320      	movs	r3, #32
 8002832:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800284a:	461a      	mov	r2, r3
 800284c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002850:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	3301      	adds	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800285e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	f47f af62 	bne.w	800272a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f006 f830 	bl	80088d0 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002876:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800287a:	f040 80db 	bne.w	8002a34 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f006 f851 	bl	800892a <USB_ReadDevAllInEpInterrupt>
 8002888:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800288e:	e0cd      	b.n	8002a2c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80c2 	beq.w	8002a20 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f006 f877 	bl	800899a <USB_ReadDevInEPInterrupt>
 80028ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d057      	beq.n	8002968 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	2201      	movs	r2, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69f9      	ldr	r1, [r7, #28]
 80028d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028d8:	4013      	ands	r3, r2
 80028da:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028e8:	461a      	mov	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	799b      	ldrb	r3, [r3, #6]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d132      	bne.n	800295c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3320      	adds	r3, #32
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	331c      	adds	r3, #28
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4419      	add	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4403      	add	r3, r0
 800292a:	3320      	adds	r3, #32
 800292c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	2b00      	cmp	r3, #0
 8002932:	d113      	bne.n	800295c <HAL_PCD_IRQHandler+0x3a2>
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3324      	adds	r3, #36	@ 0x24
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002954:	461a      	mov	r2, r3
 8002956:	2101      	movs	r1, #1
 8002958:	f006 f880 	bl	8008a5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f008 fbfd 	bl	800b162 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800297e:	461a      	mov	r2, r3
 8002980:	2308      	movs	r3, #8
 8002982:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800299a:	461a      	mov	r2, r3
 800299c:	2310      	movs	r3, #16
 800299e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029b6:	461a      	mov	r2, r3
 80029b8:	2340      	movs	r3, #64	@ 0x40
 80029ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d023      	beq.n	8002a0e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029c8:	6a38      	ldr	r0, [r7, #32]
 80029ca:	f005 f85f 	bl	8007a8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3310      	adds	r3, #16
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	78db      	ldrb	r3, [r3, #3]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d108      	bne.n	80029fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f008 fc4a 	bl	800b290 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fcea 	bl	80033f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	3301      	adds	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f47f af2e 	bne.w	8002890 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 ff49 	bl	80088d0 <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a48:	d122      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d108      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a70:	2100      	movs	r1, #0
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fef4 	bl	8003860 <HAL_PCDEx_LPM_Callback>
 8002a78:	e002      	b.n	8002a80 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f008 fbe8 	bl	800b250 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f005 ff1b 	bl	80088d0 <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa4:	d112      	bne.n	8002acc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f008 fba4 	bl	800b204 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f005 fefd 	bl	80088d0 <USB_ReadInterrupts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002adc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ae0:	d121      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002af0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d111      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b16:	2101      	movs	r1, #1
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fea1 	bl	8003860 <HAL_PCDEx_LPM_Callback>
 8002b1e:	e002      	b.n	8002b26 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f008 fb6f 	bl	800b204 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f005 fed0 	bl	80088d0 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3a:	f040 80b7 	bne.w	8002cac <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2110      	movs	r1, #16
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 ff97 	bl	8007a8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b62:	e046      	b.n	8002bf2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b70:	461a      	mov	r2, r3
 8002b72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b88:	0151      	lsls	r1, r2, #5
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	440a      	add	r2, r1
 8002b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002baa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002bc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bdc:	0151      	lsls	r1, r2, #5
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	440a      	add	r2, r1
 8002be2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002be6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002bea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bee:	3301      	adds	r3, #1
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	791b      	ldrb	r3, [r3, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d3b2      	bcc.n	8002b64 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c0c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7bdb      	ldrb	r3, [r3, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c2a:	f043 030b 	orr.w	r3, r3, #11
 8002c2e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c40:	f043 030b 	orr.w	r3, r3, #11
 8002c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c46:	e015      	b.n	8002c74 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c56:	4619      	mov	r1, r3
 8002c58:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c6e:	f043 030b 	orr.w	r3, r3, #11
 8002c72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c82:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c96:	461a      	mov	r2, r3
 8002c98:	f005 fee0 	bl	8008a5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f005 fe0d 	bl	80088d0 <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc0:	d123      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f005 fea4 	bl	8008a14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f004 ff54 	bl	8007b7e <USB_GetDevSpeed>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681c      	ldr	r4, [r3, #0]
 8002ce2:	f001 fd75 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 8002ce6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cec:	461a      	mov	r2, r3
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f004 fc5e 	bl	80075b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f008 fa5c 	bl	800b1b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f005 fdde 	bl	80088d0 <USB_ReadInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d10a      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f008 fa39 	bl	800b196 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f002 0208 	and.w	r2, r2, #8
 8002d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f005 fdc9 	bl	80088d0 <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d44:	2b80      	cmp	r3, #128	@ 0x80
 8002d46:	d123      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d54:	2301      	movs	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d58:	e014      	b.n	8002d84 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fb0a 	bl	8003392 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	791b      	ldrb	r3, [r3, #4]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d3e4      	bcc.n	8002d5a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f005 fd9b 	bl	80088d0 <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002da4:	d13c      	bne.n	8002e20 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da6:	2301      	movs	r3, #1
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002daa:	e02b      	b.n	8002e04 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3318      	adds	r3, #24
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d115      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	da12      	bge.n	8002dfe <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3317      	adds	r3, #23
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 faca 	bl	8003392 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	3301      	adds	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d3cd      	bcc.n	8002dac <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f005 fd53 	bl	80088d0 <USB_ReadInterrupts>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e34:	d156      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	e045      	b.n	8002ec8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d12e      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	da2b      	bge.n	8002ec2 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	0c1a      	lsrs	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e74:	4053      	eors	r3, r2
 8002e76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d121      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ebe:	6053      	str	r3, [r2, #4]
            break;
 8002ec0:	e008      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	791b      	ldrb	r3, [r3, #4]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d3b3      	bcc.n	8002e3c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fcf1 	bl	80088d0 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef8:	d10a      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f008 f9da 	bl	800b2b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f005 fcdb 	bl	80088d0 <USB_ReadInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d115      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f008 f9ca 	bl	800b2d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	e000      	b.n	8002f50 <HAL_PCD_IRQHandler+0x996>
      return;
 8002f4e:	bf00      	nop
    }
  }
}
 8002f50:	3734      	adds	r7, #52	@ 0x34
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}

08002f56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_PCD_SetAddress+0x1a>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e012      	b.n	8002f96 <HAL_PCD_SetAddress+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f005 fc3a 	bl	8008800 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	4608      	mov	r0, r1
 8002fa8:	4611      	mov	r1, r2
 8002faa:	461a      	mov	r2, r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	70fb      	strb	r3, [r7, #3]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	803b      	strh	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	da0f      	bge.n	8002fe4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	3310      	adds	r3, #16
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3304      	adds	r3, #4
 8002fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	705a      	strb	r2, [r3, #1]
 8002fe2:	e00f      	b.n	8003004 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 020f 	and.w	r2, r3, #15
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003010:	883b      	ldrh	r3, [r7, #0]
 8003012:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	78ba      	ldrb	r2, [r7, #2]
 800301e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003032:	78bb      	ldrb	r3, [r7, #2]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d102      	bne.n	800303e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_PCD_EP_Open+0xae>
 8003048:	2302      	movs	r3, #2
 800304a:	e00e      	b.n	800306a <HAL_PCD_EP_Open+0xcc>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 fdb4 	bl	8007bc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003068:	7afb      	ldrb	r3, [r7, #11]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800307e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da0f      	bge.n	80030a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3310      	adds	r3, #16
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	705a      	strb	r2, [r3, #1]
 80030a4:	e00f      	b.n	80030c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 020f 	and.w	r2, r3, #15
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_EP_Close+0x6e>
 80030dc:	2302      	movs	r3, #2
 80030de:	e00e      	b.n	80030fe <HAL_PCD_EP_Close+0x8c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 fdf2 	bl	8007cd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b086      	sub	sp, #24
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	460b      	mov	r3, r1
 8003114:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003116:	7afb      	ldrb	r3, [r7, #11]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2200      	movs	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003148:	7afb      	ldrb	r3, [r7, #11]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	b2da      	uxtb	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	799b      	ldrb	r3, [r3, #6]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d102      	bne.n	8003162 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	799b      	ldrb	r3, [r3, #6]
 800316a:	461a      	mov	r2, r3
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	f004 fe8f 	bl	8007e90 <USB_EPStartXfer>

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800319e:	681b      	ldr	r3, [r3, #0]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	460b      	mov	r3, r1
 80031ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3310      	adds	r3, #16
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2200      	movs	r2, #0
 80031e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2201      	movs	r2, #1
 80031ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ec:	7afb      	ldrb	r3, [r7, #11]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	799b      	ldrb	r3, [r3, #6]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d102      	bne.n	8003206 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	799b      	ldrb	r3, [r3, #6]
 800320e:	461a      	mov	r2, r3
 8003210:	6979      	ldr	r1, [r7, #20]
 8003212:	f004 fe3d 	bl	8007e90 <USB_EPStartXfer>

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	7912      	ldrb	r2, [r2, #4]
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e04f      	b.n	80032de <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800323e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003242:	2b00      	cmp	r3, #0
 8003244:	da0f      	bge.n	8003266 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	3310      	adds	r3, #16
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	3304      	adds	r3, #4
 800325c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	705a      	strb	r2, [r3, #1]
 8003264:	e00d      	b.n	8003282 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_PCD_EP_SetStall+0x82>
 800329e:	2302      	movs	r3, #2
 80032a0:	e01d      	b.n	80032de <HAL_PCD_EP_SetStall+0xbe>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f005 f9d1 	bl	8008658 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d109      	bne.n	80032d4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7999      	ldrb	r1, [r3, #6]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032ce:	461a      	mov	r2, r3
 80032d0:	f005 fbc4 	bl	8008a5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	7912      	ldrb	r2, [r2, #4]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e042      	b.n	800338a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003308:	2b00      	cmp	r3, #0
 800330a:	da0f      	bge.n	800332c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 020f 	and.w	r2, r3, #15
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	3310      	adds	r3, #16
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	3304      	adds	r3, #4
 8003322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	705a      	strb	r2, [r3, #1]
 800332a:	e00f      	b.n	800334c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	f003 020f 	and.w	r2, r3, #15
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	3304      	adds	r3, #4
 8003344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_PCD_EP_ClrStall+0x86>
 8003368:	2302      	movs	r3, #2
 800336a:	e00e      	b.n	800338a <HAL_PCD_EP_ClrStall+0xa4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68f9      	ldr	r1, [r7, #12]
 800337a:	4618      	mov	r0, r3
 800337c:	f005 f9da 	bl	8008734 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800339e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	da0c      	bge.n	80033c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	3310      	adds	r3, #16
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e00c      	b.n	80033da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f004 fff9 	bl	80083d8 <USB_EPStopXfer>
 80033e6:	4603      	mov	r3, r0
 80033e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033ea:	7afb      	ldrb	r3, [r7, #11]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	3310      	adds	r3, #16
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	3304      	adds	r3, #4
 800341a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	429a      	cmp	r2, r3
 8003426:	d901      	bls.n	800342c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e06b      	b.n	8003504 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	429a      	cmp	r2, r3
 8003440:	d902      	bls.n	8003448 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	3303      	adds	r3, #3
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003450:	e02a      	b.n	80034a8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	429a      	cmp	r2, r3
 8003466:	d902      	bls.n	800346e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3303      	adds	r3, #3
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68d9      	ldr	r1, [r3, #12]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4603      	mov	r3, r0
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f005 f84e 	bl	800852c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	441a      	add	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d809      	bhi.n	80034d2 <PCD_WriteEmptyTxFifo+0xde>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d203      	bcs.n	80034d2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1bf      	bne.n	8003452 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d811      	bhi.n	8003502 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	2201      	movs	r2, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	6939      	ldr	r1, [r7, #16]
 80034fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034fe:	4013      	ands	r3, r2
 8003500:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	333c      	adds	r3, #60	@ 0x3c
 8003524:	3304      	adds	r3, #4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	799b      	ldrb	r3, [r3, #6]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d17b      	bne.n	800363a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d015      	beq.n	8003578 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4a61      	ldr	r2, [pc, #388]	@ (80036d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	f240 80b9 	bls.w	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80b3 	beq.w	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356e:	461a      	mov	r2, r3
 8003570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003574:	6093      	str	r3, [r2, #8]
 8003576:	e0a7      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	2320      	movs	r3, #32
 8003592:	6093      	str	r3, [r2, #8]
 8003594:	e098      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	f040 8093 	bne.w	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	4a4b      	ldr	r2, [pc, #300]	@ (80036d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d90f      	bls.n	80035ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c0:	461a      	mov	r2, r3
 80035c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c6:	6093      	str	r3, [r2, #8]
 80035c8:	e07e      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	0159      	lsls	r1, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	440b      	add	r3, r1
 80035ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d114      	bne.n	800362c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003614:	461a      	mov	r2, r3
 8003616:	2101      	movs	r1, #1
 8003618:	f005 fa20 	bl	8008a5c <USB_EP0_OutStart>
 800361c:	e006      	b.n	800362c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	441a      	add	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f007 fd7a 	bl	800b12c <HAL_PCD_DataOutStageCallback>
 8003638:	e046      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	4a26      	ldr	r2, [pc, #152]	@ (80036d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d124      	bne.n	800368c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800365e:	6093      	str	r3, [r2, #8]
 8003660:	e032      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003678:	461a      	mov	r2, r3
 800367a:	2320      	movs	r3, #32
 800367c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f007 fd51 	bl	800b12c <HAL_PCD_DataOutStageCallback>
 800368a:	e01d      	b.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d114      	bne.n	80036bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d108      	bne.n	80036bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036b4:	461a      	mov	r2, r3
 80036b6:	2100      	movs	r1, #0
 80036b8:	f005 f9d0 	bl	8008a5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f007 fd32 	bl	800b12c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	4f54300a 	.word	0x4f54300a
 80036d8:	4f54310a 	.word	0x4f54310a

080036dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	333c      	adds	r3, #60	@ 0x3c
 80036f4:	3304      	adds	r3, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <PCD_EP_OutSetupPacket_int+0x88>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d90e      	bls.n	8003730 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003728:	461a      	mov	r2, r3
 800372a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800372e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f007 fce9 	bl	800b108 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <PCD_EP_OutSetupPacket_int+0x88>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d90c      	bls.n	8003758 <PCD_EP_OutSetupPacket_int+0x7c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	799b      	ldrb	r3, [r3, #6]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d108      	bne.n	8003758 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003750:	461a      	mov	r2, r3
 8003752:	2101      	movs	r1, #1
 8003754:	f005 f982 	bl	8008a5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	4f54300a 	.word	0x4f54300a

08003768 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
 8003774:	4613      	mov	r3, r2
 8003776:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003786:	883b      	ldrh	r3, [r7, #0]
 8003788:	0419      	lsls	r1, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	430a      	orrs	r2, r1
 8003792:	629a      	str	r2, [r3, #40]	@ 0x28
 8003794:	e028      	b.n	80037e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e00d      	b.n	80037c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	3340      	adds	r3, #64	@ 0x40
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	4413      	add	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	3301      	adds	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d3ec      	bcc.n	80037aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037d0:	883b      	ldrh	r3, [r7, #0]
 80037d2:	0418      	lsls	r0, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	3b01      	subs	r3, #1
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	4302      	orrs	r2, r0
 80037e0:	3340      	adds	r3, #64	@ 0x40
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <HAL_PCDEx_ActivateLPM+0x44>)
 8003848:	4313      	orrs	r3, r2
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	10000003 	.word	0x10000003

08003860 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003880:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <HAL_PWREx_ConfigSupply+0x70>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b04      	cmp	r3, #4
 800388a:	d00a      	beq.n	80038a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800388c:	4b16      	ldr	r3, [pc, #88]	@ (80038e8 <HAL_PWREx_ConfigSupply+0x70>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e01f      	b.n	80038de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e01d      	b.n	80038de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038a2:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <HAL_PWREx_ConfigSupply+0x70>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f023 0207 	bic.w	r2, r3, #7
 80038aa:	490f      	ldr	r1, [pc, #60]	@ (80038e8 <HAL_PWREx_ConfigSupply+0x70>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038b2:	f7fd ff17 	bl	80016e4 <HAL_GetTick>
 80038b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038b8:	e009      	b.n	80038ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038ba:	f7fd ff13 	bl	80016e4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038c8:	d901      	bls.n	80038ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e007      	b.n	80038de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038ce:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <HAL_PWREx_ConfigSupply+0x70>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038da:	d1ee      	bne.n	80038ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	58024800 	.word	0x58024800

080038ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fa:	60d3      	str	r3, [r2, #12]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	58024800 	.word	0x58024800

0800390c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	@ 0x30
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f000 bc1f 	b.w	800415e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80b3 	beq.w	8003a94 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392e:	4b95      	ldr	r3, [pc, #596]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003938:	4b92      	ldr	r3, [pc, #584]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800393e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003940:	2b10      	cmp	r3, #16
 8003942:	d007      	beq.n	8003954 <HAL_RCC_OscConfig+0x48>
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	2b18      	cmp	r3, #24
 8003948:	d112      	bne.n	8003970 <HAL_RCC_OscConfig+0x64>
 800394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d10d      	bne.n	8003970 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	4b8b      	ldr	r3, [pc, #556]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8098 	beq.w	8003a92 <HAL_RCC_OscConfig+0x186>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 8093 	bne.w	8003a92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e3f6      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x7c>
 800397a:	4b82      	ldr	r3, [pc, #520]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a81      	ldr	r2, [pc, #516]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e058      	b.n	8003a3a <HAL_RCC_OscConfig+0x12e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d112      	bne.n	80039b6 <HAL_RCC_OscConfig+0xaa>
 8003990:	4b7c      	ldr	r3, [pc, #496]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a7b      	ldr	r2, [pc, #492]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b79      	ldr	r3, [pc, #484]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a78      	ldr	r2, [pc, #480]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b76      	ldr	r3, [pc, #472]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a75      	ldr	r2, [pc, #468]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e041      	b.n	8003a3a <HAL_RCC_OscConfig+0x12e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039be:	d112      	bne.n	80039e6 <HAL_RCC_OscConfig+0xda>
 80039c0:	4b70      	ldr	r3, [pc, #448]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a6f      	ldr	r2, [pc, #444]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a6c      	ldr	r2, [pc, #432]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039d2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a69      	ldr	r2, [pc, #420]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e029      	b.n	8003a3a <HAL_RCC_OscConfig+0x12e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80039ee:	d112      	bne.n	8003a16 <HAL_RCC_OscConfig+0x10a>
 80039f0:	4b64      	ldr	r3, [pc, #400]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a63      	ldr	r2, [pc, #396]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b61      	ldr	r3, [pc, #388]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a60      	ldr	r2, [pc, #384]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b5e      	ldr	r3, [pc, #376]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e011      	b.n	8003a3a <HAL_RCC_OscConfig+0x12e>
 8003a16:	4b5b      	ldr	r3, [pc, #364]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5a      	ldr	r2, [pc, #360]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b58      	ldr	r3, [pc, #352]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a57      	ldr	r2, [pc, #348]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b55      	ldr	r3, [pc, #340]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a54      	ldr	r2, [pc, #336]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d013      	beq.n	8003a6a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd fe4f 	bl	80016e4 <HAL_GetTick>
 8003a46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4a:	f7fd fe4b 	bl	80016e4 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	@ 0x64
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e380      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a5c:	4b49      	ldr	r3, [pc, #292]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x13e>
 8003a68:	e014      	b.n	8003a94 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd fe3b 	bl	80016e4 <HAL_GetTick>
 8003a6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a72:	f7fd fe37 	bl	80016e4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b64      	cmp	r3, #100	@ 0x64
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e36c      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a84:	4b3f      	ldr	r3, [pc, #252]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x166>
 8003a90:	e000      	b.n	8003a94 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 808c 	beq.w	8003bba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa2:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aaa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aac:	4b35      	ldr	r3, [pc, #212]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x1bc>
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	2b18      	cmp	r3, #24
 8003abc:	d137      	bne.n	8003b2e <HAL_RCC_OscConfig+0x222>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d132      	bne.n	8003b2e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x1d4>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e33e      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ae0:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 0219 	bic.w	r2, r3, #25
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4925      	ldr	r1, [pc, #148]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fd fdf7 	bl	80016e4 <HAL_GetTick>
 8003af6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fd fdf3 	bl	80016e4 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e328      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b1a      	ldr	r3, [pc, #104]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	4917      	ldr	r1, [pc, #92]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2c:	e045      	b.n	8003bba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d028      	beq.n	8003b88 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b36:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0219 	bic.w	r2, r3, #25
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	4910      	ldr	r1, [pc, #64]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fd fdcc 	bl	80016e4 <HAL_GetTick>
 8003b4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b50:	f7fd fdc8 	bl	80016e4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e2fd      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b62:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	061b      	lsls	r3, r3, #24
 8003b7c:	4901      	ldr	r1, [pc, #4]	@ (8003b84 <HAL_RCC_OscConfig+0x278>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
 8003b82:	e01a      	b.n	8003bba <HAL_RCC_OscConfig+0x2ae>
 8003b84:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b88:	4b97      	ldr	r3, [pc, #604]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a96      	ldr	r2, [pc, #600]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fda6 	bl	80016e4 <HAL_GetTick>
 8003b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7fd fda2 	bl	80016e4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e2d7      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bae:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d06a      	beq.n	8003c9c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc6:	4b88      	ldr	r3, [pc, #544]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bd0:	4b85      	ldr	r3, [pc, #532]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d007      	beq.n	8003bec <HAL_RCC_OscConfig+0x2e0>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b18      	cmp	r3, #24
 8003be0:	d11b      	bne.n	8003c1a <HAL_RCC_OscConfig+0x30e>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d116      	bne.n	8003c1a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bec:	4b7e      	ldr	r3, [pc, #504]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2f8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	2b80      	cmp	r3, #128	@ 0x80
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e2ac      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c04:	4b78      	ldr	r3, [pc, #480]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	4975      	ldr	r1, [pc, #468]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c18:	e040      	b.n	8003c9c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d023      	beq.n	8003c6a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c22:	4b71      	ldr	r3, [pc, #452]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a70      	ldr	r2, [pc, #448]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fd fd59 	bl	80016e4 <HAL_GetTick>
 8003c32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c36:	f7fd fd55 	bl	80016e4 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e28a      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c48:	4b67      	ldr	r3, [pc, #412]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c54:	4b64      	ldr	r3, [pc, #400]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	4961      	ldr	r1, [pc, #388]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60cb      	str	r3, [r1, #12]
 8003c68:	e018      	b.n	8003c9c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fd fd35 	bl	80016e4 <HAL_GetTick>
 8003c7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c7e:	f7fd fd31 	bl	80016e4 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e266      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c90:	4b55      	ldr	r3, [pc, #340]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f0      	bne.n	8003c7e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d036      	beq.n	8003d16 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d019      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fd fd12 	bl	80016e4 <HAL_GetTick>
 8003cc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fd fd0e 	bl	80016e4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e243      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cd6:	4b44      	ldr	r3, [pc, #272]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x3b8>
 8003ce2:	e018      	b.n	8003d16 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce4:	4b40      	ldr	r3, [pc, #256]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce8:	4a3f      	ldr	r2, [pc, #252]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd fcf8 	bl	80016e4 <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fd fcf4 	bl	80016e4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e229      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d0a:	4b37      	ldr	r3, [pc, #220]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d036      	beq.n	8003d90 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d019      	beq.n	8003d5e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003d30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d36:	f7fd fcd5 	bl	80016e4 <HAL_GetTick>
 8003d3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d3e:	f7fd fcd1 	bl	80016e4 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e206      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d50:	4b25      	ldr	r3, [pc, #148]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x432>
 8003d5c:	e018      	b.n	8003d90 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d5e:	4b22      	ldr	r3, [pc, #136]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a21      	ldr	r2, [pc, #132]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003d64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fcbb 	bl	80016e4 <HAL_GetTick>
 8003d6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d72:	f7fd fcb7 	bl	80016e4 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1ec      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d84:	4b18      	ldr	r3, [pc, #96]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f0      	bne.n	8003d72 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80af 	beq.w	8003efc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d9e:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <HAL_RCC_OscConfig+0x4e0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a12      	ldr	r2, [pc, #72]	@ (8003dec <HAL_RCC_OscConfig+0x4e0>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003daa:	f7fd fc9b 	bl	80016e4 <HAL_GetTick>
 8003dae:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fd fc97 	bl	80016e4 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	@ 0x64
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1cc      	b.n	800415e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc4:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <HAL_RCC_OscConfig+0x4e0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d10b      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4e4>
 8003dd8:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	4a02      	ldr	r2, [pc, #8]	@ (8003de8 <HAL_RCC_OscConfig+0x4dc>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de4:	e05b      	b.n	8003e9e <HAL_RCC_OscConfig+0x592>
 8003de6:	bf00      	nop
 8003de8:	58024400 	.word	0x58024400
 8003dec:	58024800 	.word	0x58024800
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d112      	bne.n	8003e1e <HAL_RCC_OscConfig+0x512>
 8003df8:	4b9d      	ldr	r3, [pc, #628]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfc:	4a9c      	ldr	r2, [pc, #624]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e04:	4b9a      	ldr	r3, [pc, #616]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e08:	4a99      	ldr	r2, [pc, #612]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e10:	4b97      	ldr	r3, [pc, #604]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e14:	4a96      	ldr	r2, [pc, #600]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e16:	f023 0304 	bic.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1c:	e03f      	b.n	8003e9e <HAL_RCC_OscConfig+0x592>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d112      	bne.n	8003e4c <HAL_RCC_OscConfig+0x540>
 8003e26:	4b92      	ldr	r3, [pc, #584]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	4a91      	ldr	r2, [pc, #580]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e32:	4b8f      	ldr	r3, [pc, #572]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e36:	4a8e      	ldr	r2, [pc, #568]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e3e:	4b8c      	ldr	r3, [pc, #560]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	4a8b      	ldr	r2, [pc, #556]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4a:	e028      	b.n	8003e9e <HAL_RCC_OscConfig+0x592>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b85      	cmp	r3, #133	@ 0x85
 8003e52:	d112      	bne.n	8003e7a <HAL_RCC_OscConfig+0x56e>
 8003e54:	4b86      	ldr	r3, [pc, #536]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	4a85      	ldr	r2, [pc, #532]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e60:	4b83      	ldr	r3, [pc, #524]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	4a82      	ldr	r2, [pc, #520]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6c:	4b80      	ldr	r3, [pc, #512]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	4a7f      	ldr	r2, [pc, #508]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e78:	e011      	b.n	8003e9e <HAL_RCC_OscConfig+0x592>
 8003e7a:	4b7d      	ldr	r3, [pc, #500]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e86:	4b7a      	ldr	r3, [pc, #488]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	4a79      	ldr	r2, [pc, #484]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e92:	4b77      	ldr	r3, [pc, #476]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	4a76      	ldr	r2, [pc, #472]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d015      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd fc1d 	bl	80016e4 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd fc19 	bl	80016e4 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e14c      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ee      	beq.n	8003eae <HAL_RCC_OscConfig+0x5a2>
 8003ed0:	e014      	b.n	8003efc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd fc07 	bl	80016e4 <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fd fc03 	bl	80016e4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e136      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ef0:	4b5f      	ldr	r3, [pc, #380]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ee      	bne.n	8003eda <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 812b 	beq.w	800415c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f06:	4b5a      	ldr	r3, [pc, #360]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f0e:	2b18      	cmp	r3, #24
 8003f10:	f000 80bb 	beq.w	800408a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	f040 8095 	bne.w	8004048 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b54      	ldr	r3, [pc, #336]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a53      	ldr	r2, [pc, #332]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003f24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fd fbdb 	bl	80016e4 <HAL_GetTick>
 8003f2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fd fbd7 	bl	80016e4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e10c      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f44:	4b4a      	ldr	r3, [pc, #296]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f50:	4b47      	ldr	r3, [pc, #284]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003f52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f54:	4b47      	ldr	r3, [pc, #284]	@ (8004074 <HAL_RCC_OscConfig+0x768>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	430a      	orrs	r2, r1
 8003f64:	4942      	ldr	r1, [pc, #264]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	025b      	lsls	r3, r3, #9
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	3b01      	subs	r3, #1
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f92:	3b01      	subs	r3, #1
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f9a:	4935      	ldr	r1, [pc, #212]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003fa0:	4b33      	ldr	r3, [pc, #204]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	4a32      	ldr	r2, [pc, #200]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fac:	4b30      	ldr	r3, [pc, #192]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb0:	4b31      	ldr	r3, [pc, #196]	@ (8004078 <HAL_RCC_OscConfig+0x76c>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fb8:	00d2      	lsls	r2, r2, #3
 8003fba:	492d      	ldr	r1, [pc, #180]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	f023 020c 	bic.w	r2, r3, #12
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	4928      	ldr	r1, [pc, #160]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fd2:	4b27      	ldr	r3, [pc, #156]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	f023 0202 	bic.w	r2, r3, #2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	4924      	ldr	r1, [pc, #144]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fe4:	4b22      	ldr	r3, [pc, #136]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4a21      	ldr	r2, [pc, #132]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	4a1b      	ldr	r2, [pc, #108]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8004002:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	4a18      	ldr	r2, [pc, #96]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004014:	4b16      	ldr	r3, [pc, #88]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a15      	ldr	r2, [pc, #84]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd fb60 	bl	80016e4 <HAL_GetTick>
 8004024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fb5c 	bl	80016e4 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e091      	b.n	800415e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800403a:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x71c>
 8004046:	e089      	b.n	800415c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004048:	4b09      	ldr	r3, [pc, #36]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a08      	ldr	r2, [pc, #32]	@ (8004070 <HAL_RCC_OscConfig+0x764>)
 800404e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fd fb46 	bl	80016e4 <HAL_GetTick>
 8004058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800405a:	e00f      	b.n	800407c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fd fb42 	bl	80016e4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d908      	bls.n	800407c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e077      	b.n	800415e <HAL_RCC_OscConfig+0x852>
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
 8004074:	fffffc0c 	.word	0xfffffc0c
 8004078:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800407c:	4b3a      	ldr	r3, [pc, #232]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e9      	bne.n	800405c <HAL_RCC_OscConfig+0x750>
 8004088:	e068      	b.n	800415c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800408a:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004090:	4b35      	ldr	r3, [pc, #212]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	2b01      	cmp	r3, #1
 800409c:	d031      	beq.n	8004102 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f003 0203 	and.w	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d12a      	bne.n	8004102 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d122      	bne.n	8004102 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d11a      	bne.n	8004102 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	0a5b      	lsrs	r3, r3, #9
 80040d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d111      	bne.n	8004102 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d108      	bne.n	8004102 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	0e1b      	lsrs	r3, r3, #24
 80040f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e02b      	b.n	800415e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004106:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 8004108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410a:	08db      	lsrs	r3, r3, #3
 800410c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004110:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	429a      	cmp	r2, r3
 800411a:	d01f      	beq.n	800415c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	4a11      	ldr	r2, [pc, #68]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004128:	f7fd fadc 	bl	80016e4 <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800412e:	bf00      	nop
 8004130:	f7fd fad8 	bl	80016e4 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	4293      	cmp	r3, r2
 800413a:	d0f9      	beq.n	8004130 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800413c:	4b0a      	ldr	r3, [pc, #40]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 800413e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004140:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <HAL_RCC_OscConfig+0x860>)
 8004142:	4013      	ands	r3, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004148:	00d2      	lsls	r2, r2, #3
 800414a:	4907      	ldr	r1, [pc, #28]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 800414c:	4313      	orrs	r3, r2
 800414e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	4a04      	ldr	r2, [pc, #16]	@ (8004168 <HAL_RCC_OscConfig+0x85c>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3730      	adds	r7, #48	@ 0x30
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	58024400 	.word	0x58024400
 800416c:	ffff0007 	.word	0xffff0007

08004170 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e19c      	b.n	80044be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b8a      	ldr	r3, [pc, #552]	@ (80043b0 <HAL_RCC_ClockConfig+0x240>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d910      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b87      	ldr	r3, [pc, #540]	@ (80043b0 <HAL_RCC_ClockConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 020f 	bic.w	r2, r3, #15
 800419a:	4985      	ldr	r1, [pc, #532]	@ (80043b0 <HAL_RCC_ClockConfig+0x240>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b83      	ldr	r3, [pc, #524]	@ (80043b0 <HAL_RCC_ClockConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e184      	b.n	80044be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	4b7b      	ldr	r3, [pc, #492]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d908      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041d0:	4b78      	ldr	r3, [pc, #480]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	4975      	ldr	r1, [pc, #468]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d010      	beq.n	8004210 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	4b70      	ldr	r3, [pc, #448]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d908      	bls.n	8004210 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041fe:	4b6d      	ldr	r3, [pc, #436]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	496a      	ldr	r1, [pc, #424]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 800420c:	4313      	orrs	r3, r2
 800420e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	4b64      	ldr	r3, [pc, #400]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004228:	429a      	cmp	r2, r3
 800422a:	d908      	bls.n	800423e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800422c:	4b61      	ldr	r3, [pc, #388]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	495e      	ldr	r1, [pc, #376]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 800423a:	4313      	orrs	r3, r2
 800423c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d010      	beq.n	800426c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	4b59      	ldr	r3, [pc, #356]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004256:	429a      	cmp	r2, r3
 8004258:	d908      	bls.n	800426c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800425a:	4b56      	ldr	r3, [pc, #344]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	4953      	ldr	r1, [pc, #332]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004268:	4313      	orrs	r3, r2
 800426a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d010      	beq.n	800429a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	4b4d      	ldr	r3, [pc, #308]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	429a      	cmp	r2, r3
 8004286:	d908      	bls.n	800429a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004288:	4b4a      	ldr	r3, [pc, #296]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f023 020f 	bic.w	r2, r3, #15
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4947      	ldr	r1, [pc, #284]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004296:	4313      	orrs	r3, r2
 8004298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d055      	beq.n	8004352 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042a6:	4b43      	ldr	r3, [pc, #268]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4940      	ldr	r1, [pc, #256]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042c0:	4b3c      	ldr	r3, [pc, #240]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d121      	bne.n	8004310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0f6      	b.n	80044be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042d8:	4b36      	ldr	r3, [pc, #216]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d115      	bne.n	8004310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0ea      	b.n	80044be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042f0:	4b30      	ldr	r3, [pc, #192]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0de      	b.n	80044be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004300:	4b2c      	ldr	r3, [pc, #176]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0d6      	b.n	80044be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004310:	4b28      	ldr	r3, [pc, #160]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f023 0207 	bic.w	r2, r3, #7
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4925      	ldr	r1, [pc, #148]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 800431e:	4313      	orrs	r3, r2
 8004320:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004322:	f7fd f9df 	bl	80016e4 <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004328:	e00a      	b.n	8004340 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432a:	f7fd f9db 	bl	80016e4 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0be      	b.n	80044be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004340:	4b1c      	ldr	r3, [pc, #112]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	429a      	cmp	r2, r3
 8004350:	d1eb      	bne.n	800432a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d010      	beq.n	8004380 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	4b14      	ldr	r3, [pc, #80]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	429a      	cmp	r2, r3
 800436c:	d208      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436e:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f023 020f 	bic.w	r2, r3, #15
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <HAL_RCC_ClockConfig+0x244>)
 800437c:	4313      	orrs	r3, r2
 800437e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_ClockConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d214      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <HAL_RCC_ClockConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 020f 	bic.w	r2, r3, #15
 8004396:	4906      	ldr	r1, [pc, #24]	@ (80043b0 <HAL_RCC_ClockConfig+0x240>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <HAL_RCC_ClockConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e086      	b.n	80044be <HAL_RCC_ClockConfig+0x34e>
 80043b0:	52002000 	.word	0x52002000
 80043b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d010      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	4b3f      	ldr	r3, [pc, #252]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d208      	bcs.n	80043e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043d4:	4b3c      	ldr	r3, [pc, #240]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	4939      	ldr	r1, [pc, #228]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	4b34      	ldr	r3, [pc, #208]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043fe:	429a      	cmp	r2, r3
 8004400:	d208      	bcs.n	8004414 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	492e      	ldr	r1, [pc, #184]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 8004410:	4313      	orrs	r3, r2
 8004412:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b00      	cmp	r3, #0
 800441e:	d010      	beq.n	8004442 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	4b28      	ldr	r3, [pc, #160]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800442c:	429a      	cmp	r2, r3
 800442e:	d208      	bcs.n	8004442 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004430:	4b25      	ldr	r3, [pc, #148]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	4922      	ldr	r1, [pc, #136]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 800443e:	4313      	orrs	r3, r2
 8004440:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d010      	beq.n	8004470 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	4b1d      	ldr	r3, [pc, #116]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800445a:	429a      	cmp	r2, r3
 800445c:	d208      	bcs.n	8004470 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800445e:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4917      	ldr	r1, [pc, #92]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 800446c:	4313      	orrs	r3, r2
 800446e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004470:	f000 f834 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 8004474:	4602      	mov	r2, r0
 8004476:	4b14      	ldr	r3, [pc, #80]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	4912      	ldr	r1, [pc, #72]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004482:	5ccb      	ldrb	r3, [r1, r3]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
 800448c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800448e:	4b0e      	ldr	r3, [pc, #56]	@ (80044c8 <HAL_RCC_ClockConfig+0x358>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	4a0d      	ldr	r2, [pc, #52]	@ (80044cc <HAL_RCC_ClockConfig+0x35c>)
 8004498:	5cd3      	ldrb	r3, [r2, r3]
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
 80044a4:	4a0a      	ldr	r2, [pc, #40]	@ (80044d0 <HAL_RCC_ClockConfig+0x360>)
 80044a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044a8:	4a0a      	ldr	r2, [pc, #40]	@ (80044d4 <HAL_RCC_ClockConfig+0x364>)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044ae:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <HAL_RCC_ClockConfig+0x368>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd f8cc 	bl	8001650 <HAL_InitTick>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	58024400 	.word	0x58024400
 80044cc:	0800c638 	.word	0x0800c638
 80044d0:	24000004 	.word	0x24000004
 80044d4:	24000000 	.word	0x24000000
 80044d8:	24000008 	.word	0x24000008

080044dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	@ 0x24
 80044e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e2:	4bb3      	ldr	r3, [pc, #716]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ea:	2b18      	cmp	r3, #24
 80044ec:	f200 8155 	bhi.w	800479a <HAL_RCC_GetSysClockFreq+0x2be>
 80044f0:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800455d 	.word	0x0800455d
 80044fc:	0800479b 	.word	0x0800479b
 8004500:	0800479b 	.word	0x0800479b
 8004504:	0800479b 	.word	0x0800479b
 8004508:	0800479b 	.word	0x0800479b
 800450c:	0800479b 	.word	0x0800479b
 8004510:	0800479b 	.word	0x0800479b
 8004514:	0800479b 	.word	0x0800479b
 8004518:	08004583 	.word	0x08004583
 800451c:	0800479b 	.word	0x0800479b
 8004520:	0800479b 	.word	0x0800479b
 8004524:	0800479b 	.word	0x0800479b
 8004528:	0800479b 	.word	0x0800479b
 800452c:	0800479b 	.word	0x0800479b
 8004530:	0800479b 	.word	0x0800479b
 8004534:	0800479b 	.word	0x0800479b
 8004538:	08004589 	.word	0x08004589
 800453c:	0800479b 	.word	0x0800479b
 8004540:	0800479b 	.word	0x0800479b
 8004544:	0800479b 	.word	0x0800479b
 8004548:	0800479b 	.word	0x0800479b
 800454c:	0800479b 	.word	0x0800479b
 8004550:	0800479b 	.word	0x0800479b
 8004554:	0800479b 	.word	0x0800479b
 8004558:	0800458f 	.word	0x0800458f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800455c:	4b94      	ldr	r3, [pc, #592]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004568:	4b91      	ldr	r3, [pc, #580]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	4a90      	ldr	r2, [pc, #576]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800457a:	e111      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800457c:	4b8d      	ldr	r3, [pc, #564]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800457e:	61bb      	str	r3, [r7, #24]
      break;
 8004580:	e10e      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004582:	4b8d      	ldr	r3, [pc, #564]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004584:	61bb      	str	r3, [r7, #24]
      break;
 8004586:	e10b      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004588:	4b8c      	ldr	r3, [pc, #560]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800458a:	61bb      	str	r3, [r7, #24]
      break;
 800458c:	e108      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800458e:	4b88      	ldr	r3, [pc, #544]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004598:	4b85      	ldr	r3, [pc, #532]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045a4:	4b82      	ldr	r3, [pc, #520]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045ae:	4b80      	ldr	r3, [pc, #512]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b2:	08db      	lsrs	r3, r3, #3
 80045b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80e1 	beq.w	8004794 <HAL_RCC_GetSysClockFreq+0x2b8>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	f000 8083 	beq.w	80046e0 <HAL_RCC_GetSysClockFreq+0x204>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	f200 80a1 	bhi.w	8004724 <HAL_RCC_GetSysClockFreq+0x248>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x114>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d056      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x1c0>
 80045ee:	e099      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045f0:	4b6f      	ldr	r3, [pc, #444]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02d      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045fc:	4b6c      	ldr	r3, [pc, #432]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	4a6b      	ldr	r2, [pc, #428]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
 800460c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004626:	4b62      	ldr	r3, [pc, #392]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004636:	ed97 6a02 	vldr	s12, [r7, #8]
 800463a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80047c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800463e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800464a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004656:	e087      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004662:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466a:	4b51      	ldr	r3, [pc, #324]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467a:	ed97 6a02 	vldr	s12, [r7, #8]
 800467e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80047c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800468e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004696:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800469a:	e065      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ae:	4b40      	ldr	r3, [pc, #256]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046be:	ed97 6a02 	vldr	s12, [r7, #8]
 80046c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80047c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046de:	e043      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80046ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f2:	4b2f      	ldr	r3, [pc, #188]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004702:	ed97 6a02 	vldr	s12, [r7, #8]
 8004706:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80047c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800470a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004722:	e021      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004736:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004746:	ed97 6a02 	vldr	s12, [r7, #8]
 800474a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80047c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800474e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800475a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004766:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004768:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	0a5b      	lsrs	r3, r3, #9
 800476e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004772:	3301      	adds	r3, #1
 8004774:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004780:	edd7 6a07 	vldr	s13, [r7, #28]
 8004784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800478c:	ee17 3a90 	vmov	r3, s15
 8004790:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004792:	e005      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	61bb      	str	r3, [r7, #24]
      break;
 8004798:	e002      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800479a:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800479c:	61bb      	str	r3, [r7, #24]
      break;
 800479e:	bf00      	nop
  }

  return sysclockfreq;
 80047a0:	69bb      	ldr	r3, [r7, #24]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3724      	adds	r7, #36	@ 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	58024400 	.word	0x58024400
 80047b4:	03d09000 	.word	0x03d09000
 80047b8:	003d0900 	.word	0x003d0900
 80047bc:	016e3600 	.word	0x016e3600
 80047c0:	46000000 	.word	0x46000000
 80047c4:	4c742400 	.word	0x4c742400
 80047c8:	4a742400 	.word	0x4a742400
 80047cc:	4bb71b00 	.word	0x4bb71b00

080047d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80047d6:	f7ff fe81 	bl	80044dc <HAL_RCC_GetSysClockFreq>
 80047da:	4602      	mov	r2, r0
 80047dc:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <HAL_RCC_GetHCLKFreq+0x50>)
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	0a1b      	lsrs	r3, r3, #8
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	490f      	ldr	r1, [pc, #60]	@ (8004824 <HAL_RCC_GetHCLKFreq+0x54>)
 80047e8:	5ccb      	ldrb	r3, [r1, r3]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80047f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004820 <HAL_RCC_GetHCLKFreq+0x50>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	4a09      	ldr	r2, [pc, #36]	@ (8004824 <HAL_RCC_GetHCLKFreq+0x54>)
 80047fe:	5cd3      	ldrb	r3, [r2, r3]
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	4a07      	ldr	r2, [pc, #28]	@ (8004828 <HAL_RCC_GetHCLKFreq+0x58>)
 800480c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800480e:	4a07      	ldr	r2, [pc, #28]	@ (800482c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004814:	4b04      	ldr	r3, [pc, #16]	@ (8004828 <HAL_RCC_GetHCLKFreq+0x58>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	58024400 	.word	0x58024400
 8004824:	0800c638 	.word	0x0800c638
 8004828:	24000004 	.word	0x24000004
 800482c:	24000000 	.word	0x24000000

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004834:	f7ff ffcc 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4904      	ldr	r1, [pc, #16]	@ (8004858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	58024400 	.word	0x58024400
 8004858:	0800c638 	.word	0x0800c638

0800485c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b0c8      	sub	sp, #288	@ 0x120
 8004862:	af00      	add	r7, sp, #0
 8004864:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004868:	2300      	movs	r3, #0
 800486a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800486e:	2300      	movs	r3, #0
 8004870:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004880:	2500      	movs	r5, #0
 8004882:	ea54 0305 	orrs.w	r3, r4, r5
 8004886:	d049      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800488c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800488e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004892:	d02f      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004894:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004898:	d828      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800489a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800489e:	d01a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048a4:	d822      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ae:	d007      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048b0:	e01c      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b2:	4ba7      	ldr	r3, [pc, #668]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	4aa6      	ldr	r2, [pc, #664]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048be:	e01a      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c4:	3308      	adds	r3, #8
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f002 fa6d 	bl	8006da8 <RCCEx_PLL2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048d4:	e00f      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048da:	3328      	adds	r3, #40	@ 0x28
 80048dc:	2102      	movs	r1, #2
 80048de:	4618      	mov	r0, r3
 80048e0:	f002 fb14 	bl	8006f0c <RCCEx_PLL3_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ea:	e004      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048f2:	e000      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048fe:	4b94      	ldr	r3, [pc, #592]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004902:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800490a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490c:	4a90      	ldr	r2, [pc, #576]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800490e:	430b      	orrs	r3, r1
 8004910:	6513      	str	r3, [r2, #80]	@ 0x50
 8004912:	e003      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004914:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004918:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800491c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004928:	f04f 0900 	mov.w	r9, #0
 800492c:	ea58 0309 	orrs.w	r3, r8, r9
 8004930:	d047      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004938:	2b04      	cmp	r3, #4
 800493a:	d82a      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800493c:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004959 	.word	0x08004959
 8004948:	08004967 	.word	0x08004967
 800494c:	0800497d 	.word	0x0800497d
 8004950:	0800499b 	.word	0x0800499b
 8004954:	0800499b 	.word	0x0800499b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004958:	4b7d      	ldr	r3, [pc, #500]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	4a7c      	ldr	r2, [pc, #496]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800495e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004964:	e01a      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800496a:	3308      	adds	r3, #8
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f002 fa1a 	bl	8006da8 <RCCEx_PLL2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800497a:	e00f      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004980:	3328      	adds	r3, #40	@ 0x28
 8004982:	2100      	movs	r1, #0
 8004984:	4618      	mov	r0, r3
 8004986:	f002 fac1 	bl	8006f0c <RCCEx_PLL3_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004990:	e004      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004998:	e000      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800499a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a8:	f023 0107 	bic.w	r1, r3, #7
 80049ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b2:	4a67      	ldr	r2, [pc, #412]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80049b8:	e003      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80049c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049ce:	f04f 0b00 	mov.w	fp, #0
 80049d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80049d6:	d054      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80049d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049e2:	d036      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80049e4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049e8:	d82f      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ee:	d032      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f4:	d829      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049f8:	d02f      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80049fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80049fc:	d825      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049fe:	2b80      	cmp	r3, #128	@ 0x80
 8004a00:	d018      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004a02:	2b80      	cmp	r3, #128	@ 0x80
 8004a04:	d821      	bhi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004a0a:	2b40      	cmp	r3, #64	@ 0x40
 8004a0c:	d007      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004a0e:	e01c      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b4f      	ldr	r3, [pc, #316]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	4a4e      	ldr	r2, [pc, #312]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a1c:	e01e      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a22:	3308      	adds	r3, #8
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f002 f9be 	bl	8006da8 <RCCEx_PLL2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a32:	e013      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a38:	3328      	adds	r3, #40	@ 0x28
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f002 fa65 	bl	8006f0c <RCCEx_PLL3_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a48:	e008      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a50:	e004      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a52:	bf00      	nop
 8004a54:	e002      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004a64:	4b3a      	ldr	r3, [pc, #232]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a72:	4a37      	ldr	r2, [pc, #220]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d05c      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004aac:	d03b      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004aae:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004ab2:	d834      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab8:	d037      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004aba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004abe:	d82e      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ac0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ac4:	d033      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ac6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004aca:	d828      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad0:	d01a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad6:	d822      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	4a19      	ldr	r2, [pc, #100]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004af0:	e01e      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004af6:	3308      	adds	r3, #8
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f002 f954 	bl	8006da8 <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b06:	e013      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b0c:	3328      	adds	r3, #40	@ 0x28
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f002 f9fb 	bl	8006f0c <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b1c:	e008      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10d      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b46:	4a02      	ldr	r2, [pc, #8]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b4c:	e006      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004b4e:	bf00      	nop
 8004b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b76:	460b      	mov	r3, r1
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	d03a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b82:	2b30      	cmp	r3, #48	@ 0x30
 8004b84:	d01f      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004b86:	2b30      	cmp	r3, #48	@ 0x30
 8004b88:	d819      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d815      	bhi.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d019      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d111      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9a:	4bae      	ldr	r3, [pc, #696]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9e:	4aad      	ldr	r2, [pc, #692]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ba6:	e011      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bac:	3308      	adds	r3, #8
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f002 f8f9 	bl	8006da8 <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bbc:	e006      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004bd4:	4b9f      	ldr	r3, [pc, #636]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be2:	4a9c      	ldr	r2, [pc, #624]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004be4:	430b      	orrs	r3, r1
 8004be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004be8:	e003      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004bfe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	d051      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c1c:	d035      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004c1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c22:	d82e      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c28:	d031      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004c2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c2e:	d828      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c34:	d01a      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3a:	d822      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c44:	d007      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004c46:	e01c      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c48:	4b82      	ldr	r3, [pc, #520]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	4a81      	ldr	r2, [pc, #516]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c54:	e01c      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 f8a2 	bl	8006da8 <RCCEx_PLL2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c6a:	e011      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c70:	3328      	adds	r3, #40	@ 0x28
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 f949 	bl	8006f0c <RCCEx_PLL3_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c80:	e006      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c88:	e002      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c98:	4b6e      	ldr	r3, [pc, #440]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ca6:	4a6b      	ldr	r2, [pc, #428]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cac:	e003      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cb2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ccc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	d053      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce0:	d033      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004ce2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce6:	d82c      	bhi.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ce8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cec:	d02f      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004cee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf2:	d826      	bhi.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004cf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cf8:	d02b      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004cfa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cfe:	d820      	bhi.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d04:	d012      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d0a:	d81a      	bhi.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d022      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d14:	d115      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f002 f842 	bl	8006da8 <RCCEx_PLL2_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d2a:	e015      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d30:	3328      	adds	r3, #40	@ 0x28
 8004d32:	2101      	movs	r1, #1
 8004d34:	4618      	mov	r0, r3
 8004d36:	f002 f8e9 	bl	8006f0c <RCCEx_PLL3_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d40:	e00a      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d48:	e006      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d4a:	bf00      	nop
 8004d4c:	e004      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d60:	4b3c      	ldr	r3, [pc, #240]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d6e:	4a39      	ldr	r2, [pc, #228]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d74:	e003      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d94:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d060      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004da6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004daa:	d039      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004dac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004db0:	d832      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004db6:	d035      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dbc:	d82c      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc2:	d031      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc8:	d826      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dce:	d02d      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004dd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dd4:	d820      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dda:	d012      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004de0:	d81a      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d024      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dea:	d115      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004df0:	3308      	adds	r3, #8
 8004df2:	2101      	movs	r1, #1
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 ffd7 	bl	8006da8 <RCCEx_PLL2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e00:	e017      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e06:	3328      	adds	r3, #40	@ 0x28
 8004e08:	2101      	movs	r1, #1
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f002 f87e 	bl	8006f0c <RCCEx_PLL3_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e16:	e00c      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e1e:	e008      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e20:	bf00      	nop
 8004e22:	e006      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e24:	bf00      	nop
 8004e26:	e004      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e28:	bf00      	nop
 8004e2a:	e002      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e2c:	bf00      	nop
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10e      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e3a:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e4a:	4a02      	ldr	r2, [pc, #8]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e50:	e006      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e52:	bf00      	nop
 8004e54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e70:	2300      	movs	r3, #0
 8004e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	d037      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e8a:	d00e      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e90:	d816      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e9a:	d111      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9c:	4bc4      	ldr	r3, [pc, #784]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	4ac3      	ldr	r2, [pc, #780]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ea8:	e00f      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eae:	3308      	adds	r3, #8
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 ff78 	bl	8006da8 <RCCEx_PLL2_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ebe:	e004      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ec6:	e000      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ed2:	4bb7      	ldr	r3, [pc, #732]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ede:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ee0:	4ab3      	ldr	r2, [pc, #716]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ee6:	e003      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f00:	2300      	movs	r3, #0
 8004f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	d039      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d81c      	bhi.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f31 	.word	0x08004f31
 8004f28:	08004f3f 	.word	0x08004f3f
 8004f2c:	08004f5d 	.word	0x08004f5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f30:	4b9f      	ldr	r3, [pc, #636]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	4a9e      	ldr	r2, [pc, #632]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f3c:	e00f      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f42:	3308      	adds	r3, #8
 8004f44:	2102      	movs	r1, #2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 ff2e 	bl	8006da8 <RCCEx_PLL2_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f52:	e004      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f5a:	e000      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f66:	4b92      	ldr	r3, [pc, #584]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	f023 0103 	bic.w	r1, r3, #3
 8004f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f74:	4a8e      	ldr	r2, [pc, #568]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f76:	430b      	orrs	r3, r1
 8004f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f7a:	e003      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f000 8099 	beq.w	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa6:	4b83      	ldr	r3, [pc, #524]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a82      	ldr	r2, [pc, #520]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb2:	f7fc fb97 	bl	80016e4 <HAL_GetTick>
 8004fb6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fc fb92 	bl	80016e4 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b64      	cmp	r3, #100	@ 0x64
 8004fca:	d903      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fd4:	4b77      	ldr	r3, [pc, #476]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ed      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d173      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fe8:	4b71      	ldr	r3, [pc, #452]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ff4:	4053      	eors	r3, r2
 8004ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d015      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005006:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800500a:	4b69      	ldr	r3, [pc, #420]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	4a68      	ldr	r2, [pc, #416]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005014:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005016:	4b66      	ldr	r3, [pc, #408]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	4a65      	ldr	r2, [pc, #404]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800501c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005020:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005022:	4a63      	ldr	r2, [pc, #396]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005028:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800502a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800502e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005036:	d118      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fc fb54 	bl	80016e4 <HAL_GetTick>
 800503c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005040:	e00d      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fc fb4f 	bl	80016e4 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800504c:	1ad2      	subs	r2, r2, r3
 800504e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005052:	429a      	cmp	r2, r3
 8005054:	d903      	bls.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800505c:	e005      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800505e:	4b54      	ldr	r3, [pc, #336]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0eb      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800506a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800506e:	2b00      	cmp	r3, #0
 8005070:	d129      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800507a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005082:	d10e      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005084:	4b4a      	ldr	r3, [pc, #296]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800508c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005094:	091a      	lsrs	r2, r3, #4
 8005096:	4b48      	ldr	r3, [pc, #288]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005098:	4013      	ands	r3, r2
 800509a:	4a45      	ldr	r2, [pc, #276]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509c:	430b      	orrs	r3, r1
 800509e:	6113      	str	r3, [r2, #16]
 80050a0:	e005      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80050a2:	4b43      	ldr	r3, [pc, #268]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4a42      	ldr	r2, [pc, #264]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050ac:	6113      	str	r3, [r2, #16]
 80050ae:	4b40      	ldr	r3, [pc, #256]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80050b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050be:	4a3c      	ldr	r2, [pc, #240]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c4:	e008      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80050ce:	e003      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f002 0301 	and.w	r3, r2, #1
 80050e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050e8:	2300      	movs	r3, #0
 80050ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f000 8090 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005102:	2b28      	cmp	r3, #40	@ 0x28
 8005104:	d870      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005106:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	080051f1 	.word	0x080051f1
 8005110:	080051e9 	.word	0x080051e9
 8005114:	080051e9 	.word	0x080051e9
 8005118:	080051e9 	.word	0x080051e9
 800511c:	080051e9 	.word	0x080051e9
 8005120:	080051e9 	.word	0x080051e9
 8005124:	080051e9 	.word	0x080051e9
 8005128:	080051e9 	.word	0x080051e9
 800512c:	080051bd 	.word	0x080051bd
 8005130:	080051e9 	.word	0x080051e9
 8005134:	080051e9 	.word	0x080051e9
 8005138:	080051e9 	.word	0x080051e9
 800513c:	080051e9 	.word	0x080051e9
 8005140:	080051e9 	.word	0x080051e9
 8005144:	080051e9 	.word	0x080051e9
 8005148:	080051e9 	.word	0x080051e9
 800514c:	080051d3 	.word	0x080051d3
 8005150:	080051e9 	.word	0x080051e9
 8005154:	080051e9 	.word	0x080051e9
 8005158:	080051e9 	.word	0x080051e9
 800515c:	080051e9 	.word	0x080051e9
 8005160:	080051e9 	.word	0x080051e9
 8005164:	080051e9 	.word	0x080051e9
 8005168:	080051e9 	.word	0x080051e9
 800516c:	080051f1 	.word	0x080051f1
 8005170:	080051e9 	.word	0x080051e9
 8005174:	080051e9 	.word	0x080051e9
 8005178:	080051e9 	.word	0x080051e9
 800517c:	080051e9 	.word	0x080051e9
 8005180:	080051e9 	.word	0x080051e9
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051e9 	.word	0x080051e9
 800518c:	080051f1 	.word	0x080051f1
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051e9 	.word	0x080051e9
 8005198:	080051e9 	.word	0x080051e9
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051e9 	.word	0x080051e9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051f1 	.word	0x080051f1
 80051b0:	58024400 	.word	0x58024400
 80051b4:	58024800 	.word	0x58024800
 80051b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c0:	3308      	adds	r3, #8
 80051c2:	2101      	movs	r1, #1
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 fdef 	bl	8006da8 <RCCEx_PLL2_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051d0:	e00f      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051d6:	3328      	adds	r3, #40	@ 0x28
 80051d8:	2101      	movs	r1, #1
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 fe96 	bl	8006f0c <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051e6:	e004      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80051f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051fa:	4bc0      	ldr	r3, [pc, #768]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800520a:	4abc      	ldr	r2, [pc, #752]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800520c:	430b      	orrs	r3, r1
 800520e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005210:	e003      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005212:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005216:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800521a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f002 0302 	and.w	r3, r2, #2
 8005226:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800522a:	2300      	movs	r3, #0
 800522c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005230:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005234:	460b      	mov	r3, r1
 8005236:	4313      	orrs	r3, r2
 8005238:	d043      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800523a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800523e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005242:	2b05      	cmp	r3, #5
 8005244:	d824      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005246:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	08005299 	.word	0x08005299
 8005250:	08005265 	.word	0x08005265
 8005254:	0800527b 	.word	0x0800527b
 8005258:	08005299 	.word	0x08005299
 800525c:	08005299 	.word	0x08005299
 8005260:	08005299 	.word	0x08005299
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005268:	3308      	adds	r3, #8
 800526a:	2101      	movs	r1, #1
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fd9b 	bl	8006da8 <RCCEx_PLL2_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005278:	e00f      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800527a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800527e:	3328      	adds	r3, #40	@ 0x28
 8005280:	2101      	movs	r1, #1
 8005282:	4618      	mov	r0, r3
 8005284:	f001 fe42 	bl	8006f0c <RCCEx_PLL3_Config>
 8005288:	4603      	mov	r3, r0
 800528a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800528e:	e004      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005296:	e000      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10b      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052a2:	4b96      	ldr	r3, [pc, #600]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a6:	f023 0107 	bic.w	r1, r3, #7
 80052aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b2:	4a92      	ldr	r2, [pc, #584]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80052b8:	e003      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ca:	f002 0304 	and.w	r3, r2, #4
 80052ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052d8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80052dc:	460b      	mov	r3, r1
 80052de:	4313      	orrs	r3, r2
 80052e0:	d043      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d824      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005341 	.word	0x08005341
 80052f8:	0800530d 	.word	0x0800530d
 80052fc:	08005323 	.word	0x08005323
 8005300:	08005341 	.word	0x08005341
 8005304:	08005341 	.word	0x08005341
 8005308:	08005341 	.word	0x08005341
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800530c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005310:	3308      	adds	r3, #8
 8005312:	2101      	movs	r1, #1
 8005314:	4618      	mov	r0, r3
 8005316:	f001 fd47 	bl	8006da8 <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005320:	e00f      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005326:	3328      	adds	r3, #40	@ 0x28
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f001 fdee 	bl	8006f0c <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005336:	e004      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005342:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800534a:	4b6c      	ldr	r3, [pc, #432]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800534c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534e:	f023 0107 	bic.w	r1, r3, #7
 8005352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005356:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800535a:	4a68      	ldr	r2, [pc, #416]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800535c:	430b      	orrs	r3, r1
 800535e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005360:	e003      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005362:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005366:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800536a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f002 0320 	and.w	r3, r2, #32
 8005376:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800537a:	2300      	movs	r3, #0
 800537c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005384:	460b      	mov	r3, r1
 8005386:	4313      	orrs	r3, r2
 8005388:	d055      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800538a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800538e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005396:	d033      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005398:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800539c:	d82c      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a2:	d02f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a8:	d826      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053ae:	d02b      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80053b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053b4:	d820      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ba:	d012      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80053bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053c0:	d81a      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d022      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80053c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ca:	d115      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d0:	3308      	adds	r3, #8
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f001 fce7 	bl	8006da8 <RCCEx_PLL2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053e0:	e015      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e6:	3328      	adds	r3, #40	@ 0x28
 80053e8:	2102      	movs	r1, #2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 fd8e 	bl	8006f0c <RCCEx_PLL3_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053f6:	e00a      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053fe:	e006      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005400:	bf00      	nop
 8005402:	e004      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005404:	bf00      	nop
 8005406:	e002      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800540c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005416:	4b39      	ldr	r3, [pc, #228]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800541e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005426:	4a35      	ldr	r2, [pc, #212]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005428:	430b      	orrs	r3, r1
 800542a:	6553      	str	r3, [r2, #84]	@ 0x54
 800542c:	e003      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005432:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800544c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005450:	460b      	mov	r3, r1
 8005452:	4313      	orrs	r3, r2
 8005454:	d058      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800545a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800545e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005462:	d033      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005464:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005468:	d82c      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546e:	d02f      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005474:	d826      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005476:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800547a:	d02b      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800547c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005480:	d820      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005486:	d012      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800548c:	d81a      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d022      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005496:	d115      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800549c:	3308      	adds	r3, #8
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 fc81 	bl	8006da8 <RCCEx_PLL2_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054ac:	e015      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054b2:	3328      	adds	r3, #40	@ 0x28
 80054b4:	2102      	movs	r1, #2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fd28 	bl	8006f0c <RCCEx_PLL3_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054c2:	e00a      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054ca:	e006      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054cc:	bf00      	nop
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054d0:	bf00      	nop
 80054d2:	e002      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10e      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054f2:	4a02      	ldr	r2, [pc, #8]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f8:	e006      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80054fa:	bf00      	nop
 80054fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005504:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800551e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005522:	460b      	mov	r3, r1
 8005524:	4313      	orrs	r3, r2
 8005526:	d055      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800552c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005530:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005534:	d033      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005536:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800553a:	d82c      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800553c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005540:	d02f      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005546:	d826      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005548:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800554c:	d02b      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800554e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005552:	d820      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005558:	d012      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800555a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800555e:	d81a      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d022      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005568:	d115      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800556a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800556e:	3308      	adds	r3, #8
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f001 fc18 	bl	8006da8 <RCCEx_PLL2_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800557e:	e015      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005584:	3328      	adds	r3, #40	@ 0x28
 8005586:	2102      	movs	r1, #2
 8005588:	4618      	mov	r0, r3
 800558a:	f001 fcbf 	bl	8006f0c <RCCEx_PLL3_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005594:	e00a      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800559c:	e006      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800559e:	bf00      	nop
 80055a0:	e004      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10b      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055b4:	4ba1      	ldr	r3, [pc, #644]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80055bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055c4:	4a9d      	ldr	r2, [pc, #628]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ca:	e003      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f002 0308 	and.w	r3, r2, #8
 80055e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	d01e      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005600:	d10c      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005606:	3328      	adds	r3, #40	@ 0x28
 8005608:	2102      	movs	r1, #2
 800560a:	4618      	mov	r0, r3
 800560c:	f001 fc7e 	bl	8006f0c <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800561c:	4b87      	ldr	r3, [pc, #540]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800561e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005620:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800562c:	4a83      	ldr	r2, [pc, #524]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800562e:	430b      	orrs	r3, r1
 8005630:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563a:	f002 0310 	and.w	r3, r2, #16
 800563e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005642:	2300      	movs	r3, #0
 8005644:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005648:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800564c:	460b      	mov	r3, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	d01e      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005656:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800565a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800565e:	d10c      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005664:	3328      	adds	r3, #40	@ 0x28
 8005666:	2102      	movs	r1, #2
 8005668:	4618      	mov	r0, r3
 800566a:	f001 fc4f 	bl	8006f0c <RCCEx_PLL3_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800567a:	4b70      	ldr	r3, [pc, #448]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800568a:	4a6c      	ldr	r2, [pc, #432]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800568c:	430b      	orrs	r3, r1
 800568e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800569c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056a0:	2300      	movs	r3, #0
 80056a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056aa:	460b      	mov	r3, r1
 80056ac:	4313      	orrs	r3, r2
 80056ae:	d03e      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80056b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056bc:	d022      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80056be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056c2:	d81b      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056cc:	d00b      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80056ce:	e015      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d4:	3308      	adds	r3, #8
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 fb65 	bl	8006da8 <RCCEx_PLL2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056e4:	e00f      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ea:	3328      	adds	r3, #40	@ 0x28
 80056ec:	2102      	movs	r1, #2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 fc0c 	bl	8006f0c <RCCEx_PLL3_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056fa:	e004      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005702:	e000      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005706:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800570e:	4b4b      	ldr	r3, [pc, #300]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005712:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800571a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800571e:	4a47      	ldr	r2, [pc, #284]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6593      	str	r3, [r2, #88]	@ 0x58
 8005724:	e003      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005726:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800572a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800572e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800573a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800573c:	2300      	movs	r3, #0
 800573e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005740:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d03b      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800574a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005752:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005756:	d01f      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005758:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800575c:	d818      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800575e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005762:	d003      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005764:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005768:	d007      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800576a:	e011      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576c:	4b33      	ldr	r3, [pc, #204]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	4a32      	ldr	r2, [pc, #200]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005778:	e00f      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800577a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800577e:	3328      	adds	r3, #40	@ 0x28
 8005780:	2101      	movs	r1, #1
 8005782:	4618      	mov	r0, r3
 8005784:	f001 fbc2 	bl	8006f0c <RCCEx_PLL3_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800578e:	e004      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057a2:	4b26      	ldr	r3, [pc, #152]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b2:	4a22      	ldr	r2, [pc, #136]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80057b8:	e003      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80057d0:	2300      	movs	r3, #0
 80057d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80057d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057d8:	460b      	mov	r3, r1
 80057da:	4313      	orrs	r3, r2
 80057dc:	d034      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ec:	d007      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80057ee:	e011      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b12      	ldr	r3, [pc, #72]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	4a11      	ldr	r2, [pc, #68]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057fc:	e00e      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005802:	3308      	adds	r3, #8
 8005804:	2102      	movs	r1, #2
 8005806:	4618      	mov	r0, r3
 8005808:	f001 face 	bl	8006da8 <RCCEx_PLL2_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005812:	e003      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800581a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10d      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005824:	4b05      	ldr	r3, [pc, #20]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005828:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800582c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005832:	4a02      	ldr	r2, [pc, #8]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005834:	430b      	orrs	r3, r1
 8005836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005838:	e006      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800583a:	bf00      	nop
 800583c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005844:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005856:	2300      	movs	r3, #0
 8005858:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800585a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d00c      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005868:	3328      	adds	r3, #40	@ 0x28
 800586a:	2102      	movs	r1, #2
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fb4d 	bl	8006f0c <RCCEx_PLL3_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800587e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800588a:	663b      	str	r3, [r7, #96]	@ 0x60
 800588c:	2300      	movs	r3, #0
 800588e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005890:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005894:	460b      	mov	r3, r1
 8005896:	4313      	orrs	r3, r2
 8005898:	d038      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800589a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058a6:	d018      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80058a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ac:	d811      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80058ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b2:	d014      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b8:	d80b      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d011      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80058be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c2:	d106      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c4:	4bc3      	ldr	r3, [pc, #780]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c8:	4ac2      	ldr	r2, [pc, #776]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058d0:	e008      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058d8:	e004      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058da:	bf00      	nop
 80058dc:	e002      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10b      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058ec:	4bb9      	ldr	r3, [pc, #740]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fc:	4ab5      	ldr	r2, [pc, #724]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058fe:	430b      	orrs	r3, r1
 8005900:	6553      	str	r3, [r2, #84]	@ 0x54
 8005902:	e003      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005908:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005918:	65bb      	str	r3, [r7, #88]	@ 0x58
 800591a:	2300      	movs	r3, #0
 800591c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800591e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005922:	460b      	mov	r3, r1
 8005924:	4313      	orrs	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005928:	4baa      	ldr	r3, [pc, #680]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800592a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800592c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005930:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005936:	4aa7      	ldr	r2, [pc, #668]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005938:	430b      	orrs	r3, r1
 800593a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800593c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005948:	653b      	str	r3, [r7, #80]	@ 0x50
 800594a:	2300      	movs	r3, #0
 800594c:	657b      	str	r3, [r7, #84]	@ 0x54
 800594e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005952:	460b      	mov	r3, r1
 8005954:	4313      	orrs	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005958:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800595a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005966:	4a9b      	ldr	r2, [pc, #620]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005968:	430b      	orrs	r3, r1
 800596a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005978:	64bb      	str	r3, [r7, #72]	@ 0x48
 800597a:	2300      	movs	r3, #0
 800597c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800597e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005982:	460b      	mov	r3, r1
 8005984:	4313      	orrs	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005988:	4b92      	ldr	r3, [pc, #584]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800598a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005996:	4a8f      	ldr	r2, [pc, #572]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800599c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80059a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059aa:	2300      	movs	r3, #0
 80059ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80059b2:	460b      	mov	r3, r1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059b8:	4b86      	ldr	r3, [pc, #536]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	4a85      	ldr	r2, [pc, #532]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059c2:	6113      	str	r3, [r2, #16]
 80059c4:	4b83      	ldr	r3, [pc, #524]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059c6:	6919      	ldr	r1, [r3, #16]
 80059c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059d0:	4a80      	ldr	r2, [pc, #512]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059d2:	430b      	orrs	r3, r1
 80059d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80059e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059e4:	2300      	movs	r3, #0
 80059e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059ec:	460b      	mov	r3, r1
 80059ee:	4313      	orrs	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059f2:	4b78      	ldr	r3, [pc, #480]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a00:	4a74      	ldr	r2, [pc, #464]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a02:	430b      	orrs	r3, r1
 8005a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a14:	2300      	movs	r3, #0
 8005a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d00a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a22:	4b6c      	ldr	r3, [pc, #432]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a26:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a32:	4a68      	ldr	r2, [pc, #416]	@ (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	2100      	movs	r1, #0
 8005a42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4313      	orrs	r3, r2
 8005a52:	d011      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a58:	3308      	adds	r3, #8
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f9a3 	bl	8006da8 <RCCEx_PLL2_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	2100      	movs	r1, #0
 8005a82:	6239      	str	r1, [r7, #32]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4313      	orrs	r3, r2
 8005a92:	d011      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a98:	3308      	adds	r3, #8
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f983 	bl	8006da8 <RCCEx_PLL2_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005aa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ab4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	61b9      	str	r1, [r7, #24]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	d011      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad8:	3308      	adds	r3, #8
 8005ada:	2102      	movs	r1, #2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 f963 	bl	8006da8 <RCCEx_PLL2_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005ae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005af4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	2100      	movs	r1, #0
 8005b02:	6139      	str	r1, [r7, #16]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4313      	orrs	r3, r2
 8005b12:	d011      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b18:	3328      	adds	r3, #40	@ 0x28
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 f9f5 	bl	8006f0c <RCCEx_PLL3_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005b28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	2100      	movs	r1, #0
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	d011      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b58:	3328      	adds	r3, #40	@ 0x28
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 f9d5 	bl	8006f0c <RCCEx_PLL3_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	2100      	movs	r1, #0
 8005b82:	6039      	str	r1, [r7, #0]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	607b      	str	r3, [r7, #4]
 8005b8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4313      	orrs	r3, r2
 8005b92:	d011      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b98:	3328      	adds	r3, #40	@ 0x28
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 f9b5 	bl	8006f0c <RCCEx_PLL3_Config>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005ba8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005bb8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400

08005bd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b090      	sub	sp, #64	@ 0x40
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005bea:	430b      	orrs	r3, r1
 8005bec:	f040 8094 	bne.w	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005bf0:	4b97      	ldr	r3, [pc, #604]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	f200 8087 	bhi.w	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005c02:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c1d 	.word	0x08005c1d
 8005c0c:	08005c45 	.word	0x08005c45
 8005c10:	08005c6d 	.word	0x08005c6d
 8005c14:	08005d09 	.word	0x08005d09
 8005c18:	08005c95 	.word	0x08005c95
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c28:	d108      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 ff68 	bl	8006b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c38:	f000 bc97 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c40:	f000 bc93 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c44:	4b82      	ldr	r3, [pc, #520]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c50:	d108      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c52:	f107 0318 	add.w	r3, r7, #24
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fcac 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c60:	f000 bc83 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c68:	f000 bc7f 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c6c:	4b78      	ldr	r3, [pc, #480]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c78:	d108      	bne.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c7a:	f107 030c 	add.w	r3, r7, #12
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fdec 	bl	800685c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c88:	f000 bc6f 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c90:	f000 bc6b 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c94:	4b6e      	ldr	r3, [pc, #440]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cb0:	4b67      	ldr	r3, [pc, #412]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	08db      	lsrs	r3, r3, #3
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	4a66      	ldr	r2, [pc, #408]	@ (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cc2:	e01f      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cc4:	4b62      	ldr	r3, [pc, #392]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cd8:	d102      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005cda:	4b5f      	ldr	r3, [pc, #380]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cde:	e011      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cec:	d106      	bne.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cf4:	d102      	bne.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cf6:	4b59      	ldr	r3, [pc, #356]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cfa:	e003      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005d00:	f000 bc33 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005d04:	f000 bc31 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d08:	4b55      	ldr	r3, [pc, #340]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d0c:	f000 bc2d 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d14:	f000 bc29 	b.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d1c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005d20:	430b      	orrs	r3, r1
 8005d22:	f040 809f 	bne.w	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005d26:	4b4a      	ldr	r3, [pc, #296]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005d2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d36:	d04d      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d3e:	f200 8084 	bhi.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d46:	d07d      	beq.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d4c:	d87d      	bhi.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	2b80      	cmp	r3, #128	@ 0x80
 8005d52:	d02d      	beq.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d56:	2b80      	cmp	r3, #128	@ 0x80
 8005d58:	d877      	bhi.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d012      	beq.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005d66:	e070      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d68:	4b39      	ldr	r3, [pc, #228]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d74:	d107      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fec2 	bl	8006b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d84:	e3f1      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8a:	e3ee      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d8c:	4b30      	ldr	r3, [pc, #192]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d98:	d107      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d9a:	f107 0318 	add.w	r3, r7, #24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fc08 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005da8:	e3df      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dae:	e3dc      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005db0:	4b27      	ldr	r3, [pc, #156]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dbc:	d107      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dbe:	f107 030c 	add.w	r3, r7, #12
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fd4a 	bl	800685c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dcc:	e3cd      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd2:	e3ca      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dde:	4b1c      	ldr	r3, [pc, #112]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005df0:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	4a16      	ldr	r2, [pc, #88]	@ (8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e02:	e01e      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e04:	4b12      	ldr	r3, [pc, #72]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e10:	d106      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e18:	d102      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e1e:	e010      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e20:	4b0b      	ldr	r3, [pc, #44]	@ (8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e2c:	d106      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e34:	d102      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e36:	4b09      	ldr	r3, [pc, #36]	@ (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e3a:	e002      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e40:	e393      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005e42:	e392      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e44:	4b06      	ldr	r3, [pc, #24]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e48:	e38f      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e4e:	e38c      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005e50:	58024400 	.word	0x58024400
 8005e54:	03d09000 	.word	0x03d09000
 8005e58:	003d0900 	.word	0x003d0900
 8005e5c:	016e3600 	.word	0x016e3600
 8005e60:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e68:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	f040 809c 	bne.w	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005e72:	4b9e      	ldr	r3, [pc, #632]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e76:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005e7a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e82:	d054      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e8a:	f200 808b 	bhi.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e94:	f000 8083 	beq.w	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e9e:	f200 8081 	bhi.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea8:	d02f      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb0:	d878      	bhi.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ebe:	d012      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005ec0:	e070      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ec2:	4b8a      	ldr	r3, [pc, #552]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fe15 	bl	8006b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ede:	e344      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee4:	e341      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ee6:	4b81      	ldr	r3, [pc, #516]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ef2:	d107      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ef4:	f107 0318 	add.w	r3, r7, #24
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fb5b 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f02:	e332      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f08:	e32f      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f0a:	4b78      	ldr	r3, [pc, #480]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f16:	d107      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f18:	f107 030c 	add.w	r3, r7, #12
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fc9d 	bl	800685c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f26:	e320      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f2c:	e31d      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f38:	4b6c      	ldr	r3, [pc, #432]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d10c      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f4a:	4b68      	ldr	r3, [pc, #416]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	08db      	lsrs	r3, r3, #3
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	4a66      	ldr	r2, [pc, #408]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005f56:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f5c:	e01e      	b.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f5e:	4b63      	ldr	r3, [pc, #396]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f6a:	d106      	bne.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f72:	d102      	bne.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f74:	4b5f      	ldr	r3, [pc, #380]	@ (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f78:	e010      	b.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f86:	d106      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f8e:	d102      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f90:	4b59      	ldr	r3, [pc, #356]	@ (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f94:	e002      	b.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8005f9a:	e2e6      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005f9c:	e2e5      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f9e:	4b57      	ldr	r3, [pc, #348]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa2:	e2e2      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa8:	e2df      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	f040 80a7 	bne.w	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005fc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fc8:	d055      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd0:	f200 8096 	bhi.w	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fda:	f000 8084 	beq.w	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fe4:	f200 808c 	bhi.w	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fee:	d030      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff6:	f200 8083 	bhi.w	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006006:	d012      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006008:	e07a      	b.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800600a:	4b38      	ldr	r3, [pc, #224]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006016:	d107      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fd71 	bl	8006b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006026:	e2a0      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602c:	e29d      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800602e:	4b2f      	ldr	r3, [pc, #188]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800603a:	d107      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800603c:	f107 0318 	add.w	r3, r7, #24
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fab7 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800604a:	e28e      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006050:	e28b      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006052:	4b26      	ldr	r3, [pc, #152]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800605a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605e:	d107      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fbf9 	bl	800685c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800606e:	e27c      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006074:	e279      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006076:	4b1d      	ldr	r3, [pc, #116]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800607a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800607e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006080:	4b1a      	ldr	r3, [pc, #104]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b04      	cmp	r3, #4
 800608a:	d10c      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800608c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006092:	4b16      	ldr	r3, [pc, #88]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	08db      	lsrs	r3, r3, #3
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	4a14      	ldr	r2, [pc, #80]	@ (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800609e:	fa22 f303 	lsr.w	r3, r2, r3
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060a4:	e01e      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060a6:	4b11      	ldr	r3, [pc, #68]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b2:	d106      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80060b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ba:	d102      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060bc:	4b0d      	ldr	r3, [pc, #52]	@ (80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80060be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060c0:	e010      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060c2:	4b0a      	ldr	r3, [pc, #40]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060ce:	d106      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80060d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d6:	d102      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060d8:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060dc:	e002      	b.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060e2:	e242      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80060e4:	e241      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060e6:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ea:	e23e      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80060ec:	58024400 	.word	0x58024400
 80060f0:	03d09000 	.word	0x03d09000
 80060f4:	003d0900 	.word	0x003d0900
 80060f8:	016e3600 	.word	0x016e3600
 80060fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006104:	e231      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800610a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800610e:	430b      	orrs	r3, r1
 8006110:	f040 8085 	bne.w	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006114:	4b9c      	ldr	r3, [pc, #624]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800611c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800611e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006124:	d06b      	beq.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800612c:	d874      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800612e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006130:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006134:	d056      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006138:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800613c:	d86c      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006144:	d03b      	beq.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006148:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800614c:	d864      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800614e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006154:	d021      	beq.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800615c:	d85c      	bhi.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800615e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800616a:	d004      	beq.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800616c:	e054      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800616e:	f7fe fb5f 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8006172:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006174:	e1f9      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006176:	4b84      	ldr	r3, [pc, #528]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800617e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006182:	d107      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006184:	f107 0318 	add.w	r3, r7, #24
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fa13 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006192:	e1ea      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006194:	2300      	movs	r3, #0
 8006196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006198:	e1e7      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800619a:	4b7b      	ldr	r3, [pc, #492]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061a6:	d107      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a8:	f107 030c 	add.w	r3, r7, #12
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fb55 	bl	800685c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061b6:	e1d8      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061bc:	e1d5      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061be:	4b72      	ldr	r3, [pc, #456]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d109      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061ca:	4b6f      	ldr	r3, [pc, #444]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	08db      	lsrs	r3, r3, #3
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	4a6d      	ldr	r2, [pc, #436]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80061d6:	fa22 f303 	lsr.w	r3, r2, r3
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061dc:	e1c5      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e2:	e1c2      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061e4:	4b68      	ldr	r3, [pc, #416]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061f0:	d102      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80061f2:	4b67      	ldr	r3, [pc, #412]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80061f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061f6:	e1b8      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fc:	e1b5      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061fe:	4b62      	ldr	r3, [pc, #392]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800620a:	d102      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800620c:	4b61      	ldr	r3, [pc, #388]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006210:	e1ab      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006216:	e1a8      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621c:	e1a5      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800621e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006222:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006226:	430b      	orrs	r3, r1
 8006228:	d173      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800622a:	4b57      	ldr	r3, [pc, #348]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800622c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006232:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800623a:	d02f      	beq.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006242:	d863      	bhi.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006250:	d012      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006252:	e05b      	b.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006254:	4b4c      	ldr	r3, [pc, #304]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800625c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006260:	d107      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006262:	f107 0318 	add.w	r3, r7, #24
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f9a4 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006270:	e17b      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006276:	e178      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006278:	4b43      	ldr	r3, [pc, #268]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006284:	d107      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006286:	f107 030c 	add.w	r3, r7, #12
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fae6 	bl	800685c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006294:	e169      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800629a:	e166      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800629c:	4b3a      	ldr	r3, [pc, #232]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800629e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062a6:	4b38      	ldr	r3, [pc, #224]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d10c      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80062b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062b8:	4b33      	ldr	r3, [pc, #204]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	4a32      	ldr	r2, [pc, #200]	@ (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ca:	e01e      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d8:	d106      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80062da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e0:	d102      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80062e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e6:	e010      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062e8:	4b27      	ldr	r3, [pc, #156]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062f4:	d106      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80062f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fc:	d102      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062fe:	4b25      	ldr	r3, [pc, #148]	@ (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006302:	e002      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006308:	e12f      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800630a:	e12e      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006310:	e12b      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006316:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800631a:	430b      	orrs	r3, r1
 800631c:	d13c      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800631e:	4b1a      	ldr	r3, [pc, #104]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006326:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800632e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006334:	d012      	beq.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006336:	e023      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006338:	4b13      	ldr	r3, [pc, #76]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006344:	d107      	bne.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fbda 	bl	8006b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006354:	e109      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800635a:	e106      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800635c:	4b0a      	ldr	r3, [pc, #40]	@ (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006368:	d107      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636a:	f107 0318 	add.w	r3, r7, #24
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f920 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006378:	e0f7      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637e:	e0f4      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006380:	2300      	movs	r3, #0
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006384:	e0f1      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006386:	bf00      	nop
 8006388:	58024400 	.word	0x58024400
 800638c:	03d09000 	.word	0x03d09000
 8006390:	003d0900 	.word	0x003d0900
 8006394:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80063a0:	430b      	orrs	r3, r1
 80063a2:	f040 8091 	bne.w	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80063a6:	4b73      	ldr	r3, [pc, #460]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063aa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80063ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80063b6:	f000 8081 	beq.w	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80063ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80063c0:	d87f      	bhi.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063c8:	d06b      	beq.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063d0:	d877      	bhi.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d8:	d056      	beq.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80063da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e0:	d86f      	bhi.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063e8:	d03b      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063f0:	d867      	bhi.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063f8:	d021      	beq.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006400:	d85f      	bhi.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800640e:	d004      	beq.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006410:	e057      	b.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006412:	f000 f8b9 	bl	8006588 <HAL_RCCEx_GetD3PCLK1Freq>
 8006416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006418:	e0a7      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800641a:	4b56      	ldr	r3, [pc, #344]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006426:	d107      	bne.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006428:	f107 0318 	add.w	r3, r7, #24
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f8c1 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006436:	e098      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800643c:	e095      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800643e:	4b4d      	ldr	r3, [pc, #308]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800644a:	d107      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644c:	f107 030c 	add.w	r3, r7, #12
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fa03 	bl	800685c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800645a:	e086      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006460:	e083      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006462:	4b44      	ldr	r3, [pc, #272]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b04      	cmp	r3, #4
 800646c:	d109      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800646e:	4b41      	ldr	r3, [pc, #260]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	08db      	lsrs	r3, r3, #3
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	4a3f      	ldr	r2, [pc, #252]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800647a:	fa22 f303 	lsr.w	r3, r2, r3
 800647e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006480:	e073      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006486:	e070      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006488:	4b3a      	ldr	r3, [pc, #232]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006494:	d102      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8006496:	4b39      	ldr	r3, [pc, #228]	@ (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800649a:	e066      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a0:	e063      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064a2:	4b34      	ldr	r3, [pc, #208]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ae:	d102      	bne.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80064b0:	4b33      	ldr	r3, [pc, #204]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80064b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b4:	e059      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ba:	e056      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80064bc:	4b31      	ldr	r3, [pc, #196]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c0:	e053      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c6:	e050      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80064c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064cc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80064d0:	430b      	orrs	r3, r1
 80064d2:	d148      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80064d4:	4b27      	ldr	r3, [pc, #156]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80064d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80064de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e4:	d02a      	beq.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064ec:	d838      	bhi.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80064ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064fa:	d00d      	beq.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80064fc:	e030      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800650a:	d102      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800650c:	4b1c      	ldr	r3, [pc, #112]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006510:	e02b      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006516:	e028      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006518:	4b16      	ldr	r3, [pc, #88]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006524:	d107      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800652a:	4618      	mov	r0, r3
 800652c:	f000 faea 	bl	8006b04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006534:	e019      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800653a:	e016      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800653c:	4b0d      	ldr	r3, [pc, #52]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006548:	d107      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800654a:	f107 0318 	add.w	r3, r7, #24
 800654e:	4618      	mov	r0, r3
 8006550:	f000 f830 	bl	80065b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006558:	e007      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655e:	e004      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006564:	e001      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800656a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800656c:	4618      	mov	r0, r3
 800656e:	3740      	adds	r7, #64	@ 0x40
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	58024400 	.word	0x58024400
 8006578:	03d09000 	.word	0x03d09000
 800657c:	003d0900 	.word	0x003d0900
 8006580:	016e3600 	.word	0x016e3600
 8006584:	00bb8000 	.word	0x00bb8000

08006588 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800658c:	f7fe f920 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 8006590:	4602      	mov	r2, r0
 8006592:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	4904      	ldr	r1, [pc, #16]	@ (80065b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800659e:	5ccb      	ldrb	r3, [r1, r3]
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	58024400 	.word	0x58024400
 80065b0:	0800c638 	.word	0x0800c638

080065b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b089      	sub	sp, #36	@ 0x24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80065c6:	4b9f      	ldr	r3, [pc, #636]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ca:	0b1b      	lsrs	r3, r3, #12
 80065cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80065d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	091b      	lsrs	r3, r3, #4
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065de:	4b99      	ldr	r3, [pc, #612]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e2:	08db      	lsrs	r3, r3, #3
 80065e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8111 	beq.w	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b02      	cmp	r3, #2
 8006606:	f000 8083 	beq.w	8006710 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2b02      	cmp	r3, #2
 800660e:	f200 80a1 	bhi.w	8006754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d056      	beq.n	80066cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800661e:	e099      	b.n	8006754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006620:	4b88      	ldr	r3, [pc, #544]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d02d      	beq.n	8006688 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800662c:	4b85      	ldr	r3, [pc, #532]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	4a84      	ldr	r2, [pc, #528]	@ (8006848 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006656:	4b7b      	ldr	r3, [pc, #492]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006666:	ed97 6a03 	vldr	s12, [r7, #12]
 800666a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800684c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800666e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800667a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006686:	e087      	b.n	8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006692:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006850 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800669a:	4b6a      	ldr	r3, [pc, #424]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800669c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800684c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ca:	e065      	b.n	8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066de:	4b59      	ldr	r3, [pc, #356]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80066f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800684c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800670e:	e043      	b.n	8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800671e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006722:	4b48      	ldr	r3, [pc, #288]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006732:	ed97 6a03 	vldr	s12, [r7, #12]
 8006736:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800684c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800673a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006752:	e021      	b.n	8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006766:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006776:	ed97 6a03 	vldr	s12, [r7, #12]
 800677a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800684c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800677e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006796:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006798:	4b2a      	ldr	r3, [pc, #168]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800679a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679c:	0a5b      	lsrs	r3, r3, #9
 800679e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067be:	ee17 2a90 	vmov	r2, s15
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80067c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ec:	ee17 2a90 	vmov	r2, s15
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80067f4:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f8:	0e1b      	lsrs	r3, r3, #24
 80067fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800680a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800680e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800681a:	ee17 2a90 	vmov	r2, s15
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006822:	e008      	b.n	8006836 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	609a      	str	r2, [r3, #8]
}
 8006836:	bf00      	nop
 8006838:	3724      	adds	r7, #36	@ 0x24
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	58024400 	.word	0x58024400
 8006848:	03d09000 	.word	0x03d09000
 800684c:	46000000 	.word	0x46000000
 8006850:	4c742400 	.word	0x4c742400
 8006854:	4a742400 	.word	0x4a742400
 8006858:	4bb71b00 	.word	0x4bb71b00

0800685c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800685c:	b480      	push	{r7}
 800685e:	b089      	sub	sp, #36	@ 0x24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006864:	4ba1      	ldr	r3, [pc, #644]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800686e:	4b9f      	ldr	r3, [pc, #636]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	0d1b      	lsrs	r3, r3, #20
 8006874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006878:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800687a:	4b9c      	ldr	r3, [pc, #624]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800687c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687e:	0a1b      	lsrs	r3, r3, #8
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006886:	4b99      	ldr	r3, [pc, #612]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688a:	08db      	lsrs	r3, r3, #3
 800688c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8111 	beq.w	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	f000 8083 	beq.w	80069b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	f200 80a1 	bhi.w	80069fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d056      	beq.n	8006974 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80068c6:	e099      	b.n	80069fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068c8:	4b88      	ldr	r3, [pc, #544]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d02d      	beq.n	8006930 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068d4:	4b85      	ldr	r3, [pc, #532]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	08db      	lsrs	r3, r3, #3
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	4a84      	ldr	r2, [pc, #528]	@ (8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
 80068e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	ee07 3a90 	vmov	s15, r3
 80068ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fe:	4b7b      	ldr	r3, [pc, #492]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006912:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800692e:	e087      	b.n	8006a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800693e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006942:	4b6a      	ldr	r3, [pc, #424]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006952:	ed97 6a03 	vldr	s12, [r7, #12]
 8006956:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800695a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800696a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006972:	e065      	b.n	8006a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006986:	4b59      	ldr	r3, [pc, #356]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006996:	ed97 6a03 	vldr	s12, [r7, #12]
 800699a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800699e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069b6:	e043      	b.n	8006a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80069c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ca:	4b48      	ldr	r3, [pc, #288]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069da:	ed97 6a03 	vldr	s12, [r7, #12]
 80069de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069fa:	e021      	b.n	8006a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0e:	4b37      	ldr	r3, [pc, #220]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006af4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006a40:	4b2a      	ldr	r3, [pc, #168]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a44:	0a5b      	lsrs	r3, r3, #9
 8006a46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a66:	ee17 2a90 	vmov	r2, s15
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a94:	ee17 2a90 	vmov	r2, s15
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a9c:	4b13      	ldr	r3, [pc, #76]	@ (8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa0:	0e1b      	lsrs	r3, r3, #24
 8006aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ac2:	ee17 2a90 	vmov	r2, s15
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006aca:	e008      	b.n	8006ade <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	609a      	str	r2, [r3, #8]
}
 8006ade:	bf00      	nop
 8006ae0:	3724      	adds	r7, #36	@ 0x24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	58024400 	.word	0x58024400
 8006af0:	03d09000 	.word	0x03d09000
 8006af4:	46000000 	.word	0x46000000
 8006af8:	4c742400 	.word	0x4c742400
 8006afc:	4a742400 	.word	0x4a742400
 8006b00:	4bb71b00 	.word	0x4bb71b00

08006b04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b089      	sub	sp, #36	@ 0x24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b0c:	4ba0      	ldr	r3, [pc, #640]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006b16:	4b9e      	ldr	r3, [pc, #632]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1a:	091b      	lsrs	r3, r3, #4
 8006b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006b22:	4b9b      	ldr	r3, [pc, #620]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b2c:	4b98      	ldr	r3, [pc, #608]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b30:	08db      	lsrs	r3, r3, #3
 8006b32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	fb02 f303 	mul.w	r3, r2, r3
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8111 	beq.w	8006d72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	f000 8083 	beq.w	8006c5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	f200 80a1 	bhi.w	8006ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d056      	beq.n	8006c1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b6c:	e099      	b.n	8006ca2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b6e:	4b88      	ldr	r3, [pc, #544]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d02d      	beq.n	8006bd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b7a:	4b85      	ldr	r3, [pc, #532]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	08db      	lsrs	r3, r3, #3
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	4a83      	ldr	r2, [pc, #524]	@ (8006d94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b86:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba4:	4b7a      	ldr	r3, [pc, #488]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bd4:	e087      	b.n	8006ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	ee07 3a90 	vmov	s15, r3
 8006bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be8:	4b69      	ldr	r3, [pc, #420]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf0:	ee07 3a90 	vmov	s15, r3
 8006bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c18:	e065      	b.n	8006ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	ee07 3a90 	vmov	s15, r3
 8006c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c24:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006da0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2c:	4b58      	ldr	r3, [pc, #352]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c40:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c5c:	e043      	b.n	8006ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c68:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c70:	4b47      	ldr	r3, [pc, #284]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c84:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ca0:	e021      	b.n	8006ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb4:	4b36      	ldr	r3, [pc, #216]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbc:	ee07 3a90 	vmov	s15, r3
 8006cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	0a5b      	lsrs	r3, r3, #9
 8006cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cf0:	ee07 3a90 	vmov	s15, r3
 8006cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d0c:	ee17 2a90 	vmov	r2, s15
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006d14:	4b1e      	ldr	r3, [pc, #120]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d3a:	ee17 2a90 	vmov	r2, s15
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006d42:	4b13      	ldr	r3, [pc, #76]	@ (8006d90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d46:	0e1b      	lsrs	r3, r3, #24
 8006d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d4c:	ee07 3a90 	vmov	s15, r3
 8006d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d68:	ee17 2a90 	vmov	r2, s15
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d70:	e008      	b.n	8006d84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	609a      	str	r2, [r3, #8]
}
 8006d84:	bf00      	nop
 8006d86:	3724      	adds	r7, #36	@ 0x24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	58024400 	.word	0x58024400
 8006d94:	03d09000 	.word	0x03d09000
 8006d98:	46000000 	.word	0x46000000
 8006d9c:	4c742400 	.word	0x4c742400
 8006da0:	4a742400 	.word	0x4a742400
 8006da4:	4bb71b00 	.word	0x4bb71b00

08006da8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006db6:	4b53      	ldr	r3, [pc, #332]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d101      	bne.n	8006dc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e099      	b.n	8006efa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a4e      	ldr	r2, [pc, #312]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006dcc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd2:	f7fa fc87 	bl	80016e4 <HAL_GetTick>
 8006dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dd8:	e008      	b.n	8006dec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dda:	f7fa fc83 	bl	80016e4 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e086      	b.n	8006efa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dec:	4b45      	ldr	r3, [pc, #276]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f0      	bne.n	8006dda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006df8:	4b42      	ldr	r3, [pc, #264]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	031b      	lsls	r3, r3, #12
 8006e06:	493f      	ldr	r1, [pc, #252]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	025b      	lsls	r3, r3, #9
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	061b      	lsls	r3, r3, #24
 8006e38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e3c:	4931      	ldr	r1, [pc, #196]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e42:	4b30      	ldr	r3, [pc, #192]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	492d      	ldr	r1, [pc, #180]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e54:	4b2b      	ldr	r3, [pc, #172]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	f023 0220 	bic.w	r2, r3, #32
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	4928      	ldr	r1, [pc, #160]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e66:	4b27      	ldr	r3, [pc, #156]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6a:	4a26      	ldr	r2, [pc, #152]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e6c:	f023 0310 	bic.w	r3, r3, #16
 8006e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e72:	4b24      	ldr	r3, [pc, #144]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e76:	4b24      	ldr	r3, [pc, #144]	@ (8006f08 <RCCEx_PLL2_Config+0x160>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	69d2      	ldr	r2, [r2, #28]
 8006e7e:	00d2      	lsls	r2, r2, #3
 8006e80:	4920      	ldr	r1, [pc, #128]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e86:	4b1f      	ldr	r3, [pc, #124]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	f043 0310 	orr.w	r3, r3, #16
 8006e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e98:	4b1a      	ldr	r3, [pc, #104]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4a19      	ldr	r2, [pc, #100]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006e9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ea4:	e00f      	b.n	8006ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d106      	bne.n	8006eba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006eac:	4b15      	ldr	r3, [pc, #84]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	4a14      	ldr	r2, [pc, #80]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006eb8:	e005      	b.n	8006ec6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006eba:	4b12      	ldr	r3, [pc, #72]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4a11      	ldr	r2, [pc, #68]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006ec0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a0e      	ldr	r2, [pc, #56]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed2:	f7fa fc07 	bl	80016e4 <HAL_GetTick>
 8006ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ed8:	e008      	b.n	8006eec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006eda:	f7fa fc03 	bl	80016e4 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e006      	b.n	8006efa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eec:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <RCCEx_PLL2_Config+0x15c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0f0      	beq.n	8006eda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	58024400 	.word	0x58024400
 8006f08:	ffff0007 	.word	0xffff0007

08006f0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f1a:	4b53      	ldr	r3, [pc, #332]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d101      	bne.n	8006f2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e099      	b.n	800705e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f36:	f7fa fbd5 	bl	80016e4 <HAL_GetTick>
 8006f3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f3c:	e008      	b.n	8006f50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f3e:	f7fa fbd1 	bl	80016e4 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e086      	b.n	800705e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f50:	4b45      	ldr	r3, [pc, #276]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f0      	bne.n	8006f3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f5c:	4b42      	ldr	r3, [pc, #264]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f60:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	051b      	lsls	r3, r3, #20
 8006f6a:	493f      	ldr	r1, [pc, #252]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	025b      	lsls	r3, r3, #9
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	041b      	lsls	r3, r3, #16
 8006f8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fa0:	4931      	ldr	r1, [pc, #196]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fa6:	4b30      	ldr	r3, [pc, #192]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	492d      	ldr	r1, [pc, #180]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	4928      	ldr	r1, [pc, #160]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006fca:	4b27      	ldr	r3, [pc, #156]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	4a26      	ldr	r2, [pc, #152]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fd6:	4b24      	ldr	r3, [pc, #144]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fda:	4b24      	ldr	r3, [pc, #144]	@ (800706c <RCCEx_PLL3_Config+0x160>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	69d2      	ldr	r2, [r2, #28]
 8006fe2:	00d2      	lsls	r2, r2, #3
 8006fe4:	4920      	ldr	r1, [pc, #128]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fea:	4b1f      	ldr	r3, [pc, #124]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a19      	ldr	r2, [pc, #100]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007002:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007006:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007008:	e00f      	b.n	800702a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d106      	bne.n	800701e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007010:	4b15      	ldr	r3, [pc, #84]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	4a14      	ldr	r2, [pc, #80]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007016:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800701a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800701c:	e005      	b.n	800702a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800701e:	4b12      	ldr	r3, [pc, #72]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	4a11      	ldr	r2, [pc, #68]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007024:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007028:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800702a:	4b0f      	ldr	r3, [pc, #60]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a0e      	ldr	r2, [pc, #56]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007036:	f7fa fb55 	bl	80016e4 <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800703c:	e008      	b.n	8007050 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800703e:	f7fa fb51 	bl	80016e4 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e006      	b.n	800705e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007050:	4b05      	ldr	r3, [pc, #20]	@ (8007068 <RCCEx_PLL3_Config+0x15c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	58024400 	.word	0x58024400
 800706c:	ffff0007 	.word	0xffff0007

08007070 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e02b      	b.n	80070dc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7f9 fb0b 	bl	80006b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f000 f921 	bl	80072f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	461a      	mov	r2, r3
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	f000 f975 	bl	80073b0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80070c6:	4b07      	ldr	r3, [pc, #28]	@ (80070e4 <HAL_SDRAM_Init+0x74>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a06      	ldr	r2, [pc, #24]	@ (80070e4 <HAL_SDRAM_Init+0x74>)
 80070cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070d0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	52004000 	.word	0x52004000

080070e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80070fa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d101      	bne.n	8007106 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007102:	2302      	movs	r3, #2
 8007104:	e021      	b.n	800714a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d002      	beq.n	8007112 <HAL_SDRAM_SendCommand+0x2a>
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b05      	cmp	r3, #5
 8007110:	d118      	bne.n	8007144 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2202      	movs	r2, #2
 8007116:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f9ae 	bl	8007484 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d104      	bne.n	800713a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2205      	movs	r2, #5
 8007134:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007138:	e006      	b.n	8007148 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007142:	e001      	b.n	8007148 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e05e      	b.n	8007224 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fa f808 	bl	8001190 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0203 	bic.w	r2, r2, #3
 8007196:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4b22      	ldr	r3, [pc, #136]	@ (800722c <HAL_SPDIFRX_Init+0xd8>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80071b0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80071b6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80071bc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80071c2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80071c8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80071ce:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80071d4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 80071da:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 80071e0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d103      	bne.n	80071fa <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071f8:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007200:	2b01      	cmp	r3, #1
 8007202:	d103      	bne.n	800720c <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800720a:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	ffc88407 	.word	0xffc88407

08007230 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b10      	ldr	r3, [pc, #64]	@ (8007280 <FMC_NAND_Init+0x50>)
 8007240:	4013      	ands	r3, r2
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	6851      	ldr	r1, [r2, #4]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	6892      	ldr	r2, [r2, #8]
 800724a:	4311      	orrs	r1, r2
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	68d2      	ldr	r2, [r2, #12]
 8007250:	4311      	orrs	r1, r2
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	6912      	ldr	r2, [r2, #16]
 8007256:	4311      	orrs	r1, r2
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	6952      	ldr	r2, [r2, #20]
 800725c:	0252      	lsls	r2, r2, #9
 800725e:	4311      	orrs	r1, r2
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	6992      	ldr	r2, [r2, #24]
 8007264:	0352      	lsls	r2, r2, #13
 8007266:	430a      	orrs	r2, r1
 8007268:	4313      	orrs	r3, r2
 800726a:	f043 0208 	orr.w	r2, r3, #8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	fff00189 	.word	0xfff00189

08007284 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 800729a:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 80072a2:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 80072aa:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 80072d4:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80072dc:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 80072e4:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d121      	bne.n	800734e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4b27      	ldr	r3, [pc, #156]	@ (80073ac <FMC_SDRAM_Init+0xb4>)
 8007310:	4013      	ands	r3, r2
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	6851      	ldr	r1, [r2, #4]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	6892      	ldr	r2, [r2, #8]
 800731a:	4311      	orrs	r1, r2
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	68d2      	ldr	r2, [r2, #12]
 8007320:	4311      	orrs	r1, r2
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	6912      	ldr	r2, [r2, #16]
 8007326:	4311      	orrs	r1, r2
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	6952      	ldr	r2, [r2, #20]
 800732c:	4311      	orrs	r1, r2
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	6992      	ldr	r2, [r2, #24]
 8007332:	4311      	orrs	r1, r2
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	69d2      	ldr	r2, [r2, #28]
 8007338:	4311      	orrs	r1, r2
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	6a12      	ldr	r2, [r2, #32]
 800733e:	4311      	orrs	r1, r2
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007344:	430a      	orrs	r2, r1
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	e026      	b.n	800739c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	69d9      	ldr	r1, [r3, #28]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	4319      	orrs	r1, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	430b      	orrs	r3, r1
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	4b0e      	ldr	r3, [pc, #56]	@ (80073ac <FMC_SDRAM_Init+0xb4>)
 8007372:	4013      	ands	r3, r2
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	6851      	ldr	r1, [r2, #4]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	6892      	ldr	r2, [r2, #8]
 800737c:	4311      	orrs	r1, r2
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	68d2      	ldr	r2, [r2, #12]
 8007382:	4311      	orrs	r1, r2
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	6912      	ldr	r2, [r2, #16]
 8007388:	4311      	orrs	r1, r2
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	6952      	ldr	r2, [r2, #20]
 800738e:	4311      	orrs	r1, r2
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	6992      	ldr	r2, [r2, #24]
 8007394:	430a      	orrs	r2, r1
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	ffff8000 	.word	0xffff8000

080073b0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d128      	bne.n	8007414 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	1e59      	subs	r1, r3, #1
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	4319      	orrs	r1, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	3b01      	subs	r3, #1
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	4319      	orrs	r1, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	031b      	lsls	r3, r3, #12
 80073ec:	4319      	orrs	r1, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	041b      	lsls	r3, r3, #16
 80073f6:	4319      	orrs	r1, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	051b      	lsls	r3, r3, #20
 8007400:	4319      	orrs	r1, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	3b01      	subs	r3, #1
 8007408:	061b      	lsls	r3, r3, #24
 800740a:	430b      	orrs	r3, r1
 800740c:	431a      	orrs	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	609a      	str	r2, [r3, #8]
 8007412:	e02d      	b.n	8007470 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	4b19      	ldr	r3, [pc, #100]	@ (8007480 <FMC_SDRAM_Timing_Init+0xd0>)
 800741a:	4013      	ands	r3, r2
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	68d2      	ldr	r2, [r2, #12]
 8007420:	3a01      	subs	r2, #1
 8007422:	0311      	lsls	r1, r2, #12
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	6952      	ldr	r2, [r2, #20]
 8007428:	3a01      	subs	r2, #1
 800742a:	0512      	lsls	r2, r2, #20
 800742c:	430a      	orrs	r2, r1
 800742e:	431a      	orrs	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	1e59      	subs	r1, r3, #1
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	3b01      	subs	r3, #1
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	4319      	orrs	r1, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	3b01      	subs	r3, #1
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	4319      	orrs	r1, r3
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	3b01      	subs	r3, #1
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	4319      	orrs	r1, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	3b01      	subs	r3, #1
 8007466:	061b      	lsls	r3, r3, #24
 8007468:	430b      	orrs	r3, r1
 800746a:	431a      	orrs	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	ff0f0fff 	.word	0xff0f0fff

08007484 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	4b0c      	ldr	r3, [pc, #48]	@ (80074c8 <FMC_SDRAM_SendCommand+0x44>)
 8007496:	4013      	ands	r3, r2
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	6811      	ldr	r1, [r2, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	6852      	ldr	r2, [r2, #4]
 80074a0:	4311      	orrs	r1, r2
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	6892      	ldr	r2, [r2, #8]
 80074a6:	3a01      	subs	r2, #1
 80074a8:	0152      	lsls	r2, r2, #5
 80074aa:	4311      	orrs	r1, r2
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	68d2      	ldr	r2, [r2, #12]
 80074b0:	0252      	lsls	r2, r2, #9
 80074b2:	430a      	orrs	r2, r1
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	ffc00000 	.word	0xffc00000

080074cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074cc:	b084      	sub	sp, #16
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	f107 001c 	add.w	r0, r7, #28
 80074da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d121      	bne.n	800752a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	4b2c      	ldr	r3, [pc, #176]	@ (80075a8 <USB_CoreInit+0xdc>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800750a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800750e:	2b01      	cmp	r3, #1
 8007510:	d105      	bne.n	800751e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fafa 	bl	8008b18 <USB_CoreReset>
 8007524:	4603      	mov	r3, r0
 8007526:	73fb      	strb	r3, [r7, #15]
 8007528:	e01b      	b.n	8007562 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 faee 	bl	8008b18 <USB_CoreReset>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007540:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800754c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	639a      	str	r2, [r3, #56]	@ 0x38
 8007554:	e005      	b.n	8007562 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007562:	7fbb      	ldrb	r3, [r7, #30]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d116      	bne.n	8007596 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007576:	4b0d      	ldr	r3, [pc, #52]	@ (80075ac <USB_CoreInit+0xe0>)
 8007578:	4313      	orrs	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f043 0206 	orr.w	r2, r3, #6
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075a2:	b004      	add	sp, #16
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	ffbdffbf 	.word	0xffbdffbf
 80075ac:	03ee0000 	.word	0x03ee0000

080075b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d165      	bne.n	8007690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4a41      	ldr	r2, [pc, #260]	@ (80076cc <USB_SetTurnaroundTime+0x11c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d906      	bls.n	80075da <USB_SetTurnaroundTime+0x2a>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4a40      	ldr	r2, [pc, #256]	@ (80076d0 <USB_SetTurnaroundTime+0x120>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d202      	bcs.n	80075da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075d4:	230f      	movs	r3, #15
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e062      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	4a3c      	ldr	r2, [pc, #240]	@ (80076d0 <USB_SetTurnaroundTime+0x120>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d306      	bcc.n	80075f0 <USB_SetTurnaroundTime+0x40>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4a3b      	ldr	r2, [pc, #236]	@ (80076d4 <USB_SetTurnaroundTime+0x124>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d202      	bcs.n	80075f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075ea:	230e      	movs	r3, #14
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e057      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	4a38      	ldr	r2, [pc, #224]	@ (80076d4 <USB_SetTurnaroundTime+0x124>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d306      	bcc.n	8007606 <USB_SetTurnaroundTime+0x56>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4a37      	ldr	r2, [pc, #220]	@ (80076d8 <USB_SetTurnaroundTime+0x128>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d202      	bcs.n	8007606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007600:	230d      	movs	r3, #13
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e04c      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4a33      	ldr	r2, [pc, #204]	@ (80076d8 <USB_SetTurnaroundTime+0x128>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d306      	bcc.n	800761c <USB_SetTurnaroundTime+0x6c>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4a32      	ldr	r2, [pc, #200]	@ (80076dc <USB_SetTurnaroundTime+0x12c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d802      	bhi.n	800761c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007616:	230c      	movs	r3, #12
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	e041      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4a2f      	ldr	r2, [pc, #188]	@ (80076dc <USB_SetTurnaroundTime+0x12c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d906      	bls.n	8007632 <USB_SetTurnaroundTime+0x82>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a2e      	ldr	r2, [pc, #184]	@ (80076e0 <USB_SetTurnaroundTime+0x130>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d802      	bhi.n	8007632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800762c:	230b      	movs	r3, #11
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e036      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4a2a      	ldr	r2, [pc, #168]	@ (80076e0 <USB_SetTurnaroundTime+0x130>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d906      	bls.n	8007648 <USB_SetTurnaroundTime+0x98>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4a29      	ldr	r2, [pc, #164]	@ (80076e4 <USB_SetTurnaroundTime+0x134>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d802      	bhi.n	8007648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007642:	230a      	movs	r3, #10
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	e02b      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4a26      	ldr	r2, [pc, #152]	@ (80076e4 <USB_SetTurnaroundTime+0x134>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d906      	bls.n	800765e <USB_SetTurnaroundTime+0xae>
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4a25      	ldr	r2, [pc, #148]	@ (80076e8 <USB_SetTurnaroundTime+0x138>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d202      	bcs.n	800765e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007658:	2309      	movs	r3, #9
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	e020      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	4a21      	ldr	r2, [pc, #132]	@ (80076e8 <USB_SetTurnaroundTime+0x138>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d306      	bcc.n	8007674 <USB_SetTurnaroundTime+0xc4>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4a20      	ldr	r2, [pc, #128]	@ (80076ec <USB_SetTurnaroundTime+0x13c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d802      	bhi.n	8007674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800766e:	2308      	movs	r3, #8
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	e015      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4a1d      	ldr	r2, [pc, #116]	@ (80076ec <USB_SetTurnaroundTime+0x13c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d906      	bls.n	800768a <USB_SetTurnaroundTime+0xda>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4a1c      	ldr	r2, [pc, #112]	@ (80076f0 <USB_SetTurnaroundTime+0x140>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d202      	bcs.n	800768a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007684:	2307      	movs	r3, #7
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e00a      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800768a:	2306      	movs	r3, #6
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	e007      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007696:	2309      	movs	r3, #9
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e001      	b.n	80076a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800769c:	2309      	movs	r3, #9
 800769e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80076b8:	431a      	orrs	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	00d8acbf 	.word	0x00d8acbf
 80076d0:	00e4e1c0 	.word	0x00e4e1c0
 80076d4:	00f42400 	.word	0x00f42400
 80076d8:	01067380 	.word	0x01067380
 80076dc:	011a499f 	.word	0x011a499f
 80076e0:	01312cff 	.word	0x01312cff
 80076e4:	014ca43f 	.word	0x014ca43f
 80076e8:	016e3600 	.word	0x016e3600
 80076ec:	01a6ab1f 	.word	0x01a6ab1f
 80076f0:	01e84800 	.word	0x01e84800

080076f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f043 0201 	orr.w	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f023 0201 	bic.w	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d115      	bne.n	8007786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007766:	200a      	movs	r0, #10
 8007768:	f7f9 ffc8 	bl	80016fc <HAL_Delay>
      ms += 10U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	330a      	adds	r3, #10
 8007770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 f93f 	bl	80089f6 <USB_GetMode>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d01e      	beq.n	80077bc <USB_SetCurrentMode+0x84>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2bc7      	cmp	r3, #199	@ 0xc7
 8007782:	d9f0      	bls.n	8007766 <USB_SetCurrentMode+0x2e>
 8007784:	e01a      	b.n	80077bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d115      	bne.n	80077b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007798:	200a      	movs	r0, #10
 800779a:	f7f9 ffaf 	bl	80016fc <HAL_Delay>
      ms += 10U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	330a      	adds	r3, #10
 80077a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 f926 	bl	80089f6 <USB_GetMode>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <USB_SetCurrentMode+0x84>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80077b4:	d9f0      	bls.n	8007798 <USB_SetCurrentMode+0x60>
 80077b6:	e001      	b.n	80077bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e005      	b.n	80077c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2bc8      	cmp	r3, #200	@ 0xc8
 80077c0:	d101      	bne.n	80077c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d0:	b084      	sub	sp, #16
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80077de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077ea:	2300      	movs	r3, #0
 80077ec:	613b      	str	r3, [r7, #16]
 80077ee:	e009      	b.n	8007804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	3340      	adds	r3, #64	@ 0x40
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3301      	adds	r3, #1
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b0e      	cmp	r3, #14
 8007808:	d9f2      	bls.n	80077f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800780a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800780e:	2b00      	cmp	r3, #0
 8007810:	d11c      	bne.n	800784c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007820:	f043 0302 	orr.w	r3, r3, #2
 8007824:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	e005      	b.n	8007858 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007850:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800785e:	461a      	mov	r2, r3
 8007860:	2300      	movs	r3, #0
 8007862:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007864:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007868:	2b01      	cmp	r3, #1
 800786a:	d10d      	bne.n	8007888 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800786c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f968 	bl	8007b4c <USB_SetDevSpeed>
 800787c:	e008      	b.n	8007890 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f963 	bl	8007b4c <USB_SetDevSpeed>
 8007886:	e003      	b.n	8007890 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007888:	2103      	movs	r1, #3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f95e 	bl	8007b4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007890:	2110      	movs	r1, #16
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f8fa 	bl	8007a8c <USB_FlushTxFifo>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f924 	bl	8007af0 <USB_FlushRxFifo>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b8:	461a      	mov	r2, r3
 80078ba:	2300      	movs	r3, #0
 80078bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c4:	461a      	mov	r2, r3
 80078c6:	2300      	movs	r3, #0
 80078c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d0:	461a      	mov	r2, r3
 80078d2:	2300      	movs	r3, #0
 80078d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	e043      	b.n	8007964 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078f2:	d118      	bne.n	8007926 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007906:	461a      	mov	r2, r3
 8007908:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	e013      	b.n	8007938 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800791c:	461a      	mov	r2, r3
 800791e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	e008      	b.n	8007938 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007932:	461a      	mov	r2, r3
 8007934:	2300      	movs	r3, #0
 8007936:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007944:	461a      	mov	r2, r3
 8007946:	2300      	movs	r3, #0
 8007948:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007956:	461a      	mov	r2, r3
 8007958:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800795c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007968:	461a      	mov	r2, r3
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	4293      	cmp	r3, r2
 800796e:	d3b5      	bcc.n	80078dc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007970:	2300      	movs	r3, #0
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	e043      	b.n	80079fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007988:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800798c:	d118      	bne.n	80079c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a0:	461a      	mov	r2, r3
 80079a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	e013      	b.n	80079d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b6:	461a      	mov	r2, r3
 80079b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	e008      	b.n	80079d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079cc:	461a      	mov	r2, r3
 80079ce:	2300      	movs	r3, #0
 80079d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079de:	461a      	mov	r2, r3
 80079e0:	2300      	movs	r3, #0
 80079e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f0:	461a      	mov	r2, r3
 80079f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	3301      	adds	r3, #1
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a02:	461a      	mov	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d3b5      	bcc.n	8007976 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007a2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d105      	bne.n	8007a40 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f043 0210 	orr.w	r2, r3, #16
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699a      	ldr	r2, [r3, #24]
 8007a44:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <USB_DevInit+0x2b4>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	f043 0208 	orr.w	r2, r3, #8
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d105      	bne.n	8007a74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699a      	ldr	r2, [r3, #24]
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <USB_DevInit+0x2b8>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a80:	b004      	add	sp, #16
 8007a82:	4770      	bx	lr
 8007a84:	803c3800 	.word	0x803c3800
 8007a88:	40000004 	.word	0x40000004

08007a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aa6:	d901      	bls.n	8007aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e01b      	b.n	8007ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	daf2      	bge.n	8007a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	019b      	lsls	r3, r3, #6
 8007abc:	f043 0220 	orr.w	r2, r3, #32
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ad0:	d901      	bls.n	8007ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e006      	b.n	8007ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d0f0      	beq.n	8007ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b08:	d901      	bls.n	8007b0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e018      	b.n	8007b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	daf2      	bge.n	8007afc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2210      	movs	r2, #16
 8007b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3301      	adds	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b2c:	d901      	bls.n	8007b32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e006      	b.n	8007b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b10      	cmp	r3, #16
 8007b3c:	d0f0      	beq.n	8007b20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b087      	sub	sp, #28
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 0306 	and.w	r3, r3, #6
 8007b96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	75fb      	strb	r3, [r7, #23]
 8007ba2:	e00a      	b.n	8007bba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d002      	beq.n	8007bb0 <USB_GetDevSpeed+0x32>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b06      	cmp	r3, #6
 8007bae:	d102      	bne.n	8007bb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	75fb      	strb	r3, [r7, #23]
 8007bb4:	e001      	b.n	8007bba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007bb6:	230f      	movs	r3, #15
 8007bb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d139      	bne.n	8007c58 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bea:	69da      	ldr	r2, [r3, #28]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	68f9      	ldr	r1, [r7, #12]
 8007bfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c02:	4313      	orrs	r3, r2
 8007c04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d153      	bne.n	8007cc4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	791b      	ldrb	r3, [r3, #4]
 8007c36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	059b      	lsls	r3, r3, #22
 8007c3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	0159      	lsls	r1, r3, #5
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	440b      	add	r3, r1
 8007c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4b20      	ldr	r3, [pc, #128]	@ (8007cd4 <USB_ActivateEndpoint+0x10c>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	600b      	str	r3, [r1, #0]
 8007c56:	e035      	b.n	8007cc4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	2101      	movs	r1, #1
 8007c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6e:	041b      	lsls	r3, r3, #16
 8007c70:	68f9      	ldr	r1, [r7, #12]
 8007c72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c76:	4313      	orrs	r3, r2
 8007c78:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d119      	bne.n	8007cc4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	791b      	ldrb	r3, [r3, #4]
 8007caa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cac:	430b      	orrs	r3, r1
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	0159      	lsls	r1, r3, #5
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	440b      	add	r3, r1
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4b05      	ldr	r3, [pc, #20]	@ (8007cd4 <USB_ActivateEndpoint+0x10c>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	10008000 	.word	0x10008000

08007cd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	785b      	ldrb	r3, [r3, #1]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d161      	bne.n	8007db8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d0a:	d11f      	bne.n	8007d4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	0151      	lsls	r1, r2, #5
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	440a      	add	r2, r1
 8007d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	43db      	mvns	r3, r3
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d76:	69da      	ldr	r2, [r3, #28]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	2101      	movs	r1, #1
 8007d82:	fa01 f303 	lsl.w	r3, r1, r3
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	43db      	mvns	r3, r3
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d90:	4013      	ands	r3, r2
 8007d92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	0159      	lsls	r1, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	440b      	add	r3, r1
 8007daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dae:	4619      	mov	r1, r3
 8007db0:	4b35      	ldr	r3, [pc, #212]	@ (8007e88 <USB_DeactivateEndpoint+0x1b0>)
 8007db2:	4013      	ands	r3, r2
 8007db4:	600b      	str	r3, [r1, #0]
 8007db6:	e060      	b.n	8007e7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dce:	d11f      	bne.n	8007e10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007dee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	0151      	lsls	r1, r2, #5
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	440a      	add	r2, r1
 8007e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	2101      	movs	r1, #1
 8007e22:	fa01 f303 	lsl.w	r3, r1, r3
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	43db      	mvns	r3, r3
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e30:	4013      	ands	r3, r2
 8007e32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	2101      	movs	r1, #1
 8007e46:	fa01 f303 	lsl.w	r3, r1, r3
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	43db      	mvns	r3, r3
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e54:	4013      	ands	r3, r2
 8007e56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	0159      	lsls	r1, r3, #5
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	440b      	add	r3, r1
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e72:	4619      	mov	r1, r3
 8007e74:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <USB_DeactivateEndpoint+0x1b4>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	ec337800 	.word	0xec337800
 8007e8c:	eff37800 	.word	0xeff37800

08007e90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	@ 0x28
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	f040 8185 	bne.w	80081bc <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d132      	bne.n	8007f20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	0159      	lsls	r1, r3, #5
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	440b      	add	r3, r1
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4ba7      	ldr	r3, [pc, #668]	@ (8008174 <USB_EPStartXfer+0x2e4>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ef6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	0159      	lsls	r1, r3, #5
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	440b      	add	r3, r1
 8007f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f16:	4619      	mov	r1, r3
 8007f18:	4b97      	ldr	r3, [pc, #604]	@ (8008178 <USB_EPStartXfer+0x2e8>)
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	610b      	str	r3, [r1, #16]
 8007f1e:	e097      	b.n	8008050 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	0159      	lsls	r1, r3, #5
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	440b      	add	r3, r1
 8007f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8008178 <USB_EPStartXfer+0x2e8>)
 8007f3e:	4013      	ands	r3, r2
 8007f40:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	0159      	lsls	r1, r3, #5
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	440b      	add	r3, r1
 8007f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4b85      	ldr	r3, [pc, #532]	@ (8008174 <USB_EPStartXfer+0x2e4>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d11a      	bne.n	8007fa0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d903      	bls.n	8007f7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f9c:	6113      	str	r3, [r2, #16]
 8007f9e:	e044      	b.n	800802a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	1e5a      	subs	r2, r3, #1
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc2:	691a      	ldr	r2, [r3, #16]
 8007fc4:	8afb      	ldrh	r3, [r7, #22]
 8007fc6:	04d9      	lsls	r1, r3, #19
 8007fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800817c <USB_EPStartXfer+0x2ec>)
 8007fca:	400b      	ands	r3, r1
 8007fcc:	69b9      	ldr	r1, [r7, #24]
 8007fce:	0148      	lsls	r0, r1, #5
 8007fd0:	69f9      	ldr	r1, [r7, #28]
 8007fd2:	4401      	add	r1, r0
 8007fd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	791b      	ldrb	r3, [r3, #4]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d122      	bne.n	800802a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	0151      	lsls	r1, r2, #5
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	440a      	add	r2, r1
 8007ffa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ffe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008002:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008010:	691a      	ldr	r2, [r3, #16]
 8008012:	8afb      	ldrh	r3, [r7, #22]
 8008014:	075b      	lsls	r3, r3, #29
 8008016:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800801a:	69b9      	ldr	r1, [r7, #24]
 800801c:	0148      	lsls	r0, r1, #5
 800801e:	69f9      	ldr	r1, [r7, #28]
 8008020:	4401      	add	r1, r0
 8008022:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008026:	4313      	orrs	r3, r2
 8008028:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008040:	69b9      	ldr	r1, [r7, #24]
 8008042:	0148      	lsls	r0, r1, #5
 8008044:	69f9      	ldr	r1, [r7, #28]
 8008046:	4401      	add	r1, r0
 8008048:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800804c:	4313      	orrs	r3, r2
 800804e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d14b      	bne.n	80080ee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800806a:	461a      	mov	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	791b      	ldrb	r3, [r3, #4]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d128      	bne.n	80080cc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008086:	2b00      	cmp	r3, #0
 8008088:	d110      	bne.n	80080ac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	e00f      	b.n	80080cc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080ca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	e169      	b.n	80083c2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	440a      	add	r2, r1
 8008104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008108:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800810c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	791b      	ldrb	r3, [r3, #4]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d015      	beq.n	8008142 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 8151 	beq.w	80083c2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	f003 030f 	and.w	r3, r3, #15
 8008130:	2101      	movs	r1, #1
 8008132:	fa01 f303 	lsl.w	r3, r1, r3
 8008136:	69f9      	ldr	r1, [r7, #28]
 8008138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800813c:	4313      	orrs	r3, r2
 800813e:	634b      	str	r3, [r1, #52]	@ 0x34
 8008140:	e13f      	b.n	80083c2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800814e:	2b00      	cmp	r3, #0
 8008150:	d116      	bne.n	8008180 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	0151      	lsls	r1, r2, #5
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	440a      	add	r2, r1
 8008168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800816c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	e015      	b.n	80081a0 <USB_EPStartXfer+0x310>
 8008174:	e007ffff 	.word	0xe007ffff
 8008178:	fff80000 	.word	0xfff80000
 800817c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800819a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800819e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	68d9      	ldr	r1, [r3, #12]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	b298      	uxth	r0, r3
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	4603      	mov	r3, r0
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f9b9 	bl	800852c <USB_WritePacket>
 80081ba:	e102      	b.n	80083c2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	0159      	lsls	r1, r3, #5
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	440b      	add	r3, r1
 80081d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d6:	4619      	mov	r1, r3
 80081d8:	4b7c      	ldr	r3, [pc, #496]	@ (80083cc <USB_EPStartXfer+0x53c>)
 80081da:	4013      	ands	r3, r2
 80081dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	0159      	lsls	r1, r3, #5
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	440b      	add	r3, r1
 80081f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f8:	4619      	mov	r1, r3
 80081fa:	4b75      	ldr	r3, [pc, #468]	@ (80083d0 <USB_EPStartXfer+0x540>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d12f      	bne.n	8008266 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	689a      	ldr	r2, [r3, #8]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008234:	69b9      	ldr	r1, [r7, #24]
 8008236:	0148      	lsls	r0, r1, #5
 8008238:	69f9      	ldr	r1, [r7, #28]
 800823a:	4401      	add	r1, r0
 800823c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008240:	4313      	orrs	r3, r2
 8008242:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	69fa      	ldr	r2, [r7, #28]
 8008258:	440a      	add	r2, r1
 800825a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800825e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008262:	6113      	str	r3, [r2, #16]
 8008264:	e05f      	b.n	8008326 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d123      	bne.n	80082b6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827a:	691a      	ldr	r2, [r3, #16]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008284:	69b9      	ldr	r1, [r7, #24]
 8008286:	0148      	lsls	r0, r1, #5
 8008288:	69f9      	ldr	r1, [r7, #28]
 800828a:	4401      	add	r1, r0
 800828c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008290:	4313      	orrs	r3, r2
 8008292:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	0151      	lsls	r1, r2, #5
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	440a      	add	r2, r1
 80082aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082b2:	6113      	str	r3, [r2, #16]
 80082b4:	e037      	b.n	8008326 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	4413      	add	r3, r2
 80082c0:	1e5a      	subs	r2, r3, #1
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ca:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	8afa      	ldrh	r2, [r7, #22]
 80082d2:	fb03 f202 	mul.w	r2, r3, r2
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e6:	691a      	ldr	r2, [r3, #16]
 80082e8:	8afb      	ldrh	r3, [r7, #22]
 80082ea:	04d9      	lsls	r1, r3, #19
 80082ec:	4b39      	ldr	r3, [pc, #228]	@ (80083d4 <USB_EPStartXfer+0x544>)
 80082ee:	400b      	ands	r3, r1
 80082f0:	69b9      	ldr	r1, [r7, #24]
 80082f2:	0148      	lsls	r0, r1, #5
 80082f4:	69f9      	ldr	r1, [r7, #28]
 80082f6:	4401      	add	r1, r0
 80082f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082fc:	4313      	orrs	r3, r2
 80082fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008316:	69b9      	ldr	r1, [r7, #24]
 8008318:	0148      	lsls	r0, r1, #5
 800831a:	69f9      	ldr	r1, [r7, #28]
 800831c:	4401      	add	r1, r0
 800831e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008322:	4313      	orrs	r3, r2
 8008324:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d10d      	bne.n	8008348 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	68d9      	ldr	r1, [r3, #12]
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008344:	460a      	mov	r2, r1
 8008346:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	791b      	ldrb	r3, [r3, #4]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d128      	bne.n	80083a2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800835c:	2b00      	cmp	r3, #0
 800835e:	d110      	bne.n	8008382 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	0151      	lsls	r1, r2, #5
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	440a      	add	r2, r1
 8008376:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800837a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	e00f      	b.n	80083a2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	0151      	lsls	r1, r2, #5
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	440a      	add	r2, r1
 8008398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800839c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083a0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	0151      	lsls	r1, r2, #5
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	440a      	add	r2, r1
 80083b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3720      	adds	r7, #32
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	fff80000 	.word	0xfff80000
 80083d0:	e007ffff 	.word	0xe007ffff
 80083d4:	1ff80000 	.word	0x1ff80000

080083d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d14a      	bne.n	800848c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800840a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800840e:	f040 8086 	bne.w	800851e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	7812      	ldrb	r2, [r2, #0]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	440a      	add	r2, r1
 800842c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008430:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008434:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	7812      	ldrb	r2, [r2, #0]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008458:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008466:	4293      	cmp	r3, r2
 8008468:	d902      	bls.n	8008470 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	75fb      	strb	r3, [r7, #23]
          break;
 800846e:	e056      	b.n	800851e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008488:	d0e7      	beq.n	800845a <USB_EPStopXfer+0x82>
 800848a:	e048      	b.n	800851e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084a4:	d13b      	bne.n	800851e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	7812      	ldrb	r2, [r2, #0]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	0151      	lsls	r1, r2, #5
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	440a      	add	r2, r1
 80084e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3301      	adds	r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d902      	bls.n	8008504 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	75fb      	strb	r3, [r7, #23]
          break;
 8008502:	e00c      	b.n	800851e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800851c:	d0e7      	beq.n	80084ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800851e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008520:	4618      	mov	r0, r3
 8008522:	371c      	adds	r7, #28
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800852c:	b480      	push	{r7}
 800852e:	b089      	sub	sp, #36	@ 0x24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	4611      	mov	r1, r2
 8008538:	461a      	mov	r2, r3
 800853a:	460b      	mov	r3, r1
 800853c:	71fb      	strb	r3, [r7, #7]
 800853e:	4613      	mov	r3, r2
 8008540:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800854a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d123      	bne.n	800859a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008552:	88bb      	ldrh	r3, [r7, #4]
 8008554:	3303      	adds	r3, #3
 8008556:	089b      	lsrs	r3, r3, #2
 8008558:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800855a:	2300      	movs	r3, #0
 800855c:	61bb      	str	r3, [r7, #24]
 800855e:	e018      	b.n	8008592 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	031a      	lsls	r2, r3, #12
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4413      	add	r3, r2
 8008568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800856c:	461a      	mov	r2, r3
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	3301      	adds	r3, #1
 8008578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	3301      	adds	r3, #1
 800857e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	3301      	adds	r3, #1
 8008584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	3301      	adds	r3, #1
 800858a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	3301      	adds	r3, #1
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	429a      	cmp	r2, r3
 8008598:	d3e2      	bcc.n	8008560 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3724      	adds	r7, #36	@ 0x24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b08b      	sub	sp, #44	@ 0x2c
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	089b      	lsrs	r3, r3, #2
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80085c6:	88fb      	ldrh	r3, [r7, #6]
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80085ce:	2300      	movs	r3, #0
 80085d0:	623b      	str	r3, [r7, #32]
 80085d2:	e014      	b.n	80085fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085de:	601a      	str	r2, [r3, #0]
    pDest++;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	3301      	adds	r3, #1
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	3301      	adds	r3, #1
 80085ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	3301      	adds	r3, #1
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80085f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f4:	3301      	adds	r3, #1
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	3301      	adds	r3, #1
 80085fc:	623b      	str	r3, [r7, #32]
 80085fe:	6a3a      	ldr	r2, [r7, #32]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	429a      	cmp	r2, r3
 8008604:	d3e6      	bcc.n	80085d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008606:	8bfb      	ldrh	r3, [r7, #30]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01e      	beq.n	800864a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008616:	461a      	mov	r2, r3
 8008618:	f107 0310 	add.w	r3, r7, #16
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	b2db      	uxtb	r3, r3
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
 800862c:	b2da      	uxtb	r2, r3
 800862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008630:	701a      	strb	r2, [r3, #0]
      i++;
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	3301      	adds	r3, #1
 8008636:	623b      	str	r3, [r7, #32]
      pDest++;
 8008638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863a:	3301      	adds	r3, #1
 800863c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800863e:	8bfb      	ldrh	r3, [r7, #30]
 8008640:	3b01      	subs	r3, #1
 8008642:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008644:	8bfb      	ldrh	r3, [r7, #30]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1ea      	bne.n	8008620 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800864a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800864c:	4618      	mov	r0, r3
 800864e:	372c      	adds	r7, #44	@ 0x2c
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d12c      	bne.n	80086ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	db12      	blt.n	80086ac <USB_EPSetStall+0x54>
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00f      	beq.n	80086ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	0151      	lsls	r1, r2, #5
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	440a      	add	r2, r1
 80086a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	e02b      	b.n	8008726 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	db12      	blt.n	8008706 <USB_EPSetStall+0xae>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00f      	beq.n	8008706 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	0151      	lsls	r1, r2, #5
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	440a      	add	r2, r1
 80086fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008700:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008704:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	440a      	add	r2, r1
 800871c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008724:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d128      	bne.n	80087a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	0151      	lsls	r1, r2, #5
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	440a      	add	r2, r1
 8008766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800876a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800876e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	791b      	ldrb	r3, [r3, #4]
 8008774:	2b03      	cmp	r3, #3
 8008776:	d003      	beq.n	8008780 <USB_EPClearStall+0x4c>
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	791b      	ldrb	r3, [r3, #4]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d138      	bne.n	80087f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	440a      	add	r2, r1
 8008796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800879a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	e027      	b.n	80087f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80087c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	791b      	ldrb	r3, [r3, #4]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d003      	beq.n	80087d2 <USB_EPClearStall+0x9e>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	791b      	ldrb	r3, [r3, #4]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d10f      	bne.n	80087f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	0151      	lsls	r1, r2, #5
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	440a      	add	r2, r1
 80087e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800881e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008822:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008834:	68f9      	ldr	r1, [r7, #12]
 8008836:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800883a:	4313      	orrs	r3, r2
 800883c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008866:	f023 0303 	bic.w	r3, r3, #3
 800886a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800887a:	f023 0302 	bic.w	r3, r3, #2
 800887e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80088a8:	f023 0303 	bic.w	r3, r3, #3
 80088ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088bc:	f043 0302 	orr.w	r3, r3, #2
 80088c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4013      	ands	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088e8:	68fb      	ldr	r3, [r7, #12]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	4013      	ands	r3, r2
 8008918:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	0c1b      	lsrs	r3, r3, #16
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	4013      	ands	r3, r2
 800894c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	b29b      	uxth	r3, r3
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	4013      	ands	r3, r2
 800898a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800898c:	68bb      	ldr	r3, [r7, #8]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800899a:	b480      	push	{r7}
 800899c:	b087      	sub	sp, #28
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	f003 030f 	and.w	r3, r3, #15
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	fa22 f303 	lsr.w	r3, r2, r3
 80089ca:	01db      	lsls	r3, r3, #7
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	4013      	ands	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089e8:	68bb      	ldr	r3, [r7, #8]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	f003 0301 	and.w	r3, r3, #1
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
	...

08008a14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4b09      	ldr	r3, [pc, #36]	@ (8008a58 <USB_ActivateSetup+0x44>)
 8008a32:	4013      	ands	r3, r2
 8008a34:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	fffff800 	.word	0xfffff800

08008a5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	460b      	mov	r3, r1
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	333c      	adds	r3, #60	@ 0x3c
 8008a72:	3304      	adds	r3, #4
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4a26      	ldr	r2, [pc, #152]	@ (8008b14 <USB_EP0_OutStart+0xb8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d90a      	bls.n	8008a96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a90:	d101      	bne.n	8008a96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e037      	b.n	8008b06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ab0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac4:	f043 0318 	orr.w	r3, r3, #24
 8008ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ad8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008adc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d10f      	bne.n	8008b04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	461a      	mov	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008afe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	4f54300a 	.word	0x4f54300a

08008b18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b30:	d901      	bls.n	8008b36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e01b      	b.n	8008b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	daf2      	bge.n	8008b24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	f043 0201 	orr.w	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b5a:	d901      	bls.n	8008b60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e006      	b.n	8008b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d0f0      	beq.n	8008b4e <USB_CoreReset+0x36>

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
	...

08008b7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008b8c:	f002 fd3e 	bl	800b60c <USBD_static_malloc>
 8008b90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	32b0      	adds	r2, #176	@ 0xb0
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e0d4      	b.n	8008d56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008bac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f002 fe8d 	bl	800b8d2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	32b0      	adds	r2, #176	@ 0xb0
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	32b0      	adds	r2, #176	@ 0xb0
 8008bd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7c1b      	ldrb	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d138      	bne.n	8008c56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008be4:	4b5e      	ldr	r3, [pc, #376]	@ (8008d60 <USBD_CDC_Init+0x1e4>)
 8008be6:	7819      	ldrb	r1, [r3, #0]
 8008be8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bec:	2202      	movs	r2, #2
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f002 fbe9 	bl	800b3c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8008d60 <USBD_CDC_Init+0x1e4>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	f003 020f 	and.w	r2, r3, #15
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3324      	adds	r3, #36	@ 0x24
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c0e:	4b55      	ldr	r3, [pc, #340]	@ (8008d64 <USBD_CDC_Init+0x1e8>)
 8008c10:	7819      	ldrb	r1, [r3, #0]
 8008c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c16:	2202      	movs	r2, #2
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f002 fbd4 	bl	800b3c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c1e:	4b51      	ldr	r3, [pc, #324]	@ (8008d64 <USBD_CDC_Init+0x1e8>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	f003 020f 	and.w	r2, r3, #15
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c36:	2201      	movs	r2, #1
 8008c38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008d68 <USBD_CDC_Init+0x1ec>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	f003 020f 	and.w	r2, r3, #15
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	3326      	adds	r3, #38	@ 0x26
 8008c50:	2210      	movs	r2, #16
 8008c52:	801a      	strh	r2, [r3, #0]
 8008c54:	e035      	b.n	8008cc2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c56:	4b42      	ldr	r3, [pc, #264]	@ (8008d60 <USBD_CDC_Init+0x1e4>)
 8008c58:	7819      	ldrb	r1, [r3, #0]
 8008c5a:	2340      	movs	r3, #64	@ 0x40
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f002 fbb1 	bl	800b3c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008c64:	4b3e      	ldr	r3, [pc, #248]	@ (8008d60 <USBD_CDC_Init+0x1e4>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	f003 020f 	and.w	r2, r3, #15
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	440b      	add	r3, r1
 8008c78:	3324      	adds	r3, #36	@ 0x24
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c7e:	4b39      	ldr	r3, [pc, #228]	@ (8008d64 <USBD_CDC_Init+0x1e8>)
 8008c80:	7819      	ldrb	r1, [r3, #0]
 8008c82:	2340      	movs	r3, #64	@ 0x40
 8008c84:	2202      	movs	r2, #2
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 fb9d 	bl	800b3c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c8c:	4b35      	ldr	r3, [pc, #212]	@ (8008d64 <USBD_CDC_Init+0x1e8>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f003 020f 	and.w	r2, r3, #15
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8008d68 <USBD_CDC_Init+0x1ec>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 020f 	and.w	r2, r3, #15
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	3326      	adds	r3, #38	@ 0x26
 8008cbe:	2210      	movs	r2, #16
 8008cc0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008cc2:	4b29      	ldr	r3, [pc, #164]	@ (8008d68 <USBD_CDC_Init+0x1ec>)
 8008cc4:	7819      	ldrb	r1, [r3, #0]
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	2203      	movs	r2, #3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f002 fb7b 	bl	800b3c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008cd0:	4b25      	ldr	r3, [pc, #148]	@ (8008d68 <USBD_CDC_Init+0x1ec>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	f003 020f 	and.w	r2, r3, #15
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	3324      	adds	r3, #36	@ 0x24
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	33b0      	adds	r3, #176	@ 0xb0
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008d20:	2302      	movs	r3, #2
 8008d22:	e018      	b.n	8008d56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7c1b      	ldrb	r3, [r3, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d64 <USBD_CDC_Init+0x1e8>)
 8008d2e:	7819      	ldrb	r1, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f002 fc32 	bl	800b5a4 <USBD_LL_PrepareReceive>
 8008d40:	e008      	b.n	8008d54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d42:	4b08      	ldr	r3, [pc, #32]	@ (8008d64 <USBD_CDC_Init+0x1e8>)
 8008d44:	7819      	ldrb	r1, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d4c:	2340      	movs	r3, #64	@ 0x40
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f002 fc28 	bl	800b5a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	24000097 	.word	0x24000097
 8008d64:	24000098 	.word	0x24000098
 8008d68:	24000099 	.word	0x24000099

08008d6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008d78:	4b3a      	ldr	r3, [pc, #232]	@ (8008e64 <USBD_CDC_DeInit+0xf8>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f002 fb47 	bl	800b412 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008d84:	4b37      	ldr	r3, [pc, #220]	@ (8008e64 <USBD_CDC_DeInit+0xf8>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	3324      	adds	r3, #36	@ 0x24
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008d9e:	4b32      	ldr	r3, [pc, #200]	@ (8008e68 <USBD_CDC_DeInit+0xfc>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f002 fb34 	bl	800b412 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008daa:	4b2f      	ldr	r3, [pc, #188]	@ (8008e68 <USBD_CDC_DeInit+0xfc>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	f003 020f 	and.w	r2, r3, #15
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	440b      	add	r3, r1
 8008dbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008dc6:	4b29      	ldr	r3, [pc, #164]	@ (8008e6c <USBD_CDC_DeInit+0x100>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f002 fb20 	bl	800b412 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008dd2:	4b26      	ldr	r3, [pc, #152]	@ (8008e6c <USBD_CDC_DeInit+0x100>)
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	f003 020f 	and.w	r2, r3, #15
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	3324      	adds	r3, #36	@ 0x24
 8008de8:	2200      	movs	r2, #0
 8008dea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008dec:	4b1f      	ldr	r3, [pc, #124]	@ (8008e6c <USBD_CDC_DeInit+0x100>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	f003 020f 	and.w	r2, r3, #15
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	3326      	adds	r3, #38	@ 0x26
 8008e02:	2200      	movs	r2, #0
 8008e04:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	32b0      	adds	r2, #176	@ 0xb0
 8008e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01f      	beq.n	8008e58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	33b0      	adds	r3, #176	@ 0xb0
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	32b0      	adds	r2, #176	@ 0xb0
 8008e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f002 fbf4 	bl	800b628 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	32b0      	adds	r2, #176	@ 0xb0
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	24000097 	.word	0x24000097
 8008e68:	24000098 	.word	0x24000098
 8008e6c:	24000099 	.word	0x24000099

08008e70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	32b0      	adds	r2, #176	@ 0xb0
 8008e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e0bf      	b.n	8009020 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d050      	beq.n	8008f4e <USBD_CDC_Setup+0xde>
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	f040 80af 	bne.w	8009010 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	88db      	ldrh	r3, [r3, #6]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d03a      	beq.n	8008f30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	b25b      	sxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	da1b      	bge.n	8008efc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	33b0      	adds	r3, #176	@ 0xb0
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008eda:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	88d2      	ldrh	r2, [r2, #6]
 8008ee0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	88db      	ldrh	r3, [r3, #6]
 8008ee6:	2b07      	cmp	r3, #7
 8008ee8:	bf28      	it	cs
 8008eea:	2307      	movcs	r3, #7
 8008eec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	89fa      	ldrh	r2, [r7, #14]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 fdd9 	bl	800aaac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008efa:	e090      	b.n	800901e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	785a      	ldrb	r2, [r3, #1]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	88db      	ldrh	r3, [r3, #6]
 8008f0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8008f0c:	d803      	bhi.n	8008f16 <USBD_CDC_Setup+0xa6>
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	88db      	ldrh	r3, [r3, #6]
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	e000      	b.n	8008f18 <USBD_CDC_Setup+0xa8>
 8008f16:	2240      	movs	r2, #64	@ 0x40
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008f1e:	6939      	ldr	r1, [r7, #16]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008f26:	461a      	mov	r2, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 fdeb 	bl	800ab04 <USBD_CtlPrepareRx>
      break;
 8008f2e:	e076      	b.n	800901e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	33b0      	adds	r3, #176	@ 0xb0
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	7850      	ldrb	r0, [r2, #1]
 8008f46:	2200      	movs	r2, #0
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	4798      	blx	r3
      break;
 8008f4c:	e067      	b.n	800901e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	785b      	ldrb	r3, [r3, #1]
 8008f52:	2b0b      	cmp	r3, #11
 8008f54:	d851      	bhi.n	8008ffa <USBD_CDC_Setup+0x18a>
 8008f56:	a201      	add	r2, pc, #4	@ (adr r2, 8008f5c <USBD_CDC_Setup+0xec>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008f8d 	.word	0x08008f8d
 8008f60:	08009009 	.word	0x08009009
 8008f64:	08008ffb 	.word	0x08008ffb
 8008f68:	08008ffb 	.word	0x08008ffb
 8008f6c:	08008ffb 	.word	0x08008ffb
 8008f70:	08008ffb 	.word	0x08008ffb
 8008f74:	08008ffb 	.word	0x08008ffb
 8008f78:	08008ffb 	.word	0x08008ffb
 8008f7c:	08008ffb 	.word	0x08008ffb
 8008f80:	08008ffb 	.word	0x08008ffb
 8008f84:	08008fb7 	.word	0x08008fb7
 8008f88:	08008fe1 	.word	0x08008fe1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d107      	bne.n	8008fa8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f98:	f107 030a 	add.w	r3, r7, #10
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fd83 	bl	800aaac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fa6:	e032      	b.n	800900e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 fd01 	bl	800a9b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	75fb      	strb	r3, [r7, #23]
          break;
 8008fb4:	e02b      	b.n	800900e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d107      	bne.n	8008fd2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008fc2:	f107 030d 	add.w	r3, r7, #13
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 fd6e 	bl	800aaac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fd0:	e01d      	b.n	800900e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 fcec 	bl	800a9b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8008fde:	e016      	b.n	800900e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d00f      	beq.n	800900c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fcdf 	bl	800a9b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ff8:	e008      	b.n	800900c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fcd8 	bl	800a9b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	75fb      	strb	r3, [r7, #23]
          break;
 8009006:	e002      	b.n	800900e <USBD_CDC_Setup+0x19e>
          break;
 8009008:	bf00      	nop
 800900a:	e008      	b.n	800901e <USBD_CDC_Setup+0x1ae>
          break;
 800900c:	bf00      	nop
      }
      break;
 800900e:	e006      	b.n	800901e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fccd 	bl	800a9b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	75fb      	strb	r3, [r7, #23]
      break;
 800901c:	bf00      	nop
  }

  return (uint8_t)ret;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800903a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32b0      	adds	r2, #176	@ 0xb0
 8009046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800904e:	2303      	movs	r3, #3
 8009050:	e065      	b.n	800911e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	32b0      	adds	r2, #176	@ 0xb0
 800905c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009060:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	f003 020f 	and.w	r2, r3, #15
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	440b      	add	r3, r1
 8009074:	3318      	adds	r3, #24
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d02f      	beq.n	80090dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	f003 020f 	and.w	r2, r3, #15
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	3318      	adds	r3, #24
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	f003 010f 	and.w	r1, r3, #15
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	460b      	mov	r3, r1
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	440b      	add	r3, r1
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4403      	add	r3, r0
 80090a4:	331c      	adds	r3, #28
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d112      	bne.n	80090dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80090b6:	78fb      	ldrb	r3, [r7, #3]
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	3318      	adds	r3, #24
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80090ce:	78f9      	ldrb	r1, [r7, #3]
 80090d0:	2300      	movs	r3, #0
 80090d2:	2200      	movs	r2, #0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f002 fa44 	bl	800b562 <USBD_LL_Transmit>
 80090da:	e01f      	b.n	800911c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	33b0      	adds	r3, #176	@ 0xb0
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d010      	beq.n	800911c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	33b0      	adds	r3, #176	@ 0xb0
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009118:	78fa      	ldrb	r2, [r7, #3]
 800911a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	32b0      	adds	r2, #176	@ 0xb0
 800913c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009140:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	32b0      	adds	r2, #176	@ 0xb0
 800914c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	e01a      	b.n	800918e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f002 fa42 	bl	800b5e6 <USBD_LL_GetRxDataSize>
 8009162:	4602      	mov	r2, r0
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	33b0      	adds	r3, #176	@ 0xb0
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009188:	4611      	mov	r1, r2
 800918a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	32b0      	adds	r2, #176	@ 0xb0
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e024      	b.n	8009202 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	33b0      	adds	r3, #176	@ 0xb0
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d019      	beq.n	8009200 <USBD_CDC_EP0_RxReady+0x6a>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80091d2:	2bff      	cmp	r3, #255	@ 0xff
 80091d4:	d014      	beq.n	8009200 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	33b0      	adds	r3, #176	@ 0xb0
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80091ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80091f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	22ff      	movs	r2, #255	@ 0xff
 80091fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009214:	2182      	movs	r1, #130	@ 0x82
 8009216:	4818      	ldr	r0, [pc, #96]	@ (8009278 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009218:	f000 fd6b 	bl	8009cf2 <USBD_GetEpDesc>
 800921c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800921e:	2101      	movs	r1, #1
 8009220:	4815      	ldr	r0, [pc, #84]	@ (8009278 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009222:	f000 fd66 	bl	8009cf2 <USBD_GetEpDesc>
 8009226:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009228:	2181      	movs	r1, #129	@ 0x81
 800922a:	4813      	ldr	r0, [pc, #76]	@ (8009278 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800922c:	f000 fd61 	bl	8009cf2 <USBD_GetEpDesc>
 8009230:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2210      	movs	r2, #16
 800923c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d006      	beq.n	8009252 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2200      	movs	r2, #0
 8009248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800924c:	711a      	strb	r2, [r3, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d006      	beq.n	8009266 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009260:	711a      	strb	r2, [r3, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2243      	movs	r2, #67	@ 0x43
 800926a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800926c:	4b02      	ldr	r3, [pc, #8]	@ (8009278 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800926e:	4618      	mov	r0, r3
 8009270:	3718      	adds	r7, #24
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	24000054 	.word	0x24000054

0800927c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009284:	2182      	movs	r1, #130	@ 0x82
 8009286:	4818      	ldr	r0, [pc, #96]	@ (80092e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009288:	f000 fd33 	bl	8009cf2 <USBD_GetEpDesc>
 800928c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800928e:	2101      	movs	r1, #1
 8009290:	4815      	ldr	r0, [pc, #84]	@ (80092e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009292:	f000 fd2e 	bl	8009cf2 <USBD_GetEpDesc>
 8009296:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009298:	2181      	movs	r1, #129	@ 0x81
 800929a:	4813      	ldr	r0, [pc, #76]	@ (80092e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800929c:	f000 fd29 	bl	8009cf2 <USBD_GetEpDesc>
 80092a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2210      	movs	r2, #16
 80092ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2200      	movs	r2, #0
 80092b8:	711a      	strb	r2, [r3, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f042 0202 	orr.w	r2, r2, #2
 80092c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d006      	beq.n	80092d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	711a      	strb	r2, [r3, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f042 0202 	orr.w	r2, r2, #2
 80092d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2243      	movs	r2, #67	@ 0x43
 80092da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092dc:	4b02      	ldr	r3, [pc, #8]	@ (80092e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	24000054 	.word	0x24000054

080092ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092f4:	2182      	movs	r1, #130	@ 0x82
 80092f6:	4818      	ldr	r0, [pc, #96]	@ (8009358 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80092f8:	f000 fcfb 	bl	8009cf2 <USBD_GetEpDesc>
 80092fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092fe:	2101      	movs	r1, #1
 8009300:	4815      	ldr	r0, [pc, #84]	@ (8009358 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009302:	f000 fcf6 	bl	8009cf2 <USBD_GetEpDesc>
 8009306:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009308:	2181      	movs	r1, #129	@ 0x81
 800930a:	4813      	ldr	r0, [pc, #76]	@ (8009358 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800930c:	f000 fcf1 	bl	8009cf2 <USBD_GetEpDesc>
 8009310:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2210      	movs	r2, #16
 800931c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d006      	beq.n	8009332 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2200      	movs	r2, #0
 8009328:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800932c:	711a      	strb	r2, [r3, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d006      	beq.n	8009346 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009340:	711a      	strb	r2, [r3, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2243      	movs	r2, #67	@ 0x43
 800934a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800934c:	4b02      	ldr	r3, [pc, #8]	@ (8009358 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	24000054 	.word	0x24000054

0800935c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	220a      	movs	r2, #10
 8009368:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800936a:	4b03      	ldr	r3, [pc, #12]	@ (8009378 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	24000010 	.word	0x24000010

0800937c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	e009      	b.n	80093a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	33b0      	adds	r3, #176	@ 0xb0
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	32b0      	adds	r2, #176	@ 0xb0
 80093c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e008      	b.n	80093e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	32b0      	adds	r2, #176	@ 0xb0
 8009408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009414:	2303      	movs	r3, #3
 8009416:	e004      	b.n	8009422 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
	...

08009430 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	32b0      	adds	r2, #176	@ 0xb0
 8009442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009446:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009448:	2301      	movs	r3, #1
 800944a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009452:	2303      	movs	r3, #3
 8009454:	e025      	b.n	80094a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800945c:	2b00      	cmp	r3, #0
 800945e:	d11f      	bne.n	80094a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2201      	movs	r2, #1
 8009464:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009468:	4b10      	ldr	r3, [pc, #64]	@ (80094ac <USBD_CDC_TransmitPacket+0x7c>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	f003 020f 	and.w	r2, r3, #15
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4403      	add	r3, r0
 8009482:	3318      	adds	r3, #24
 8009484:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009486:	4b09      	ldr	r3, [pc, #36]	@ (80094ac <USBD_CDC_TransmitPacket+0x7c>)
 8009488:	7819      	ldrb	r1, [r3, #0]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f002 f863 	bl	800b562 <USBD_LL_Transmit>

    ret = USBD_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	24000097 	.word	0x24000097

080094b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	32b0      	adds	r2, #176	@ 0xb0
 80094c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	32b0      	adds	r2, #176	@ 0xb0
 80094d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80094da:	2303      	movs	r3, #3
 80094dc:	e018      	b.n	8009510 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	7c1b      	ldrb	r3, [r3, #16]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10a      	bne.n	80094fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009518 <USBD_CDC_ReceivePacket+0x68>)
 80094e8:	7819      	ldrb	r1, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f002 f855 	bl	800b5a4 <USBD_LL_PrepareReceive>
 80094fa:	e008      	b.n	800950e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094fc:	4b06      	ldr	r3, [pc, #24]	@ (8009518 <USBD_CDC_ReceivePacket+0x68>)
 80094fe:	7819      	ldrb	r1, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009506:	2340      	movs	r3, #64	@ 0x40
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f002 f84b 	bl	800b5a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	24000098 	.word	0x24000098

0800951c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	4613      	mov	r3, r2
 8009528:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009530:	4817      	ldr	r0, [pc, #92]	@ (8009590 <USBD_Init+0x74>)
 8009532:	f002 f971 	bl	800b818 <iprintf>
 8009536:	4817      	ldr	r0, [pc, #92]	@ (8009594 <USBD_Init+0x78>)
 8009538:	f002 f96e 	bl	800b818 <iprintf>
 800953c:	200a      	movs	r0, #10
 800953e:	f002 f97d 	bl	800b83c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009542:	2303      	movs	r3, #3
 8009544:	e01f      	b.n	8009586 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	79fa      	ldrb	r2, [r7, #7]
 8009578:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f001 feb6 	bl	800b2ec <USBD_LL_Init>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	0800c5b8 	.word	0x0800c5b8
 8009594:	0800c5c0 	.word	0x0800c5c0

08009598 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80095ac:	481a      	ldr	r0, [pc, #104]	@ (8009618 <USBD_RegisterClass+0x80>)
 80095ae:	f002 f933 	bl	800b818 <iprintf>
 80095b2:	481a      	ldr	r0, [pc, #104]	@ (800961c <USBD_RegisterClass+0x84>)
 80095b4:	f002 f930 	bl	800b818 <iprintf>
 80095b8:	200a      	movs	r0, #10
 80095ba:	f002 f93f 	bl	800b83c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095be:	2303      	movs	r3, #3
 80095c0:	e025      	b.n	800960e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	32ae      	adds	r2, #174	@ 0xae
 80095d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00f      	beq.n	80095fe <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	32ae      	adds	r2, #174	@ 0xae
 80095e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ee:	f107 020e 	add.w	r2, r7, #14
 80095f2:	4610      	mov	r0, r2
 80095f4:	4798      	blx	r3
 80095f6:	4602      	mov	r2, r0
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009604:	1c5a      	adds	r2, r3, #1
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	0800c5b8 	.word	0x0800c5b8
 800961c:	0800c5d8 	.word	0x0800c5d8

08009620 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 feb1 	bl	800b390 <USBD_LL_Start>
 800962e:	4603      	mov	r3, r0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009642:	4618      	mov	r0, r3
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009664:	2b00      	cmp	r3, #0
 8009666:	d009      	beq.n	800967c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	78fa      	ldrb	r2, [r7, #3]
 8009672:	4611      	mov	r1, r2
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	4798      	blx	r3
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800967c:	7bfb      	ldrb	r3, [r7, #15]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	78fa      	ldrb	r2, [r7, #3]
 80096a0:	4611      	mov	r1, r2
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80096ac:	2303      	movs	r3, #3
 80096ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f001 f936 	bl	800a93e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80096e0:	461a      	mov	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096ee:	f003 031f 	and.w	r3, r3, #31
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d01a      	beq.n	800972c <USBD_LL_SetupStage+0x72>
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d822      	bhi.n	8009740 <USBD_LL_SetupStage+0x86>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <USBD_LL_SetupStage+0x4a>
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d00a      	beq.n	8009718 <USBD_LL_SetupStage+0x5e>
 8009702:	e01d      	b.n	8009740 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fb63 	bl	8009dd8 <USBD_StdDevReq>
 8009712:	4603      	mov	r3, r0
 8009714:	73fb      	strb	r3, [r7, #15]
      break;
 8009716:	e020      	b.n	800975a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fbcb 	bl	8009ebc <USBD_StdItfReq>
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]
      break;
 800972a:	e016      	b.n	800975a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fc2d 	bl	8009f94 <USBD_StdEPReq>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]
      break;
 800973e:	e00c      	b.n	800975a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009746:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800974a:	b2db      	uxtb	r3, r3
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 fe7e 	bl	800b450 <USBD_LL_StallEP>
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
      break;
 8009758:	bf00      	nop
  }

  return ret;
 800975a:	7bfb      	ldrb	r3, [r7, #15]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	460b      	mov	r3, r1
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009776:	7afb      	ldrb	r3, [r7, #11]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d16e      	bne.n	800985a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009782:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800978a:	2b03      	cmp	r3, #3
 800978c:	f040 8098 	bne.w	80098c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	429a      	cmp	r2, r3
 800979a:	d913      	bls.n	80097c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	1ad2      	subs	r2, r2, r3
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	4293      	cmp	r3, r2
 80097b4:	bf28      	it	cs
 80097b6:	4613      	movcs	r3, r2
 80097b8:	461a      	mov	r2, r3
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f001 f9be 	bl	800ab3e <USBD_CtlContinueRx>
 80097c2:	e07d      	b.n	80098c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097ca:	f003 031f 	and.w	r3, r3, #31
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d014      	beq.n	80097fc <USBD_LL_DataOutStage+0x98>
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d81d      	bhi.n	8009812 <USBD_LL_DataOutStage+0xae>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <USBD_LL_DataOutStage+0x7c>
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d003      	beq.n	80097e6 <USBD_LL_DataOutStage+0x82>
 80097de:	e018      	b.n	8009812 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	75bb      	strb	r3, [r7, #22]
            break;
 80097e4:	e018      	b.n	8009818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	4619      	mov	r1, r3
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fa64 	bl	8009cbe <USBD_CoreFindIF>
 80097f6:	4603      	mov	r3, r0
 80097f8:	75bb      	strb	r3, [r7, #22]
            break;
 80097fa:	e00d      	b.n	8009818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009802:	b2db      	uxtb	r3, r3
 8009804:	4619      	mov	r1, r3
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fa66 	bl	8009cd8 <USBD_CoreFindEP>
 800980c:	4603      	mov	r3, r0
 800980e:	75bb      	strb	r3, [r7, #22]
            break;
 8009810:	e002      	b.n	8009818 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	75bb      	strb	r3, [r7, #22]
            break;
 8009816:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009818:	7dbb      	ldrb	r3, [r7, #22]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d119      	bne.n	8009852 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b03      	cmp	r3, #3
 8009828:	d113      	bne.n	8009852 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800982a:	7dba      	ldrb	r2, [r7, #22]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	32ae      	adds	r2, #174	@ 0xae
 8009830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00b      	beq.n	8009852 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800983a:	7dba      	ldrb	r2, [r7, #22]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009842:	7dba      	ldrb	r2, [r7, #22]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	32ae      	adds	r2, #174	@ 0xae
 8009848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f001 f984 	bl	800ab60 <USBD_CtlSendStatus>
 8009858:	e032      	b.n	80098c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800985a:	7afb      	ldrb	r3, [r7, #11]
 800985c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009860:	b2db      	uxtb	r3, r3
 8009862:	4619      	mov	r1, r3
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fa37 	bl	8009cd8 <USBD_CoreFindEP>
 800986a:	4603      	mov	r3, r0
 800986c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800986e:	7dbb      	ldrb	r3, [r7, #22]
 8009870:	2bff      	cmp	r3, #255	@ 0xff
 8009872:	d025      	beq.n	80098c0 <USBD_LL_DataOutStage+0x15c>
 8009874:	7dbb      	ldrb	r3, [r7, #22]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d122      	bne.n	80098c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b03      	cmp	r3, #3
 8009884:	d117      	bne.n	80098b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009886:	7dba      	ldrb	r2, [r7, #22]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	32ae      	adds	r2, #174	@ 0xae
 800988c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00f      	beq.n	80098b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009896:	7dba      	ldrb	r2, [r7, #22]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800989e:	7dba      	ldrb	r2, [r7, #22]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	32ae      	adds	r2, #174	@ 0xae
 80098a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	7afa      	ldrb	r2, [r7, #11]
 80098ac:	4611      	mov	r1, r2
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	4798      	blx	r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	e000      	b.n	80098c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b086      	sub	sp, #24
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	460b      	mov	r3, r1
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80098d8:	7afb      	ldrb	r3, [r7, #11]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d16f      	bne.n	80099be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3314      	adds	r3, #20
 80098e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d15a      	bne.n	80099a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	689a      	ldr	r2, [r3, #8]
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d914      	bls.n	8009924 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	1ad2      	subs	r2, r2, r3
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	461a      	mov	r2, r3
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f001 f8e6 	bl	800aae2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009916:	2300      	movs	r3, #0
 8009918:	2200      	movs	r2, #0
 800991a:	2100      	movs	r1, #0
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f001 fe41 	bl	800b5a4 <USBD_LL_PrepareReceive>
 8009922:	e03f      	b.n	80099a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	68da      	ldr	r2, [r3, #12]
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	429a      	cmp	r2, r3
 800992e:	d11c      	bne.n	800996a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009938:	429a      	cmp	r2, r3
 800993a:	d316      	bcc.n	800996a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009946:	429a      	cmp	r2, r3
 8009948:	d20f      	bcs.n	800996a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800994a:	2200      	movs	r2, #0
 800994c:	2100      	movs	r1, #0
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 f8c7 	bl	800aae2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800995c:	2300      	movs	r3, #0
 800995e:	2200      	movs	r2, #0
 8009960:	2100      	movs	r1, #0
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f001 fe1e 	bl	800b5a4 <USBD_LL_PrepareReceive>
 8009968:	e01c      	b.n	80099a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b03      	cmp	r3, #3
 8009974:	d10f      	bne.n	8009996 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009996:	2180      	movs	r1, #128	@ 0x80
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f001 fd59 	bl	800b450 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f001 f8f1 	bl	800ab86 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d03a      	beq.n	8009a24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f7ff fe42 	bl	8009638 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80099bc:	e032      	b.n	8009a24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	4619      	mov	r1, r3
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f985 	bl	8009cd8 <USBD_CoreFindEP>
 80099ce:	4603      	mov	r3, r0
 80099d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	2bff      	cmp	r3, #255	@ 0xff
 80099d6:	d025      	beq.n	8009a24 <USBD_LL_DataInStage+0x15a>
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d122      	bne.n	8009a24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d11c      	bne.n	8009a24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80099ea:	7dfa      	ldrb	r2, [r7, #23]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	32ae      	adds	r2, #174	@ 0xae
 80099f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d014      	beq.n	8009a24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80099fa:	7dfa      	ldrb	r2, [r7, #23]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009a02:	7dfa      	ldrb	r2, [r7, #23]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	32ae      	adds	r2, #174	@ 0xae
 8009a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	7afa      	ldrb	r2, [r7, #11]
 8009a10:	4611      	mov	r1, r2
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	4798      	blx	r3
 8009a16:	4603      	mov	r3, r0
 8009a18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009a1a:	7dbb      	ldrb	r3, [r7, #22]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009a20:	7dbb      	ldrb	r3, [r7, #22]
 8009a22:	e000      	b.n	8009a26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d014      	beq.n	8009a94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00e      	beq.n	8009a94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6852      	ldr	r2, [r2, #4]
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	4611      	mov	r1, r2
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a90:	2303      	movs	r3, #3
 8009a92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a94:	2340      	movs	r3, #64	@ 0x40
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fc93 	bl	800b3c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2240      	movs	r2, #64	@ 0x40
 8009aac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ab0:	2340      	movs	r3, #64	@ 0x40
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2180      	movs	r1, #128	@ 0x80
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f001 fc85 	bl	800b3c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2240      	movs	r2, #64	@ 0x40
 8009ac6:	621a      	str	r2, [r3, #32]

  return ret;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	78fa      	ldrb	r2, [r7, #3]
 8009ae2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d006      	beq.n	8009b14 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2204      	movs	r2, #4
 8009b18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b04      	cmp	r3, #4
 8009b3c:	d106      	bne.n	8009b4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d110      	bne.n	8009b90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	32ae      	adds	r2, #174	@ 0xae
 8009bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e01c      	b.n	8009bf6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d115      	bne.n	8009bf4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	32ae      	adds	r2, #174	@ 0xae
 8009bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00b      	beq.n	8009bf4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	32ae      	adds	r2, #174	@ 0xae
 8009be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	78fa      	ldrb	r2, [r7, #3]
 8009bee:	4611      	mov	r1, r2
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	32ae      	adds	r2, #174	@ 0xae
 8009c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e01c      	b.n	8009c5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d115      	bne.n	8009c58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	32ae      	adds	r2, #174	@ 0xae
 8009c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	32ae      	adds	r2, #174	@ 0xae
 8009c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c50:	78fa      	ldrb	r2, [r7, #3]
 8009c52:	4611      	mov	r1, r2
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b083      	sub	sp, #12
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00e      	beq.n	8009cb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	6852      	ldr	r2, [r2, #4]
 8009ca2:	b2d2      	uxtb	r2, r2
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ce4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b086      	sub	sp, #24
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	885b      	ldrh	r3, [r3, #2]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	7812      	ldrb	r2, [r2, #0]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d91f      	bls.n	8009d58 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009d1e:	e013      	b.n	8009d48 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009d20:	f107 030a 	add.w	r3, r7, #10
 8009d24:	4619      	mov	r1, r3
 8009d26:	6978      	ldr	r0, [r7, #20]
 8009d28:	f000 f81b 	bl	8009d62 <USBD_GetNextDesc>
 8009d2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	785b      	ldrb	r3, [r3, #1]
 8009d32:	2b05      	cmp	r3, #5
 8009d34:	d108      	bne.n	8009d48 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	789b      	ldrb	r3, [r3, #2]
 8009d3e:	78fa      	ldrb	r2, [r7, #3]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d008      	beq.n	8009d56 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	885b      	ldrh	r3, [r3, #2]
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	897b      	ldrh	r3, [r7, #10]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d8e5      	bhi.n	8009d20 <USBD_GetEpDesc+0x2e>
 8009d54:	e000      	b.n	8009d58 <USBD_GetEpDesc+0x66>
          break;
 8009d56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d58:	693b      	ldr	r3, [r7, #16]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	7812      	ldrb	r2, [r2, #0]
 8009d78:	4413      	add	r3, r2
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4413      	add	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b087      	sub	sp, #28
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	3301      	adds	r3, #1
 8009db0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009db8:	8a3b      	ldrh	r3, [r7, #16]
 8009dba:	021b      	lsls	r3, r3, #8
 8009dbc:	b21a      	sxth	r2, r3
 8009dbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	b21b      	sxth	r3, r3
 8009dc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009dc8:	89fb      	ldrh	r3, [r7, #14]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	371c      	adds	r7, #28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
	...

08009dd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009dee:	2b40      	cmp	r3, #64	@ 0x40
 8009df0:	d005      	beq.n	8009dfe <USBD_StdDevReq+0x26>
 8009df2:	2b40      	cmp	r3, #64	@ 0x40
 8009df4:	d857      	bhi.n	8009ea6 <USBD_StdDevReq+0xce>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00f      	beq.n	8009e1a <USBD_StdDevReq+0x42>
 8009dfa:	2b20      	cmp	r3, #32
 8009dfc:	d153      	bne.n	8009ea6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	32ae      	adds	r2, #174	@ 0xae
 8009e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	4798      	blx	r3
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]
      break;
 8009e18:	e04a      	b.n	8009eb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	2b09      	cmp	r3, #9
 8009e20:	d83b      	bhi.n	8009e9a <USBD_StdDevReq+0xc2>
 8009e22:	a201      	add	r2, pc, #4	@ (adr r2, 8009e28 <USBD_StdDevReq+0x50>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009e7d 	.word	0x08009e7d
 8009e2c:	08009e91 	.word	0x08009e91
 8009e30:	08009e9b 	.word	0x08009e9b
 8009e34:	08009e87 	.word	0x08009e87
 8009e38:	08009e9b 	.word	0x08009e9b
 8009e3c:	08009e5b 	.word	0x08009e5b
 8009e40:	08009e51 	.word	0x08009e51
 8009e44:	08009e9b 	.word	0x08009e9b
 8009e48:	08009e73 	.word	0x08009e73
 8009e4c:	08009e65 	.word	0x08009e65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fa3c 	bl	800a2d0 <USBD_GetDescriptor>
          break;
 8009e58:	e024      	b.n	8009ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fbcb 	bl	800a5f8 <USBD_SetAddress>
          break;
 8009e62:	e01f      	b.n	8009ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fc0a 	bl	800a680 <USBD_SetConfig>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8009e70:	e018      	b.n	8009ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fcad 	bl	800a7d4 <USBD_GetConfig>
          break;
 8009e7a:	e013      	b.n	8009ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fcde 	bl	800a840 <USBD_GetStatus>
          break;
 8009e84:	e00e      	b.n	8009ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fd0d 	bl	800a8a8 <USBD_SetFeature>
          break;
 8009e8e:	e009      	b.n	8009ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fd31 	bl	800a8fa <USBD_ClrFeature>
          break;
 8009e98:	e004      	b.n	8009ea4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fd88 	bl	800a9b2 <USBD_CtlError>
          break;
 8009ea2:	bf00      	nop
      }
      break;
 8009ea4:	e004      	b.n	8009eb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fd82 	bl	800a9b2 <USBD_CtlError>
      break;
 8009eae:	bf00      	nop
  }

  return ret;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop

08009ebc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ed2:	2b40      	cmp	r3, #64	@ 0x40
 8009ed4:	d005      	beq.n	8009ee2 <USBD_StdItfReq+0x26>
 8009ed6:	2b40      	cmp	r3, #64	@ 0x40
 8009ed8:	d852      	bhi.n	8009f80 <USBD_StdItfReq+0xc4>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <USBD_StdItfReq+0x26>
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d14e      	bne.n	8009f80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	3b01      	subs	r3, #1
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d840      	bhi.n	8009f72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	889b      	ldrh	r3, [r3, #4]
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d836      	bhi.n	8009f68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	889b      	ldrh	r3, [r3, #4]
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff fedb 	bl	8009cbe <USBD_CoreFindIF>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	2bff      	cmp	r3, #255	@ 0xff
 8009f10:	d01d      	beq.n	8009f4e <USBD_StdItfReq+0x92>
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d11a      	bne.n	8009f4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009f18:	7bba      	ldrb	r2, [r7, #14]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	32ae      	adds	r2, #174	@ 0xae
 8009f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00f      	beq.n	8009f48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f28:	7bba      	ldrb	r2, [r7, #14]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f30:	7bba      	ldrb	r2, [r7, #14]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	32ae      	adds	r2, #174	@ 0xae
 8009f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f46:	e004      	b.n	8009f52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f4c:	e001      	b.n	8009f52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	88db      	ldrh	r3, [r3, #6]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d110      	bne.n	8009f7c <USBD_StdItfReq+0xc0>
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10d      	bne.n	8009f7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fdfd 	bl	800ab60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f66:	e009      	b.n	8009f7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fd21 	bl	800a9b2 <USBD_CtlError>
          break;
 8009f70:	e004      	b.n	8009f7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fd1c 	bl	800a9b2 <USBD_CtlError>
          break;
 8009f7a:	e000      	b.n	8009f7e <USBD_StdItfReq+0xc2>
          break;
 8009f7c:	bf00      	nop
      }
      break;
 8009f7e:	e004      	b.n	8009f8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fd15 	bl	800a9b2 <USBD_CtlError>
      break;
 8009f88:	bf00      	nop
  }

  return ret;
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	889b      	ldrh	r3, [r3, #4]
 8009fa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fb0:	2b40      	cmp	r3, #64	@ 0x40
 8009fb2:	d007      	beq.n	8009fc4 <USBD_StdEPReq+0x30>
 8009fb4:	2b40      	cmp	r3, #64	@ 0x40
 8009fb6:	f200 817f 	bhi.w	800a2b8 <USBD_StdEPReq+0x324>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d02a      	beq.n	800a014 <USBD_StdEPReq+0x80>
 8009fbe:	2b20      	cmp	r3, #32
 8009fc0:	f040 817a 	bne.w	800a2b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff fe85 	bl	8009cd8 <USBD_CoreFindEP>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fd2:	7b7b      	ldrb	r3, [r7, #13]
 8009fd4:	2bff      	cmp	r3, #255	@ 0xff
 8009fd6:	f000 8174 	beq.w	800a2c2 <USBD_StdEPReq+0x32e>
 8009fda:	7b7b      	ldrb	r3, [r7, #13]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 8170 	bne.w	800a2c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009fe2:	7b7a      	ldrb	r2, [r7, #13]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009fea:	7b7a      	ldrb	r2, [r7, #13]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	32ae      	adds	r2, #174	@ 0xae
 8009ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 8163 	beq.w	800a2c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ffc:	7b7a      	ldrb	r2, [r7, #13]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	32ae      	adds	r2, #174	@ 0xae
 800a002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	4798      	blx	r3
 800a00e:	4603      	mov	r3, r0
 800a010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a012:	e156      	b.n	800a2c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	785b      	ldrb	r3, [r3, #1]
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d008      	beq.n	800a02e <USBD_StdEPReq+0x9a>
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	f300 8145 	bgt.w	800a2ac <USBD_StdEPReq+0x318>
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 809b 	beq.w	800a15e <USBD_StdEPReq+0x1ca>
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d03c      	beq.n	800a0a6 <USBD_StdEPReq+0x112>
 800a02c:	e13e      	b.n	800a2ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b02      	cmp	r3, #2
 800a038:	d002      	beq.n	800a040 <USBD_StdEPReq+0xac>
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d016      	beq.n	800a06c <USBD_StdEPReq+0xd8>
 800a03e:	e02c      	b.n	800a09a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00d      	beq.n	800a062 <USBD_StdEPReq+0xce>
 800a046:	7bbb      	ldrb	r3, [r7, #14]
 800a048:	2b80      	cmp	r3, #128	@ 0x80
 800a04a:	d00a      	beq.n	800a062 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 f9fd 	bl	800b450 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a056:	2180      	movs	r1, #128	@ 0x80
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 f9f9 	bl	800b450 <USBD_LL_StallEP>
 800a05e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a060:	e020      	b.n	800a0a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fca4 	bl	800a9b2 <USBD_CtlError>
              break;
 800a06a:	e01b      	b.n	800a0a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	885b      	ldrh	r3, [r3, #2]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10e      	bne.n	800a092 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00b      	beq.n	800a092 <USBD_StdEPReq+0xfe>
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	2b80      	cmp	r3, #128	@ 0x80
 800a07e:	d008      	beq.n	800a092 <USBD_StdEPReq+0xfe>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	88db      	ldrh	r3, [r3, #6]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d104      	bne.n	800a092 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f001 f9df 	bl	800b450 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fd64 	bl	800ab60 <USBD_CtlSendStatus>

              break;
 800a098:	e004      	b.n	800a0a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fc88 	bl	800a9b2 <USBD_CtlError>
              break;
 800a0a2:	bf00      	nop
          }
          break;
 800a0a4:	e107      	b.n	800a2b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d002      	beq.n	800a0b8 <USBD_StdEPReq+0x124>
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d016      	beq.n	800a0e4 <USBD_StdEPReq+0x150>
 800a0b6:	e04b      	b.n	800a150 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00d      	beq.n	800a0da <USBD_StdEPReq+0x146>
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	2b80      	cmp	r3, #128	@ 0x80
 800a0c2:	d00a      	beq.n	800a0da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 f9c1 	bl	800b450 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0ce:	2180      	movs	r1, #128	@ 0x80
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 f9bd 	bl	800b450 <USBD_LL_StallEP>
 800a0d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0d8:	e040      	b.n	800a15c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fc68 	bl	800a9b2 <USBD_CtlError>
              break;
 800a0e2:	e03b      	b.n	800a15c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	885b      	ldrh	r3, [r3, #2]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d136      	bne.n	800a15a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d004      	beq.n	800a100 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f001 f9c7 	bl	800b48e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fd2d 	bl	800ab60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff fde4 	bl	8009cd8 <USBD_CoreFindEP>
 800a110:	4603      	mov	r3, r0
 800a112:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a114:	7b7b      	ldrb	r3, [r7, #13]
 800a116:	2bff      	cmp	r3, #255	@ 0xff
 800a118:	d01f      	beq.n	800a15a <USBD_StdEPReq+0x1c6>
 800a11a:	7b7b      	ldrb	r3, [r7, #13]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d11c      	bne.n	800a15a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a120:	7b7a      	ldrb	r2, [r7, #13]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a128:	7b7a      	ldrb	r2, [r7, #13]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	32ae      	adds	r2, #174	@ 0xae
 800a12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d010      	beq.n	800a15a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a138:	7b7a      	ldrb	r2, [r7, #13]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32ae      	adds	r2, #174	@ 0xae
 800a13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	4798      	blx	r3
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a14e:	e004      	b.n	800a15a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fc2d 	bl	800a9b2 <USBD_CtlError>
              break;
 800a158:	e000      	b.n	800a15c <USBD_StdEPReq+0x1c8>
              break;
 800a15a:	bf00      	nop
          }
          break;
 800a15c:	e0ab      	b.n	800a2b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b02      	cmp	r3, #2
 800a168:	d002      	beq.n	800a170 <USBD_StdEPReq+0x1dc>
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d032      	beq.n	800a1d4 <USBD_StdEPReq+0x240>
 800a16e:	e097      	b.n	800a2a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a170:	7bbb      	ldrb	r3, [r7, #14]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d007      	beq.n	800a186 <USBD_StdEPReq+0x1f2>
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	2b80      	cmp	r3, #128	@ 0x80
 800a17a:	d004      	beq.n	800a186 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fc17 	bl	800a9b2 <USBD_CtlError>
                break;
 800a184:	e091      	b.n	800a2aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	da0b      	bge.n	800a1a6 <USBD_StdEPReq+0x212>
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	3310      	adds	r3, #16
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	e00b      	b.n	800a1be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	3304      	adds	r3, #4
 800a1be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fc6d 	bl	800aaac <USBD_CtlSendData>
              break;
 800a1d2:	e06a      	b.n	800a2aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	da11      	bge.n	800a200 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	f003 020f 	and.w	r2, r3, #15
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	440b      	add	r3, r1
 800a1ee:	3324      	adds	r3, #36	@ 0x24
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d117      	bne.n	800a226 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fbda 	bl	800a9b2 <USBD_CtlError>
                  break;
 800a1fe:	e054      	b.n	800a2aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a200:	7bbb      	ldrb	r3, [r7, #14]
 800a202:	f003 020f 	and.w	r2, r3, #15
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	440b      	add	r3, r1
 800a212:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a216:	881b      	ldrh	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d104      	bne.n	800a226 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fbc7 	bl	800a9b2 <USBD_CtlError>
                  break;
 800a224:	e041      	b.n	800a2aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	da0b      	bge.n	800a246 <USBD_StdEPReq+0x2b2>
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
 800a230:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a234:	4613      	mov	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4413      	add	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	3310      	adds	r3, #16
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	4413      	add	r3, r2
 800a242:	3304      	adds	r3, #4
 800a244:	e00b      	b.n	800a25e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a246:	7bbb      	ldrb	r3, [r7, #14]
 800a248:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	4413      	add	r3, r2
 800a25c:	3304      	adds	r3, #4
 800a25e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a260:	7bbb      	ldrb	r3, [r7, #14]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <USBD_StdEPReq+0x2d8>
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	2b80      	cmp	r3, #128	@ 0x80
 800a26a:	d103      	bne.n	800a274 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2200      	movs	r2, #0
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	e00e      	b.n	800a292 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f001 f927 	bl	800b4cc <USBD_LL_IsStallEP>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d003      	beq.n	800a28c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2201      	movs	r2, #1
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	e002      	b.n	800a292 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2202      	movs	r2, #2
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fc07 	bl	800aaac <USBD_CtlSendData>
              break;
 800a29e:	e004      	b.n	800a2aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fb85 	bl	800a9b2 <USBD_CtlError>
              break;
 800a2a8:	bf00      	nop
          }
          break;
 800a2aa:	e004      	b.n	800a2b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fb7f 	bl	800a9b2 <USBD_CtlError>
          break;
 800a2b4:	bf00      	nop
      }
      break;
 800a2b6:	e005      	b.n	800a2c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fb79 	bl	800a9b2 <USBD_CtlError>
      break;
 800a2c0:	e000      	b.n	800a2c4 <USBD_StdEPReq+0x330>
      break;
 800a2c2:	bf00      	nop
  }

  return ret;
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	885b      	ldrh	r3, [r3, #2]
 800a2ea:	0a1b      	lsrs	r3, r3, #8
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	2b0e      	cmp	r3, #14
 800a2f2:	f200 8152 	bhi.w	800a59a <USBD_GetDescriptor+0x2ca>
 800a2f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2fc <USBD_GetDescriptor+0x2c>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a36d 	.word	0x0800a36d
 800a300:	0800a385 	.word	0x0800a385
 800a304:	0800a3c5 	.word	0x0800a3c5
 800a308:	0800a59b 	.word	0x0800a59b
 800a30c:	0800a59b 	.word	0x0800a59b
 800a310:	0800a53b 	.word	0x0800a53b
 800a314:	0800a567 	.word	0x0800a567
 800a318:	0800a59b 	.word	0x0800a59b
 800a31c:	0800a59b 	.word	0x0800a59b
 800a320:	0800a59b 	.word	0x0800a59b
 800a324:	0800a59b 	.word	0x0800a59b
 800a328:	0800a59b 	.word	0x0800a59b
 800a32c:	0800a59b 	.word	0x0800a59b
 800a330:	0800a59b 	.word	0x0800a59b
 800a334:	0800a339 	.word	0x0800a339
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a33e:	69db      	ldr	r3, [r3, #28]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00b      	beq.n	800a35c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	7c12      	ldrb	r2, [r2, #16]
 800a350:	f107 0108 	add.w	r1, r7, #8
 800a354:	4610      	mov	r0, r2
 800a356:	4798      	blx	r3
 800a358:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a35a:	e126      	b.n	800a5aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fb27 	bl	800a9b2 <USBD_CtlError>
        err++;
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	3301      	adds	r3, #1
 800a368:	72fb      	strb	r3, [r7, #11]
      break;
 800a36a:	e11e      	b.n	800a5aa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	7c12      	ldrb	r2, [r2, #16]
 800a378:	f107 0108 	add.w	r1, r7, #8
 800a37c:	4610      	mov	r0, r2
 800a37e:	4798      	blx	r3
 800a380:	60f8      	str	r0, [r7, #12]
      break;
 800a382:	e112      	b.n	800a5aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7c1b      	ldrb	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10d      	bne.n	800a3a8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a394:	f107 0208 	add.w	r2, r7, #8
 800a398:	4610      	mov	r0, r2
 800a39a:	4798      	blx	r3
 800a39c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3a6:	e100      	b.n	800a5aa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b0:	f107 0208 	add.w	r2, r7, #8
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4798      	blx	r3
 800a3b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	2202      	movs	r2, #2
 800a3c0:	701a      	strb	r2, [r3, #0]
      break;
 800a3c2:	e0f2      	b.n	800a5aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	885b      	ldrh	r3, [r3, #2]
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b05      	cmp	r3, #5
 800a3cc:	f200 80ac 	bhi.w	800a528 <USBD_GetDescriptor+0x258>
 800a3d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d8 <USBD_GetDescriptor+0x108>)
 800a3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d6:	bf00      	nop
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a425 	.word	0x0800a425
 800a3e0:	0800a459 	.word	0x0800a459
 800a3e4:	0800a48d 	.word	0x0800a48d
 800a3e8:	0800a4c1 	.word	0x0800a4c1
 800a3ec:	0800a4f5 	.word	0x0800a4f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00b      	beq.n	800a414 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	7c12      	ldrb	r2, [r2, #16]
 800a408:	f107 0108 	add.w	r1, r7, #8
 800a40c:	4610      	mov	r0, r2
 800a40e:	4798      	blx	r3
 800a410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a412:	e091      	b.n	800a538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 facb 	bl	800a9b2 <USBD_CtlError>
            err++;
 800a41c:	7afb      	ldrb	r3, [r7, #11]
 800a41e:	3301      	adds	r3, #1
 800a420:	72fb      	strb	r3, [r7, #11]
          break;
 800a422:	e089      	b.n	800a538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00b      	beq.n	800a448 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	7c12      	ldrb	r2, [r2, #16]
 800a43c:	f107 0108 	add.w	r1, r7, #8
 800a440:	4610      	mov	r0, r2
 800a442:	4798      	blx	r3
 800a444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a446:	e077      	b.n	800a538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fab1 	bl	800a9b2 <USBD_CtlError>
            err++;
 800a450:	7afb      	ldrb	r3, [r7, #11]
 800a452:	3301      	adds	r3, #1
 800a454:	72fb      	strb	r3, [r7, #11]
          break;
 800a456:	e06f      	b.n	800a538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00b      	beq.n	800a47c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	7c12      	ldrb	r2, [r2, #16]
 800a470:	f107 0108 	add.w	r1, r7, #8
 800a474:	4610      	mov	r0, r2
 800a476:	4798      	blx	r3
 800a478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a47a:	e05d      	b.n	800a538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fa97 	bl	800a9b2 <USBD_CtlError>
            err++;
 800a484:	7afb      	ldrb	r3, [r7, #11]
 800a486:	3301      	adds	r3, #1
 800a488:	72fb      	strb	r3, [r7, #11]
          break;
 800a48a:	e055      	b.n	800a538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00b      	beq.n	800a4b0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	7c12      	ldrb	r2, [r2, #16]
 800a4a4:	f107 0108 	add.w	r1, r7, #8
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	4798      	blx	r3
 800a4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ae:	e043      	b.n	800a538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fa7d 	bl	800a9b2 <USBD_CtlError>
            err++;
 800a4b8:	7afb      	ldrb	r3, [r7, #11]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4be:	e03b      	b.n	800a538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00b      	beq.n	800a4e4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	7c12      	ldrb	r2, [r2, #16]
 800a4d8:	f107 0108 	add.w	r1, r7, #8
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4798      	blx	r3
 800a4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4e2:	e029      	b.n	800a538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fa63 	bl	800a9b2 <USBD_CtlError>
            err++;
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a4f2:	e021      	b.n	800a538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	7c12      	ldrb	r2, [r2, #16]
 800a50c:	f107 0108 	add.w	r1, r7, #8
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3
 800a514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a516:	e00f      	b.n	800a538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fa49 	bl	800a9b2 <USBD_CtlError>
            err++;
 800a520:	7afb      	ldrb	r3, [r7, #11]
 800a522:	3301      	adds	r3, #1
 800a524:	72fb      	strb	r3, [r7, #11]
          break;
 800a526:	e007      	b.n	800a538 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fa41 	bl	800a9b2 <USBD_CtlError>
          err++;
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	3301      	adds	r3, #1
 800a534:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a536:	bf00      	nop
      }
      break;
 800a538:	e037      	b.n	800a5aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	7c1b      	ldrb	r3, [r3, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a54a:	f107 0208 	add.w	r2, r7, #8
 800a54e:	4610      	mov	r0, r2
 800a550:	4798      	blx	r3
 800a552:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a554:	e029      	b.n	800a5aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fa2a 	bl	800a9b2 <USBD_CtlError>
        err++;
 800a55e:	7afb      	ldrb	r3, [r7, #11]
 800a560:	3301      	adds	r3, #1
 800a562:	72fb      	strb	r3, [r7, #11]
      break;
 800a564:	e021      	b.n	800a5aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	7c1b      	ldrb	r3, [r3, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10d      	bne.n	800a58a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a576:	f107 0208 	add.w	r2, r7, #8
 800a57a:	4610      	mov	r0, r2
 800a57c:	4798      	blx	r3
 800a57e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
 800a584:	2207      	movs	r2, #7
 800a586:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a588:	e00f      	b.n	800a5aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fa10 	bl	800a9b2 <USBD_CtlError>
        err++;
 800a592:	7afb      	ldrb	r3, [r7, #11]
 800a594:	3301      	adds	r3, #1
 800a596:	72fb      	strb	r3, [r7, #11]
      break;
 800a598:	e007      	b.n	800a5aa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fa08 	bl	800a9b2 <USBD_CtlError>
      err++;
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a5a8:	bf00      	nop
  }

  if (err != 0U)
 800a5aa:	7afb      	ldrb	r3, [r7, #11]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d11e      	bne.n	800a5ee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	88db      	ldrh	r3, [r3, #6]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d016      	beq.n	800a5e6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a5b8:	893b      	ldrh	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00e      	beq.n	800a5dc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	88da      	ldrh	r2, [r3, #6]
 800a5c2:	893b      	ldrh	r3, [r7, #8]
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	bf28      	it	cs
 800a5c8:	4613      	movcs	r3, r2
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5ce:	893b      	ldrh	r3, [r7, #8]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	68f9      	ldr	r1, [r7, #12]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fa69 	bl	800aaac <USBD_CtlSendData>
 800a5da:	e009      	b.n	800a5f0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f9e7 	bl	800a9b2 <USBD_CtlError>
 800a5e4:	e004      	b.n	800a5f0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 faba 	bl	800ab60 <USBD_CtlSendStatus>
 800a5ec:	e000      	b.n	800a5f0 <USBD_GetDescriptor+0x320>
    return;
 800a5ee:	bf00      	nop
  }
}
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop

0800a5f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	889b      	ldrh	r3, [r3, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d131      	bne.n	800a66e <USBD_SetAddress+0x76>
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	88db      	ldrh	r3, [r3, #6]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d12d      	bne.n	800a66e <USBD_SetAddress+0x76>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	885b      	ldrh	r3, [r3, #2]
 800a616:	2b7f      	cmp	r3, #127	@ 0x7f
 800a618:	d829      	bhi.n	800a66e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	885b      	ldrh	r3, [r3, #2]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a624:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d104      	bne.n	800a63c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f9bc 	bl	800a9b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63a:	e01d      	b.n	800a678 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	7bfa      	ldrb	r2, [r7, #15]
 800a640:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 ff6b 	bl	800b524 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fa86 	bl	800ab60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2202      	movs	r2, #2
 800a65e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a662:	e009      	b.n	800a678 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a66c:	e004      	b.n	800a678 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f99e 	bl	800a9b2 <USBD_CtlError>
  }
}
 800a676:	bf00      	nop
 800a678:	bf00      	nop
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	885b      	ldrh	r3, [r3, #2]
 800a692:	b2da      	uxtb	r2, r3
 800a694:	4b4e      	ldr	r3, [pc, #312]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a696:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a698:	4b4d      	ldr	r3, [pc, #308]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d905      	bls.n	800a6ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f985 	bl	800a9b2 <USBD_CtlError>
    return USBD_FAIL;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e08c      	b.n	800a7c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d002      	beq.n	800a6be <USBD_SetConfig+0x3e>
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d029      	beq.n	800a710 <USBD_SetConfig+0x90>
 800a6bc:	e075      	b.n	800a7aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a6be:	4b44      	ldr	r3, [pc, #272]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d020      	beq.n	800a708 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a6c6:	4b42      	ldr	r3, [pc, #264]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6d0:	4b3f      	ldr	r3, [pc, #252]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7fe ffb9 	bl	800964e <USBD_SetClassConfig>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d008      	beq.n	800a6f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f962 	bl	800a9b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6f6:	e065      	b.n	800a7c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fa31 	bl	800ab60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2203      	movs	r2, #3
 800a702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a706:	e05d      	b.n	800a7c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fa29 	bl	800ab60 <USBD_CtlSendStatus>
      break;
 800a70e:	e059      	b.n	800a7c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a710:	4b2f      	ldr	r3, [pc, #188]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d112      	bne.n	800a73e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a720:	4b2b      	ldr	r3, [pc, #172]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	461a      	mov	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a72a:	4b29      	ldr	r3, [pc, #164]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7fe ffa8 	bl	8009686 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fa12 	bl	800ab60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a73c:	e042      	b.n	800a7c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a73e:	4b24      	ldr	r3, [pc, #144]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	461a      	mov	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d02a      	beq.n	800a7a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	b2db      	uxtb	r3, r3
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7fe ff96 	bl	8009686 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a75a:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a764:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7fe ff6f 	bl	800964e <USBD_SetClassConfig>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00f      	beq.n	800a79a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f918 	bl	800a9b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	b2db      	uxtb	r3, r3
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7fe ff7b 	bl	8009686 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a798:	e014      	b.n	800a7c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f9e0 	bl	800ab60 <USBD_CtlSendStatus>
      break;
 800a7a0:	e010      	b.n	800a7c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f9dc 	bl	800ab60 <USBD_CtlSendStatus>
      break;
 800a7a8:	e00c      	b.n	800a7c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f900 	bl	800a9b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7b2:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <USBD_SetConfig+0x150>)
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7fe ff64 	bl	8009686 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7c2:	bf00      	nop
  }

  return ret;
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	240003ac 	.word	0x240003ac

0800a7d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	88db      	ldrh	r3, [r3, #6]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d004      	beq.n	800a7f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f8e2 	bl	800a9b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7ee:	e023      	b.n	800a838 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	dc02      	bgt.n	800a802 <USBD_GetConfig+0x2e>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	dc03      	bgt.n	800a808 <USBD_GetConfig+0x34>
 800a800:	e015      	b.n	800a82e <USBD_GetConfig+0x5a>
 800a802:	2b03      	cmp	r3, #3
 800a804:	d00b      	beq.n	800a81e <USBD_GetConfig+0x4a>
 800a806:	e012      	b.n	800a82e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3308      	adds	r3, #8
 800a812:	2201      	movs	r2, #1
 800a814:	4619      	mov	r1, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f948 	bl	800aaac <USBD_CtlSendData>
        break;
 800a81c:	e00c      	b.n	800a838 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	3304      	adds	r3, #4
 800a822:	2201      	movs	r2, #1
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f940 	bl	800aaac <USBD_CtlSendData>
        break;
 800a82c:	e004      	b.n	800a838 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f8be 	bl	800a9b2 <USBD_CtlError>
        break;
 800a836:	bf00      	nop
}
 800a838:	bf00      	nop
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a850:	b2db      	uxtb	r3, r3
 800a852:	3b01      	subs	r3, #1
 800a854:	2b02      	cmp	r3, #2
 800a856:	d81e      	bhi.n	800a896 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	88db      	ldrh	r3, [r3, #6]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d004      	beq.n	800a86a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f8a5 	bl	800a9b2 <USBD_CtlError>
        break;
 800a868:	e01a      	b.n	800a8a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a876:	2b00      	cmp	r3, #0
 800a878:	d005      	beq.n	800a886 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	f043 0202 	orr.w	r2, r3, #2
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	330c      	adds	r3, #12
 800a88a:	2202      	movs	r2, #2
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f90c 	bl	800aaac <USBD_CtlSendData>
      break;
 800a894:	e004      	b.n	800a8a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f88a 	bl	800a9b2 <USBD_CtlError>
      break;
 800a89e:	bf00      	nop
  }
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	885b      	ldrh	r3, [r3, #2]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d107      	bne.n	800a8ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f94c 	bl	800ab60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a8c8:	e013      	b.n	800a8f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	885b      	ldrh	r3, [r3, #2]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d10b      	bne.n	800a8ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	889b      	ldrh	r3, [r3, #4]
 800a8d6:	0a1b      	lsrs	r3, r3, #8
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f93c 	bl	800ab60 <USBD_CtlSendStatus>
}
 800a8e8:	e003      	b.n	800a8f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f860 	bl	800a9b2 <USBD_CtlError>
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	3b01      	subs	r3, #1
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d80b      	bhi.n	800a92a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	885b      	ldrh	r3, [r3, #2]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d10c      	bne.n	800a934 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f91c 	bl	800ab60 <USBD_CtlSendStatus>
      }
      break;
 800a928:	e004      	b.n	800a934 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f840 	bl	800a9b2 <USBD_CtlError>
      break;
 800a932:	e000      	b.n	800a936 <USBD_ClrFeature+0x3c>
      break;
 800a934:	bf00      	nop
  }
}
 800a936:	bf00      	nop
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3301      	adds	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	781a      	ldrb	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3301      	adds	r3, #1
 800a966:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f7ff fa16 	bl	8009d9a <SWAPBYTE>
 800a96e:	4603      	mov	r3, r0
 800a970:	461a      	mov	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3301      	adds	r3, #1
 800a97a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3301      	adds	r3, #1
 800a980:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fa09 	bl	8009d9a <SWAPBYTE>
 800a988:	4603      	mov	r3, r0
 800a98a:	461a      	mov	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3301      	adds	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3301      	adds	r3, #1
 800a99a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff f9fc 	bl	8009d9a <SWAPBYTE>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	80da      	strh	r2, [r3, #6]
}
 800a9aa:	bf00      	nop
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b082      	sub	sp, #8
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9bc:	2180      	movs	r1, #128	@ 0x80
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fd46 	bl	800b450 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fd42 	bl	800b450 <USBD_LL_StallEP>
}
 800a9cc:	bf00      	nop
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d042      	beq.n	800aa70 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a9ee:	6938      	ldr	r0, [r7, #16]
 800a9f0:	f000 f842 	bl	800aa78 <USBD_GetLen>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9fe:	d808      	bhi.n	800aa12 <USBD_GetString+0x3e>
 800aa00:	6938      	ldr	r0, [r7, #16]
 800aa02:	f000 f839 	bl	800aa78 <USBD_GetLen>
 800aa06:	4603      	mov	r3, r0
 800aa08:	3301      	adds	r3, #1
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	e001      	b.n	800aa16 <USBD_GetString+0x42>
 800aa12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	4413      	add	r3, r2
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	4413      	add	r3, r2
 800aa32:	2203      	movs	r2, #3
 800aa34:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa3c:	e013      	b.n	800aa66 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	4413      	add	r3, r2
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	7812      	ldrb	r2, [r2, #0]
 800aa48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	613b      	str	r3, [r7, #16]
    idx++;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	3301      	adds	r3, #1
 800aa54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa60:	7dfb      	ldrb	r3, [r7, #23]
 800aa62:	3301      	adds	r3, #1
 800aa64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e7      	bne.n	800aa3e <USBD_GetString+0x6a>
 800aa6e:	e000      	b.n	800aa72 <USBD_GetString+0x9e>
    return;
 800aa70:	bf00      	nop
  }
}
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa80:	2300      	movs	r3, #0
 800aa82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa88:	e005      	b.n	800aa96 <USBD_GetLen+0x1e>
  {
    len++;
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	3301      	adds	r3, #1
 800aa94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1f5      	bne.n	800aa8a <USBD_GetLen+0x12>
  }

  return len;
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	2100      	movs	r1, #0
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 fd45 	bl	800b562 <USBD_LL_Transmit>

  return USBD_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	60f8      	str	r0, [r7, #12]
 800aaea:	60b9      	str	r1, [r7, #8]
 800aaec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 fd34 	bl	800b562 <USBD_LL_Transmit>

  return USBD_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2203      	movs	r2, #3
 800ab14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f000 fd38 	bl	800b5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	60b9      	str	r1, [r7, #8]
 800ab48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	2100      	movs	r1, #0
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 fd27 	bl	800b5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2204      	movs	r2, #4
 800ab6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab70:	2300      	movs	r3, #0
 800ab72:	2200      	movs	r2, #0
 800ab74:	2100      	movs	r1, #0
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fcf3 	bl	800b562 <USBD_LL_Transmit>

  return USBD_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b082      	sub	sp, #8
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2205      	movs	r2, #5
 800ab92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab96:	2300      	movs	r3, #0
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fd01 	bl	800b5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800abb0:	2201      	movs	r2, #1
 800abb2:	4913      	ldr	r1, [pc, #76]	@ (800ac00 <MX_USB_DEVICE_Init+0x54>)
 800abb4:	4813      	ldr	r0, [pc, #76]	@ (800ac04 <MX_USB_DEVICE_Init+0x58>)
 800abb6:	f7fe fcb1 	bl	800951c <USBD_Init>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800abc0:	f7f6 fa3c 	bl	800103c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800abc4:	4910      	ldr	r1, [pc, #64]	@ (800ac08 <MX_USB_DEVICE_Init+0x5c>)
 800abc6:	480f      	ldr	r0, [pc, #60]	@ (800ac04 <MX_USB_DEVICE_Init+0x58>)
 800abc8:	f7fe fce6 	bl	8009598 <USBD_RegisterClass>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800abd2:	f7f6 fa33 	bl	800103c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800abd6:	490d      	ldr	r1, [pc, #52]	@ (800ac0c <MX_USB_DEVICE_Init+0x60>)
 800abd8:	480a      	ldr	r0, [pc, #40]	@ (800ac04 <MX_USB_DEVICE_Init+0x58>)
 800abda:	f7fe fbcf 	bl	800937c <USBD_CDC_RegisterInterface>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800abe4:	f7f6 fa2a 	bl	800103c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800abe8:	4806      	ldr	r0, [pc, #24]	@ (800ac04 <MX_USB_DEVICE_Init+0x58>)
 800abea:	f7fe fd19 	bl	8009620 <USBD_Start>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800abf4:	f7f6 fa22 	bl	800103c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800abf8:	f7f8 fe78 	bl	80038ec <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800abfc:	bf00      	nop
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	240000b0 	.word	0x240000b0
 800ac04:	240003b0 	.word	0x240003b0
 800ac08:	2400001c 	.word	0x2400001c
 800ac0c:	2400009c 	.word	0x2400009c

0800ac10 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ac14:	2200      	movs	r2, #0
 800ac16:	4905      	ldr	r1, [pc, #20]	@ (800ac2c <CDC_Init_HS+0x1c>)
 800ac18:	4805      	ldr	r0, [pc, #20]	@ (800ac30 <CDC_Init_HS+0x20>)
 800ac1a:	f7fe fbc9 	bl	80093b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ac1e:	4905      	ldr	r1, [pc, #20]	@ (800ac34 <CDC_Init_HS+0x24>)
 800ac20:	4803      	ldr	r0, [pc, #12]	@ (800ac30 <CDC_Init_HS+0x20>)
 800ac22:	f7fe fbe7 	bl	80093f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ac26:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	24000e8c 	.word	0x24000e8c
 800ac30:	240003b0 	.word	0x240003b0
 800ac34:	2400068c 	.word	0x2400068c

0800ac38 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ac3c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	6039      	str	r1, [r7, #0]
 800ac52:	71fb      	strb	r3, [r7, #7]
 800ac54:	4613      	mov	r3, r2
 800ac56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	2b23      	cmp	r3, #35	@ 0x23
 800ac5c:	d84a      	bhi.n	800acf4 <CDC_Control_HS+0xac>
 800ac5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac64 <CDC_Control_HS+0x1c>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800acf5 	.word	0x0800acf5
 800ac68:	0800acf5 	.word	0x0800acf5
 800ac6c:	0800acf5 	.word	0x0800acf5
 800ac70:	0800acf5 	.word	0x0800acf5
 800ac74:	0800acf5 	.word	0x0800acf5
 800ac78:	0800acf5 	.word	0x0800acf5
 800ac7c:	0800acf5 	.word	0x0800acf5
 800ac80:	0800acf5 	.word	0x0800acf5
 800ac84:	0800acf5 	.word	0x0800acf5
 800ac88:	0800acf5 	.word	0x0800acf5
 800ac8c:	0800acf5 	.word	0x0800acf5
 800ac90:	0800acf5 	.word	0x0800acf5
 800ac94:	0800acf5 	.word	0x0800acf5
 800ac98:	0800acf5 	.word	0x0800acf5
 800ac9c:	0800acf5 	.word	0x0800acf5
 800aca0:	0800acf5 	.word	0x0800acf5
 800aca4:	0800acf5 	.word	0x0800acf5
 800aca8:	0800acf5 	.word	0x0800acf5
 800acac:	0800acf5 	.word	0x0800acf5
 800acb0:	0800acf5 	.word	0x0800acf5
 800acb4:	0800acf5 	.word	0x0800acf5
 800acb8:	0800acf5 	.word	0x0800acf5
 800acbc:	0800acf5 	.word	0x0800acf5
 800acc0:	0800acf5 	.word	0x0800acf5
 800acc4:	0800acf5 	.word	0x0800acf5
 800acc8:	0800acf5 	.word	0x0800acf5
 800accc:	0800acf5 	.word	0x0800acf5
 800acd0:	0800acf5 	.word	0x0800acf5
 800acd4:	0800acf5 	.word	0x0800acf5
 800acd8:	0800acf5 	.word	0x0800acf5
 800acdc:	0800acf5 	.word	0x0800acf5
 800ace0:	0800acf5 	.word	0x0800acf5
 800ace4:	0800acf5 	.word	0x0800acf5
 800ace8:	0800acf5 	.word	0x0800acf5
 800acec:	0800acf5 	.word	0x0800acf5
 800acf0:	0800acf5 	.word	0x0800acf5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800acf4:	bf00      	nop
  }

  return (USBD_OK);
 800acf6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4805      	ldr	r0, [pc, #20]	@ (800ad28 <CDC_Receive_HS+0x24>)
 800ad12:	f7fe fb6f 	bl	80093f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ad16:	4804      	ldr	r0, [pc, #16]	@ (800ad28 <CDC_Receive_HS+0x24>)
 800ad18:	f7fe fbca 	bl	80094b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ad1c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	240003b0 	.word	0x240003b0

0800ad2c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ad3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad74 <CDC_Transmit_HS+0x48>)
 800ad3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e00b      	b.n	800ad6a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800ad52:	887b      	ldrh	r3, [r7, #2]
 800ad54:	461a      	mov	r2, r3
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	4806      	ldr	r0, [pc, #24]	@ (800ad74 <CDC_Transmit_HS+0x48>)
 800ad5a:	f7fe fb29 	bl	80093b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800ad5e:	4805      	ldr	r0, [pc, #20]	@ (800ad74 <CDC_Transmit_HS+0x48>)
 800ad60:	f7fe fb66 	bl	8009430 <USBD_CDC_TransmitPacket>
 800ad64:	4603      	mov	r3, r0
 800ad66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	240003b0 	.word	0x240003b0

0800ad78 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	4613      	mov	r3, r2
 800ad84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ad8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	371c      	adds	r7, #28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
	...

0800ad9c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	6039      	str	r1, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	2212      	movs	r2, #18
 800adac:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800adae:	4b03      	ldr	r3, [pc, #12]	@ (800adbc <USBD_HS_DeviceDescriptor+0x20>)
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	240000d0 	.word	0x240000d0

0800adc0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	4603      	mov	r3, r0
 800adc8:	6039      	str	r1, [r7, #0]
 800adca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2204      	movs	r2, #4
 800add0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800add2:	4b03      	ldr	r3, [pc, #12]	@ (800ade0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800add4:	4618      	mov	r0, r3
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	240000e4 	.word	0x240000e4

0800ade4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adf0:	79fb      	ldrb	r3, [r7, #7]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d105      	bne.n	800ae02 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	4907      	ldr	r1, [pc, #28]	@ (800ae18 <USBD_HS_ProductStrDescriptor+0x34>)
 800adfa:	4808      	ldr	r0, [pc, #32]	@ (800ae1c <USBD_HS_ProductStrDescriptor+0x38>)
 800adfc:	f7ff fdea 	bl	800a9d4 <USBD_GetString>
 800ae00:	e004      	b.n	800ae0c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	4904      	ldr	r1, [pc, #16]	@ (800ae18 <USBD_HS_ProductStrDescriptor+0x34>)
 800ae06:	4805      	ldr	r0, [pc, #20]	@ (800ae1c <USBD_HS_ProductStrDescriptor+0x38>)
 800ae08:	f7ff fde4 	bl	800a9d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae0c:	4b02      	ldr	r3, [pc, #8]	@ (800ae18 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	2400168c 	.word	0x2400168c
 800ae1c:	0800c5f0 	.word	0x0800c5f0

0800ae20 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	6039      	str	r1, [r7, #0]
 800ae2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	4904      	ldr	r1, [pc, #16]	@ (800ae40 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ae30:	4804      	ldr	r0, [pc, #16]	@ (800ae44 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ae32:	f7ff fdcf 	bl	800a9d4 <USBD_GetString>
  return USBD_StrDesc;
 800ae36:	4b02      	ldr	r3, [pc, #8]	@ (800ae40 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	2400168c 	.word	0x2400168c
 800ae44:	0800c608 	.word	0x0800c608

0800ae48 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	6039      	str	r1, [r7, #0]
 800ae52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	221a      	movs	r2, #26
 800ae58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae5a:	f000 f843 	bl	800aee4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ae5e:	4b02      	ldr	r3, [pc, #8]	@ (800ae68 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	240000e8 	.word	0x240000e8

0800ae6c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae78:	79fb      	ldrb	r3, [r7, #7]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d105      	bne.n	800ae8a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	4907      	ldr	r1, [pc, #28]	@ (800aea0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ae82:	4808      	ldr	r0, [pc, #32]	@ (800aea4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ae84:	f7ff fda6 	bl	800a9d4 <USBD_GetString>
 800ae88:	e004      	b.n	800ae94 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	4904      	ldr	r1, [pc, #16]	@ (800aea0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ae8e:	4805      	ldr	r0, [pc, #20]	@ (800aea4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ae90:	f7ff fda0 	bl	800a9d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae94:	4b02      	ldr	r3, [pc, #8]	@ (800aea0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	2400168c 	.word	0x2400168c
 800aea4:	0800c61c 	.word	0x0800c61c

0800aea8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	6039      	str	r1, [r7, #0]
 800aeb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d105      	bne.n	800aec6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	4907      	ldr	r1, [pc, #28]	@ (800aedc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aebe:	4808      	ldr	r0, [pc, #32]	@ (800aee0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aec0:	f7ff fd88 	bl	800a9d4 <USBD_GetString>
 800aec4:	e004      	b.n	800aed0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	4904      	ldr	r1, [pc, #16]	@ (800aedc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800aeca:	4805      	ldr	r0, [pc, #20]	@ (800aee0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aecc:	f7ff fd82 	bl	800a9d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aed0:	4b02      	ldr	r3, [pc, #8]	@ (800aedc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	2400168c 	.word	0x2400168c
 800aee0:	0800c628 	.word	0x0800c628

0800aee4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aeea:	4b0f      	ldr	r3, [pc, #60]	@ (800af28 <Get_SerialNum+0x44>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aef0:	4b0e      	ldr	r3, [pc, #56]	@ (800af2c <Get_SerialNum+0x48>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aef6:	4b0e      	ldr	r3, [pc, #56]	@ (800af30 <Get_SerialNum+0x4c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4413      	add	r3, r2
 800af02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d009      	beq.n	800af1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af0a:	2208      	movs	r2, #8
 800af0c:	4909      	ldr	r1, [pc, #36]	@ (800af34 <Get_SerialNum+0x50>)
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f000 f814 	bl	800af3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af14:	2204      	movs	r2, #4
 800af16:	4908      	ldr	r1, [pc, #32]	@ (800af38 <Get_SerialNum+0x54>)
 800af18:	68b8      	ldr	r0, [r7, #8]
 800af1a:	f000 f80f 	bl	800af3c <IntToUnicode>
  }
}
 800af1e:	bf00      	nop
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	08fff800 	.word	0x08fff800
 800af2c:	08fff804 	.word	0x08fff804
 800af30:	08fff808 	.word	0x08fff808
 800af34:	240000ea 	.word	0x240000ea
 800af38:	240000fa 	.word	0x240000fa

0800af3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	4613      	mov	r3, r2
 800af48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af4e:	2300      	movs	r3, #0
 800af50:	75fb      	strb	r3, [r7, #23]
 800af52:	e027      	b.n	800afa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	0f1b      	lsrs	r3, r3, #28
 800af58:	2b09      	cmp	r3, #9
 800af5a:	d80b      	bhi.n	800af74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	0f1b      	lsrs	r3, r3, #28
 800af60:	b2da      	uxtb	r2, r3
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	4619      	mov	r1, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	440b      	add	r3, r1
 800af6c:	3230      	adds	r2, #48	@ 0x30
 800af6e:	b2d2      	uxtb	r2, r2
 800af70:	701a      	strb	r2, [r3, #0]
 800af72:	e00a      	b.n	800af8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	0f1b      	lsrs	r3, r3, #28
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	005b      	lsls	r3, r3, #1
 800af7e:	4619      	mov	r1, r3
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	440b      	add	r3, r1
 800af84:	3237      	adds	r2, #55	@ 0x37
 800af86:	b2d2      	uxtb	r2, r2
 800af88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af90:	7dfb      	ldrb	r3, [r7, #23]
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	3301      	adds	r3, #1
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	4413      	add	r3, r2
 800af9a:	2200      	movs	r2, #0
 800af9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af9e:	7dfb      	ldrb	r3, [r7, #23]
 800afa0:	3301      	adds	r3, #1
 800afa2:	75fb      	strb	r3, [r7, #23]
 800afa4:	7dfa      	ldrb	r2, [r7, #23]
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d3d3      	bcc.n	800af54 <IntToUnicode+0x18>
  }
}
 800afac:	bf00      	nop
 800afae:	bf00      	nop
 800afb0:	371c      	adds	r7, #28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
	...

0800afbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b0ba      	sub	sp, #232	@ 0xe8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800afc8:	2200      	movs	r2, #0
 800afca:	601a      	str	r2, [r3, #0]
 800afcc:	605a      	str	r2, [r3, #4]
 800afce:	609a      	str	r2, [r3, #8]
 800afd0:	60da      	str	r2, [r3, #12]
 800afd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800afd4:	f107 0310 	add.w	r3, r7, #16
 800afd8:	22c0      	movs	r2, #192	@ 0xc0
 800afda:	2100      	movs	r1, #0
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fc78 	bl	800b8d2 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a45      	ldr	r2, [pc, #276]	@ (800b0fc <HAL_PCD_MspInit+0x140>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	f040 8082 	bne.w	800b0f2 <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800afee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800aff2:	f04f 0300 	mov.w	r3, #0
 800aff6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800affa:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800affe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b002:	f107 0310 	add.w	r3, r7, #16
 800b006:	4618      	mov	r0, r3
 800b008:	f7f9 fc28 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800b012:	f7f6 f813 	bl	800103c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800b016:	f7f8 fc69 	bl	80038ec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b01a:	4b39      	ldr	r3, [pc, #228]	@ (800b100 <HAL_PCD_MspInit+0x144>)
 800b01c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b020:	4a37      	ldr	r2, [pc, #220]	@ (800b100 <HAL_PCD_MspInit+0x144>)
 800b022:	f043 0301 	orr.w	r3, r3, #1
 800b026:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b02a:	4b35      	ldr	r3, [pc, #212]	@ (800b100 <HAL_PCD_MspInit+0x144>)
 800b02c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
 800b036:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b038:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b03c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b040:	2300      	movs	r3, #0
 800b042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b046:	2300      	movs	r3, #0
 800b048:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b04c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b050:	4619      	mov	r1, r3
 800b052:	482c      	ldr	r0, [pc, #176]	@ (800b104 <HAL_PCD_MspInit+0x148>)
 800b054:	f7f6 fcde 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b058:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b05c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b060:	2302      	movs	r3, #2
 800b062:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b066:	2300      	movs	r3, #0
 800b068:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b06c:	2300      	movs	r3, #0
 800b06e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b072:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b076:	4619      	mov	r1, r3
 800b078:	4822      	ldr	r0, [pc, #136]	@ (800b104 <HAL_PCD_MspInit+0x148>)
 800b07a:	f7f6 fccb 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800b07e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b086:	2302      	movs	r3, #2
 800b088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b08c:	2301      	movs	r3, #1
 800b08e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b092:	2300      	movs	r3, #0
 800b094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b098:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800b09c:	4619      	mov	r1, r3
 800b09e:	4819      	ldr	r0, [pc, #100]	@ (800b104 <HAL_PCD_MspInit+0x148>)
 800b0a0:	f7f6 fcb8 	bl	8001a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b0a4:	4b16      	ldr	r3, [pc, #88]	@ (800b100 <HAL_PCD_MspInit+0x144>)
 800b0a6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b0aa:	4a15      	ldr	r2, [pc, #84]	@ (800b100 <HAL_PCD_MspInit+0x144>)
 800b0ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b0b0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800b0b4:	4b12      	ldr	r3, [pc, #72]	@ (800b100 <HAL_PCD_MspInit+0x144>)
 800b0b6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800b0ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0be:	60bb      	str	r3, [r7, #8]
 800b0c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	204a      	movs	r0, #74	@ 0x4a
 800b0c8:	f7f6 fc17 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800b0cc:	204a      	movs	r0, #74	@ 0x4a
 800b0ce:	f7f6 fc2e 	bl	800192e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	204b      	movs	r0, #75	@ 0x4b
 800b0d8:	f7f6 fc0f 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800b0dc:	204b      	movs	r0, #75	@ 0x4b
 800b0de:	f7f6 fc26 	bl	800192e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	204d      	movs	r0, #77	@ 0x4d
 800b0e8:	f7f6 fc07 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b0ec:	204d      	movs	r0, #77	@ 0x4d
 800b0ee:	f7f6 fc1e 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b0f2:	bf00      	nop
 800b0f4:	37e8      	adds	r7, #232	@ 0xe8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	40040000 	.word	0x40040000
 800b100:	58024400 	.word	0x58024400
 800b104:	58020000 	.word	0x58020000

0800b108 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f7fe facb 	bl	80096ba <USBD_LL_SetupStage>
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	440b      	add	r3, r1
 800b14c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	78fb      	ldrb	r3, [r7, #3]
 800b154:	4619      	mov	r1, r3
 800b156:	f7fe fb05 	bl	8009764 <USBD_LL_DataOutStage>
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	460b      	mov	r3, r1
 800b16c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b174:	78fa      	ldrb	r2, [r7, #3]
 800b176:	6879      	ldr	r1, [r7, #4]
 800b178:	4613      	mov	r3, r2
 800b17a:	00db      	lsls	r3, r3, #3
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	440b      	add	r3, r1
 800b182:	3320      	adds	r3, #32
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	78fb      	ldrb	r3, [r7, #3]
 800b188:	4619      	mov	r1, r3
 800b18a:	f7fe fb9e 	bl	80098ca <USBD_LL_DataInStage>
}
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b082      	sub	sp, #8
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7fe fcd8 	bl	8009b5a <USBD_LL_SOF>
}
 800b1aa:	bf00      	nop
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	79db      	ldrb	r3, [r3, #7]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d102      	bne.n	800b1cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73fb      	strb	r3, [r7, #15]
 800b1ca:	e008      	b.n	800b1de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	79db      	ldrb	r3, [r3, #7]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d102      	bne.n	800b1da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	73fb      	strb	r3, [r7, #15]
 800b1d8:	e001      	b.n	800b1de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b1da:	f7f5 ff2f 	bl	800103c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1e4:	7bfa      	ldrb	r2, [r7, #15]
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7fe fc72 	bl	8009ad2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fe fc1a 	bl	8009a2e <USBD_LL_Reset>
}
 800b1fa:	bf00      	nop
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
	...

0800b204 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b212:	4618      	mov	r0, r3
 800b214:	f7fe fc6d 	bl	8009af2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	6812      	ldr	r2, [r2, #0]
 800b226:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b22a:	f043 0301 	orr.w	r3, r3, #1
 800b22e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7adb      	ldrb	r3, [r3, #11]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d005      	beq.n	800b244 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b238:	4b04      	ldr	r3, [pc, #16]	@ (800b24c <HAL_PCD_SuspendCallback+0x48>)
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	4a03      	ldr	r2, [pc, #12]	@ (800b24c <HAL_PCD_SuspendCallback+0x48>)
 800b23e:	f043 0306 	orr.w	r3, r3, #6
 800b242:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	e000ed00 	.word	0xe000ed00

0800b250 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fc63 	bl	8009b2a <USBD_LL_Resume>
}
 800b264:	bf00      	nop
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b27e:	78fa      	ldrb	r2, [r7, #3]
 800b280:	4611      	mov	r1, r2
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe fcbb 	bl	8009bfe <USBD_LL_IsoOUTIncomplete>
}
 800b288:	bf00      	nop
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe fc77 	bl	8009b9a <USBD_LL_IsoINIncomplete>
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe fccd 	bl	8009c62 <USBD_LL_DevConnected>
}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fe fcca 	bl	8009c78 <USBD_LL_DevDisconnected>
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d140      	bne.n	800b37e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b2fc:	4a22      	ldr	r2, [pc, #136]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a20      	ldr	r2, [pc, #128]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b308:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b30c:	4b1e      	ldr	r3, [pc, #120]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b30e:	4a1f      	ldr	r2, [pc, #124]	@ (800b38c <USBD_LL_Init+0xa0>)
 800b310:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800b312:	4b1d      	ldr	r3, [pc, #116]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b314:	2209      	movs	r2, #9
 800b316:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b318:	4b1b      	ldr	r3, [pc, #108]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b31a:	2202      	movs	r2, #2
 800b31c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b31e:	4b1a      	ldr	r3, [pc, #104]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b320:	2200      	movs	r2, #0
 800b322:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b324:	4b18      	ldr	r3, [pc, #96]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b326:	2202      	movs	r2, #2
 800b328:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b32a:	4b17      	ldr	r3, [pc, #92]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b330:	4b15      	ldr	r3, [pc, #84]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b332:	2200      	movs	r2, #0
 800b334:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b336:	4b14      	ldr	r3, [pc, #80]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b338:	2200      	movs	r2, #0
 800b33a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800b33c:	4b12      	ldr	r3, [pc, #72]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b33e:	2201      	movs	r2, #1
 800b340:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b342:	4b11      	ldr	r3, [pc, #68]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b344:	2200      	movs	r2, #0
 800b346:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b348:	4b0f      	ldr	r3, [pc, #60]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b34e:	480e      	ldr	r0, [pc, #56]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b350:	f7f6 fff2 	bl	8002338 <HAL_PCD_Init>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b35a:	f7f5 fe6f 	bl	800103c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b35e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b362:	4809      	ldr	r0, [pc, #36]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b364:	f7f8 fa47 	bl	80037f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b368:	2280      	movs	r2, #128	@ 0x80
 800b36a:	2100      	movs	r1, #0
 800b36c:	4806      	ldr	r0, [pc, #24]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b36e:	f7f8 f9fb 	bl	8003768 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b372:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b376:	2101      	movs	r1, #1
 800b378:	4803      	ldr	r0, [pc, #12]	@ (800b388 <USBD_LL_Init+0x9c>)
 800b37a:	f7f8 f9f5 	bl	8003768 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	2400188c 	.word	0x2400188c
 800b38c:	40040000 	.word	0x40040000

0800b390 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f7 f8d2 	bl	8002550 <HAL_PCD_Start>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 f942 	bl	800b63c <USBD_Get_USB_Status>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b084      	sub	sp, #16
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	4608      	mov	r0, r1
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	70fb      	strb	r3, [r7, #3]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	70bb      	strb	r3, [r7, #2]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b3ee:	78bb      	ldrb	r3, [r7, #2]
 800b3f0:	883a      	ldrh	r2, [r7, #0]
 800b3f2:	78f9      	ldrb	r1, [r7, #3]
 800b3f4:	f7f7 fdd3 	bl	8002f9e <HAL_PCD_EP_Open>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 f91c 	bl	800b63c <USBD_Get_USB_Status>
 800b404:	4603      	mov	r3, r0
 800b406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b408:	7bbb      	ldrb	r3, [r7, #14]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b42c:	78fa      	ldrb	r2, [r7, #3]
 800b42e:	4611      	mov	r1, r2
 800b430:	4618      	mov	r0, r3
 800b432:	f7f7 fe1e 	bl	8003072 <HAL_PCD_EP_Close>
 800b436:	4603      	mov	r3, r0
 800b438:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 f8fd 	bl	800b63c <USBD_Get_USB_Status>
 800b442:	4603      	mov	r3, r0
 800b444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b446:	7bbb      	ldrb	r3, [r7, #14]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b46a:	78fa      	ldrb	r2, [r7, #3]
 800b46c:	4611      	mov	r1, r2
 800b46e:	4618      	mov	r0, r3
 800b470:	f7f7 fed6 	bl	8003220 <HAL_PCD_EP_SetStall>
 800b474:	4603      	mov	r3, r0
 800b476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 f8de 	bl	800b63c <USBD_Get_USB_Status>
 800b480:	4603      	mov	r3, r0
 800b482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b484:	7bbb      	ldrb	r3, [r7, #14]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4a8:	78fa      	ldrb	r2, [r7, #3]
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7f7 ff1a 	bl	80032e6 <HAL_PCD_EP_ClrStall>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 f8bf 	bl	800b63c <USBD_Get_USB_Status>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b4e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	da0b      	bge.n	800b500 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b4e8:	78fb      	ldrb	r3, [r7, #3]
 800b4ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	4413      	add	r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	440b      	add	r3, r1
 800b4fa:	3316      	adds	r3, #22
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	e00b      	b.n	800b518 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b506:	68f9      	ldr	r1, [r7, #12]
 800b508:	4613      	mov	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	4413      	add	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	440b      	add	r3, r1
 800b512:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b516:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b53e:	78fa      	ldrb	r2, [r7, #3]
 800b540:	4611      	mov	r1, r2
 800b542:	4618      	mov	r0, r3
 800b544:	f7f7 fd07 	bl	8002f56 <HAL_PCD_SetAddress>
 800b548:	4603      	mov	r3, r0
 800b54a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 f874 	bl	800b63c <USBD_Get_USB_Status>
 800b554:	4603      	mov	r3, r0
 800b556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b558:	7bbb      	ldrb	r3, [r7, #14]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b086      	sub	sp, #24
 800b566:	af00      	add	r7, sp, #0
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
 800b56e:	460b      	mov	r3, r1
 800b570:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b576:	2300      	movs	r3, #0
 800b578:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b580:	7af9      	ldrb	r1, [r7, #11]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	f7f7 fe11 	bl	80031ac <HAL_PCD_EP_Transmit>
 800b58a:	4603      	mov	r3, r0
 800b58c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	4618      	mov	r0, r3
 800b592:	f000 f853 	bl	800b63c <USBD_Get_USB_Status>
 800b596:	4603      	mov	r3, r0
 800b598:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b59a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	607a      	str	r2, [r7, #4]
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b5c2:	7af9      	ldrb	r1, [r7, #11]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	f7f7 fd9d 	bl	8003106 <HAL_PCD_EP_Receive>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 f832 	bl	800b63c <USBD_Get_USB_Status>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b5dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b082      	sub	sp, #8
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5f8:	78fa      	ldrb	r2, [r7, #3]
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f7 fdbd 	bl	800317c <HAL_PCD_EP_GetRxCount>
 800b602:	4603      	mov	r3, r0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b614:	4b03      	ldr	r3, [pc, #12]	@ (800b624 <USBD_static_malloc+0x18>)
}
 800b616:	4618      	mov	r0, r3
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	24001d70 	.word	0x24001d70

0800b628 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	d817      	bhi.n	800b680 <USBD_Get_USB_Status+0x44>
 800b650:	a201      	add	r2, pc, #4	@ (adr r2, 800b658 <USBD_Get_USB_Status+0x1c>)
 800b652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b656:	bf00      	nop
 800b658:	0800b669 	.word	0x0800b669
 800b65c:	0800b66f 	.word	0x0800b66f
 800b660:	0800b675 	.word	0x0800b675
 800b664:	0800b67b 	.word	0x0800b67b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	73fb      	strb	r3, [r7, #15]
    break;
 800b66c:	e00b      	b.n	800b686 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b66e:	2303      	movs	r3, #3
 800b670:	73fb      	strb	r3, [r7, #15]
    break;
 800b672:	e008      	b.n	800b686 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b674:	2301      	movs	r3, #1
 800b676:	73fb      	strb	r3, [r7, #15]
    break;
 800b678:	e005      	b.n	800b686 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b67a:	2303      	movs	r3, #3
 800b67c:	73fb      	strb	r3, [r7, #15]
    break;
 800b67e:	e002      	b.n	800b686 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b680:	2303      	movs	r3, #3
 800b682:	73fb      	strb	r3, [r7, #15]
    break;
 800b684:	bf00      	nop
  }
  return usb_status;
 800b686:	7bfb      	ldrb	r3, [r7, #15]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <std>:
 800b694:	2300      	movs	r3, #0
 800b696:	b510      	push	{r4, lr}
 800b698:	4604      	mov	r4, r0
 800b69a:	e9c0 3300 	strd	r3, r3, [r0]
 800b69e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6a2:	6083      	str	r3, [r0, #8]
 800b6a4:	8181      	strh	r1, [r0, #12]
 800b6a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b6a8:	81c2      	strh	r2, [r0, #14]
 800b6aa:	6183      	str	r3, [r0, #24]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	2208      	movs	r2, #8
 800b6b0:	305c      	adds	r0, #92	@ 0x5c
 800b6b2:	f000 f90e 	bl	800b8d2 <memset>
 800b6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ec <std+0x58>)
 800b6b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f0 <std+0x5c>)
 800b6bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6be:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f4 <std+0x60>)
 800b6c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f8 <std+0x64>)
 800b6c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b6fc <std+0x68>)
 800b6c8:	6224      	str	r4, [r4, #32]
 800b6ca:	429c      	cmp	r4, r3
 800b6cc:	d006      	beq.n	800b6dc <std+0x48>
 800b6ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6d2:	4294      	cmp	r4, r2
 800b6d4:	d002      	beq.n	800b6dc <std+0x48>
 800b6d6:	33d0      	adds	r3, #208	@ 0xd0
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	d105      	bne.n	800b6e8 <std+0x54>
 800b6dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e4:	f000 b96e 	b.w	800b9c4 <__retarget_lock_init_recursive>
 800b6e8:	bd10      	pop	{r4, pc}
 800b6ea:	bf00      	nop
 800b6ec:	0800b84d 	.word	0x0800b84d
 800b6f0:	0800b86f 	.word	0x0800b86f
 800b6f4:	0800b8a7 	.word	0x0800b8a7
 800b6f8:	0800b8cb 	.word	0x0800b8cb
 800b6fc:	24001f90 	.word	0x24001f90

0800b700 <stdio_exit_handler>:
 800b700:	4a02      	ldr	r2, [pc, #8]	@ (800b70c <stdio_exit_handler+0xc>)
 800b702:	4903      	ldr	r1, [pc, #12]	@ (800b710 <stdio_exit_handler+0x10>)
 800b704:	4803      	ldr	r0, [pc, #12]	@ (800b714 <stdio_exit_handler+0x14>)
 800b706:	f000 b869 	b.w	800b7dc <_fwalk_sglue>
 800b70a:	bf00      	nop
 800b70c:	24000104 	.word	0x24000104
 800b710:	0800c265 	.word	0x0800c265
 800b714:	24000114 	.word	0x24000114

0800b718 <cleanup_stdio>:
 800b718:	6841      	ldr	r1, [r0, #4]
 800b71a:	4b0c      	ldr	r3, [pc, #48]	@ (800b74c <cleanup_stdio+0x34>)
 800b71c:	4299      	cmp	r1, r3
 800b71e:	b510      	push	{r4, lr}
 800b720:	4604      	mov	r4, r0
 800b722:	d001      	beq.n	800b728 <cleanup_stdio+0x10>
 800b724:	f000 fd9e 	bl	800c264 <_fflush_r>
 800b728:	68a1      	ldr	r1, [r4, #8]
 800b72a:	4b09      	ldr	r3, [pc, #36]	@ (800b750 <cleanup_stdio+0x38>)
 800b72c:	4299      	cmp	r1, r3
 800b72e:	d002      	beq.n	800b736 <cleanup_stdio+0x1e>
 800b730:	4620      	mov	r0, r4
 800b732:	f000 fd97 	bl	800c264 <_fflush_r>
 800b736:	68e1      	ldr	r1, [r4, #12]
 800b738:	4b06      	ldr	r3, [pc, #24]	@ (800b754 <cleanup_stdio+0x3c>)
 800b73a:	4299      	cmp	r1, r3
 800b73c:	d004      	beq.n	800b748 <cleanup_stdio+0x30>
 800b73e:	4620      	mov	r0, r4
 800b740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b744:	f000 bd8e 	b.w	800c264 <_fflush_r>
 800b748:	bd10      	pop	{r4, pc}
 800b74a:	bf00      	nop
 800b74c:	24001f90 	.word	0x24001f90
 800b750:	24001ff8 	.word	0x24001ff8
 800b754:	24002060 	.word	0x24002060

0800b758 <global_stdio_init.part.0>:
 800b758:	b510      	push	{r4, lr}
 800b75a:	4b0b      	ldr	r3, [pc, #44]	@ (800b788 <global_stdio_init.part.0+0x30>)
 800b75c:	4c0b      	ldr	r4, [pc, #44]	@ (800b78c <global_stdio_init.part.0+0x34>)
 800b75e:	4a0c      	ldr	r2, [pc, #48]	@ (800b790 <global_stdio_init.part.0+0x38>)
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	4620      	mov	r0, r4
 800b764:	2200      	movs	r2, #0
 800b766:	2104      	movs	r1, #4
 800b768:	f7ff ff94 	bl	800b694 <std>
 800b76c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b770:	2201      	movs	r2, #1
 800b772:	2109      	movs	r1, #9
 800b774:	f7ff ff8e 	bl	800b694 <std>
 800b778:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b77c:	2202      	movs	r2, #2
 800b77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b782:	2112      	movs	r1, #18
 800b784:	f7ff bf86 	b.w	800b694 <std>
 800b788:	240020c8 	.word	0x240020c8
 800b78c:	24001f90 	.word	0x24001f90
 800b790:	0800b701 	.word	0x0800b701

0800b794 <__sfp_lock_acquire>:
 800b794:	4801      	ldr	r0, [pc, #4]	@ (800b79c <__sfp_lock_acquire+0x8>)
 800b796:	f000 b916 	b.w	800b9c6 <__retarget_lock_acquire_recursive>
 800b79a:	bf00      	nop
 800b79c:	240020d1 	.word	0x240020d1

0800b7a0 <__sfp_lock_release>:
 800b7a0:	4801      	ldr	r0, [pc, #4]	@ (800b7a8 <__sfp_lock_release+0x8>)
 800b7a2:	f000 b911 	b.w	800b9c8 <__retarget_lock_release_recursive>
 800b7a6:	bf00      	nop
 800b7a8:	240020d1 	.word	0x240020d1

0800b7ac <__sinit>:
 800b7ac:	b510      	push	{r4, lr}
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	f7ff fff0 	bl	800b794 <__sfp_lock_acquire>
 800b7b4:	6a23      	ldr	r3, [r4, #32]
 800b7b6:	b11b      	cbz	r3, 800b7c0 <__sinit+0x14>
 800b7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7bc:	f7ff bff0 	b.w	800b7a0 <__sfp_lock_release>
 800b7c0:	4b04      	ldr	r3, [pc, #16]	@ (800b7d4 <__sinit+0x28>)
 800b7c2:	6223      	str	r3, [r4, #32]
 800b7c4:	4b04      	ldr	r3, [pc, #16]	@ (800b7d8 <__sinit+0x2c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1f5      	bne.n	800b7b8 <__sinit+0xc>
 800b7cc:	f7ff ffc4 	bl	800b758 <global_stdio_init.part.0>
 800b7d0:	e7f2      	b.n	800b7b8 <__sinit+0xc>
 800b7d2:	bf00      	nop
 800b7d4:	0800b719 	.word	0x0800b719
 800b7d8:	240020c8 	.word	0x240020c8

0800b7dc <_fwalk_sglue>:
 800b7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	4688      	mov	r8, r1
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	2600      	movs	r6, #0
 800b7e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7ec:	f1b9 0901 	subs.w	r9, r9, #1
 800b7f0:	d505      	bpl.n	800b7fe <_fwalk_sglue+0x22>
 800b7f2:	6824      	ldr	r4, [r4, #0]
 800b7f4:	2c00      	cmp	r4, #0
 800b7f6:	d1f7      	bne.n	800b7e8 <_fwalk_sglue+0xc>
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7fe:	89ab      	ldrh	r3, [r5, #12]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d907      	bls.n	800b814 <_fwalk_sglue+0x38>
 800b804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b808:	3301      	adds	r3, #1
 800b80a:	d003      	beq.n	800b814 <_fwalk_sglue+0x38>
 800b80c:	4629      	mov	r1, r5
 800b80e:	4638      	mov	r0, r7
 800b810:	47c0      	blx	r8
 800b812:	4306      	orrs	r6, r0
 800b814:	3568      	adds	r5, #104	@ 0x68
 800b816:	e7e9      	b.n	800b7ec <_fwalk_sglue+0x10>

0800b818 <iprintf>:
 800b818:	b40f      	push	{r0, r1, r2, r3}
 800b81a:	b507      	push	{r0, r1, r2, lr}
 800b81c:	4906      	ldr	r1, [pc, #24]	@ (800b838 <iprintf+0x20>)
 800b81e:	ab04      	add	r3, sp, #16
 800b820:	6808      	ldr	r0, [r1, #0]
 800b822:	f853 2b04 	ldr.w	r2, [r3], #4
 800b826:	6881      	ldr	r1, [r0, #8]
 800b828:	9301      	str	r3, [sp, #4]
 800b82a:	f000 f9f1 	bl	800bc10 <_vfiprintf_r>
 800b82e:	b003      	add	sp, #12
 800b830:	f85d eb04 	ldr.w	lr, [sp], #4
 800b834:	b004      	add	sp, #16
 800b836:	4770      	bx	lr
 800b838:	24000110 	.word	0x24000110

0800b83c <putchar>:
 800b83c:	4b02      	ldr	r3, [pc, #8]	@ (800b848 <putchar+0xc>)
 800b83e:	4601      	mov	r1, r0
 800b840:	6818      	ldr	r0, [r3, #0]
 800b842:	6882      	ldr	r2, [r0, #8]
 800b844:	f000 bd36 	b.w	800c2b4 <_putc_r>
 800b848:	24000110 	.word	0x24000110

0800b84c <__sread>:
 800b84c:	b510      	push	{r4, lr}
 800b84e:	460c      	mov	r4, r1
 800b850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b854:	f000 f868 	bl	800b928 <_read_r>
 800b858:	2800      	cmp	r0, #0
 800b85a:	bfab      	itete	ge
 800b85c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b85e:	89a3      	ldrhlt	r3, [r4, #12]
 800b860:	181b      	addge	r3, r3, r0
 800b862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b866:	bfac      	ite	ge
 800b868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b86a:	81a3      	strhlt	r3, [r4, #12]
 800b86c:	bd10      	pop	{r4, pc}

0800b86e <__swrite>:
 800b86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b872:	461f      	mov	r7, r3
 800b874:	898b      	ldrh	r3, [r1, #12]
 800b876:	05db      	lsls	r3, r3, #23
 800b878:	4605      	mov	r5, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	4616      	mov	r6, r2
 800b87e:	d505      	bpl.n	800b88c <__swrite+0x1e>
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	2302      	movs	r3, #2
 800b886:	2200      	movs	r2, #0
 800b888:	f000 f83c 	bl	800b904 <_lseek_r>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	4632      	mov	r2, r6
 800b89a:	463b      	mov	r3, r7
 800b89c:	4628      	mov	r0, r5
 800b89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a2:	f000 b853 	b.w	800b94c <_write_r>

0800b8a6 <__sseek>:
 800b8a6:	b510      	push	{r4, lr}
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ae:	f000 f829 	bl	800b904 <_lseek_r>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	bf15      	itete	ne
 800b8b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8c2:	81a3      	strheq	r3, [r4, #12]
 800b8c4:	bf18      	it	ne
 800b8c6:	81a3      	strhne	r3, [r4, #12]
 800b8c8:	bd10      	pop	{r4, pc}

0800b8ca <__sclose>:
 800b8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ce:	f000 b809 	b.w	800b8e4 <_close_r>

0800b8d2 <memset>:
 800b8d2:	4402      	add	r2, r0
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d100      	bne.n	800b8dc <memset+0xa>
 800b8da:	4770      	bx	lr
 800b8dc:	f803 1b01 	strb.w	r1, [r3], #1
 800b8e0:	e7f9      	b.n	800b8d6 <memset+0x4>
	...

0800b8e4 <_close_r>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	4d06      	ldr	r5, [pc, #24]	@ (800b900 <_close_r+0x1c>)
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	4608      	mov	r0, r1
 800b8ee:	602b      	str	r3, [r5, #0]
 800b8f0:	f7f5 fd65 	bl	80013be <_close>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d102      	bne.n	800b8fe <_close_r+0x1a>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	b103      	cbz	r3, 800b8fe <_close_r+0x1a>
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	240020cc 	.word	0x240020cc

0800b904 <_lseek_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d07      	ldr	r5, [pc, #28]	@ (800b924 <_lseek_r+0x20>)
 800b908:	4604      	mov	r4, r0
 800b90a:	4608      	mov	r0, r1
 800b90c:	4611      	mov	r1, r2
 800b90e:	2200      	movs	r2, #0
 800b910:	602a      	str	r2, [r5, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	f7f5 fd7a 	bl	800140c <_lseek>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	d102      	bne.n	800b922 <_lseek_r+0x1e>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b103      	cbz	r3, 800b922 <_lseek_r+0x1e>
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	240020cc 	.word	0x240020cc

0800b928 <_read_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d07      	ldr	r5, [pc, #28]	@ (800b948 <_read_r+0x20>)
 800b92c:	4604      	mov	r4, r0
 800b92e:	4608      	mov	r0, r1
 800b930:	4611      	mov	r1, r2
 800b932:	2200      	movs	r2, #0
 800b934:	602a      	str	r2, [r5, #0]
 800b936:	461a      	mov	r2, r3
 800b938:	f7f5 fd08 	bl	800134c <_read>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_read_r+0x1e>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_read_r+0x1e>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	240020cc 	.word	0x240020cc

0800b94c <_write_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d07      	ldr	r5, [pc, #28]	@ (800b96c <_write_r+0x20>)
 800b950:	4604      	mov	r4, r0
 800b952:	4608      	mov	r0, r1
 800b954:	4611      	mov	r1, r2
 800b956:	2200      	movs	r2, #0
 800b958:	602a      	str	r2, [r5, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f7f5 fd13 	bl	8001386 <_write>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_write_r+0x1e>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_write_r+0x1e>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	240020cc 	.word	0x240020cc

0800b970 <__errno>:
 800b970:	4b01      	ldr	r3, [pc, #4]	@ (800b978 <__errno+0x8>)
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	24000110 	.word	0x24000110

0800b97c <__libc_init_array>:
 800b97c:	b570      	push	{r4, r5, r6, lr}
 800b97e:	4d0d      	ldr	r5, [pc, #52]	@ (800b9b4 <__libc_init_array+0x38>)
 800b980:	4c0d      	ldr	r4, [pc, #52]	@ (800b9b8 <__libc_init_array+0x3c>)
 800b982:	1b64      	subs	r4, r4, r5
 800b984:	10a4      	asrs	r4, r4, #2
 800b986:	2600      	movs	r6, #0
 800b988:	42a6      	cmp	r6, r4
 800b98a:	d109      	bne.n	800b9a0 <__libc_init_array+0x24>
 800b98c:	4d0b      	ldr	r5, [pc, #44]	@ (800b9bc <__libc_init_array+0x40>)
 800b98e:	4c0c      	ldr	r4, [pc, #48]	@ (800b9c0 <__libc_init_array+0x44>)
 800b990:	f000 fdec 	bl	800c56c <_init>
 800b994:	1b64      	subs	r4, r4, r5
 800b996:	10a4      	asrs	r4, r4, #2
 800b998:	2600      	movs	r6, #0
 800b99a:	42a6      	cmp	r6, r4
 800b99c:	d105      	bne.n	800b9aa <__libc_init_array+0x2e>
 800b99e:	bd70      	pop	{r4, r5, r6, pc}
 800b9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a4:	4798      	blx	r3
 800b9a6:	3601      	adds	r6, #1
 800b9a8:	e7ee      	b.n	800b988 <__libc_init_array+0xc>
 800b9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ae:	4798      	blx	r3
 800b9b0:	3601      	adds	r6, #1
 800b9b2:	e7f2      	b.n	800b99a <__libc_init_array+0x1e>
 800b9b4:	0800c684 	.word	0x0800c684
 800b9b8:	0800c684 	.word	0x0800c684
 800b9bc:	0800c684 	.word	0x0800c684
 800b9c0:	0800c688 	.word	0x0800c688

0800b9c4 <__retarget_lock_init_recursive>:
 800b9c4:	4770      	bx	lr

0800b9c6 <__retarget_lock_acquire_recursive>:
 800b9c6:	4770      	bx	lr

0800b9c8 <__retarget_lock_release_recursive>:
 800b9c8:	4770      	bx	lr
	...

0800b9cc <_free_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4605      	mov	r5, r0
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	d041      	beq.n	800ba58 <_free_r+0x8c>
 800b9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d8:	1f0c      	subs	r4, r1, #4
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bfb8      	it	lt
 800b9de:	18e4      	addlt	r4, r4, r3
 800b9e0:	f000 f8e0 	bl	800bba4 <__malloc_lock>
 800b9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800ba5c <_free_r+0x90>)
 800b9e6:	6813      	ldr	r3, [r2, #0]
 800b9e8:	b933      	cbnz	r3, 800b9f8 <_free_r+0x2c>
 800b9ea:	6063      	str	r3, [r4, #4]
 800b9ec:	6014      	str	r4, [r2, #0]
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9f4:	f000 b8dc 	b.w	800bbb0 <__malloc_unlock>
 800b9f8:	42a3      	cmp	r3, r4
 800b9fa:	d908      	bls.n	800ba0e <_free_r+0x42>
 800b9fc:	6820      	ldr	r0, [r4, #0]
 800b9fe:	1821      	adds	r1, r4, r0
 800ba00:	428b      	cmp	r3, r1
 800ba02:	bf01      	itttt	eq
 800ba04:	6819      	ldreq	r1, [r3, #0]
 800ba06:	685b      	ldreq	r3, [r3, #4]
 800ba08:	1809      	addeq	r1, r1, r0
 800ba0a:	6021      	streq	r1, [r4, #0]
 800ba0c:	e7ed      	b.n	800b9ea <_free_r+0x1e>
 800ba0e:	461a      	mov	r2, r3
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	b10b      	cbz	r3, 800ba18 <_free_r+0x4c>
 800ba14:	42a3      	cmp	r3, r4
 800ba16:	d9fa      	bls.n	800ba0e <_free_r+0x42>
 800ba18:	6811      	ldr	r1, [r2, #0]
 800ba1a:	1850      	adds	r0, r2, r1
 800ba1c:	42a0      	cmp	r0, r4
 800ba1e:	d10b      	bne.n	800ba38 <_free_r+0x6c>
 800ba20:	6820      	ldr	r0, [r4, #0]
 800ba22:	4401      	add	r1, r0
 800ba24:	1850      	adds	r0, r2, r1
 800ba26:	4283      	cmp	r3, r0
 800ba28:	6011      	str	r1, [r2, #0]
 800ba2a:	d1e0      	bne.n	800b9ee <_free_r+0x22>
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	6053      	str	r3, [r2, #4]
 800ba32:	4408      	add	r0, r1
 800ba34:	6010      	str	r0, [r2, #0]
 800ba36:	e7da      	b.n	800b9ee <_free_r+0x22>
 800ba38:	d902      	bls.n	800ba40 <_free_r+0x74>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	602b      	str	r3, [r5, #0]
 800ba3e:	e7d6      	b.n	800b9ee <_free_r+0x22>
 800ba40:	6820      	ldr	r0, [r4, #0]
 800ba42:	1821      	adds	r1, r4, r0
 800ba44:	428b      	cmp	r3, r1
 800ba46:	bf04      	itt	eq
 800ba48:	6819      	ldreq	r1, [r3, #0]
 800ba4a:	685b      	ldreq	r3, [r3, #4]
 800ba4c:	6063      	str	r3, [r4, #4]
 800ba4e:	bf04      	itt	eq
 800ba50:	1809      	addeq	r1, r1, r0
 800ba52:	6021      	streq	r1, [r4, #0]
 800ba54:	6054      	str	r4, [r2, #4]
 800ba56:	e7ca      	b.n	800b9ee <_free_r+0x22>
 800ba58:	bd38      	pop	{r3, r4, r5, pc}
 800ba5a:	bf00      	nop
 800ba5c:	240020d8 	.word	0x240020d8

0800ba60 <sbrk_aligned>:
 800ba60:	b570      	push	{r4, r5, r6, lr}
 800ba62:	4e0f      	ldr	r6, [pc, #60]	@ (800baa0 <sbrk_aligned+0x40>)
 800ba64:	460c      	mov	r4, r1
 800ba66:	6831      	ldr	r1, [r6, #0]
 800ba68:	4605      	mov	r5, r0
 800ba6a:	b911      	cbnz	r1, 800ba72 <sbrk_aligned+0x12>
 800ba6c:	f000 fcea 	bl	800c444 <_sbrk_r>
 800ba70:	6030      	str	r0, [r6, #0]
 800ba72:	4621      	mov	r1, r4
 800ba74:	4628      	mov	r0, r5
 800ba76:	f000 fce5 	bl	800c444 <_sbrk_r>
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	d103      	bne.n	800ba86 <sbrk_aligned+0x26>
 800ba7e:	f04f 34ff 	mov.w	r4, #4294967295
 800ba82:	4620      	mov	r0, r4
 800ba84:	bd70      	pop	{r4, r5, r6, pc}
 800ba86:	1cc4      	adds	r4, r0, #3
 800ba88:	f024 0403 	bic.w	r4, r4, #3
 800ba8c:	42a0      	cmp	r0, r4
 800ba8e:	d0f8      	beq.n	800ba82 <sbrk_aligned+0x22>
 800ba90:	1a21      	subs	r1, r4, r0
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 fcd6 	bl	800c444 <_sbrk_r>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	d1f2      	bne.n	800ba82 <sbrk_aligned+0x22>
 800ba9c:	e7ef      	b.n	800ba7e <sbrk_aligned+0x1e>
 800ba9e:	bf00      	nop
 800baa0:	240020d4 	.word	0x240020d4

0800baa4 <_malloc_r>:
 800baa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	1ccd      	adds	r5, r1, #3
 800baaa:	f025 0503 	bic.w	r5, r5, #3
 800baae:	3508      	adds	r5, #8
 800bab0:	2d0c      	cmp	r5, #12
 800bab2:	bf38      	it	cc
 800bab4:	250c      	movcc	r5, #12
 800bab6:	2d00      	cmp	r5, #0
 800bab8:	4606      	mov	r6, r0
 800baba:	db01      	blt.n	800bac0 <_malloc_r+0x1c>
 800babc:	42a9      	cmp	r1, r5
 800babe:	d904      	bls.n	800baca <_malloc_r+0x26>
 800bac0:	230c      	movs	r3, #12
 800bac2:	6033      	str	r3, [r6, #0]
 800bac4:	2000      	movs	r0, #0
 800bac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bba0 <_malloc_r+0xfc>
 800bace:	f000 f869 	bl	800bba4 <__malloc_lock>
 800bad2:	f8d8 3000 	ldr.w	r3, [r8]
 800bad6:	461c      	mov	r4, r3
 800bad8:	bb44      	cbnz	r4, 800bb2c <_malloc_r+0x88>
 800bada:	4629      	mov	r1, r5
 800badc:	4630      	mov	r0, r6
 800bade:	f7ff ffbf 	bl	800ba60 <sbrk_aligned>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	4604      	mov	r4, r0
 800bae6:	d158      	bne.n	800bb9a <_malloc_r+0xf6>
 800bae8:	f8d8 4000 	ldr.w	r4, [r8]
 800baec:	4627      	mov	r7, r4
 800baee:	2f00      	cmp	r7, #0
 800baf0:	d143      	bne.n	800bb7a <_malloc_r+0xd6>
 800baf2:	2c00      	cmp	r4, #0
 800baf4:	d04b      	beq.n	800bb8e <_malloc_r+0xea>
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	4639      	mov	r1, r7
 800bafa:	4630      	mov	r0, r6
 800bafc:	eb04 0903 	add.w	r9, r4, r3
 800bb00:	f000 fca0 	bl	800c444 <_sbrk_r>
 800bb04:	4581      	cmp	r9, r0
 800bb06:	d142      	bne.n	800bb8e <_malloc_r+0xea>
 800bb08:	6821      	ldr	r1, [r4, #0]
 800bb0a:	1a6d      	subs	r5, r5, r1
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f7ff ffa6 	bl	800ba60 <sbrk_aligned>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d03a      	beq.n	800bb8e <_malloc_r+0xea>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	442b      	add	r3, r5
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	bb62      	cbnz	r2, 800bb80 <_malloc_r+0xdc>
 800bb26:	f8c8 7000 	str.w	r7, [r8]
 800bb2a:	e00f      	b.n	800bb4c <_malloc_r+0xa8>
 800bb2c:	6822      	ldr	r2, [r4, #0]
 800bb2e:	1b52      	subs	r2, r2, r5
 800bb30:	d420      	bmi.n	800bb74 <_malloc_r+0xd0>
 800bb32:	2a0b      	cmp	r2, #11
 800bb34:	d917      	bls.n	800bb66 <_malloc_r+0xc2>
 800bb36:	1961      	adds	r1, r4, r5
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	6025      	str	r5, [r4, #0]
 800bb3c:	bf18      	it	ne
 800bb3e:	6059      	strne	r1, [r3, #4]
 800bb40:	6863      	ldr	r3, [r4, #4]
 800bb42:	bf08      	it	eq
 800bb44:	f8c8 1000 	streq.w	r1, [r8]
 800bb48:	5162      	str	r2, [r4, r5]
 800bb4a:	604b      	str	r3, [r1, #4]
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f000 f82f 	bl	800bbb0 <__malloc_unlock>
 800bb52:	f104 000b 	add.w	r0, r4, #11
 800bb56:	1d23      	adds	r3, r4, #4
 800bb58:	f020 0007 	bic.w	r0, r0, #7
 800bb5c:	1ac2      	subs	r2, r0, r3
 800bb5e:	bf1c      	itt	ne
 800bb60:	1a1b      	subne	r3, r3, r0
 800bb62:	50a3      	strne	r3, [r4, r2]
 800bb64:	e7af      	b.n	800bac6 <_malloc_r+0x22>
 800bb66:	6862      	ldr	r2, [r4, #4]
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	bf0c      	ite	eq
 800bb6c:	f8c8 2000 	streq.w	r2, [r8]
 800bb70:	605a      	strne	r2, [r3, #4]
 800bb72:	e7eb      	b.n	800bb4c <_malloc_r+0xa8>
 800bb74:	4623      	mov	r3, r4
 800bb76:	6864      	ldr	r4, [r4, #4]
 800bb78:	e7ae      	b.n	800bad8 <_malloc_r+0x34>
 800bb7a:	463c      	mov	r4, r7
 800bb7c:	687f      	ldr	r7, [r7, #4]
 800bb7e:	e7b6      	b.n	800baee <_malloc_r+0x4a>
 800bb80:	461a      	mov	r2, r3
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	42a3      	cmp	r3, r4
 800bb86:	d1fb      	bne.n	800bb80 <_malloc_r+0xdc>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	6053      	str	r3, [r2, #4]
 800bb8c:	e7de      	b.n	800bb4c <_malloc_r+0xa8>
 800bb8e:	230c      	movs	r3, #12
 800bb90:	6033      	str	r3, [r6, #0]
 800bb92:	4630      	mov	r0, r6
 800bb94:	f000 f80c 	bl	800bbb0 <__malloc_unlock>
 800bb98:	e794      	b.n	800bac4 <_malloc_r+0x20>
 800bb9a:	6005      	str	r5, [r0, #0]
 800bb9c:	e7d6      	b.n	800bb4c <_malloc_r+0xa8>
 800bb9e:	bf00      	nop
 800bba0:	240020d8 	.word	0x240020d8

0800bba4 <__malloc_lock>:
 800bba4:	4801      	ldr	r0, [pc, #4]	@ (800bbac <__malloc_lock+0x8>)
 800bba6:	f7ff bf0e 	b.w	800b9c6 <__retarget_lock_acquire_recursive>
 800bbaa:	bf00      	nop
 800bbac:	240020d0 	.word	0x240020d0

0800bbb0 <__malloc_unlock>:
 800bbb0:	4801      	ldr	r0, [pc, #4]	@ (800bbb8 <__malloc_unlock+0x8>)
 800bbb2:	f7ff bf09 	b.w	800b9c8 <__retarget_lock_release_recursive>
 800bbb6:	bf00      	nop
 800bbb8:	240020d0 	.word	0x240020d0

0800bbbc <__sfputc_r>:
 800bbbc:	6893      	ldr	r3, [r2, #8]
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	b410      	push	{r4}
 800bbc4:	6093      	str	r3, [r2, #8]
 800bbc6:	da08      	bge.n	800bbda <__sfputc_r+0x1e>
 800bbc8:	6994      	ldr	r4, [r2, #24]
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	db01      	blt.n	800bbd2 <__sfputc_r+0x16>
 800bbce:	290a      	cmp	r1, #10
 800bbd0:	d103      	bne.n	800bbda <__sfputc_r+0x1e>
 800bbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd6:	f000 bba1 	b.w	800c31c <__swbuf_r>
 800bbda:	6813      	ldr	r3, [r2, #0]
 800bbdc:	1c58      	adds	r0, r3, #1
 800bbde:	6010      	str	r0, [r2, #0]
 800bbe0:	7019      	strb	r1, [r3, #0]
 800bbe2:	4608      	mov	r0, r1
 800bbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <__sfputs_r>:
 800bbea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbec:	4606      	mov	r6, r0
 800bbee:	460f      	mov	r7, r1
 800bbf0:	4614      	mov	r4, r2
 800bbf2:	18d5      	adds	r5, r2, r3
 800bbf4:	42ac      	cmp	r4, r5
 800bbf6:	d101      	bne.n	800bbfc <__sfputs_r+0x12>
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	e007      	b.n	800bc0c <__sfputs_r+0x22>
 800bbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc00:	463a      	mov	r2, r7
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff ffda 	bl	800bbbc <__sfputc_r>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d1f3      	bne.n	800bbf4 <__sfputs_r+0xa>
 800bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc10 <_vfiprintf_r>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	460d      	mov	r5, r1
 800bc16:	b09d      	sub	sp, #116	@ 0x74
 800bc18:	4614      	mov	r4, r2
 800bc1a:	4698      	mov	r8, r3
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	b118      	cbz	r0, 800bc28 <_vfiprintf_r+0x18>
 800bc20:	6a03      	ldr	r3, [r0, #32]
 800bc22:	b90b      	cbnz	r3, 800bc28 <_vfiprintf_r+0x18>
 800bc24:	f7ff fdc2 	bl	800b7ac <__sinit>
 800bc28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc2a:	07d9      	lsls	r1, r3, #31
 800bc2c:	d405      	bmi.n	800bc3a <_vfiprintf_r+0x2a>
 800bc2e:	89ab      	ldrh	r3, [r5, #12]
 800bc30:	059a      	lsls	r2, r3, #22
 800bc32:	d402      	bmi.n	800bc3a <_vfiprintf_r+0x2a>
 800bc34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc36:	f7ff fec6 	bl	800b9c6 <__retarget_lock_acquire_recursive>
 800bc3a:	89ab      	ldrh	r3, [r5, #12]
 800bc3c:	071b      	lsls	r3, r3, #28
 800bc3e:	d501      	bpl.n	800bc44 <_vfiprintf_r+0x34>
 800bc40:	692b      	ldr	r3, [r5, #16]
 800bc42:	b99b      	cbnz	r3, 800bc6c <_vfiprintf_r+0x5c>
 800bc44:	4629      	mov	r1, r5
 800bc46:	4630      	mov	r0, r6
 800bc48:	f000 fba6 	bl	800c398 <__swsetup_r>
 800bc4c:	b170      	cbz	r0, 800bc6c <_vfiprintf_r+0x5c>
 800bc4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc50:	07dc      	lsls	r4, r3, #31
 800bc52:	d504      	bpl.n	800bc5e <_vfiprintf_r+0x4e>
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295
 800bc58:	b01d      	add	sp, #116	@ 0x74
 800bc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5e:	89ab      	ldrh	r3, [r5, #12]
 800bc60:	0598      	lsls	r0, r3, #22
 800bc62:	d4f7      	bmi.n	800bc54 <_vfiprintf_r+0x44>
 800bc64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc66:	f7ff feaf 	bl	800b9c8 <__retarget_lock_release_recursive>
 800bc6a:	e7f3      	b.n	800bc54 <_vfiprintf_r+0x44>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc70:	2320      	movs	r3, #32
 800bc72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc76:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc7a:	2330      	movs	r3, #48	@ 0x30
 800bc7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be2c <_vfiprintf_r+0x21c>
 800bc80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc84:	f04f 0901 	mov.w	r9, #1
 800bc88:	4623      	mov	r3, r4
 800bc8a:	469a      	mov	sl, r3
 800bc8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc90:	b10a      	cbz	r2, 800bc96 <_vfiprintf_r+0x86>
 800bc92:	2a25      	cmp	r2, #37	@ 0x25
 800bc94:	d1f9      	bne.n	800bc8a <_vfiprintf_r+0x7a>
 800bc96:	ebba 0b04 	subs.w	fp, sl, r4
 800bc9a:	d00b      	beq.n	800bcb4 <_vfiprintf_r+0xa4>
 800bc9c:	465b      	mov	r3, fp
 800bc9e:	4622      	mov	r2, r4
 800bca0:	4629      	mov	r1, r5
 800bca2:	4630      	mov	r0, r6
 800bca4:	f7ff ffa1 	bl	800bbea <__sfputs_r>
 800bca8:	3001      	adds	r0, #1
 800bcaa:	f000 80a7 	beq.w	800bdfc <_vfiprintf_r+0x1ec>
 800bcae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcb0:	445a      	add	r2, fp
 800bcb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f000 809f 	beq.w	800bdfc <_vfiprintf_r+0x1ec>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcc8:	f10a 0a01 	add.w	sl, sl, #1
 800bccc:	9304      	str	r3, [sp, #16]
 800bcce:	9307      	str	r3, [sp, #28]
 800bcd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcd6:	4654      	mov	r4, sl
 800bcd8:	2205      	movs	r2, #5
 800bcda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcde:	4853      	ldr	r0, [pc, #332]	@ (800be2c <_vfiprintf_r+0x21c>)
 800bce0:	f7f4 fb06 	bl	80002f0 <memchr>
 800bce4:	9a04      	ldr	r2, [sp, #16]
 800bce6:	b9d8      	cbnz	r0, 800bd20 <_vfiprintf_r+0x110>
 800bce8:	06d1      	lsls	r1, r2, #27
 800bcea:	bf44      	itt	mi
 800bcec:	2320      	movmi	r3, #32
 800bcee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcf2:	0713      	lsls	r3, r2, #28
 800bcf4:	bf44      	itt	mi
 800bcf6:	232b      	movmi	r3, #43	@ 0x2b
 800bcf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcfc:	f89a 3000 	ldrb.w	r3, [sl]
 800bd00:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd02:	d015      	beq.n	800bd30 <_vfiprintf_r+0x120>
 800bd04:	9a07      	ldr	r2, [sp, #28]
 800bd06:	4654      	mov	r4, sl
 800bd08:	2000      	movs	r0, #0
 800bd0a:	f04f 0c0a 	mov.w	ip, #10
 800bd0e:	4621      	mov	r1, r4
 800bd10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd14:	3b30      	subs	r3, #48	@ 0x30
 800bd16:	2b09      	cmp	r3, #9
 800bd18:	d94b      	bls.n	800bdb2 <_vfiprintf_r+0x1a2>
 800bd1a:	b1b0      	cbz	r0, 800bd4a <_vfiprintf_r+0x13a>
 800bd1c:	9207      	str	r2, [sp, #28]
 800bd1e:	e014      	b.n	800bd4a <_vfiprintf_r+0x13a>
 800bd20:	eba0 0308 	sub.w	r3, r0, r8
 800bd24:	fa09 f303 	lsl.w	r3, r9, r3
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	9304      	str	r3, [sp, #16]
 800bd2c:	46a2      	mov	sl, r4
 800bd2e:	e7d2      	b.n	800bcd6 <_vfiprintf_r+0xc6>
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	1d19      	adds	r1, r3, #4
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	9103      	str	r1, [sp, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	bfbb      	ittet	lt
 800bd3c:	425b      	neglt	r3, r3
 800bd3e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd42:	9307      	strge	r3, [sp, #28]
 800bd44:	9307      	strlt	r3, [sp, #28]
 800bd46:	bfb8      	it	lt
 800bd48:	9204      	strlt	r2, [sp, #16]
 800bd4a:	7823      	ldrb	r3, [r4, #0]
 800bd4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd4e:	d10a      	bne.n	800bd66 <_vfiprintf_r+0x156>
 800bd50:	7863      	ldrb	r3, [r4, #1]
 800bd52:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd54:	d132      	bne.n	800bdbc <_vfiprintf_r+0x1ac>
 800bd56:	9b03      	ldr	r3, [sp, #12]
 800bd58:	1d1a      	adds	r2, r3, #4
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	9203      	str	r2, [sp, #12]
 800bd5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd62:	3402      	adds	r4, #2
 800bd64:	9305      	str	r3, [sp, #20]
 800bd66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be3c <_vfiprintf_r+0x22c>
 800bd6a:	7821      	ldrb	r1, [r4, #0]
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4650      	mov	r0, sl
 800bd70:	f7f4 fabe 	bl	80002f0 <memchr>
 800bd74:	b138      	cbz	r0, 800bd86 <_vfiprintf_r+0x176>
 800bd76:	9b04      	ldr	r3, [sp, #16]
 800bd78:	eba0 000a 	sub.w	r0, r0, sl
 800bd7c:	2240      	movs	r2, #64	@ 0x40
 800bd7e:	4082      	lsls	r2, r0
 800bd80:	4313      	orrs	r3, r2
 800bd82:	3401      	adds	r4, #1
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8a:	4829      	ldr	r0, [pc, #164]	@ (800be30 <_vfiprintf_r+0x220>)
 800bd8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd90:	2206      	movs	r2, #6
 800bd92:	f7f4 faad 	bl	80002f0 <memchr>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d03f      	beq.n	800be1a <_vfiprintf_r+0x20a>
 800bd9a:	4b26      	ldr	r3, [pc, #152]	@ (800be34 <_vfiprintf_r+0x224>)
 800bd9c:	bb1b      	cbnz	r3, 800bde6 <_vfiprintf_r+0x1d6>
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	3307      	adds	r3, #7
 800bda2:	f023 0307 	bic.w	r3, r3, #7
 800bda6:	3308      	adds	r3, #8
 800bda8:	9303      	str	r3, [sp, #12]
 800bdaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdac:	443b      	add	r3, r7
 800bdae:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb0:	e76a      	b.n	800bc88 <_vfiprintf_r+0x78>
 800bdb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	2001      	movs	r0, #1
 800bdba:	e7a8      	b.n	800bd0e <_vfiprintf_r+0xfe>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	9305      	str	r3, [sp, #20]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	f04f 0c0a 	mov.w	ip, #10
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdce:	3a30      	subs	r2, #48	@ 0x30
 800bdd0:	2a09      	cmp	r2, #9
 800bdd2:	d903      	bls.n	800bddc <_vfiprintf_r+0x1cc>
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d0c6      	beq.n	800bd66 <_vfiprintf_r+0x156>
 800bdd8:	9105      	str	r1, [sp, #20]
 800bdda:	e7c4      	b.n	800bd66 <_vfiprintf_r+0x156>
 800bddc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde0:	4604      	mov	r4, r0
 800bde2:	2301      	movs	r3, #1
 800bde4:	e7f0      	b.n	800bdc8 <_vfiprintf_r+0x1b8>
 800bde6:	ab03      	add	r3, sp, #12
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	462a      	mov	r2, r5
 800bdec:	4b12      	ldr	r3, [pc, #72]	@ (800be38 <_vfiprintf_r+0x228>)
 800bdee:	a904      	add	r1, sp, #16
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f3af 8000 	nop.w
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	1c78      	adds	r0, r7, #1
 800bdfa:	d1d6      	bne.n	800bdaa <_vfiprintf_r+0x19a>
 800bdfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdfe:	07d9      	lsls	r1, r3, #31
 800be00:	d405      	bmi.n	800be0e <_vfiprintf_r+0x1fe>
 800be02:	89ab      	ldrh	r3, [r5, #12]
 800be04:	059a      	lsls	r2, r3, #22
 800be06:	d402      	bmi.n	800be0e <_vfiprintf_r+0x1fe>
 800be08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be0a:	f7ff fddd 	bl	800b9c8 <__retarget_lock_release_recursive>
 800be0e:	89ab      	ldrh	r3, [r5, #12]
 800be10:	065b      	lsls	r3, r3, #25
 800be12:	f53f af1f 	bmi.w	800bc54 <_vfiprintf_r+0x44>
 800be16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be18:	e71e      	b.n	800bc58 <_vfiprintf_r+0x48>
 800be1a:	ab03      	add	r3, sp, #12
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	462a      	mov	r2, r5
 800be20:	4b05      	ldr	r3, [pc, #20]	@ (800be38 <_vfiprintf_r+0x228>)
 800be22:	a904      	add	r1, sp, #16
 800be24:	4630      	mov	r0, r6
 800be26:	f000 f879 	bl	800bf1c <_printf_i>
 800be2a:	e7e4      	b.n	800bdf6 <_vfiprintf_r+0x1e6>
 800be2c:	0800c648 	.word	0x0800c648
 800be30:	0800c652 	.word	0x0800c652
 800be34:	00000000 	.word	0x00000000
 800be38:	0800bbeb 	.word	0x0800bbeb
 800be3c:	0800c64e 	.word	0x0800c64e

0800be40 <_printf_common>:
 800be40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be44:	4616      	mov	r6, r2
 800be46:	4698      	mov	r8, r3
 800be48:	688a      	ldr	r2, [r1, #8]
 800be4a:	690b      	ldr	r3, [r1, #16]
 800be4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be50:	4293      	cmp	r3, r2
 800be52:	bfb8      	it	lt
 800be54:	4613      	movlt	r3, r2
 800be56:	6033      	str	r3, [r6, #0]
 800be58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be5c:	4607      	mov	r7, r0
 800be5e:	460c      	mov	r4, r1
 800be60:	b10a      	cbz	r2, 800be66 <_printf_common+0x26>
 800be62:	3301      	adds	r3, #1
 800be64:	6033      	str	r3, [r6, #0]
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	0699      	lsls	r1, r3, #26
 800be6a:	bf42      	ittt	mi
 800be6c:	6833      	ldrmi	r3, [r6, #0]
 800be6e:	3302      	addmi	r3, #2
 800be70:	6033      	strmi	r3, [r6, #0]
 800be72:	6825      	ldr	r5, [r4, #0]
 800be74:	f015 0506 	ands.w	r5, r5, #6
 800be78:	d106      	bne.n	800be88 <_printf_common+0x48>
 800be7a:	f104 0a19 	add.w	sl, r4, #25
 800be7e:	68e3      	ldr	r3, [r4, #12]
 800be80:	6832      	ldr	r2, [r6, #0]
 800be82:	1a9b      	subs	r3, r3, r2
 800be84:	42ab      	cmp	r3, r5
 800be86:	dc26      	bgt.n	800bed6 <_printf_common+0x96>
 800be88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be8c:	6822      	ldr	r2, [r4, #0]
 800be8e:	3b00      	subs	r3, #0
 800be90:	bf18      	it	ne
 800be92:	2301      	movne	r3, #1
 800be94:	0692      	lsls	r2, r2, #26
 800be96:	d42b      	bmi.n	800bef0 <_printf_common+0xb0>
 800be98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be9c:	4641      	mov	r1, r8
 800be9e:	4638      	mov	r0, r7
 800bea0:	47c8      	blx	r9
 800bea2:	3001      	adds	r0, #1
 800bea4:	d01e      	beq.n	800bee4 <_printf_common+0xa4>
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	6922      	ldr	r2, [r4, #16]
 800beaa:	f003 0306 	and.w	r3, r3, #6
 800beae:	2b04      	cmp	r3, #4
 800beb0:	bf02      	ittt	eq
 800beb2:	68e5      	ldreq	r5, [r4, #12]
 800beb4:	6833      	ldreq	r3, [r6, #0]
 800beb6:	1aed      	subeq	r5, r5, r3
 800beb8:	68a3      	ldr	r3, [r4, #8]
 800beba:	bf0c      	ite	eq
 800bebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bec0:	2500      	movne	r5, #0
 800bec2:	4293      	cmp	r3, r2
 800bec4:	bfc4      	itt	gt
 800bec6:	1a9b      	subgt	r3, r3, r2
 800bec8:	18ed      	addgt	r5, r5, r3
 800beca:	2600      	movs	r6, #0
 800becc:	341a      	adds	r4, #26
 800bece:	42b5      	cmp	r5, r6
 800bed0:	d11a      	bne.n	800bf08 <_printf_common+0xc8>
 800bed2:	2000      	movs	r0, #0
 800bed4:	e008      	b.n	800bee8 <_printf_common+0xa8>
 800bed6:	2301      	movs	r3, #1
 800bed8:	4652      	mov	r2, sl
 800beda:	4641      	mov	r1, r8
 800bedc:	4638      	mov	r0, r7
 800bede:	47c8      	blx	r9
 800bee0:	3001      	adds	r0, #1
 800bee2:	d103      	bne.n	800beec <_printf_common+0xac>
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beec:	3501      	adds	r5, #1
 800beee:	e7c6      	b.n	800be7e <_printf_common+0x3e>
 800bef0:	18e1      	adds	r1, r4, r3
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	2030      	movs	r0, #48	@ 0x30
 800bef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800befa:	4422      	add	r2, r4
 800befc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf04:	3302      	adds	r3, #2
 800bf06:	e7c7      	b.n	800be98 <_printf_common+0x58>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	4641      	mov	r1, r8
 800bf0e:	4638      	mov	r0, r7
 800bf10:	47c8      	blx	r9
 800bf12:	3001      	adds	r0, #1
 800bf14:	d0e6      	beq.n	800bee4 <_printf_common+0xa4>
 800bf16:	3601      	adds	r6, #1
 800bf18:	e7d9      	b.n	800bece <_printf_common+0x8e>
	...

0800bf1c <_printf_i>:
 800bf1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf20:	7e0f      	ldrb	r7, [r1, #24]
 800bf22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf24:	2f78      	cmp	r7, #120	@ 0x78
 800bf26:	4691      	mov	r9, r2
 800bf28:	4680      	mov	r8, r0
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	469a      	mov	sl, r3
 800bf2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf32:	d807      	bhi.n	800bf44 <_printf_i+0x28>
 800bf34:	2f62      	cmp	r7, #98	@ 0x62
 800bf36:	d80a      	bhi.n	800bf4e <_printf_i+0x32>
 800bf38:	2f00      	cmp	r7, #0
 800bf3a:	f000 80d2 	beq.w	800c0e2 <_printf_i+0x1c6>
 800bf3e:	2f58      	cmp	r7, #88	@ 0x58
 800bf40:	f000 80b9 	beq.w	800c0b6 <_printf_i+0x19a>
 800bf44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf4c:	e03a      	b.n	800bfc4 <_printf_i+0xa8>
 800bf4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf52:	2b15      	cmp	r3, #21
 800bf54:	d8f6      	bhi.n	800bf44 <_printf_i+0x28>
 800bf56:	a101      	add	r1, pc, #4	@ (adr r1, 800bf5c <_printf_i+0x40>)
 800bf58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf5c:	0800bfb5 	.word	0x0800bfb5
 800bf60:	0800bfc9 	.word	0x0800bfc9
 800bf64:	0800bf45 	.word	0x0800bf45
 800bf68:	0800bf45 	.word	0x0800bf45
 800bf6c:	0800bf45 	.word	0x0800bf45
 800bf70:	0800bf45 	.word	0x0800bf45
 800bf74:	0800bfc9 	.word	0x0800bfc9
 800bf78:	0800bf45 	.word	0x0800bf45
 800bf7c:	0800bf45 	.word	0x0800bf45
 800bf80:	0800bf45 	.word	0x0800bf45
 800bf84:	0800bf45 	.word	0x0800bf45
 800bf88:	0800c0c9 	.word	0x0800c0c9
 800bf8c:	0800bff3 	.word	0x0800bff3
 800bf90:	0800c083 	.word	0x0800c083
 800bf94:	0800bf45 	.word	0x0800bf45
 800bf98:	0800bf45 	.word	0x0800bf45
 800bf9c:	0800c0eb 	.word	0x0800c0eb
 800bfa0:	0800bf45 	.word	0x0800bf45
 800bfa4:	0800bff3 	.word	0x0800bff3
 800bfa8:	0800bf45 	.word	0x0800bf45
 800bfac:	0800bf45 	.word	0x0800bf45
 800bfb0:	0800c08b 	.word	0x0800c08b
 800bfb4:	6833      	ldr	r3, [r6, #0]
 800bfb6:	1d1a      	adds	r2, r3, #4
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6032      	str	r2, [r6, #0]
 800bfbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e09d      	b.n	800c104 <_printf_i+0x1e8>
 800bfc8:	6833      	ldr	r3, [r6, #0]
 800bfca:	6820      	ldr	r0, [r4, #0]
 800bfcc:	1d19      	adds	r1, r3, #4
 800bfce:	6031      	str	r1, [r6, #0]
 800bfd0:	0606      	lsls	r6, r0, #24
 800bfd2:	d501      	bpl.n	800bfd8 <_printf_i+0xbc>
 800bfd4:	681d      	ldr	r5, [r3, #0]
 800bfd6:	e003      	b.n	800bfe0 <_printf_i+0xc4>
 800bfd8:	0645      	lsls	r5, r0, #25
 800bfda:	d5fb      	bpl.n	800bfd4 <_printf_i+0xb8>
 800bfdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfe0:	2d00      	cmp	r5, #0
 800bfe2:	da03      	bge.n	800bfec <_printf_i+0xd0>
 800bfe4:	232d      	movs	r3, #45	@ 0x2d
 800bfe6:	426d      	negs	r5, r5
 800bfe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfec:	4859      	ldr	r0, [pc, #356]	@ (800c154 <_printf_i+0x238>)
 800bfee:	230a      	movs	r3, #10
 800bff0:	e011      	b.n	800c016 <_printf_i+0xfa>
 800bff2:	6821      	ldr	r1, [r4, #0]
 800bff4:	6833      	ldr	r3, [r6, #0]
 800bff6:	0608      	lsls	r0, r1, #24
 800bff8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bffc:	d402      	bmi.n	800c004 <_printf_i+0xe8>
 800bffe:	0649      	lsls	r1, r1, #25
 800c000:	bf48      	it	mi
 800c002:	b2ad      	uxthmi	r5, r5
 800c004:	2f6f      	cmp	r7, #111	@ 0x6f
 800c006:	4853      	ldr	r0, [pc, #332]	@ (800c154 <_printf_i+0x238>)
 800c008:	6033      	str	r3, [r6, #0]
 800c00a:	bf14      	ite	ne
 800c00c:	230a      	movne	r3, #10
 800c00e:	2308      	moveq	r3, #8
 800c010:	2100      	movs	r1, #0
 800c012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c016:	6866      	ldr	r6, [r4, #4]
 800c018:	60a6      	str	r6, [r4, #8]
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	bfa2      	ittt	ge
 800c01e:	6821      	ldrge	r1, [r4, #0]
 800c020:	f021 0104 	bicge.w	r1, r1, #4
 800c024:	6021      	strge	r1, [r4, #0]
 800c026:	b90d      	cbnz	r5, 800c02c <_printf_i+0x110>
 800c028:	2e00      	cmp	r6, #0
 800c02a:	d04b      	beq.n	800c0c4 <_printf_i+0x1a8>
 800c02c:	4616      	mov	r6, r2
 800c02e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c032:	fb03 5711 	mls	r7, r3, r1, r5
 800c036:	5dc7      	ldrb	r7, [r0, r7]
 800c038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c03c:	462f      	mov	r7, r5
 800c03e:	42bb      	cmp	r3, r7
 800c040:	460d      	mov	r5, r1
 800c042:	d9f4      	bls.n	800c02e <_printf_i+0x112>
 800c044:	2b08      	cmp	r3, #8
 800c046:	d10b      	bne.n	800c060 <_printf_i+0x144>
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	07df      	lsls	r7, r3, #31
 800c04c:	d508      	bpl.n	800c060 <_printf_i+0x144>
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	6861      	ldr	r1, [r4, #4]
 800c052:	4299      	cmp	r1, r3
 800c054:	bfde      	ittt	le
 800c056:	2330      	movle	r3, #48	@ 0x30
 800c058:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c05c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c060:	1b92      	subs	r2, r2, r6
 800c062:	6122      	str	r2, [r4, #16]
 800c064:	f8cd a000 	str.w	sl, [sp]
 800c068:	464b      	mov	r3, r9
 800c06a:	aa03      	add	r2, sp, #12
 800c06c:	4621      	mov	r1, r4
 800c06e:	4640      	mov	r0, r8
 800c070:	f7ff fee6 	bl	800be40 <_printf_common>
 800c074:	3001      	adds	r0, #1
 800c076:	d14a      	bne.n	800c10e <_printf_i+0x1f2>
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	b004      	add	sp, #16
 800c07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	f043 0320 	orr.w	r3, r3, #32
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	4833      	ldr	r0, [pc, #204]	@ (800c158 <_printf_i+0x23c>)
 800c08c:	2778      	movs	r7, #120	@ 0x78
 800c08e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	6831      	ldr	r1, [r6, #0]
 800c096:	061f      	lsls	r7, r3, #24
 800c098:	f851 5b04 	ldr.w	r5, [r1], #4
 800c09c:	d402      	bmi.n	800c0a4 <_printf_i+0x188>
 800c09e:	065f      	lsls	r7, r3, #25
 800c0a0:	bf48      	it	mi
 800c0a2:	b2ad      	uxthmi	r5, r5
 800c0a4:	6031      	str	r1, [r6, #0]
 800c0a6:	07d9      	lsls	r1, r3, #31
 800c0a8:	bf44      	itt	mi
 800c0aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c0ae:	6023      	strmi	r3, [r4, #0]
 800c0b0:	b11d      	cbz	r5, 800c0ba <_printf_i+0x19e>
 800c0b2:	2310      	movs	r3, #16
 800c0b4:	e7ac      	b.n	800c010 <_printf_i+0xf4>
 800c0b6:	4827      	ldr	r0, [pc, #156]	@ (800c154 <_printf_i+0x238>)
 800c0b8:	e7e9      	b.n	800c08e <_printf_i+0x172>
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	f023 0320 	bic.w	r3, r3, #32
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	e7f6      	b.n	800c0b2 <_printf_i+0x196>
 800c0c4:	4616      	mov	r6, r2
 800c0c6:	e7bd      	b.n	800c044 <_printf_i+0x128>
 800c0c8:	6833      	ldr	r3, [r6, #0]
 800c0ca:	6825      	ldr	r5, [r4, #0]
 800c0cc:	6961      	ldr	r1, [r4, #20]
 800c0ce:	1d18      	adds	r0, r3, #4
 800c0d0:	6030      	str	r0, [r6, #0]
 800c0d2:	062e      	lsls	r6, r5, #24
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	d501      	bpl.n	800c0dc <_printf_i+0x1c0>
 800c0d8:	6019      	str	r1, [r3, #0]
 800c0da:	e002      	b.n	800c0e2 <_printf_i+0x1c6>
 800c0dc:	0668      	lsls	r0, r5, #25
 800c0de:	d5fb      	bpl.n	800c0d8 <_printf_i+0x1bc>
 800c0e0:	8019      	strh	r1, [r3, #0]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	6123      	str	r3, [r4, #16]
 800c0e6:	4616      	mov	r6, r2
 800c0e8:	e7bc      	b.n	800c064 <_printf_i+0x148>
 800c0ea:	6833      	ldr	r3, [r6, #0]
 800c0ec:	1d1a      	adds	r2, r3, #4
 800c0ee:	6032      	str	r2, [r6, #0]
 800c0f0:	681e      	ldr	r6, [r3, #0]
 800c0f2:	6862      	ldr	r2, [r4, #4]
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f7f4 f8fa 	bl	80002f0 <memchr>
 800c0fc:	b108      	cbz	r0, 800c102 <_printf_i+0x1e6>
 800c0fe:	1b80      	subs	r0, r0, r6
 800c100:	6060      	str	r0, [r4, #4]
 800c102:	6863      	ldr	r3, [r4, #4]
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	2300      	movs	r3, #0
 800c108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c10c:	e7aa      	b.n	800c064 <_printf_i+0x148>
 800c10e:	6923      	ldr	r3, [r4, #16]
 800c110:	4632      	mov	r2, r6
 800c112:	4649      	mov	r1, r9
 800c114:	4640      	mov	r0, r8
 800c116:	47d0      	blx	sl
 800c118:	3001      	adds	r0, #1
 800c11a:	d0ad      	beq.n	800c078 <_printf_i+0x15c>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	079b      	lsls	r3, r3, #30
 800c120:	d413      	bmi.n	800c14a <_printf_i+0x22e>
 800c122:	68e0      	ldr	r0, [r4, #12]
 800c124:	9b03      	ldr	r3, [sp, #12]
 800c126:	4298      	cmp	r0, r3
 800c128:	bfb8      	it	lt
 800c12a:	4618      	movlt	r0, r3
 800c12c:	e7a6      	b.n	800c07c <_printf_i+0x160>
 800c12e:	2301      	movs	r3, #1
 800c130:	4632      	mov	r2, r6
 800c132:	4649      	mov	r1, r9
 800c134:	4640      	mov	r0, r8
 800c136:	47d0      	blx	sl
 800c138:	3001      	adds	r0, #1
 800c13a:	d09d      	beq.n	800c078 <_printf_i+0x15c>
 800c13c:	3501      	adds	r5, #1
 800c13e:	68e3      	ldr	r3, [r4, #12]
 800c140:	9903      	ldr	r1, [sp, #12]
 800c142:	1a5b      	subs	r3, r3, r1
 800c144:	42ab      	cmp	r3, r5
 800c146:	dcf2      	bgt.n	800c12e <_printf_i+0x212>
 800c148:	e7eb      	b.n	800c122 <_printf_i+0x206>
 800c14a:	2500      	movs	r5, #0
 800c14c:	f104 0619 	add.w	r6, r4, #25
 800c150:	e7f5      	b.n	800c13e <_printf_i+0x222>
 800c152:	bf00      	nop
 800c154:	0800c659 	.word	0x0800c659
 800c158:	0800c66a 	.word	0x0800c66a

0800c15c <__sflush_r>:
 800c15c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c164:	0716      	lsls	r6, r2, #28
 800c166:	4605      	mov	r5, r0
 800c168:	460c      	mov	r4, r1
 800c16a:	d454      	bmi.n	800c216 <__sflush_r+0xba>
 800c16c:	684b      	ldr	r3, [r1, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	dc02      	bgt.n	800c178 <__sflush_r+0x1c>
 800c172:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c174:	2b00      	cmp	r3, #0
 800c176:	dd48      	ble.n	800c20a <__sflush_r+0xae>
 800c178:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c17a:	2e00      	cmp	r6, #0
 800c17c:	d045      	beq.n	800c20a <__sflush_r+0xae>
 800c17e:	2300      	movs	r3, #0
 800c180:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c184:	682f      	ldr	r7, [r5, #0]
 800c186:	6a21      	ldr	r1, [r4, #32]
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	d030      	beq.n	800c1ee <__sflush_r+0x92>
 800c18c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	0759      	lsls	r1, r3, #29
 800c192:	d505      	bpl.n	800c1a0 <__sflush_r+0x44>
 800c194:	6863      	ldr	r3, [r4, #4]
 800c196:	1ad2      	subs	r2, r2, r3
 800c198:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c19a:	b10b      	cbz	r3, 800c1a0 <__sflush_r+0x44>
 800c19c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c19e:	1ad2      	subs	r2, r2, r3
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1a4:	6a21      	ldr	r1, [r4, #32]
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	47b0      	blx	r6
 800c1aa:	1c43      	adds	r3, r0, #1
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	d106      	bne.n	800c1be <__sflush_r+0x62>
 800c1b0:	6829      	ldr	r1, [r5, #0]
 800c1b2:	291d      	cmp	r1, #29
 800c1b4:	d82b      	bhi.n	800c20e <__sflush_r+0xb2>
 800c1b6:	4a2a      	ldr	r2, [pc, #168]	@ (800c260 <__sflush_r+0x104>)
 800c1b8:	410a      	asrs	r2, r1
 800c1ba:	07d6      	lsls	r6, r2, #31
 800c1bc:	d427      	bmi.n	800c20e <__sflush_r+0xb2>
 800c1be:	2200      	movs	r2, #0
 800c1c0:	6062      	str	r2, [r4, #4]
 800c1c2:	04d9      	lsls	r1, r3, #19
 800c1c4:	6922      	ldr	r2, [r4, #16]
 800c1c6:	6022      	str	r2, [r4, #0]
 800c1c8:	d504      	bpl.n	800c1d4 <__sflush_r+0x78>
 800c1ca:	1c42      	adds	r2, r0, #1
 800c1cc:	d101      	bne.n	800c1d2 <__sflush_r+0x76>
 800c1ce:	682b      	ldr	r3, [r5, #0]
 800c1d0:	b903      	cbnz	r3, 800c1d4 <__sflush_r+0x78>
 800c1d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1d6:	602f      	str	r7, [r5, #0]
 800c1d8:	b1b9      	cbz	r1, 800c20a <__sflush_r+0xae>
 800c1da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1de:	4299      	cmp	r1, r3
 800c1e0:	d002      	beq.n	800c1e8 <__sflush_r+0x8c>
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f7ff fbf2 	bl	800b9cc <_free_r>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1ec:	e00d      	b.n	800c20a <__sflush_r+0xae>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47b0      	blx	r6
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	1c50      	adds	r0, r2, #1
 800c1f8:	d1c9      	bne.n	800c18e <__sflush_r+0x32>
 800c1fa:	682b      	ldr	r3, [r5, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0c6      	beq.n	800c18e <__sflush_r+0x32>
 800c200:	2b1d      	cmp	r3, #29
 800c202:	d001      	beq.n	800c208 <__sflush_r+0xac>
 800c204:	2b16      	cmp	r3, #22
 800c206:	d11e      	bne.n	800c246 <__sflush_r+0xea>
 800c208:	602f      	str	r7, [r5, #0]
 800c20a:	2000      	movs	r0, #0
 800c20c:	e022      	b.n	800c254 <__sflush_r+0xf8>
 800c20e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c212:	b21b      	sxth	r3, r3
 800c214:	e01b      	b.n	800c24e <__sflush_r+0xf2>
 800c216:	690f      	ldr	r7, [r1, #16]
 800c218:	2f00      	cmp	r7, #0
 800c21a:	d0f6      	beq.n	800c20a <__sflush_r+0xae>
 800c21c:	0793      	lsls	r3, r2, #30
 800c21e:	680e      	ldr	r6, [r1, #0]
 800c220:	bf08      	it	eq
 800c222:	694b      	ldreq	r3, [r1, #20]
 800c224:	600f      	str	r7, [r1, #0]
 800c226:	bf18      	it	ne
 800c228:	2300      	movne	r3, #0
 800c22a:	eba6 0807 	sub.w	r8, r6, r7
 800c22e:	608b      	str	r3, [r1, #8]
 800c230:	f1b8 0f00 	cmp.w	r8, #0
 800c234:	dde9      	ble.n	800c20a <__sflush_r+0xae>
 800c236:	6a21      	ldr	r1, [r4, #32]
 800c238:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c23a:	4643      	mov	r3, r8
 800c23c:	463a      	mov	r2, r7
 800c23e:	4628      	mov	r0, r5
 800c240:	47b0      	blx	r6
 800c242:	2800      	cmp	r0, #0
 800c244:	dc08      	bgt.n	800c258 <__sflush_r+0xfc>
 800c246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c24a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c24e:	81a3      	strh	r3, [r4, #12]
 800c250:	f04f 30ff 	mov.w	r0, #4294967295
 800c254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c258:	4407      	add	r7, r0
 800c25a:	eba8 0800 	sub.w	r8, r8, r0
 800c25e:	e7e7      	b.n	800c230 <__sflush_r+0xd4>
 800c260:	dfbffffe 	.word	0xdfbffffe

0800c264 <_fflush_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	690b      	ldr	r3, [r1, #16]
 800c268:	4605      	mov	r5, r0
 800c26a:	460c      	mov	r4, r1
 800c26c:	b913      	cbnz	r3, 800c274 <_fflush_r+0x10>
 800c26e:	2500      	movs	r5, #0
 800c270:	4628      	mov	r0, r5
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	b118      	cbz	r0, 800c27e <_fflush_r+0x1a>
 800c276:	6a03      	ldr	r3, [r0, #32]
 800c278:	b90b      	cbnz	r3, 800c27e <_fflush_r+0x1a>
 800c27a:	f7ff fa97 	bl	800b7ac <__sinit>
 800c27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d0f3      	beq.n	800c26e <_fflush_r+0xa>
 800c286:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c288:	07d0      	lsls	r0, r2, #31
 800c28a:	d404      	bmi.n	800c296 <_fflush_r+0x32>
 800c28c:	0599      	lsls	r1, r3, #22
 800c28e:	d402      	bmi.n	800c296 <_fflush_r+0x32>
 800c290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c292:	f7ff fb98 	bl	800b9c6 <__retarget_lock_acquire_recursive>
 800c296:	4628      	mov	r0, r5
 800c298:	4621      	mov	r1, r4
 800c29a:	f7ff ff5f 	bl	800c15c <__sflush_r>
 800c29e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2a0:	07da      	lsls	r2, r3, #31
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	d4e4      	bmi.n	800c270 <_fflush_r+0xc>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	059b      	lsls	r3, r3, #22
 800c2aa:	d4e1      	bmi.n	800c270 <_fflush_r+0xc>
 800c2ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2ae:	f7ff fb8b 	bl	800b9c8 <__retarget_lock_release_recursive>
 800c2b2:	e7dd      	b.n	800c270 <_fflush_r+0xc>

0800c2b4 <_putc_r>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	460d      	mov	r5, r1
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	b118      	cbz	r0, 800c2c6 <_putc_r+0x12>
 800c2be:	6a03      	ldr	r3, [r0, #32]
 800c2c0:	b90b      	cbnz	r3, 800c2c6 <_putc_r+0x12>
 800c2c2:	f7ff fa73 	bl	800b7ac <__sinit>
 800c2c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2c8:	07d8      	lsls	r0, r3, #31
 800c2ca:	d405      	bmi.n	800c2d8 <_putc_r+0x24>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	0599      	lsls	r1, r3, #22
 800c2d0:	d402      	bmi.n	800c2d8 <_putc_r+0x24>
 800c2d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2d4:	f7ff fb77 	bl	800b9c6 <__retarget_lock_acquire_recursive>
 800c2d8:	68a3      	ldr	r3, [r4, #8]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	60a3      	str	r3, [r4, #8]
 800c2e0:	da05      	bge.n	800c2ee <_putc_r+0x3a>
 800c2e2:	69a2      	ldr	r2, [r4, #24]
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	db12      	blt.n	800c30e <_putc_r+0x5a>
 800c2e8:	b2eb      	uxtb	r3, r5
 800c2ea:	2b0a      	cmp	r3, #10
 800c2ec:	d00f      	beq.n	800c30e <_putc_r+0x5a>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	1c5a      	adds	r2, r3, #1
 800c2f2:	6022      	str	r2, [r4, #0]
 800c2f4:	701d      	strb	r5, [r3, #0]
 800c2f6:	b2ed      	uxtb	r5, r5
 800c2f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2fa:	07da      	lsls	r2, r3, #31
 800c2fc:	d405      	bmi.n	800c30a <_putc_r+0x56>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	059b      	lsls	r3, r3, #22
 800c302:	d402      	bmi.n	800c30a <_putc_r+0x56>
 800c304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c306:	f7ff fb5f 	bl	800b9c8 <__retarget_lock_release_recursive>
 800c30a:	4628      	mov	r0, r5
 800c30c:	bd70      	pop	{r4, r5, r6, pc}
 800c30e:	4629      	mov	r1, r5
 800c310:	4622      	mov	r2, r4
 800c312:	4630      	mov	r0, r6
 800c314:	f000 f802 	bl	800c31c <__swbuf_r>
 800c318:	4605      	mov	r5, r0
 800c31a:	e7ed      	b.n	800c2f8 <_putc_r+0x44>

0800c31c <__swbuf_r>:
 800c31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31e:	460e      	mov	r6, r1
 800c320:	4614      	mov	r4, r2
 800c322:	4605      	mov	r5, r0
 800c324:	b118      	cbz	r0, 800c32e <__swbuf_r+0x12>
 800c326:	6a03      	ldr	r3, [r0, #32]
 800c328:	b90b      	cbnz	r3, 800c32e <__swbuf_r+0x12>
 800c32a:	f7ff fa3f 	bl	800b7ac <__sinit>
 800c32e:	69a3      	ldr	r3, [r4, #24]
 800c330:	60a3      	str	r3, [r4, #8]
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	071a      	lsls	r2, r3, #28
 800c336:	d501      	bpl.n	800c33c <__swbuf_r+0x20>
 800c338:	6923      	ldr	r3, [r4, #16]
 800c33a:	b943      	cbnz	r3, 800c34e <__swbuf_r+0x32>
 800c33c:	4621      	mov	r1, r4
 800c33e:	4628      	mov	r0, r5
 800c340:	f000 f82a 	bl	800c398 <__swsetup_r>
 800c344:	b118      	cbz	r0, 800c34e <__swbuf_r+0x32>
 800c346:	f04f 37ff 	mov.w	r7, #4294967295
 800c34a:	4638      	mov	r0, r7
 800c34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c34e:	6823      	ldr	r3, [r4, #0]
 800c350:	6922      	ldr	r2, [r4, #16]
 800c352:	1a98      	subs	r0, r3, r2
 800c354:	6963      	ldr	r3, [r4, #20]
 800c356:	b2f6      	uxtb	r6, r6
 800c358:	4283      	cmp	r3, r0
 800c35a:	4637      	mov	r7, r6
 800c35c:	dc05      	bgt.n	800c36a <__swbuf_r+0x4e>
 800c35e:	4621      	mov	r1, r4
 800c360:	4628      	mov	r0, r5
 800c362:	f7ff ff7f 	bl	800c264 <_fflush_r>
 800c366:	2800      	cmp	r0, #0
 800c368:	d1ed      	bne.n	800c346 <__swbuf_r+0x2a>
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	3b01      	subs	r3, #1
 800c36e:	60a3      	str	r3, [r4, #8]
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	6022      	str	r2, [r4, #0]
 800c376:	701e      	strb	r6, [r3, #0]
 800c378:	6962      	ldr	r2, [r4, #20]
 800c37a:	1c43      	adds	r3, r0, #1
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d004      	beq.n	800c38a <__swbuf_r+0x6e>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	07db      	lsls	r3, r3, #31
 800c384:	d5e1      	bpl.n	800c34a <__swbuf_r+0x2e>
 800c386:	2e0a      	cmp	r6, #10
 800c388:	d1df      	bne.n	800c34a <__swbuf_r+0x2e>
 800c38a:	4621      	mov	r1, r4
 800c38c:	4628      	mov	r0, r5
 800c38e:	f7ff ff69 	bl	800c264 <_fflush_r>
 800c392:	2800      	cmp	r0, #0
 800c394:	d0d9      	beq.n	800c34a <__swbuf_r+0x2e>
 800c396:	e7d6      	b.n	800c346 <__swbuf_r+0x2a>

0800c398 <__swsetup_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4b29      	ldr	r3, [pc, #164]	@ (800c440 <__swsetup_r+0xa8>)
 800c39c:	4605      	mov	r5, r0
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	b118      	cbz	r0, 800c3ac <__swsetup_r+0x14>
 800c3a4:	6a03      	ldr	r3, [r0, #32]
 800c3a6:	b90b      	cbnz	r3, 800c3ac <__swsetup_r+0x14>
 800c3a8:	f7ff fa00 	bl	800b7ac <__sinit>
 800c3ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b0:	0719      	lsls	r1, r3, #28
 800c3b2:	d422      	bmi.n	800c3fa <__swsetup_r+0x62>
 800c3b4:	06da      	lsls	r2, r3, #27
 800c3b6:	d407      	bmi.n	800c3c8 <__swsetup_r+0x30>
 800c3b8:	2209      	movs	r2, #9
 800c3ba:	602a      	str	r2, [r5, #0]
 800c3bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c6:	e033      	b.n	800c430 <__swsetup_r+0x98>
 800c3c8:	0758      	lsls	r0, r3, #29
 800c3ca:	d512      	bpl.n	800c3f2 <__swsetup_r+0x5a>
 800c3cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3ce:	b141      	cbz	r1, 800c3e2 <__swsetup_r+0x4a>
 800c3d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3d4:	4299      	cmp	r1, r3
 800c3d6:	d002      	beq.n	800c3de <__swsetup_r+0x46>
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f7ff faf7 	bl	800b9cc <_free_r>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3e2:	89a3      	ldrh	r3, [r4, #12]
 800c3e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3e8:	81a3      	strh	r3, [r4, #12]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	6063      	str	r3, [r4, #4]
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	f043 0308 	orr.w	r3, r3, #8
 800c3f8:	81a3      	strh	r3, [r4, #12]
 800c3fa:	6923      	ldr	r3, [r4, #16]
 800c3fc:	b94b      	cbnz	r3, 800c412 <__swsetup_r+0x7a>
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c408:	d003      	beq.n	800c412 <__swsetup_r+0x7a>
 800c40a:	4621      	mov	r1, r4
 800c40c:	4628      	mov	r0, r5
 800c40e:	f000 f84f 	bl	800c4b0 <__smakebuf_r>
 800c412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c416:	f013 0201 	ands.w	r2, r3, #1
 800c41a:	d00a      	beq.n	800c432 <__swsetup_r+0x9a>
 800c41c:	2200      	movs	r2, #0
 800c41e:	60a2      	str	r2, [r4, #8]
 800c420:	6962      	ldr	r2, [r4, #20]
 800c422:	4252      	negs	r2, r2
 800c424:	61a2      	str	r2, [r4, #24]
 800c426:	6922      	ldr	r2, [r4, #16]
 800c428:	b942      	cbnz	r2, 800c43c <__swsetup_r+0xa4>
 800c42a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c42e:	d1c5      	bne.n	800c3bc <__swsetup_r+0x24>
 800c430:	bd38      	pop	{r3, r4, r5, pc}
 800c432:	0799      	lsls	r1, r3, #30
 800c434:	bf58      	it	pl
 800c436:	6962      	ldrpl	r2, [r4, #20]
 800c438:	60a2      	str	r2, [r4, #8]
 800c43a:	e7f4      	b.n	800c426 <__swsetup_r+0x8e>
 800c43c:	2000      	movs	r0, #0
 800c43e:	e7f7      	b.n	800c430 <__swsetup_r+0x98>
 800c440:	24000110 	.word	0x24000110

0800c444 <_sbrk_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d06      	ldr	r5, [pc, #24]	@ (800c460 <_sbrk_r+0x1c>)
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	602b      	str	r3, [r5, #0]
 800c450:	f7f4 ffea 	bl	8001428 <_sbrk>
 800c454:	1c43      	adds	r3, r0, #1
 800c456:	d102      	bne.n	800c45e <_sbrk_r+0x1a>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	b103      	cbz	r3, 800c45e <_sbrk_r+0x1a>
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
 800c460:	240020cc 	.word	0x240020cc

0800c464 <__swhatbuf_r>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	460c      	mov	r4, r1
 800c468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c46c:	2900      	cmp	r1, #0
 800c46e:	b096      	sub	sp, #88	@ 0x58
 800c470:	4615      	mov	r5, r2
 800c472:	461e      	mov	r6, r3
 800c474:	da0d      	bge.n	800c492 <__swhatbuf_r+0x2e>
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c47c:	f04f 0100 	mov.w	r1, #0
 800c480:	bf14      	ite	ne
 800c482:	2340      	movne	r3, #64	@ 0x40
 800c484:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c488:	2000      	movs	r0, #0
 800c48a:	6031      	str	r1, [r6, #0]
 800c48c:	602b      	str	r3, [r5, #0]
 800c48e:	b016      	add	sp, #88	@ 0x58
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	466a      	mov	r2, sp
 800c494:	f000 f848 	bl	800c528 <_fstat_r>
 800c498:	2800      	cmp	r0, #0
 800c49a:	dbec      	blt.n	800c476 <__swhatbuf_r+0x12>
 800c49c:	9901      	ldr	r1, [sp, #4]
 800c49e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c4a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c4a6:	4259      	negs	r1, r3
 800c4a8:	4159      	adcs	r1, r3
 800c4aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4ae:	e7eb      	b.n	800c488 <__swhatbuf_r+0x24>

0800c4b0 <__smakebuf_r>:
 800c4b0:	898b      	ldrh	r3, [r1, #12]
 800c4b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4b4:	079d      	lsls	r5, r3, #30
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	d507      	bpl.n	800c4cc <__smakebuf_r+0x1c>
 800c4bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	6123      	str	r3, [r4, #16]
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	6163      	str	r3, [r4, #20]
 800c4c8:	b003      	add	sp, #12
 800c4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4cc:	ab01      	add	r3, sp, #4
 800c4ce:	466a      	mov	r2, sp
 800c4d0:	f7ff ffc8 	bl	800c464 <__swhatbuf_r>
 800c4d4:	9f00      	ldr	r7, [sp, #0]
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	4639      	mov	r1, r7
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f7ff fae2 	bl	800baa4 <_malloc_r>
 800c4e0:	b948      	cbnz	r0, 800c4f6 <__smakebuf_r+0x46>
 800c4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e6:	059a      	lsls	r2, r3, #22
 800c4e8:	d4ee      	bmi.n	800c4c8 <__smakebuf_r+0x18>
 800c4ea:	f023 0303 	bic.w	r3, r3, #3
 800c4ee:	f043 0302 	orr.w	r3, r3, #2
 800c4f2:	81a3      	strh	r3, [r4, #12]
 800c4f4:	e7e2      	b.n	800c4bc <__smakebuf_r+0xc>
 800c4f6:	89a3      	ldrh	r3, [r4, #12]
 800c4f8:	6020      	str	r0, [r4, #0]
 800c4fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4fe:	81a3      	strh	r3, [r4, #12]
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c506:	b15b      	cbz	r3, 800c520 <__smakebuf_r+0x70>
 800c508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c50c:	4630      	mov	r0, r6
 800c50e:	f000 f81d 	bl	800c54c <_isatty_r>
 800c512:	b128      	cbz	r0, 800c520 <__smakebuf_r+0x70>
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	f023 0303 	bic.w	r3, r3, #3
 800c51a:	f043 0301 	orr.w	r3, r3, #1
 800c51e:	81a3      	strh	r3, [r4, #12]
 800c520:	89a3      	ldrh	r3, [r4, #12]
 800c522:	431d      	orrs	r5, r3
 800c524:	81a5      	strh	r5, [r4, #12]
 800c526:	e7cf      	b.n	800c4c8 <__smakebuf_r+0x18>

0800c528 <_fstat_r>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	4d07      	ldr	r5, [pc, #28]	@ (800c548 <_fstat_r+0x20>)
 800c52c:	2300      	movs	r3, #0
 800c52e:	4604      	mov	r4, r0
 800c530:	4608      	mov	r0, r1
 800c532:	4611      	mov	r1, r2
 800c534:	602b      	str	r3, [r5, #0]
 800c536:	f7f4 ff4e 	bl	80013d6 <_fstat>
 800c53a:	1c43      	adds	r3, r0, #1
 800c53c:	d102      	bne.n	800c544 <_fstat_r+0x1c>
 800c53e:	682b      	ldr	r3, [r5, #0]
 800c540:	b103      	cbz	r3, 800c544 <_fstat_r+0x1c>
 800c542:	6023      	str	r3, [r4, #0]
 800c544:	bd38      	pop	{r3, r4, r5, pc}
 800c546:	bf00      	nop
 800c548:	240020cc 	.word	0x240020cc

0800c54c <_isatty_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d06      	ldr	r5, [pc, #24]	@ (800c568 <_isatty_r+0x1c>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	602b      	str	r3, [r5, #0]
 800c558:	f7f4 ff4d 	bl	80013f6 <_isatty>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	d102      	bne.n	800c566 <_isatty_r+0x1a>
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	b103      	cbz	r3, 800c566 <_isatty_r+0x1a>
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	240020cc 	.word	0x240020cc

0800c56c <_init>:
 800c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56e:	bf00      	nop
 800c570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c572:	bc08      	pop	{r3}
 800c574:	469e      	mov	lr, r3
 800c576:	4770      	bx	lr

0800c578 <_fini>:
 800c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57a:	bf00      	nop
 800c57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57e:	bc08      	pop	{r3}
 800c580:	469e      	mov	lr, r3
 800c582:	4770      	bx	lr
